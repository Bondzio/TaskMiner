; ModuleID = '/home/gleison/tf/Benchmarks/Olden/mst/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.graph_st = type { [1 x %struct.vert_st*] }
%struct.vert_st = type { i32, %struct.vert_st*, %struct.hash* }
%struct.hash = type { %struct.hash_entry**, i32 (i32)*, i32 }
%struct.hash_entry = type { i32, i8*, %struct.hash_entry* }

@.str = private unnamed_addr constant [14 x i8] c"Make phase 2\0A\00", align 1
@HashRange = internal global i32 0, align 4
@.str.1 = private unnamed_addr constant [14 x i8] c"Make phase 3\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Make phase 4\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"Make returning\0A\00", align 1

; Function Attrs: nounwind uwtable
define %struct.graph_st* @MakeGraph(i32 %numvert, i32 %numproc) #0 {
entry:
  %numvert.addr = alloca i32, align 4
  %numproc.addr = alloca i32, align 4
  %perproc = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %count1 = alloca i32, align 4
  %v = alloca %struct.vert_st*, align 8
  %tmp = alloca %struct.vert_st*, align 8
  %block = alloca %struct.vert_st*, align 8
  %retval3 = alloca %struct.graph_st*, align 8
  store i32 %numvert, i32* %numvert.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %numvert.addr, metadata !65, metadata !66), !dbg !67
  store i32 %numproc, i32* %numproc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %numproc.addr, metadata !68, metadata !66), !dbg !69
  call void @llvm.dbg.declare(metadata i32* %perproc, metadata !70, metadata !66), !dbg !71
  %0 = load i32, i32* %numvert.addr, align 4, !dbg !72
  %1 = load i32, i32* %numproc.addr, align 4, !dbg !73
  %div = sdiv i32 %0, %1, !dbg !74
  store i32 %div, i32* %perproc, align 4, !dbg !71
  call void @llvm.dbg.declare(metadata i32* %i, metadata !75, metadata !66), !dbg !76
  call void @llvm.dbg.declare(metadata i32* %j, metadata !77, metadata !66), !dbg !78
  call void @llvm.dbg.declare(metadata i32* %count1, metadata !79, metadata !66), !dbg !80
  call void @llvm.dbg.declare(metadata %struct.vert_st** %v, metadata !81, metadata !66), !dbg !82
  call void @llvm.dbg.declare(metadata %struct.vert_st** %tmp, metadata !83, metadata !66), !dbg !84
  call void @llvm.dbg.declare(metadata %struct.vert_st** %block, metadata !85, metadata !66), !dbg !86
  call void @llvm.dbg.declare(metadata %struct.graph_st** %retval3, metadata !87, metadata !66), !dbg !88
  %call = call noalias i8* @malloc(i64 8) #4, !dbg !89
  %2 = bitcast i8* %call to %struct.graph_st*, !dbg !90
  store %struct.graph_st* %2, %struct.graph_st** %retval3, align 8, !dbg !91
  store i32 0, i32* %i, align 4, !dbg !92
  br label %for.cond, !dbg !94

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !95
  %cmp = icmp slt i32 %3, 1, !dbg !99
  br i1 %cmp, label %for.body, label %for.end, !dbg !100

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4, !dbg !101
  %idxprom = sext i32 %4 to i64, !dbg !103
  %5 = load %struct.graph_st*, %struct.graph_st** %retval3, align 8, !dbg !103
  %vlist = getelementptr inbounds %struct.graph_st, %struct.graph_st* %5, i32 0, i32 0, !dbg !104
  %arrayidx = getelementptr inbounds [1 x %struct.vert_st*], [1 x %struct.vert_st*]* %vlist, i32 0, i64 %idxprom, !dbg !103
  store %struct.vert_st* null, %struct.vert_st** %arrayidx, align 8, !dbg !105
  br label %for.inc, !dbg !106

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !107
  %inc = add nsw i32 %6, 1, !dbg !107
  store i32 %inc, i32* %i, align 4, !dbg !107
  br label %for.cond, !dbg !108

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0)), !dbg !109
  %7 = load i32, i32* %numproc.addr, align 4, !dbg !110
  %sub = sub nsw i32 %7, 1, !dbg !112
  store i32 %sub, i32* %j, align 4, !dbg !113
  br label %for.cond.5, !dbg !114

for.cond.5:                                       ; preds = %for.inc.24, %for.end
  %8 = load i32, i32* %j, align 4, !dbg !115
  %cmp6 = icmp sge i32 %8, 0, !dbg !119
  br i1 %cmp6, label %for.body.7, label %for.end.25, !dbg !120

for.body.7:                                       ; preds = %for.cond.5
  %9 = load i32, i32* %perproc, align 4, !dbg !121
  %conv = sext i32 %9 to i64, !dbg !121
  %mul = mul i64 %conv, 24, !dbg !123
  %call8 = call noalias i8* @malloc(i64 %mul) #4, !dbg !124
  %10 = bitcast i8* %call8 to %struct.vert_st*, !dbg !125
  store %struct.vert_st* %10, %struct.vert_st** %block, align 8, !dbg !126
  store %struct.vert_st* null, %struct.vert_st** %v, align 8, !dbg !127
  store i32 0, i32* %i, align 4, !dbg !128
  br label %for.cond.9, !dbg !130

for.cond.9:                                       ; preds = %for.inc.18, %for.body.7
  %11 = load i32, i32* %i, align 4, !dbg !131
  %12 = load i32, i32* %perproc, align 4, !dbg !135
  %cmp10 = icmp slt i32 %11, %12, !dbg !136
  br i1 %cmp10, label %for.body.12, label %for.end.20, !dbg !137

for.body.12:                                      ; preds = %for.cond.9
  %13 = load %struct.vert_st*, %struct.vert_st** %block, align 8, !dbg !138
  %14 = load i32, i32* %perproc, align 4, !dbg !140
  %15 = load i32, i32* %i, align 4, !dbg !141
  %sub13 = sub nsw i32 %14, %15, !dbg !142
  %sub14 = sub nsw i32 %sub13, 1, !dbg !143
  %idx.ext = sext i32 %sub14 to i64, !dbg !144
  %add.ptr = getelementptr inbounds %struct.vert_st, %struct.vert_st* %13, i64 %idx.ext, !dbg !144
  store %struct.vert_st* %add.ptr, %struct.vert_st** %tmp, align 8, !dbg !145
  %16 = load i32, i32* %numvert.addr, align 4, !dbg !146
  %div15 = sdiv i32 %16, 4, !dbg !147
  store i32 %div15, i32* @HashRange, align 4, !dbg !148
  %17 = load %struct.vert_st*, %struct.vert_st** %tmp, align 8, !dbg !149
  %mindist = getelementptr inbounds %struct.vert_st, %struct.vert_st* %17, i32 0, i32 0, !dbg !150
  store i32 9999999, i32* %mindist, align 4, !dbg !151
  %18 = load i32, i32* %numvert.addr, align 4, !dbg !152
  %div16 = sdiv i32 %18, 4, !dbg !153
  %call17 = call %struct.hash* @MakeHash(i32 %div16, i32 (i32)* @hashfunc), !dbg !154
  %19 = load %struct.vert_st*, %struct.vert_st** %tmp, align 8, !dbg !155
  %edgehash = getelementptr inbounds %struct.vert_st, %struct.vert_st* %19, i32 0, i32 2, !dbg !156
  store %struct.hash* %call17, %struct.hash** %edgehash, align 8, !dbg !157
  %20 = load %struct.vert_st*, %struct.vert_st** %v, align 8, !dbg !158
  %21 = load %struct.vert_st*, %struct.vert_st** %tmp, align 8, !dbg !159
  %next = getelementptr inbounds %struct.vert_st, %struct.vert_st* %21, i32 0, i32 1, !dbg !160
  store %struct.vert_st* %20, %struct.vert_st** %next, align 8, !dbg !161
  %22 = load %struct.vert_st*, %struct.vert_st** %tmp, align 8, !dbg !162
  store %struct.vert_st* %22, %struct.vert_st** %v, align 8, !dbg !163
  br label %for.inc.18, !dbg !164

for.inc.18:                                       ; preds = %for.body.12
  %23 = load i32, i32* %i, align 4, !dbg !165
  %inc19 = add nsw i32 %23, 1, !dbg !165
  store i32 %inc19, i32* %i, align 4, !dbg !165
  br label %for.cond.9, !dbg !166

for.end.20:                                       ; preds = %for.cond.9
  %24 = load %struct.vert_st*, %struct.vert_st** %v, align 8, !dbg !167
  %25 = load i32, i32* %j, align 4, !dbg !168
  %idxprom21 = sext i32 %25 to i64, !dbg !169
  %26 = load %struct.graph_st*, %struct.graph_st** %retval3, align 8, !dbg !169
  %vlist22 = getelementptr inbounds %struct.graph_st, %struct.graph_st* %26, i32 0, i32 0, !dbg !170
  %arrayidx23 = getelementptr inbounds [1 x %struct.vert_st*], [1 x %struct.vert_st*]* %vlist22, i32 0, i64 %idxprom21, !dbg !169
  store %struct.vert_st* %24, %struct.vert_st** %arrayidx23, align 8, !dbg !171
  br label %for.inc.24, !dbg !172

for.inc.24:                                       ; preds = %for.end.20
  %27 = load i32, i32* %j, align 4, !dbg !173
  %dec = add nsw i32 %27, -1, !dbg !173
  store i32 %dec, i32* %j, align 4, !dbg !173
  br label %for.cond.5, !dbg !174

for.end.25:                                       ; preds = %for.cond.5
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0)), !dbg !175
  %28 = load i32, i32* %numproc.addr, align 4, !dbg !176
  %sub27 = sub nsw i32 %28, 1, !dbg !178
  store i32 %sub27, i32* %j, align 4, !dbg !179
  br label %for.cond.28, !dbg !180

for.cond.28:                                      ; preds = %for.inc.33, %for.end.25
  %29 = load i32, i32* %j, align 4, !dbg !181
  %cmp29 = icmp sge i32 %29, 0, !dbg !185
  br i1 %cmp29, label %for.body.31, label %for.end.35, !dbg !186

for.body.31:                                      ; preds = %for.cond.28
  %30 = load i32, i32* %j, align 4, !dbg !187
  %31 = load i32, i32* %perproc, align 4, !dbg !189
  %mul32 = mul nsw i32 %30, %31, !dbg !190
  store i32 %mul32, i32* %count1, align 4, !dbg !191
  %32 = load i32, i32* %count1, align 4, !dbg !192
  %33 = load %struct.graph_st*, %struct.graph_st** %retval3, align 8, !dbg !193
  %34 = load i32, i32* %numproc.addr, align 4, !dbg !194
  %35 = load i32, i32* %perproc, align 4, !dbg !195
  %36 = load i32, i32* %numvert.addr, align 4, !dbg !196
  %37 = load i32, i32* %j, align 4, !dbg !197
  call void @AddEdges(i32 %32, %struct.graph_st* %33, i32 %34, i32 %35, i32 %36, i32 %37), !dbg !198
  br label %for.inc.33, !dbg !199

for.inc.33:                                       ; preds = %for.body.31
  %38 = load i32, i32* %j, align 4, !dbg !200
  %dec34 = add nsw i32 %38, -1, !dbg !200
  store i32 %dec34, i32* %j, align 4, !dbg !200
  br label %for.cond.28, !dbg !201

for.end.35:                                       ; preds = %for.cond.28
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0)), !dbg !202
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0)), !dbg !203
  %39 = load %struct.graph_st*, %struct.graph_st** %retval3, align 8, !dbg !204
  ret %struct.graph_st* %39, !dbg !205
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

declare i32 @printf(i8*, ...) #3

declare %struct.hash* @MakeHash(i32, i32 (i32)*) #3

; Function Attrs: nounwind uwtable
define internal i32 @hashfunc(i32 %key) #0 {
entry:
  %key.addr = alloca i32, align 4
  store i32 %key, i32* %key.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %key.addr, metadata !206, metadata !66), !dbg !207
  %0 = load i32, i32* %key.addr, align 4, !dbg !208
  %shr = lshr i32 %0, 3, !dbg !209
  %1 = load i32, i32* @HashRange, align 4, !dbg !210
  %rem = urem i32 %shr, %1, !dbg !211
  ret i32 %rem, !dbg !212
}

; Function Attrs: nounwind uwtable
define internal void @AddEdges(i32 %count1, %struct.graph_st* %retval, i32 %numproc, i32 %perproc, i32 %numvert, i32 %j) #0 {
entry:
  %count1.addr = alloca i32, align 4
  %retval.addr = alloca %struct.graph_st*, align 8
  %numproc.addr = alloca i32, align 4
  %perproc.addr = alloca i32, align 4
  %numvert.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %tmp = alloca %struct.vert_st*, align 8
  %helper = alloca [1 x %struct.vert_st*], align 8
  %i = alloca i32, align 4
  %pn = alloca i32, align 4
  %offset = alloca i32, align 4
  %dist = alloca i32, align 4
  %dest = alloca %struct.vert_st*, align 8
  %hash = alloca %struct.hash*, align 8
  store i32 %count1, i32* %count1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count1.addr, metadata !213, metadata !66), !dbg !214
  store %struct.graph_st* %retval, %struct.graph_st** %retval.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.graph_st** %retval.addr, metadata !215, metadata !66), !dbg !216
  store i32 %numproc, i32* %numproc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %numproc.addr, metadata !217, metadata !66), !dbg !218
  store i32 %perproc, i32* %perproc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %perproc.addr, metadata !219, metadata !66), !dbg !220
  store i32 %numvert, i32* %numvert.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %numvert.addr, metadata !221, metadata !66), !dbg !222
  store i32 %j, i32* %j.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %j.addr, metadata !223, metadata !66), !dbg !224
  call void @llvm.dbg.declare(metadata %struct.vert_st** %tmp, metadata !225, metadata !66), !dbg !226
  call void @llvm.dbg.declare(metadata [1 x %struct.vert_st*]* %helper, metadata !227, metadata !66), !dbg !228
  call void @llvm.dbg.declare(metadata i32* %i, metadata !229, metadata !66), !dbg !230
  store i32 0, i32* %i, align 4, !dbg !231
  br label %for.cond, !dbg !233

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !234
  %1 = load i32, i32* %numproc.addr, align 4, !dbg !238
  %cmp = icmp slt i32 %0, %1, !dbg !239
  br i1 %cmp, label %for.body, label %for.end, !dbg !240

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !241
  %idxprom = sext i32 %2 to i64, !dbg !243
  %3 = load %struct.graph_st*, %struct.graph_st** %retval.addr, align 8, !dbg !243
  %vlist = getelementptr inbounds %struct.graph_st, %struct.graph_st* %3, i32 0, i32 0, !dbg !244
  %arrayidx = getelementptr inbounds [1 x %struct.vert_st*], [1 x %struct.vert_st*]* %vlist, i32 0, i64 %idxprom, !dbg !243
  %4 = load %struct.vert_st*, %struct.vert_st** %arrayidx, align 8, !dbg !243
  %5 = load i32, i32* %i, align 4, !dbg !245
  %idxprom3 = sext i32 %5 to i64, !dbg !246
  %arrayidx4 = getelementptr inbounds [1 x %struct.vert_st*], [1 x %struct.vert_st*]* %helper, i32 0, i64 %idxprom3, !dbg !246
  store %struct.vert_st* %4, %struct.vert_st** %arrayidx4, align 8, !dbg !247
  br label %for.inc, !dbg !248

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !249
  %inc = add nsw i32 %6, 1, !dbg !249
  store i32 %inc, i32* %i, align 4, !dbg !249
  br label %for.cond, !dbg !250

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %j.addr, align 4, !dbg !251
  %idxprom5 = sext i32 %7 to i64, !dbg !253
  %8 = load %struct.graph_st*, %struct.graph_st** %retval.addr, align 8, !dbg !253
  %vlist6 = getelementptr inbounds %struct.graph_st, %struct.graph_st* %8, i32 0, i32 0, !dbg !254
  %arrayidx7 = getelementptr inbounds [1 x %struct.vert_st*], [1 x %struct.vert_st*]* %vlist6, i32 0, i64 %idxprom5, !dbg !253
  %9 = load %struct.vert_st*, %struct.vert_st** %arrayidx7, align 8, !dbg !253
  store %struct.vert_st* %9, %struct.vert_st** %tmp, align 8, !dbg !255
  br label %for.cond.8, !dbg !256

for.cond.8:                                       ; preds = %for.inc.25, %for.end
  %10 = load %struct.vert_st*, %struct.vert_st** %tmp, align 8, !dbg !257
  %tobool = icmp ne %struct.vert_st* %10, null, !dbg !261
  br i1 %tobool, label %for.body.9, label %for.end.26, !dbg !261

for.body.9:                                       ; preds = %for.cond.8
  store i32 0, i32* %i, align 4, !dbg !262
  br label %for.cond.10, !dbg !265

for.cond.10:                                      ; preds = %for.inc.21, %for.body.9
  %11 = load i32, i32* %i, align 4, !dbg !266
  %12 = load i32, i32* %numproc.addr, align 4, !dbg !270
  %13 = load i32, i32* %perproc.addr, align 4, !dbg !271
  %mul = mul nsw i32 %12, %13, !dbg !272
  %cmp11 = icmp slt i32 %11, %mul, !dbg !273
  br i1 %cmp11, label %for.body.12, label %for.end.23, !dbg !274

for.body.12:                                      ; preds = %for.cond.10
  call void @llvm.dbg.declare(metadata i32* %pn, metadata !275, metadata !66), !dbg !277
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !278, metadata !66), !dbg !279
  call void @llvm.dbg.declare(metadata i32* %dist, metadata !280, metadata !66), !dbg !281
  call void @llvm.dbg.declare(metadata %struct.vert_st** %dest, metadata !282, metadata !66), !dbg !283
  call void @llvm.dbg.declare(metadata %struct.hash** %hash, metadata !284, metadata !66), !dbg !285
  %14 = load i32, i32* %i, align 4, !dbg !286
  %15 = load i32, i32* %count1.addr, align 4, !dbg !288
  %cmp18 = icmp ne i32 %14, %15, !dbg !289
  br i1 %cmp18, label %if.then, label %if.end, !dbg !290

if.then:                                          ; preds = %for.body.12
  %16 = load i32, i32* %i, align 4, !dbg !291
  %17 = load i32, i32* %count1.addr, align 4, !dbg !293
  %18 = load i32, i32* %numvert.addr, align 4, !dbg !294
  %call = call i32 @compute_dist(i32 %16, i32 %17, i32 %18), !dbg !295
  store i32 %call, i32* %dist, align 4, !dbg !296
  %19 = load i32, i32* %i, align 4, !dbg !297
  %20 = load i32, i32* %perproc.addr, align 4, !dbg !298
  %div = sdiv i32 %19, %20, !dbg !299
  store i32 %div, i32* %pn, align 4, !dbg !300
  %21 = load i32, i32* %i, align 4, !dbg !301
  %22 = load i32, i32* %perproc.addr, align 4, !dbg !302
  %rem = srem i32 %21, %22, !dbg !303
  store i32 %rem, i32* %offset, align 4, !dbg !304
  %23 = load i32, i32* %pn, align 4, !dbg !305
  %idxprom19 = sext i32 %23 to i64, !dbg !306
  %arrayidx20 = getelementptr inbounds [1 x %struct.vert_st*], [1 x %struct.vert_st*]* %helper, i32 0, i64 %idxprom19, !dbg !306
  %24 = load %struct.vert_st*, %struct.vert_st** %arrayidx20, align 8, !dbg !306
  %25 = load i32, i32* %offset, align 4, !dbg !307
  %idx.ext = sext i32 %25 to i64, !dbg !308
  %add.ptr = getelementptr inbounds %struct.vert_st, %struct.vert_st* %24, i64 %idx.ext, !dbg !308
  store %struct.vert_st* %add.ptr, %struct.vert_st** %dest, align 8, !dbg !309
  %26 = load %struct.vert_st*, %struct.vert_st** %tmp, align 8, !dbg !310
  %edgehash = getelementptr inbounds %struct.vert_st, %struct.vert_st* %26, i32 0, i32 2, !dbg !311
  %27 = load %struct.hash*, %struct.hash** %edgehash, align 8, !dbg !311
  store %struct.hash* %27, %struct.hash** %hash, align 8, !dbg !312
  %28 = load i32, i32* %dist, align 4, !dbg !313
  %conv = sext i32 %28 to i64, !dbg !314
  %29 = inttoptr i64 %conv to i8*, !dbg !314
  %30 = load %struct.vert_st*, %struct.vert_st** %dest, align 8, !dbg !315
  %31 = ptrtoint %struct.vert_st* %30 to i32, !dbg !316
  %32 = load %struct.hash*, %struct.hash** %hash, align 8, !dbg !317
  call void @HashInsert(i8* %29, i32 %31, %struct.hash* %32), !dbg !318
  br label %if.end, !dbg !319

if.end:                                           ; preds = %if.then, %for.body.12
  br label %for.inc.21, !dbg !320

for.inc.21:                                       ; preds = %if.end
  %33 = load i32, i32* %i, align 4, !dbg !321
  %inc22 = add nsw i32 %33, 1, !dbg !321
  store i32 %inc22, i32* %i, align 4, !dbg !321
  br label %for.cond.10, !dbg !322

for.end.23:                                       ; preds = %for.cond.10
  %34 = load i32, i32* %count1.addr, align 4, !dbg !323
  %inc24 = add nsw i32 %34, 1, !dbg !323
  store i32 %inc24, i32* %count1.addr, align 4, !dbg !323
  br label %for.inc.25, !dbg !324

for.inc.25:                                       ; preds = %for.end.23
  %35 = load %struct.vert_st*, %struct.vert_st** %tmp, align 8, !dbg !325
  %next = getelementptr inbounds %struct.vert_st, %struct.vert_st* %35, i32 0, i32 1, !dbg !326
  %36 = load %struct.vert_st*, %struct.vert_st** %next, align 8, !dbg !326
  store %struct.vert_st* %36, %struct.vert_st** %tmp, align 8, !dbg !327
  br label %for.cond.8, !dbg !328

for.end.26:                                       ; preds = %for.cond.8
  ret void, !dbg !329
}

; Function Attrs: nounwind uwtable
define internal i32 @compute_dist(i32 %i, i32 %j, i32 %numvert) #0 {
entry:
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %numvert.addr = alloca i32, align 4
  %less = alloca i32, align 4
  %gt = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !330, metadata !66), !dbg !331
  store i32 %j, i32* %j.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %j.addr, metadata !332, metadata !66), !dbg !333
  store i32 %numvert, i32* %numvert.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %numvert.addr, metadata !334, metadata !66), !dbg !335
  call void @llvm.dbg.declare(metadata i32* %less, metadata !336, metadata !66), !dbg !337
  call void @llvm.dbg.declare(metadata i32* %gt, metadata !338, metadata !66), !dbg !339
  %0 = load i32, i32* %i.addr, align 4, !dbg !340
  %1 = load i32, i32* %j.addr, align 4, !dbg !342
  %cmp = icmp slt i32 %0, %1, !dbg !343
  br i1 %cmp, label %if.then, label %if.else, !dbg !344

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %i.addr, align 4, !dbg !345
  store i32 %2, i32* %less, align 4, !dbg !347
  %3 = load i32, i32* %j.addr, align 4, !dbg !348
  store i32 %3, i32* %gt, align 4, !dbg !349
  br label %if.end, !dbg !350

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %j.addr, align 4, !dbg !351
  store i32 %4, i32* %less, align 4, !dbg !353
  %5 = load i32, i32* %i.addr, align 4, !dbg !354
  store i32 %5, i32* %gt, align 4, !dbg !355
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %less, align 4, !dbg !356
  %7 = load i32, i32* %numvert.addr, align 4, !dbg !357
  %mul = mul nsw i32 %6, %7, !dbg !358
  %8 = load i32, i32* %gt, align 4, !dbg !359
  %add = add nsw i32 %mul, %8, !dbg !360
  %call = call i32 @random2(i32 %add), !dbg !361
  %rem = srem i32 %call, 2048, !dbg !362
  %add1 = add nsw i32 %rem, 1, !dbg !363
  ret i32 %add1, !dbg !364
}

declare void @HashInsert(i8*, i32, %struct.hash*) #3

; Function Attrs: nounwind uwtable
define internal i32 @random2(i32 %seed) #0 {
entry:
  %seed.addr = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32 %seed, i32* %seed.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seed.addr, metadata !365, metadata !66), !dbg !366
  call void @llvm.dbg.declare(metadata i32* %tmp, metadata !367, metadata !66), !dbg !368
  %0 = load i32, i32* %seed.addr, align 4, !dbg !369
  %call = call i32 @mult(i32 %0, i32 31415821), !dbg !370
  %add = add nsw i32 %call, 1, !dbg !371
  store i32 %add, i32* %tmp, align 4, !dbg !372
  %1 = load i32, i32* %tmp, align 4, !dbg !373
  ret i32 %1, !dbg !374
}

; Function Attrs: nounwind uwtable
define internal i32 @mult(i32 %p, i32 %q) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q.addr = alloca i32, align 4
  %p1 = alloca i32, align 4
  %p0 = alloca i32, align 4
  %q1 = alloca i32, align 4
  %q0 = alloca i32, align 4
  store i32 %p, i32* %p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %p.addr, metadata !375, metadata !66), !dbg !376
  store i32 %q, i32* %q.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %q.addr, metadata !377, metadata !66), !dbg !378
  call void @llvm.dbg.declare(metadata i32* %p1, metadata !379, metadata !66), !dbg !380
  call void @llvm.dbg.declare(metadata i32* %p0, metadata !381, metadata !66), !dbg !382
  call void @llvm.dbg.declare(metadata i32* %q1, metadata !383, metadata !66), !dbg !384
  call void @llvm.dbg.declare(metadata i32* %q0, metadata !385, metadata !66), !dbg !386
  %0 = load i32, i32* %p.addr, align 4, !dbg !387
  %div = sdiv i32 %0, 10000, !dbg !388
  store i32 %div, i32* %p1, align 4, !dbg !389
  %1 = load i32, i32* %p.addr, align 4, !dbg !390
  %rem = srem i32 %1, 10000, !dbg !391
  store i32 %rem, i32* %p0, align 4, !dbg !392
  %2 = load i32, i32* %q.addr, align 4, !dbg !393
  %div1 = sdiv i32 %2, 10000, !dbg !394
  store i32 %div1, i32* %q1, align 4, !dbg !395
  %3 = load i32, i32* %q.addr, align 4, !dbg !396
  %rem2 = srem i32 %3, 10000, !dbg !397
  store i32 %rem2, i32* %q0, align 4, !dbg !398
  %4 = load i32, i32* %p0, align 4, !dbg !399
  %5 = load i32, i32* %q1, align 4, !dbg !400
  %mul = mul nsw i32 %4, %5, !dbg !401
  %6 = load i32, i32* %p1, align 4, !dbg !402
  %7 = load i32, i32* %q0, align 4, !dbg !403
  %mul3 = mul nsw i32 %6, %7, !dbg !404
  %add = add nsw i32 %mul, %mul3, !dbg !405
  %rem4 = srem i32 %add, 10000, !dbg !406
  %mul5 = mul nsw i32 %rem4, 10000, !dbg !407
  %8 = load i32, i32* %p0, align 4, !dbg !408
  %9 = load i32, i32* %q0, align 4, !dbg !409
  %mul6 = mul nsw i32 %8, %9, !dbg !410
  %add7 = add nsw i32 %mul5, %mul6, !dbg !411
  ret i32 %add7, !dbg !412
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!62, !63}
!llvm.ident = !{!64}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !42, globals: !60)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Olden/mst")
!2 = !{}
!3 = !{!4, !11, !33, !31}
!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "Graph", file: !5, line: 18, baseType: !6)
!5 = !DIFile(filename: "./mst.h", directory: "/home/gleison/tf/Benchmarks/Olden/mst")
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "graph_st", file: !5, line: 16, size: 64, align: 64, elements: !8)
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "vlist", scope: !7, file: !5, line: 17, baseType: !10, size: 64, align: 64)
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 64, align: 64, elements: !40)
!11 = !DIDerivedType(tag: DW_TAG_typedef, name: "Vertex", file: !5, line: 14, baseType: !12)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64, align: 64)
!13 = !DICompositeType(tag: DW_TAG_structure_type, name: "vert_st", file: !5, line: 10, size: 192, align: 64, elements: !14)
!14 = !{!15, !17, !18}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "mindist", scope: !13, file: !5, line: 11, baseType: !16, size: 32, align: 32)
!16 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !13, file: !5, line: 12, baseType: !12, size: 64, align: 64, offset: 64)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "edgehash", scope: !13, file: !5, line: 13, baseType: !19, size: 64, align: 64, offset: 128)
!19 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash", file: !20, line: 15, baseType: !21)
!20 = !DIFile(filename: "./hash.h", directory: "/home/gleison/tf/Benchmarks/Olden/mst")
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64, align: 64)
!22 = !DICompositeType(tag: DW_TAG_structure_type, name: "hash", file: !20, line: 11, size: 192, align: 64, elements: !23)
!23 = !{!24, !35, !39}
!24 = !DIDerivedType(tag: DW_TAG_member, name: "array", scope: !22, file: !20, line: 12, baseType: !25, size: 64, align: 64)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64, align: 64)
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "HashEntry", file: !20, line: 9, baseType: !27)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64, align: 64)
!28 = !DICompositeType(tag: DW_TAG_structure_type, name: "hash_entry", file: !20, line: 5, size: 192, align: 64, elements: !29)
!29 = !{!30, !32, !34}
!30 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !28, file: !20, line: 6, baseType: !31, size: 32, align: 32)
!31 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !28, file: !20, line: 7, baseType: !33, size: 64, align: 64, offset: 64)
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !28, file: !20, line: 8, baseType: !27, size: 64, align: 64, offset: 128)
!35 = !DIDerivedType(tag: DW_TAG_member, name: "mapfunc", scope: !22, file: !20, line: 13, baseType: !36, size: 64, align: 64, offset: 64)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64, align: 64)
!37 = !DISubroutineType(types: !38)
!38 = !{!16, !31}
!39 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !22, file: !20, line: 14, baseType: !16, size: 32, align: 32, offset: 128)
!40 = !{!41}
!41 = !DISubrange(count: 1)
!42 = !{!43, !47, !48, !51, !54, !57}
!43 = !DISubprogram(name: "MakeGraph", scope: !44, file: !44, line: 75, type: !45, isLocal: false, isDefinition: true, scopeLine: 75, flags: DIFlagPrototyped, isOptimized: false, function: %struct.graph_st* (i32, i32)* @MakeGraph, variables: !2)
!44 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Olden/mst/tmp.c", directory: "/home/gleison/tf/Benchmarks/Olden/mst")
!45 = !DISubroutineType(types: !46)
!46 = !{!4, !16, !16}
!47 = !DISubprogram(name: "hashfunc", scope: !44, file: !44, line: 41, type: !37, isLocal: true, isDefinition: true, scopeLine: 41, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32)* @hashfunc, variables: !2)
!48 = !DISubprogram(name: "AddEdges", scope: !44, file: !44, line: 45, type: !49, isLocal: true, isDefinition: true, scopeLine: 46, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, %struct.graph_st*, i32, i32, i32, i32)* @AddEdges, variables: !2)
!49 = !DISubroutineType(types: !50)
!50 = !{null, !16, !4, !16, !16, !16, !16}
!51 = !DISubprogram(name: "compute_dist", scope: !44, file: !44, line: 29, type: !52, isLocal: true, isDefinition: true, scopeLine: 29, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i32, i32)* @compute_dist, variables: !2)
!52 = !DISubroutineType(types: !53)
!53 = !{!16, !16, !16, !16}
!54 = !DISubprogram(name: "random2", scope: !44, file: !44, line: 23, type: !55, isLocal: true, isDefinition: true, scopeLine: 23, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32)* @random2, variables: !2)
!55 = !DISubroutineType(types: !56)
!56 = !{!16, !16}
!57 = !DISubprogram(name: "mult", scope: !44, file: !44, line: 13, type: !58, isLocal: true, isDefinition: true, scopeLine: 13, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i32)* @mult, variables: !2)
!58 = !DISubroutineType(types: !59)
!59 = !{!16, !16, !16}
!60 = !{!61}
!61 = !DIGlobalVariable(name: "HashRange", scope: !0, file: !44, line: 11, type: !16, isLocal: true, isDefinition: true, variable: i32* @HashRange)
!62 = !{i32 2, !"Dwarf Version", i32 4}
!63 = !{i32 2, !"Debug Info Version", i32 3}
!64 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!65 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "numvert", arg: 1, scope: !43, file: !44, line: 75, type: !16)
!66 = !DIExpression()
!67 = !DILocation(line: 75, column: 21, scope: !43)
!68 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "numproc", arg: 2, scope: !43, file: !44, line: 75, type: !16)
!69 = !DILocation(line: 75, column: 34, scope: !43)
!70 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "perproc", scope: !43, file: !44, line: 76, type: !16)
!71 = !DILocation(line: 76, column: 7, scope: !43)
!72 = !DILocation(line: 76, column: 17, scope: !43)
!73 = !DILocation(line: 76, column: 27, scope: !43)
!74 = !DILocation(line: 76, column: 25, scope: !43)
!75 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !43, file: !44, line: 77, type: !16)
!76 = !DILocation(line: 77, column: 7, scope: !43)
!77 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !43, file: !44, line: 77, type: !16)
!78 = !DILocation(line: 77, column: 10, scope: !43)
!79 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count1", scope: !43, file: !44, line: 78, type: !16)
!80 = !DILocation(line: 78, column: 7, scope: !43)
!81 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !43, file: !44, line: 79, type: !11)
!82 = !DILocation(line: 79, column: 10, scope: !43)
!83 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !43, file: !44, line: 79, type: !11)
!84 = !DILocation(line: 79, column: 13, scope: !43)
!85 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "block", scope: !43, file: !44, line: 80, type: !11)
!86 = !DILocation(line: 80, column: 10, scope: !43)
!87 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !43, file: !44, line: 81, type: !4)
!88 = !DILocation(line: 81, column: 9, scope: !43)
!89 = !DILocation(line: 82, column: 19, scope: !43)
!90 = !DILocation(line: 82, column: 12, scope: !43)
!91 = !DILocation(line: 82, column: 10, scope: !43)
!92 = !DILocation(line: 83, column: 10, scope: !93)
!93 = distinct !DILexicalBlock(scope: !43, file: !44, line: 83, column: 3)
!94 = !DILocation(line: 83, column: 8, scope: !93)
!95 = !DILocation(line: 83, column: 15, scope: !96)
!96 = !DILexicalBlockFile(scope: !97, file: !44, discriminator: 2)
!97 = !DILexicalBlockFile(scope: !98, file: !44, discriminator: 1)
!98 = distinct !DILexicalBlock(scope: !93, file: !44, line: 83, column: 3)
!99 = !DILocation(line: 83, column: 17, scope: !98)
!100 = !DILocation(line: 83, column: 3, scope: !93)
!101 = !DILocation(line: 84, column: 19, scope: !102)
!102 = distinct !DILexicalBlock(scope: !98, file: !44, line: 83, column: 33)
!103 = !DILocation(line: 84, column: 5, scope: !102)
!104 = !DILocation(line: 84, column: 13, scope: !102)
!105 = !DILocation(line: 84, column: 22, scope: !102)
!106 = !DILocation(line: 85, column: 3, scope: !102)
!107 = !DILocation(line: 83, column: 29, scope: !98)
!108 = !DILocation(line: 83, column: 3, scope: !98)
!109 = !DILocation(line: 86, column: 3, scope: !43)
!110 = !DILocation(line: 87, column: 12, scope: !111)
!111 = distinct !DILexicalBlock(scope: !43, file: !44, line: 87, column: 3)
!112 = !DILocation(line: 87, column: 20, scope: !111)
!113 = !DILocation(line: 87, column: 10, scope: !111)
!114 = !DILocation(line: 87, column: 8, scope: !111)
!115 = !DILocation(line: 87, column: 25, scope: !116)
!116 = !DILexicalBlockFile(scope: !117, file: !44, discriminator: 2)
!117 = !DILexicalBlockFile(scope: !118, file: !44, discriminator: 1)
!118 = distinct !DILexicalBlock(scope: !111, file: !44, line: 87, column: 3)
!119 = !DILocation(line: 87, column: 27, scope: !118)
!120 = !DILocation(line: 87, column: 3, scope: !111)
!121 = !DILocation(line: 88, column: 28, scope: !122)
!122 = distinct !DILexicalBlock(scope: !118, file: !44, line: 87, column: 38)
!123 = !DILocation(line: 88, column: 36, scope: !122)
!124 = !DILocation(line: 88, column: 21, scope: !122)
!125 = !DILocation(line: 88, column: 13, scope: !122)
!126 = !DILocation(line: 88, column: 11, scope: !122)
!127 = !DILocation(line: 89, column: 7, scope: !122)
!128 = !DILocation(line: 90, column: 12, scope: !129)
!129 = distinct !DILexicalBlock(scope: !122, file: !44, line: 90, column: 5)
!130 = !DILocation(line: 90, column: 10, scope: !129)
!131 = !DILocation(line: 90, column: 17, scope: !132)
!132 = !DILexicalBlockFile(scope: !133, file: !44, discriminator: 2)
!133 = !DILexicalBlockFile(scope: !134, file: !44, discriminator: 1)
!134 = distinct !DILexicalBlock(scope: !129, file: !44, line: 90, column: 5)
!135 = !DILocation(line: 90, column: 21, scope: !134)
!136 = !DILocation(line: 90, column: 19, scope: !134)
!137 = !DILocation(line: 90, column: 5, scope: !129)
!138 = !DILocation(line: 91, column: 13, scope: !139)
!139 = distinct !DILexicalBlock(scope: !134, file: !44, line: 90, column: 35)
!140 = !DILocation(line: 91, column: 22, scope: !139)
!141 = !DILocation(line: 91, column: 32, scope: !139)
!142 = !DILocation(line: 91, column: 30, scope: !139)
!143 = !DILocation(line: 91, column: 34, scope: !139)
!144 = !DILocation(line: 91, column: 19, scope: !139)
!145 = !DILocation(line: 91, column: 11, scope: !139)
!146 = !DILocation(line: 92, column: 19, scope: !139)
!147 = !DILocation(line: 92, column: 27, scope: !139)
!148 = !DILocation(line: 92, column: 17, scope: !139)
!149 = !DILocation(line: 93, column: 7, scope: !139)
!150 = !DILocation(line: 93, column: 12, scope: !139)
!151 = !DILocation(line: 93, column: 20, scope: !139)
!152 = !DILocation(line: 94, column: 32, scope: !139)
!153 = !DILocation(line: 94, column: 40, scope: !139)
!154 = !DILocation(line: 94, column: 23, scope: !139)
!155 = !DILocation(line: 94, column: 7, scope: !139)
!156 = !DILocation(line: 94, column: 12, scope: !139)
!157 = !DILocation(line: 94, column: 21, scope: !139)
!158 = !DILocation(line: 95, column: 19, scope: !139)
!159 = !DILocation(line: 95, column: 7, scope: !139)
!160 = !DILocation(line: 95, column: 12, scope: !139)
!161 = !DILocation(line: 95, column: 17, scope: !139)
!162 = !DILocation(line: 96, column: 11, scope: !139)
!163 = !DILocation(line: 96, column: 9, scope: !139)
!164 = !DILocation(line: 97, column: 5, scope: !139)
!165 = !DILocation(line: 90, column: 31, scope: !134)
!166 = !DILocation(line: 90, column: 5, scope: !134)
!167 = !DILocation(line: 98, column: 24, scope: !122)
!168 = !DILocation(line: 98, column: 19, scope: !122)
!169 = !DILocation(line: 98, column: 5, scope: !122)
!170 = !DILocation(line: 98, column: 13, scope: !122)
!171 = !DILocation(line: 98, column: 22, scope: !122)
!172 = !DILocation(line: 99, column: 3, scope: !122)
!173 = !DILocation(line: 87, column: 34, scope: !118)
!174 = !DILocation(line: 87, column: 3, scope: !118)
!175 = !DILocation(line: 101, column: 3, scope: !43)
!176 = !DILocation(line: 102, column: 12, scope: !177)
!177 = distinct !DILexicalBlock(scope: !43, file: !44, line: 102, column: 3)
!178 = !DILocation(line: 102, column: 20, scope: !177)
!179 = !DILocation(line: 102, column: 10, scope: !177)
!180 = !DILocation(line: 102, column: 8, scope: !177)
!181 = !DILocation(line: 102, column: 25, scope: !182)
!182 = !DILexicalBlockFile(scope: !183, file: !44, discriminator: 2)
!183 = !DILexicalBlockFile(scope: !184, file: !44, discriminator: 1)
!184 = distinct !DILexicalBlock(scope: !177, file: !44, line: 102, column: 3)
!185 = !DILocation(line: 102, column: 27, scope: !184)
!186 = !DILocation(line: 102, column: 3, scope: !177)
!187 = !DILocation(line: 103, column: 14, scope: !188)
!188 = distinct !DILexicalBlock(scope: !184, file: !44, line: 102, column: 38)
!189 = !DILocation(line: 103, column: 18, scope: !188)
!190 = !DILocation(line: 103, column: 16, scope: !188)
!191 = !DILocation(line: 103, column: 12, scope: !188)
!192 = !DILocation(line: 104, column: 14, scope: !188)
!193 = !DILocation(line: 104, column: 22, scope: !188)
!194 = !DILocation(line: 104, column: 30, scope: !188)
!195 = !DILocation(line: 104, column: 39, scope: !188)
!196 = !DILocation(line: 104, column: 48, scope: !188)
!197 = !DILocation(line: 104, column: 57, scope: !188)
!198 = !DILocation(line: 104, column: 5, scope: !188)
!199 = !DILocation(line: 105, column: 3, scope: !188)
!200 = !DILocation(line: 102, column: 34, scope: !184)
!201 = !DILocation(line: 102, column: 3, scope: !184)
!202 = !DILocation(line: 106, column: 3, scope: !43)
!203 = !DILocation(line: 108, column: 3, scope: !43)
!204 = !DILocation(line: 109, column: 10, scope: !43)
!205 = !DILocation(line: 109, column: 3, scope: !43)
!206 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "key", arg: 1, scope: !47, file: !44, line: 41, type: !31)
!207 = !DILocation(line: 41, column: 34, scope: !47)
!208 = !DILocation(line: 42, column: 12, scope: !47)
!209 = !DILocation(line: 42, column: 16, scope: !47)
!210 = !DILocation(line: 42, column: 24, scope: !47)
!211 = !DILocation(line: 42, column: 22, scope: !47)
!212 = !DILocation(line: 42, column: 3, scope: !47)
!213 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "count1", arg: 1, scope: !48, file: !44, line: 45, type: !16)
!214 = !DILocation(line: 45, column: 26, scope: !48)
!215 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "retval", arg: 2, scope: !48, file: !44, line: 45, type: !4)
!216 = !DILocation(line: 45, column: 40, scope: !48)
!217 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "numproc", arg: 3, scope: !48, file: !44, line: 45, type: !16)
!218 = !DILocation(line: 45, column: 52, scope: !48)
!219 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "perproc", arg: 4, scope: !48, file: !44, line: 46, type: !16)
!220 = !DILocation(line: 46, column: 26, scope: !48)
!221 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "numvert", arg: 5, scope: !48, file: !44, line: 46, type: !16)
!222 = !DILocation(line: 46, column: 39, scope: !48)
!223 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "j", arg: 6, scope: !48, file: !44, line: 46, type: !16)
!224 = !DILocation(line: 46, column: 52, scope: !48)
!225 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !48, file: !44, line: 47, type: !11)
!226 = !DILocation(line: 47, column: 10, scope: !48)
!227 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "helper", scope: !48, file: !44, line: 48, type: !10)
!228 = !DILocation(line: 48, column: 10, scope: !48)
!229 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !48, file: !44, line: 49, type: !16)
!230 = !DILocation(line: 49, column: 7, scope: !48)
!231 = !DILocation(line: 51, column: 10, scope: !232)
!232 = distinct !DILexicalBlock(scope: !48, file: !44, line: 51, column: 3)
!233 = !DILocation(line: 51, column: 8, scope: !232)
!234 = !DILocation(line: 51, column: 15, scope: !235)
!235 = !DILexicalBlockFile(scope: !236, file: !44, discriminator: 2)
!236 = !DILexicalBlockFile(scope: !237, file: !44, discriminator: 1)
!237 = distinct !DILexicalBlock(scope: !232, file: !44, line: 51, column: 3)
!238 = !DILocation(line: 51, column: 19, scope: !237)
!239 = !DILocation(line: 51, column: 17, scope: !237)
!240 = !DILocation(line: 51, column: 3, scope: !232)
!241 = !DILocation(line: 52, column: 31, scope: !242)
!242 = distinct !DILexicalBlock(scope: !237, file: !44, line: 51, column: 33)
!243 = !DILocation(line: 52, column: 17, scope: !242)
!244 = !DILocation(line: 52, column: 25, scope: !242)
!245 = !DILocation(line: 52, column: 12, scope: !242)
!246 = !DILocation(line: 52, column: 5, scope: !242)
!247 = !DILocation(line: 52, column: 15, scope: !242)
!248 = !DILocation(line: 53, column: 3, scope: !242)
!249 = !DILocation(line: 51, column: 29, scope: !237)
!250 = !DILocation(line: 51, column: 3, scope: !237)
!251 = !DILocation(line: 55, column: 28, scope: !252)
!252 = distinct !DILexicalBlock(scope: !48, file: !44, line: 55, column: 3)
!253 = !DILocation(line: 55, column: 14, scope: !252)
!254 = !DILocation(line: 55, column: 22, scope: !252)
!255 = !DILocation(line: 55, column: 12, scope: !252)
!256 = !DILocation(line: 55, column: 8, scope: !252)
!257 = !DILocation(line: 55, column: 32, scope: !258)
!258 = !DILexicalBlockFile(scope: !259, file: !44, discriminator: 2)
!259 = !DILexicalBlockFile(scope: !260, file: !44, discriminator: 1)
!260 = distinct !DILexicalBlock(scope: !252, file: !44, line: 55, column: 3)
!261 = !DILocation(line: 55, column: 3, scope: !252)
!262 = !DILocation(line: 56, column: 12, scope: !263)
!263 = distinct !DILexicalBlock(scope: !264, file: !44, line: 56, column: 5)
!264 = distinct !DILexicalBlock(scope: !260, file: !44, line: 55, column: 54)
!265 = !DILocation(line: 56, column: 10, scope: !263)
!266 = !DILocation(line: 56, column: 17, scope: !267)
!267 = !DILexicalBlockFile(scope: !268, file: !44, discriminator: 2)
!268 = !DILexicalBlockFile(scope: !269, file: !44, discriminator: 1)
!269 = distinct !DILexicalBlock(scope: !263, file: !44, line: 56, column: 5)
!270 = !DILocation(line: 56, column: 21, scope: !269)
!271 = !DILocation(line: 56, column: 31, scope: !269)
!272 = !DILocation(line: 56, column: 29, scope: !269)
!273 = !DILocation(line: 56, column: 19, scope: !269)
!274 = !DILocation(line: 56, column: 5, scope: !263)
!275 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pn", scope: !276, file: !44, line: 57, type: !16)
!276 = distinct !DILexicalBlock(scope: !269, file: !44, line: 56, column: 45)
!277 = !DILocation(line: 57, column: 11, scope: !276)
!278 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "offset", scope: !276, file: !44, line: 57, type: !16)
!279 = !DILocation(line: 57, column: 15, scope: !276)
!280 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dist", scope: !276, file: !44, line: 57, type: !16)
!281 = !DILocation(line: 57, column: 23, scope: !276)
!282 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dest", scope: !276, file: !44, line: 58, type: !11)
!283 = !DILocation(line: 58, column: 14, scope: !276)
!284 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hash", scope: !276, file: !44, line: 59, type: !19)
!285 = !DILocation(line: 59, column: 12, scope: !276)
!286 = !DILocation(line: 61, column: 11, scope: !287)
!287 = distinct !DILexicalBlock(scope: !276, file: !44, line: 61, column: 11)
!288 = !DILocation(line: 61, column: 16, scope: !287)
!289 = !DILocation(line: 61, column: 13, scope: !287)
!290 = !DILocation(line: 61, column: 11, scope: !276)
!291 = !DILocation(line: 62, column: 29, scope: !292)
!292 = distinct !DILexicalBlock(scope: !287, file: !44, line: 61, column: 24)
!293 = !DILocation(line: 62, column: 32, scope: !292)
!294 = !DILocation(line: 62, column: 40, scope: !292)
!295 = !DILocation(line: 62, column: 16, scope: !292)
!296 = !DILocation(line: 62, column: 14, scope: !292)
!297 = !DILocation(line: 63, column: 14, scope: !292)
!298 = !DILocation(line: 63, column: 18, scope: !292)
!299 = !DILocation(line: 63, column: 16, scope: !292)
!300 = !DILocation(line: 63, column: 12, scope: !292)
!301 = !DILocation(line: 64, column: 18, scope: !292)
!302 = !DILocation(line: 64, column: 22, scope: !292)
!303 = !DILocation(line: 64, column: 20, scope: !292)
!304 = !DILocation(line: 64, column: 16, scope: !292)
!305 = !DILocation(line: 65, column: 25, scope: !292)
!306 = !DILocation(line: 65, column: 18, scope: !292)
!307 = !DILocation(line: 65, column: 32, scope: !292)
!308 = !DILocation(line: 65, column: 30, scope: !292)
!309 = !DILocation(line: 65, column: 14, scope: !292)
!310 = !DILocation(line: 66, column: 16, scope: !292)
!311 = !DILocation(line: 66, column: 21, scope: !292)
!312 = !DILocation(line: 66, column: 14, scope: !292)
!313 = !DILocation(line: 67, column: 28, scope: !292)
!314 = !DILocation(line: 67, column: 20, scope: !292)
!315 = !DILocation(line: 67, column: 48, scope: !292)
!316 = !DILocation(line: 67, column: 34, scope: !292)
!317 = !DILocation(line: 67, column: 54, scope: !292)
!318 = !DILocation(line: 67, column: 9, scope: !292)
!319 = !DILocation(line: 69, column: 7, scope: !292)
!320 = !DILocation(line: 70, column: 5, scope: !276)
!321 = !DILocation(line: 56, column: 41, scope: !269)
!322 = !DILocation(line: 56, column: 5, scope: !269)
!323 = !DILocation(line: 71, column: 11, scope: !264)
!324 = !DILocation(line: 72, column: 3, scope: !264)
!325 = !DILocation(line: 55, column: 43, scope: !260)
!326 = !DILocation(line: 55, column: 48, scope: !260)
!327 = !DILocation(line: 55, column: 41, scope: !260)
!328 = !DILocation(line: 55, column: 3, scope: !260)
!329 = !DILocation(line: 73, column: 1, scope: !48)
!330 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 1, scope: !51, file: !44, line: 29, type: !16)
!331 = !DILocation(line: 29, column: 29, scope: !51)
!332 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "j", arg: 2, scope: !51, file: !44, line: 29, type: !16)
!333 = !DILocation(line: 29, column: 36, scope: !51)
!334 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "numvert", arg: 3, scope: !51, file: !44, line: 29, type: !16)
!335 = !DILocation(line: 29, column: 43, scope: !51)
!336 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "less", scope: !51, file: !44, line: 30, type: !16)
!337 = !DILocation(line: 30, column: 7, scope: !51)
!338 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "gt", scope: !51, file: !44, line: 30, type: !16)
!339 = !DILocation(line: 30, column: 13, scope: !51)
!340 = !DILocation(line: 31, column: 7, scope: !341)
!341 = distinct !DILexicalBlock(scope: !51, file: !44, line: 31, column: 7)
!342 = !DILocation(line: 31, column: 11, scope: !341)
!343 = !DILocation(line: 31, column: 9, scope: !341)
!344 = !DILocation(line: 31, column: 7, scope: !51)
!345 = !DILocation(line: 32, column: 12, scope: !346)
!346 = distinct !DILexicalBlock(scope: !341, file: !44, line: 31, column: 14)
!347 = !DILocation(line: 32, column: 10, scope: !346)
!348 = !DILocation(line: 33, column: 10, scope: !346)
!349 = !DILocation(line: 33, column: 8, scope: !346)
!350 = !DILocation(line: 34, column: 3, scope: !346)
!351 = !DILocation(line: 35, column: 12, scope: !352)
!352 = distinct !DILexicalBlock(scope: !341, file: !44, line: 34, column: 10)
!353 = !DILocation(line: 35, column: 10, scope: !352)
!354 = !DILocation(line: 36, column: 10, scope: !352)
!355 = !DILocation(line: 36, column: 8, scope: !352)
!356 = !DILocation(line: 38, column: 19, scope: !51)
!357 = !DILocation(line: 38, column: 26, scope: !51)
!358 = !DILocation(line: 38, column: 24, scope: !51)
!359 = !DILocation(line: 38, column: 36, scope: !51)
!360 = !DILocation(line: 38, column: 34, scope: !51)
!361 = !DILocation(line: 38, column: 11, scope: !51)
!362 = !DILocation(line: 38, column: 40, scope: !51)
!363 = !DILocation(line: 38, column: 49, scope: !51)
!364 = !DILocation(line: 38, column: 3, scope: !51)
!365 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "seed", arg: 1, scope: !54, file: !44, line: 23, type: !16)
!366 = !DILocation(line: 23, column: 24, scope: !54)
!367 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !54, file: !44, line: 24, type: !16)
!368 = !DILocation(line: 24, column: 7, scope: !54)
!369 = !DILocation(line: 25, column: 15, scope: !54)
!370 = !DILocation(line: 25, column: 10, scope: !54)
!371 = !DILocation(line: 25, column: 30, scope: !54)
!372 = !DILocation(line: 25, column: 7, scope: !54)
!373 = !DILocation(line: 26, column: 10, scope: !54)
!374 = !DILocation(line: 26, column: 3, scope: !54)
!375 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 1, scope: !57, file: !44, line: 13, type: !16)
!376 = !DILocation(line: 13, column: 21, scope: !57)
!377 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "q", arg: 2, scope: !57, file: !44, line: 13, type: !16)
!378 = !DILocation(line: 13, column: 28, scope: !57)
!379 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p1", scope: !57, file: !44, line: 14, type: !16)
!380 = !DILocation(line: 14, column: 7, scope: !57)
!381 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p0", scope: !57, file: !44, line: 14, type: !16)
!382 = !DILocation(line: 14, column: 11, scope: !57)
!383 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "q1", scope: !57, file: !44, line: 14, type: !16)
!384 = !DILocation(line: 14, column: 15, scope: !57)
!385 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "q0", scope: !57, file: !44, line: 14, type: !16)
!386 = !DILocation(line: 14, column: 19, scope: !57)
!387 = !DILocation(line: 16, column: 8, scope: !57)
!388 = !DILocation(line: 16, column: 10, scope: !57)
!389 = !DILocation(line: 16, column: 6, scope: !57)
!390 = !DILocation(line: 17, column: 8, scope: !57)
!391 = !DILocation(line: 17, column: 10, scope: !57)
!392 = !DILocation(line: 17, column: 6, scope: !57)
!393 = !DILocation(line: 18, column: 8, scope: !57)
!394 = !DILocation(line: 18, column: 10, scope: !57)
!395 = !DILocation(line: 18, column: 6, scope: !57)
!396 = !DILocation(line: 19, column: 8, scope: !57)
!397 = !DILocation(line: 19, column: 10, scope: !57)
!398 = !DILocation(line: 19, column: 6, scope: !57)
!399 = !DILocation(line: 20, column: 13, scope: !57)
!400 = !DILocation(line: 20, column: 18, scope: !57)
!401 = !DILocation(line: 20, column: 16, scope: !57)
!402 = !DILocation(line: 20, column: 23, scope: !57)
!403 = !DILocation(line: 20, column: 28, scope: !57)
!404 = !DILocation(line: 20, column: 26, scope: !57)
!405 = !DILocation(line: 20, column: 21, scope: !57)
!406 = !DILocation(line: 20, column: 32, scope: !57)
!407 = !DILocation(line: 20, column: 44, scope: !57)
!408 = !DILocation(line: 20, column: 57, scope: !57)
!409 = !DILocation(line: 20, column: 62, scope: !57)
!410 = !DILocation(line: 20, column: 60, scope: !57)
!411 = !DILocation(line: 20, column: 55, scope: !57)
!412 = !DILocation(line: 20, column: 3, scope: !57)
