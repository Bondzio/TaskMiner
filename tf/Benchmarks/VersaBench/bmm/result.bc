; ModuleID = '/home/gleison/tf/Benchmarks/VersaBench/bmm/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@c = global [1024 x [1024 x float]] zeroinitializer, align 16
@a = common global [1024 x [1024 x float]] zeroinitializer, align 16
@b = common global [1024 x [1024 x float]] zeroinitializer, align 16
@BLOCK = common global i32 0, align 4
@NUM = common global i32 0, align 4
@.str = private unnamed_addr constant [27 x i8] c"Usage: bmm <size> <block>\0A\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"size must be in [0, 1024]; block must be <= than size\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"final sum = %f\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @my_rand_r(i32* %seedp) #0 {
entry:
  %seedp.addr = alloca i32*, align 8
  %x = alloca i32, align 4
  store i32* %seedp, i32** %seedp.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %seedp.addr, metadata !44, metadata !45), !dbg !46
  call void @llvm.dbg.declare(metadata i32* %x, metadata !47, metadata !45), !dbg !48
  %0 = load i32*, i32** %seedp.addr, align 8, !dbg !49
  %1 = load i32, i32* %0, align 4, !dbg !50
  %mul = mul i32 %1, 1664525, !dbg !51
  %add = add i32 %mul, 1013904223, !dbg !52
  store i32 %add, i32* %x, align 4, !dbg !48
  %2 = load i32, i32* %x, align 4, !dbg !53
  %3 = load i32*, i32** %seedp.addr, align 8, !dbg !54
  store i32 %2, i32* %3, align 4, !dbg !55
  %4 = load i32, i32* %x, align 4, !dbg !56
  %shr = lshr i32 %4, 16, !dbg !57
  %and = and i32 %shr, 32767, !dbg !58
  ret i32 %and, !dbg !59
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define void @init() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %random_seed = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !60, metadata !45), !dbg !61
  call void @llvm.dbg.declare(metadata i32* %j, metadata !62, metadata !45), !dbg !63
  call void @llvm.dbg.declare(metadata i32* %random_seed, metadata !64, metadata !45), !dbg !65
  store i32 1, i32* %random_seed, align 4, !dbg !65
  store i32 0, i32* %i, align 4, !dbg !66
  br label %for.cond, !dbg !68

for.cond:                                         ; preds = %for.inc.15, %entry
  %0 = load i32, i32* %i, align 4, !dbg !69
  %cmp = icmp slt i32 %0, 1024, !dbg !73
  br i1 %cmp, label %for.body, label %for.end.17, !dbg !74

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !75
  br label %for.cond.1, !dbg !78

for.cond.1:                                       ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !79
  %cmp2 = icmp slt i32 %1, 1024, !dbg !83
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !84

for.body.3:                                       ; preds = %for.cond.1
  %call = call i32 @my_rand_r(i32* %random_seed), !dbg !85
  %2 = load i32, i32* %j, align 4, !dbg !87
  %3 = load i32, i32* %i, align 4, !dbg !88
  %sub = sub nsw i32 %2, %3, !dbg !89
  %and = and i32 %sub, 31, !dbg !90
  %shr = lshr i32 %call, %and, !dbg !91
  %and4 = and i32 %shr, 15, !dbg !92
  %conv = uitofp i32 %and4 to float, !dbg !93
  %4 = load i32, i32* %j, align 4, !dbg !94
  %idxprom = sext i32 %4 to i64, !dbg !95
  %5 = load i32, i32* %i, align 4, !dbg !96
  %idxprom5 = sext i32 %5 to i64, !dbg !95
  %arrayidx = getelementptr inbounds [1024 x [1024 x float]], [1024 x [1024 x float]]* @a, i32 0, i64 %idxprom5, !dbg !95
  %arrayidx6 = getelementptr inbounds [1024 x float], [1024 x float]* %arrayidx, i32 0, i64 %idxprom, !dbg !95
  store float %conv, float* %arrayidx6, align 4, !dbg !97
  %call7 = call i32 @my_rand_r(i32* %random_seed), !dbg !98
  %6 = load i32, i32* %i, align 4, !dbg !99
  %7 = load i32, i32* %j, align 4, !dbg !100
  %add = add nsw i32 %6, %7, !dbg !101
  %and8 = and i32 %add, 31, !dbg !102
  %shl = shl i32 %call7, %and8, !dbg !103
  %and9 = and i32 %shl, 15, !dbg !104
  %conv10 = uitofp i32 %and9 to float, !dbg !105
  %8 = load i32, i32* %j, align 4, !dbg !106
  %idxprom11 = sext i32 %8 to i64, !dbg !107
  %9 = load i32, i32* %i, align 4, !dbg !108
  %idxprom12 = sext i32 %9 to i64, !dbg !107
  %arrayidx13 = getelementptr inbounds [1024 x [1024 x float]], [1024 x [1024 x float]]* @b, i32 0, i64 %idxprom12, !dbg !107
  %arrayidx14 = getelementptr inbounds [1024 x float], [1024 x float]* %arrayidx13, i32 0, i64 %idxprom11, !dbg !107
  store float %conv10, float* %arrayidx14, align 4, !dbg !109
  br label %for.inc, !dbg !110

for.inc:                                          ; preds = %for.body.3
  %10 = load i32, i32* %j, align 4, !dbg !111
  %inc = add nsw i32 %10, 1, !dbg !111
  store i32 %inc, i32* %j, align 4, !dbg !111
  br label %for.cond.1, !dbg !112

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.15, !dbg !113

for.inc.15:                                       ; preds = %for.end
  %11 = load i32, i32* %i, align 4, !dbg !114
  %inc16 = add nsw i32 %11, 1, !dbg !114
  store i32 %inc16, i32* %i, align 4, !dbg !114
  br label %for.cond, !dbg !115

for.end.17:                                       ; preds = %for.cond
  ret void, !dbg !116
}

; Function Attrs: nounwind uwtable
define void @mm_inner(i32 %I, i32 %J, i32 %K) #0 {
entry:
  %I.addr = alloca i32, align 4
  %J.addr = alloca i32, align 4
  %K.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %I, i32* %I.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %I.addr, metadata !117, metadata !45), !dbg !118
  store i32 %J, i32* %J.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %J.addr, metadata !119, metadata !45), !dbg !120
  store i32 %K, i32* %K.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %K.addr, metadata !121, metadata !45), !dbg !122
  call void @llvm.dbg.declare(metadata i32* %i, metadata !123, metadata !45), !dbg !124
  call void @llvm.dbg.declare(metadata i32* %j, metadata !125, metadata !45), !dbg !126
  call void @llvm.dbg.declare(metadata i32* %k, metadata !127, metadata !45), !dbg !128
  %0 = load i32, i32* %I.addr, align 4, !dbg !129
  store i32 %0, i32* %i, align 4, !dbg !131
  br label %for.cond, !dbg !132

for.cond:                                         ; preds = %for.inc.23, %entry
  %1 = load i32, i32* %i, align 4, !dbg !133
  %2 = load i32, i32* %I.addr, align 4, !dbg !137
  %3 = load i32, i32* @BLOCK, align 4, !dbg !138
  %add = add nsw i32 %2, %3, !dbg !139
  %cmp = icmp slt i32 %1, %add, !dbg !140
  br i1 %cmp, label %for.body, label %for.end.25, !dbg !141

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %J.addr, align 4, !dbg !142
  store i32 %4, i32* %j, align 4, !dbg !144
  br label %for.cond.1, !dbg !145

for.cond.1:                                       ; preds = %for.inc.20, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !146
  %6 = load i32, i32* %J.addr, align 4, !dbg !150
  %7 = load i32, i32* @BLOCK, align 4, !dbg !151
  %add2 = add nsw i32 %6, %7, !dbg !152
  %cmp3 = icmp slt i32 %5, %add2, !dbg !153
  br i1 %cmp3, label %for.body.4, label %for.end.22, !dbg !154

for.body.4:                                       ; preds = %for.cond.1
  %8 = load i32, i32* %K.addr, align 4, !dbg !155
  store i32 %8, i32* %k, align 4, !dbg !157
  br label %for.cond.5, !dbg !158

for.cond.5:                                       ; preds = %for.inc, %for.body.4
  %9 = load i32, i32* %k, align 4, !dbg !159
  %10 = load i32, i32* %K.addr, align 4, !dbg !163
  %11 = load i32, i32* @BLOCK, align 4, !dbg !164
  %add6 = add nsw i32 %10, %11, !dbg !165
  %cmp7 = icmp slt i32 %9, %add6, !dbg !166
  br i1 %cmp7, label %for.body.8, label %for.end, !dbg !167

for.body.8:                                       ; preds = %for.cond.5
  %12 = load i32, i32* %k, align 4, !dbg !168
  %idxprom = sext i32 %12 to i64, !dbg !169
  %13 = load i32, i32* %i, align 4, !dbg !170
  %idxprom9 = sext i32 %13 to i64, !dbg !169
  %arrayidx = getelementptr inbounds [1024 x [1024 x float]], [1024 x [1024 x float]]* @a, i32 0, i64 %idxprom9, !dbg !169
  %arrayidx10 = getelementptr inbounds [1024 x float], [1024 x float]* %arrayidx, i32 0, i64 %idxprom, !dbg !169
  %14 = load float, float* %arrayidx10, align 4, !dbg !169
  %15 = load i32, i32* %j, align 4, !dbg !171
  %idxprom11 = sext i32 %15 to i64, !dbg !172
  %16 = load i32, i32* %k, align 4, !dbg !173
  %idxprom12 = sext i32 %16 to i64, !dbg !172
  %arrayidx13 = getelementptr inbounds [1024 x [1024 x float]], [1024 x [1024 x float]]* @b, i32 0, i64 %idxprom12, !dbg !172
  %arrayidx14 = getelementptr inbounds [1024 x float], [1024 x float]* %arrayidx13, i32 0, i64 %idxprom11, !dbg !172
  %17 = load float, float* %arrayidx14, align 4, !dbg !172
  %mul = fmul float %14, %17, !dbg !174
  %18 = load i32, i32* %j, align 4, !dbg !175
  %idxprom15 = sext i32 %18 to i64, !dbg !176
  %19 = load i32, i32* %i, align 4, !dbg !177
  %idxprom16 = sext i32 %19 to i64, !dbg !176
  %arrayidx17 = getelementptr inbounds [1024 x [1024 x float]], [1024 x [1024 x float]]* @c, i32 0, i64 %idxprom16, !dbg !176
  %arrayidx18 = getelementptr inbounds [1024 x float], [1024 x float]* %arrayidx17, i32 0, i64 %idxprom15, !dbg !176
  %20 = load float, float* %arrayidx18, align 4, !dbg !178
  %add19 = fadd float %20, %mul, !dbg !178
  store float %add19, float* %arrayidx18, align 4, !dbg !178
  br label %for.inc, !dbg !176

for.inc:                                          ; preds = %for.body.8
  %21 = load i32, i32* %k, align 4, !dbg !179
  %inc = add nsw i32 %21, 1, !dbg !179
  store i32 %inc, i32* %k, align 4, !dbg !179
  br label %for.cond.5, !dbg !180

for.end:                                          ; preds = %for.cond.5
  br label %for.inc.20, !dbg !181

for.inc.20:                                       ; preds = %for.end
  %22 = load i32, i32* %j, align 4, !dbg !182
  %inc21 = add nsw i32 %22, 1, !dbg !182
  store i32 %inc21, i32* %j, align 4, !dbg !182
  br label %for.cond.1, !dbg !183

for.end.22:                                       ; preds = %for.cond.1
  br label %for.inc.23, !dbg !184

for.inc.23:                                       ; preds = %for.end.22
  %23 = load i32, i32* %i, align 4, !dbg !185
  %inc24 = add nsw i32 %23, 1, !dbg !185
  store i32 %inc24, i32* %i, align 4, !dbg !185
  br label %for.cond, !dbg !186

for.end.25:                                       ; preds = %for.cond
  ret void, !dbg !187
}

; Function Attrs: nounwind uwtable
define void @matmult() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %s1 = alloca float, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !188, metadata !45), !dbg !189
  call void @llvm.dbg.declare(metadata i32* %j, metadata !190, metadata !45), !dbg !191
  call void @llvm.dbg.declare(metadata i32* %k, metadata !192, metadata !45), !dbg !193
  call void @llvm.dbg.declare(metadata float* %s1, metadata !194, metadata !45), !dbg !195
  store i32 0, i32* %i, align 4, !dbg !196
  br label %for.cond, !dbg !198

for.cond:                                         ; preds = %for.inc.10, %entry
  %0 = load i32, i32* %i, align 4, !dbg !199
  %1 = load i32, i32* @NUM, align 4, !dbg !203
  %cmp = icmp slt i32 %0, %1, !dbg !204
  br i1 %cmp, label %for.body, label %for.end.12, !dbg !205

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !206
  br label %for.cond.1, !dbg !208

for.cond.1:                                       ; preds = %for.inc.7, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !209
  %3 = load i32, i32* @NUM, align 4, !dbg !213
  %cmp2 = icmp slt i32 %2, %3, !dbg !214
  br i1 %cmp2, label %for.body.3, label %for.end.9, !dbg !215

for.body.3:                                       ; preds = %for.cond.1
  store i32 0, i32* %k, align 4, !dbg !216
  br label %for.cond.4, !dbg !218

for.cond.4:                                       ; preds = %for.inc, %for.body.3
  %4 = load i32, i32* %k, align 4, !dbg !219
  %5 = load i32, i32* @NUM, align 4, !dbg !223
  %cmp5 = icmp slt i32 %4, %5, !dbg !224
  br i1 %cmp5, label %for.body.6, label %for.end, !dbg !225

for.body.6:                                       ; preds = %for.cond.4
  %6 = load i32, i32* %i, align 4, !dbg !226
  %7 = load i32, i32* %j, align 4, !dbg !228
  %8 = load i32, i32* %k, align 4, !dbg !229
  call void @mm_inner(i32 %6, i32 %7, i32 %8), !dbg !230
  br label %for.inc, !dbg !231

for.inc:                                          ; preds = %for.body.6
  %9 = load i32, i32* @BLOCK, align 4, !dbg !232
  %10 = load i32, i32* %k, align 4, !dbg !233
  %add = add nsw i32 %10, %9, !dbg !233
  store i32 %add, i32* %k, align 4, !dbg !233
  br label %for.cond.4, !dbg !234

for.end:                                          ; preds = %for.cond.4
  br label %for.inc.7, !dbg !235

for.inc.7:                                        ; preds = %for.end
  %11 = load i32, i32* @BLOCK, align 4, !dbg !236
  %12 = load i32, i32* %j, align 4, !dbg !237
  %add8 = add nsw i32 %12, %11, !dbg !237
  store i32 %add8, i32* %j, align 4, !dbg !237
  br label %for.cond.1, !dbg !238

for.end.9:                                        ; preds = %for.cond.1
  br label %for.inc.10, !dbg !239

for.inc.10:                                       ; preds = %for.end.9
  %13 = load i32, i32* @BLOCK, align 4, !dbg !240
  %14 = load i32, i32* %i, align 4, !dbg !241
  %add11 = add nsw i32 %14, %13, !dbg !241
  store i32 %add11, i32* %i, align 4, !dbg !241
  br label %for.cond, !dbg !242

for.end.12:                                       ; preds = %for.cond
  ret void, !dbg !243
}

; Function Attrs: nounwind uwtable
define float @mm_sum(i32 %I, i32 %J) #0 {
entry:
  %I.addr = alloca i32, align 4
  %J.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca float, align 4
  store i32 %I, i32* %I.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %I.addr, metadata !244, metadata !45), !dbg !245
  store i32 %J, i32* %J.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %J.addr, metadata !246, metadata !45), !dbg !247
  call void @llvm.dbg.declare(metadata i32* %i, metadata !248, metadata !45), !dbg !249
  call void @llvm.dbg.declare(metadata i32* %j, metadata !250, metadata !45), !dbg !251
  call void @llvm.dbg.declare(metadata float* %s, metadata !252, metadata !45), !dbg !253
  store float 0.000000e+00, float* %s, align 4, !dbg !253
  %0 = load i32, i32* %I.addr, align 4, !dbg !254
  store i32 %0, i32* %i, align 4, !dbg !256
  br label %for.cond, !dbg !257

for.cond:                                         ; preds = %for.inc.8, %entry
  %1 = load i32, i32* %i, align 4, !dbg !258
  %2 = load i32, i32* %I.addr, align 4, !dbg !262
  %3 = load i32, i32* @BLOCK, align 4, !dbg !263
  %add = add nsw i32 %2, %3, !dbg !264
  %cmp = icmp slt i32 %1, %add, !dbg !265
  br i1 %cmp, label %for.body, label %for.end.10, !dbg !266

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %J.addr, align 4, !dbg !267
  store i32 %4, i32* %j, align 4, !dbg !269
  br label %for.cond.1, !dbg !270

for.cond.1:                                       ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !271
  %6 = load i32, i32* %J.addr, align 4, !dbg !275
  %7 = load i32, i32* @BLOCK, align 4, !dbg !276
  %add2 = add nsw i32 %6, %7, !dbg !277
  %cmp3 = icmp slt i32 %5, %add2, !dbg !278
  br i1 %cmp3, label %for.body.4, label %for.end, !dbg !279

for.body.4:                                       ; preds = %for.cond.1
  %8 = load i32, i32* %j, align 4, !dbg !280
  %idxprom = sext i32 %8 to i64, !dbg !281
  %9 = load i32, i32* %i, align 4, !dbg !282
  %idxprom5 = sext i32 %9 to i64, !dbg !281
  %arrayidx = getelementptr inbounds [1024 x [1024 x float]], [1024 x [1024 x float]]* @c, i32 0, i64 %idxprom5, !dbg !281
  %arrayidx6 = getelementptr inbounds [1024 x float], [1024 x float]* %arrayidx, i32 0, i64 %idxprom, !dbg !281
  %10 = load float, float* %arrayidx6, align 4, !dbg !281
  %11 = load float, float* %s, align 4, !dbg !283
  %add7 = fadd float %11, %10, !dbg !283
  store float %add7, float* %s, align 4, !dbg !283
  br label %for.inc, !dbg !284

for.inc:                                          ; preds = %for.body.4
  %12 = load i32, i32* %j, align 4, !dbg !285
  %inc = add nsw i32 %12, 1, !dbg !285
  store i32 %inc, i32* %j, align 4, !dbg !285
  br label %for.cond.1, !dbg !286

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.8, !dbg !287

for.inc.8:                                        ; preds = %for.end
  %13 = load i32, i32* %i, align 4, !dbg !288
  %inc9 = add nsw i32 %13, 1, !dbg !288
  store i32 %inc9, i32* %i, align 4, !dbg !288
  br label %for.cond, !dbg !289

for.end.10:                                       ; preds = %for.cond
  %14 = load float, float* %s, align 4, !dbg !290
  ret float %14, !dbg !291
}

; Function Attrs: nounwind uwtable
define float @sumup() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca float, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !292, metadata !45), !dbg !293
  call void @llvm.dbg.declare(metadata i32* %j, metadata !294, metadata !45), !dbg !295
  call void @llvm.dbg.declare(metadata float* %s, metadata !296, metadata !45), !dbg !297
  store float 0.000000e+00, float* %s, align 4, !dbg !297
  store i32 0, i32* %i, align 4, !dbg !298
  br label %for.cond, !dbg !300

for.cond:                                         ; preds = %for.inc.5, %entry
  %0 = load i32, i32* %i, align 4, !dbg !301
  %1 = load i32, i32* @NUM, align 4, !dbg !305
  %cmp = icmp slt i32 %0, %1, !dbg !306
  br i1 %cmp, label %for.body, label %for.end.7, !dbg !307

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !308
  br label %for.cond.1, !dbg !310

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !311
  %3 = load i32, i32* @NUM, align 4, !dbg !315
  %cmp2 = icmp slt i32 %2, %3, !dbg !316
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !317

for.body.3:                                       ; preds = %for.cond.1
  %4 = load i32, i32* %i, align 4, !dbg !318
  %5 = load i32, i32* %j, align 4, !dbg !320
  %call = call float @mm_sum(i32 %4, i32 %5), !dbg !321
  %6 = load float, float* %s, align 4, !dbg !322
  %add = fadd float %6, %call, !dbg !322
  store float %add, float* %s, align 4, !dbg !322
  br label %for.inc, !dbg !323

for.inc:                                          ; preds = %for.body.3
  %7 = load i32, i32* @BLOCK, align 4, !dbg !324
  %8 = load i32, i32* %j, align 4, !dbg !325
  %add4 = add nsw i32 %8, %7, !dbg !325
  store i32 %add4, i32* %j, align 4, !dbg !325
  br label %for.cond.1, !dbg !326

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.5, !dbg !327

for.inc.5:                                        ; preds = %for.end
  %9 = load i32, i32* @BLOCK, align 4, !dbg !328
  %10 = load i32, i32* %i, align 4, !dbg !329
  %add6 = add nsw i32 %10, %9, !dbg !329
  store i32 %add6, i32* %i, align 4, !dbg !329
  br label %for.cond, !dbg !330

for.end.7:                                        ; preds = %for.cond
  %11 = load float, float* %s, align 4, !dbg !331
  ret float %11, !dbg !332
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %s = alloca float, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !333, metadata !45), !dbg !334
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !335, metadata !45), !dbg !336
  call void @llvm.dbg.declare(metadata i32* %i, metadata !337, metadata !45), !dbg !338
  call void @llvm.dbg.declare(metadata i32* %j, metadata !339, metadata !45), !dbg !340
  call void @llvm.dbg.declare(metadata i32* %k, metadata !341, metadata !45), !dbg !342
  call void @llvm.dbg.declare(metadata float* %s, metadata !343, metadata !45), !dbg !344
  %0 = load i32, i32* %argc.addr, align 4, !dbg !345
  %cmp = icmp ne i32 %0, 3, !dbg !347
  br i1 %cmp, label %if.then, label %if.end, !dbg !348

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0)), !dbg !349
  call void @exit(i32 1) #5, !dbg !351
  unreachable, !dbg !351

if.end:                                           ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !352
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 1, !dbg !352
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !352
  %call1 = call i32 @atoi(i8* %2) #6, !dbg !353
  store i32 %call1, i32* @NUM, align 4, !dbg !354
  %3 = load i8**, i8*** %argv.addr, align 8, !dbg !355
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i64 2, !dbg !355
  %4 = load i8*, i8** %arrayidx2, align 8, !dbg !355
  %call3 = call i32 @atoi(i8* %4) #6, !dbg !356
  store i32 %call3, i32* @BLOCK, align 4, !dbg !357
  %5 = load i32, i32* @NUM, align 4, !dbg !358
  %cmp4 = icmp ugt i32 %5, 1024, !dbg !360
  %conv = zext i1 %cmp4 to i32, !dbg !360
  %6 = load i32, i32* @BLOCK, align 4, !dbg !361
  %7 = load i32, i32* @NUM, align 4, !dbg !362
  %cmp5 = icmp ugt i32 %6, %7, !dbg !363
  %conv6 = zext i1 %cmp5 to i32, !dbg !363
  %or = or i32 %conv, %conv6, !dbg !364
  %tobool = icmp ne i32 %or, 0, !dbg !364
  br i1 %tobool, label %if.then.7, label %if.end.9, !dbg !365

if.then.7:                                        ; preds = %if.end
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i32 0, i32 0)), !dbg !366
  call void @exit(i32 1) #5, !dbg !368
  unreachable, !dbg !368

if.end.9:                                         ; preds = %if.end
  call void @init(), !dbg !369
  call void @matmult(), !dbg !370
  %call10 = call float @sumup(), !dbg !371
  store float %call10, float* %s, align 4, !dbg !372
  %8 = load float, float* %s, align 4, !dbg !373
  %conv11 = fpext float %8 to double, !dbg !373
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0), double %conv11), !dbg !374
  call void @exit(i32 0) #5, !dbg !375
  unreachable, !dbg !375

return:                                           ; No predecessors!
  %9 = load i32, i32* %retval, !dbg !376
  ret i32 %9, !dbg !376
}

declare i32 @printf(i8*, ...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #4

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind }
attributes #6 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!41, !42}
!llvm.ident = !{!43}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !5, globals: !32)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/VersaBench/bmm")
!2 = !{}
!3 = !{!4}
!4 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!5 = !{!6, !11, !14, !18, !19, !23, !26}
!6 = !DISubprogram(name: "my_rand_r", scope: !7, file: !7, line: 149, type: !8, isLocal: false, isDefinition: true, scopeLine: 149, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32*)* @my_rand_r, variables: !2)
!7 = !DIFile(filename: "/home/gleison/tf/Benchmarks/VersaBench/bmm/tmp.c", directory: "/home/gleison/tf/Benchmarks/VersaBench/bmm")
!8 = !DISubroutineType(types: !9)
!9 = !{!4, !10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64, align: 64)
!11 = !DISubprogram(name: "init", scope: !7, file: !7, line: 156, type: !12, isLocal: false, isDefinition: true, scopeLine: 156, isOptimized: false, function: void ()* @init, variables: !2)
!12 = !DISubroutineType(types: !13)
!13 = !{null}
!14 = !DISubprogram(name: "mm_inner", scope: !7, file: !7, line: 167, type: !15, isLocal: false, isDefinition: true, scopeLine: 167, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, i32)* @mm_inner, variables: !2)
!15 = !DISubroutineType(types: !16)
!16 = !{null, !17, !17, !17}
!17 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!18 = !DISubprogram(name: "matmult", scope: !7, file: !7, line: 176, type: !12, isLocal: false, isDefinition: true, scopeLine: 176, isOptimized: false, function: void ()* @matmult, variables: !2)
!19 = !DISubprogram(name: "mm_sum", scope: !7, file: !7, line: 189, type: !20, isLocal: false, isDefinition: true, scopeLine: 189, flags: DIFlagPrototyped, isOptimized: false, function: float (i32, i32)* @mm_sum, variables: !2)
!20 = !DISubroutineType(types: !21)
!21 = !{!22, !17, !17}
!22 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!23 = !DISubprogram(name: "sumup", scope: !7, file: !7, line: 199, type: !24, isLocal: false, isDefinition: true, scopeLine: 199, isOptimized: false, function: float ()* @sumup, variables: !2)
!24 = !DISubroutineType(types: !25)
!25 = !{!22}
!26 = !DISubprogram(name: "main", scope: !7, file: !7, line: 211, type: !27, isLocal: false, isDefinition: true, scopeLine: 211, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!27 = !DISubroutineType(types: !28)
!28 = !{!17, !17, !29}
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64, align: 64)
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!31 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!32 = !{!33, !37, !38, !39, !40}
!33 = !DIGlobalVariable(name: "c", scope: !0, file: !7, line: 144, type: !34, isLocal: false, isDefinition: true, variable: [1024 x [1024 x float]]* @c)
!34 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 33554432, align: 32, elements: !35)
!35 = !{!36, !36}
!36 = !DISubrange(count: 1024)
!37 = !DIGlobalVariable(name: "a", scope: !0, file: !7, line: 143, type: !34, isLocal: false, isDefinition: true, variable: [1024 x [1024 x float]]* @a)
!38 = !DIGlobalVariable(name: "b", scope: !0, file: !7, line: 143, type: !34, isLocal: false, isDefinition: true, variable: [1024 x [1024 x float]]* @b)
!39 = !DIGlobalVariable(name: "NUM", scope: !0, file: !7, line: 146, type: !17, isLocal: false, isDefinition: true, variable: i32* @NUM)
!40 = !DIGlobalVariable(name: "BLOCK", scope: !0, file: !7, line: 146, type: !17, isLocal: false, isDefinition: true, variable: i32* @BLOCK)
!41 = !{i32 2, !"Dwarf Version", i32 4}
!42 = !{i32 2, !"Debug Info Version", i32 3}
!43 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!44 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "seedp", arg: 1, scope: !6, file: !7, line: 149, type: !10)
!45 = !DIExpression()
!46 = !DILocation(line: 149, column: 30, scope: !6)
!47 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !6, file: !7, line: 151, type: !4)
!48 = !DILocation(line: 151, column: 12, scope: !6)
!49 = !DILocation(line: 151, column: 17, scope: !6)
!50 = !DILocation(line: 151, column: 16, scope: !6)
!51 = !DILocation(line: 151, column: 23, scope: !6)
!52 = !DILocation(line: 151, column: 34, scope: !6)
!53 = !DILocation(line: 152, column: 12, scope: !6)
!54 = !DILocation(line: 152, column: 4, scope: !6)
!55 = !DILocation(line: 152, column: 10, scope: !6)
!56 = !DILocation(line: 153, column: 11, scope: !6)
!57 = !DILocation(line: 153, column: 13, scope: !6)
!58 = !DILocation(line: 153, column: 20, scope: !6)
!59 = !DILocation(line: 153, column: 3, scope: !6)
!60 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !11, file: !7, line: 157, type: !17)
!61 = !DILocation(line: 157, column: 7, scope: !11)
!62 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !11, file: !7, line: 157, type: !17)
!63 = !DILocation(line: 157, column: 10, scope: !11)
!64 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "random_seed", scope: !11, file: !7, line: 158, type: !4)
!65 = !DILocation(line: 158, column: 12, scope: !11)
!66 = !DILocation(line: 159, column: 10, scope: !67)
!67 = distinct !DILexicalBlock(scope: !11, file: !7, line: 159, column: 3)
!68 = !DILocation(line: 159, column: 8, scope: !67)
!69 = !DILocation(line: 159, column: 15, scope: !70)
!70 = !DILexicalBlockFile(scope: !71, file: !7, discriminator: 2)
!71 = !DILexicalBlockFile(scope: !72, file: !7, discriminator: 1)
!72 = distinct !DILexicalBlock(scope: !67, file: !7, line: 159, column: 3)
!73 = !DILocation(line: 159, column: 17, scope: !72)
!74 = !DILocation(line: 159, column: 3, scope: !67)
!75 = !DILocation(line: 160, column: 12, scope: !76)
!76 = distinct !DILexicalBlock(scope: !77, file: !7, line: 160, column: 5)
!77 = distinct !DILexicalBlock(scope: !72, file: !7, line: 159, column: 30)
!78 = !DILocation(line: 160, column: 10, scope: !76)
!79 = !DILocation(line: 160, column: 17, scope: !80)
!80 = !DILexicalBlockFile(scope: !81, file: !7, discriminator: 2)
!81 = !DILexicalBlockFile(scope: !82, file: !7, discriminator: 1)
!82 = distinct !DILexicalBlock(scope: !76, file: !7, line: 160, column: 5)
!83 = !DILocation(line: 160, column: 19, scope: !82)
!84 = !DILocation(line: 160, column: 5, scope: !76)
!85 = !DILocation(line: 161, column: 18, scope: !86)
!86 = distinct !DILexicalBlock(scope: !82, file: !7, line: 160, column: 32)
!87 = !DILocation(line: 161, column: 47, scope: !86)
!88 = !DILocation(line: 161, column: 51, scope: !86)
!89 = !DILocation(line: 161, column: 49, scope: !86)
!90 = !DILocation(line: 161, column: 54, scope: !86)
!91 = !DILocation(line: 161, column: 42, scope: !86)
!92 = !DILocation(line: 161, column: 61, scope: !86)
!93 = !DILocation(line: 161, column: 17, scope: !86)
!94 = !DILocation(line: 161, column: 12, scope: !86)
!95 = !DILocation(line: 161, column: 7, scope: !86)
!96 = !DILocation(line: 161, column: 9, scope: !86)
!97 = !DILocation(line: 161, column: 15, scope: !86)
!98 = !DILocation(line: 162, column: 18, scope: !86)
!99 = !DILocation(line: 162, column: 47, scope: !86)
!100 = !DILocation(line: 162, column: 51, scope: !86)
!101 = !DILocation(line: 162, column: 49, scope: !86)
!102 = !DILocation(line: 162, column: 54, scope: !86)
!103 = !DILocation(line: 162, column: 42, scope: !86)
!104 = !DILocation(line: 162, column: 61, scope: !86)
!105 = !DILocation(line: 162, column: 17, scope: !86)
!106 = !DILocation(line: 162, column: 12, scope: !86)
!107 = !DILocation(line: 162, column: 7, scope: !86)
!108 = !DILocation(line: 162, column: 9, scope: !86)
!109 = !DILocation(line: 162, column: 15, scope: !86)
!110 = !DILocation(line: 163, column: 5, scope: !86)
!111 = !DILocation(line: 160, column: 28, scope: !82)
!112 = !DILocation(line: 160, column: 5, scope: !82)
!113 = !DILocation(line: 164, column: 3, scope: !77)
!114 = !DILocation(line: 159, column: 26, scope: !72)
!115 = !DILocation(line: 159, column: 3, scope: !72)
!116 = !DILocation(line: 165, column: 1, scope: !11)
!117 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "I", arg: 1, scope: !14, file: !7, line: 167, type: !17)
!118 = !DILocation(line: 167, column: 19, scope: !14)
!119 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "J", arg: 2, scope: !14, file: !7, line: 167, type: !17)
!120 = !DILocation(line: 167, column: 26, scope: !14)
!121 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "K", arg: 3, scope: !14, file: !7, line: 167, type: !17)
!122 = !DILocation(line: 167, column: 33, scope: !14)
!123 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !14, file: !7, line: 168, type: !17)
!124 = !DILocation(line: 168, column: 7, scope: !14)
!125 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !14, file: !7, line: 168, type: !17)
!126 = !DILocation(line: 168, column: 10, scope: !14)
!127 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !14, file: !7, line: 168, type: !17)
!128 = !DILocation(line: 168, column: 13, scope: !14)
!129 = !DILocation(line: 170, column: 12, scope: !130)
!130 = distinct !DILexicalBlock(scope: !14, file: !7, line: 170, column: 3)
!131 = !DILocation(line: 170, column: 10, scope: !130)
!132 = !DILocation(line: 170, column: 8, scope: !130)
!133 = !DILocation(line: 170, column: 15, scope: !134)
!134 = !DILexicalBlockFile(scope: !135, file: !7, discriminator: 2)
!135 = !DILexicalBlockFile(scope: !136, file: !7, discriminator: 1)
!136 = distinct !DILexicalBlock(scope: !130, file: !7, line: 170, column: 3)
!137 = !DILocation(line: 170, column: 19, scope: !136)
!138 = !DILocation(line: 170, column: 23, scope: !136)
!139 = !DILocation(line: 170, column: 21, scope: !136)
!140 = !DILocation(line: 170, column: 17, scope: !136)
!141 = !DILocation(line: 170, column: 3, scope: !130)
!142 = !DILocation(line: 171, column: 14, scope: !143)
!143 = distinct !DILexicalBlock(scope: !136, file: !7, line: 171, column: 5)
!144 = !DILocation(line: 171, column: 12, scope: !143)
!145 = !DILocation(line: 171, column: 10, scope: !143)
!146 = !DILocation(line: 171, column: 17, scope: !147)
!147 = !DILexicalBlockFile(scope: !148, file: !7, discriminator: 2)
!148 = !DILexicalBlockFile(scope: !149, file: !7, discriminator: 1)
!149 = distinct !DILexicalBlock(scope: !143, file: !7, line: 171, column: 5)
!150 = !DILocation(line: 171, column: 21, scope: !149)
!151 = !DILocation(line: 171, column: 25, scope: !149)
!152 = !DILocation(line: 171, column: 23, scope: !149)
!153 = !DILocation(line: 171, column: 19, scope: !149)
!154 = !DILocation(line: 171, column: 5, scope: !143)
!155 = !DILocation(line: 172, column: 16, scope: !156)
!156 = distinct !DILexicalBlock(scope: !149, file: !7, line: 172, column: 7)
!157 = !DILocation(line: 172, column: 14, scope: !156)
!158 = !DILocation(line: 172, column: 12, scope: !156)
!159 = !DILocation(line: 172, column: 19, scope: !160)
!160 = !DILexicalBlockFile(scope: !161, file: !7, discriminator: 2)
!161 = !DILexicalBlockFile(scope: !162, file: !7, discriminator: 1)
!162 = distinct !DILexicalBlock(scope: !156, file: !7, line: 172, column: 7)
!163 = !DILocation(line: 172, column: 23, scope: !162)
!164 = !DILocation(line: 172, column: 27, scope: !162)
!165 = !DILocation(line: 172, column: 25, scope: !162)
!166 = !DILocation(line: 172, column: 21, scope: !162)
!167 = !DILocation(line: 172, column: 7, scope: !156)
!168 = !DILocation(line: 173, column: 25, scope: !162)
!169 = !DILocation(line: 173, column: 20, scope: !162)
!170 = !DILocation(line: 173, column: 22, scope: !162)
!171 = !DILocation(line: 173, column: 35, scope: !162)
!172 = !DILocation(line: 173, column: 30, scope: !162)
!173 = !DILocation(line: 173, column: 32, scope: !162)
!174 = !DILocation(line: 173, column: 28, scope: !162)
!175 = !DILocation(line: 173, column: 14, scope: !162)
!176 = !DILocation(line: 173, column: 9, scope: !162)
!177 = !DILocation(line: 173, column: 11, scope: !162)
!178 = !DILocation(line: 173, column: 17, scope: !162)
!179 = !DILocation(line: 172, column: 35, scope: !162)
!180 = !DILocation(line: 172, column: 7, scope: !162)
!181 = !DILocation(line: 173, column: 36, scope: !156)
!182 = !DILocation(line: 171, column: 33, scope: !149)
!183 = !DILocation(line: 171, column: 5, scope: !149)
!184 = !DILocation(line: 173, column: 36, scope: !143)
!185 = !DILocation(line: 170, column: 31, scope: !136)
!186 = !DILocation(line: 170, column: 3, scope: !136)
!187 = !DILocation(line: 174, column: 1, scope: !14)
!188 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !18, file: !7, line: 177, type: !17)
!189 = !DILocation(line: 177, column: 7, scope: !18)
!190 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !18, file: !7, line: 177, type: !17)
!191 = !DILocation(line: 177, column: 10, scope: !18)
!192 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !18, file: !7, line: 177, type: !17)
!193 = !DILocation(line: 177, column: 13, scope: !18)
!194 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s1", scope: !18, file: !7, line: 178, type: !22)
!195 = !DILocation(line: 178, column: 9, scope: !18)
!196 = !DILocation(line: 180, column: 10, scope: !197)
!197 = distinct !DILexicalBlock(scope: !18, file: !7, line: 180, column: 3)
!198 = !DILocation(line: 180, column: 8, scope: !197)
!199 = !DILocation(line: 180, column: 15, scope: !200)
!200 = !DILexicalBlockFile(scope: !201, file: !7, discriminator: 2)
!201 = !DILexicalBlockFile(scope: !202, file: !7, discriminator: 1)
!202 = distinct !DILexicalBlock(scope: !197, file: !7, line: 180, column: 3)
!203 = !DILocation(line: 180, column: 19, scope: !202)
!204 = !DILocation(line: 180, column: 17, scope: !202)
!205 = !DILocation(line: 180, column: 3, scope: !197)
!206 = !DILocation(line: 181, column: 12, scope: !207)
!207 = distinct !DILexicalBlock(scope: !202, file: !7, line: 181, column: 5)
!208 = !DILocation(line: 181, column: 10, scope: !207)
!209 = !DILocation(line: 181, column: 17, scope: !210)
!210 = !DILexicalBlockFile(scope: !211, file: !7, discriminator: 2)
!211 = !DILexicalBlockFile(scope: !212, file: !7, discriminator: 1)
!212 = distinct !DILexicalBlock(scope: !207, file: !7, line: 181, column: 5)
!213 = !DILocation(line: 181, column: 21, scope: !212)
!214 = !DILocation(line: 181, column: 19, scope: !212)
!215 = !DILocation(line: 181, column: 5, scope: !207)
!216 = !DILocation(line: 182, column: 14, scope: !217)
!217 = distinct !DILexicalBlock(scope: !212, file: !7, line: 182, column: 7)
!218 = !DILocation(line: 182, column: 12, scope: !217)
!219 = !DILocation(line: 182, column: 19, scope: !220)
!220 = !DILexicalBlockFile(scope: !221, file: !7, discriminator: 2)
!221 = !DILexicalBlockFile(scope: !222, file: !7, discriminator: 1)
!222 = distinct !DILexicalBlock(scope: !217, file: !7, line: 182, column: 7)
!223 = !DILocation(line: 182, column: 23, scope: !222)
!224 = !DILocation(line: 182, column: 21, scope: !222)
!225 = !DILocation(line: 182, column: 7, scope: !217)
!226 = !DILocation(line: 183, column: 18, scope: !227)
!227 = distinct !DILexicalBlock(scope: !222, file: !7, line: 182, column: 40)
!228 = !DILocation(line: 183, column: 21, scope: !227)
!229 = !DILocation(line: 183, column: 24, scope: !227)
!230 = !DILocation(line: 183, column: 9, scope: !227)
!231 = !DILocation(line: 186, column: 7, scope: !227)
!232 = !DILocation(line: 182, column: 33, scope: !222)
!233 = !DILocation(line: 182, column: 30, scope: !222)
!234 = !DILocation(line: 182, column: 7, scope: !222)
!235 = !DILocation(line: 186, column: 7, scope: !217)
!236 = !DILocation(line: 181, column: 31, scope: !212)
!237 = !DILocation(line: 181, column: 28, scope: !212)
!238 = !DILocation(line: 181, column: 5, scope: !212)
!239 = !DILocation(line: 186, column: 7, scope: !207)
!240 = !DILocation(line: 180, column: 29, scope: !202)
!241 = !DILocation(line: 180, column: 26, scope: !202)
!242 = !DILocation(line: 180, column: 3, scope: !202)
!243 = !DILocation(line: 187, column: 1, scope: !18)
!244 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "I", arg: 1, scope: !19, file: !7, line: 189, type: !17)
!245 = !DILocation(line: 189, column: 18, scope: !19)
!246 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "J", arg: 2, scope: !19, file: !7, line: 189, type: !17)
!247 = !DILocation(line: 189, column: 25, scope: !19)
!248 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !19, file: !7, line: 190, type: !17)
!249 = !DILocation(line: 190, column: 7, scope: !19)
!250 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !19, file: !7, line: 190, type: !17)
!251 = !DILocation(line: 190, column: 10, scope: !19)
!252 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !19, file: !7, line: 191, type: !22)
!253 = !DILocation(line: 191, column: 9, scope: !19)
!254 = !DILocation(line: 193, column: 12, scope: !255)
!255 = distinct !DILexicalBlock(scope: !19, file: !7, line: 193, column: 3)
!256 = !DILocation(line: 193, column: 10, scope: !255)
!257 = !DILocation(line: 193, column: 8, scope: !255)
!258 = !DILocation(line: 193, column: 15, scope: !259)
!259 = !DILexicalBlockFile(scope: !260, file: !7, discriminator: 2)
!260 = !DILexicalBlockFile(scope: !261, file: !7, discriminator: 1)
!261 = distinct !DILexicalBlock(scope: !255, file: !7, line: 193, column: 3)
!262 = !DILocation(line: 193, column: 19, scope: !261)
!263 = !DILocation(line: 193, column: 23, scope: !261)
!264 = !DILocation(line: 193, column: 21, scope: !261)
!265 = !DILocation(line: 193, column: 17, scope: !261)
!266 = !DILocation(line: 193, column: 3, scope: !255)
!267 = !DILocation(line: 194, column: 14, scope: !268)
!268 = distinct !DILexicalBlock(scope: !261, file: !7, line: 194, column: 5)
!269 = !DILocation(line: 194, column: 12, scope: !268)
!270 = !DILocation(line: 194, column: 10, scope: !268)
!271 = !DILocation(line: 194, column: 17, scope: !272)
!272 = !DILexicalBlockFile(scope: !273, file: !7, discriminator: 2)
!273 = !DILexicalBlockFile(scope: !274, file: !7, discriminator: 1)
!274 = distinct !DILexicalBlock(scope: !268, file: !7, line: 194, column: 5)
!275 = !DILocation(line: 194, column: 21, scope: !274)
!276 = !DILocation(line: 194, column: 25, scope: !274)
!277 = !DILocation(line: 194, column: 23, scope: !274)
!278 = !DILocation(line: 194, column: 19, scope: !274)
!279 = !DILocation(line: 194, column: 5, scope: !268)
!280 = !DILocation(line: 195, column: 17, scope: !274)
!281 = !DILocation(line: 195, column: 12, scope: !274)
!282 = !DILocation(line: 195, column: 14, scope: !274)
!283 = !DILocation(line: 195, column: 9, scope: !274)
!284 = !DILocation(line: 195, column: 7, scope: !274)
!285 = !DILocation(line: 194, column: 33, scope: !274)
!286 = !DILocation(line: 194, column: 5, scope: !274)
!287 = !DILocation(line: 195, column: 18, scope: !268)
!288 = !DILocation(line: 193, column: 31, scope: !261)
!289 = !DILocation(line: 193, column: 3, scope: !261)
!290 = !DILocation(line: 196, column: 11, scope: !19)
!291 = !DILocation(line: 196, column: 3, scope: !19)
!292 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !23, file: !7, line: 200, type: !17)
!293 = !DILocation(line: 200, column: 7, scope: !23)
!294 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !23, file: !7, line: 200, type: !17)
!295 = !DILocation(line: 200, column: 10, scope: !23)
!296 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !23, file: !7, line: 201, type: !22)
!297 = !DILocation(line: 201, column: 9, scope: !23)
!298 = !DILocation(line: 203, column: 10, scope: !299)
!299 = distinct !DILexicalBlock(scope: !23, file: !7, line: 203, column: 3)
!300 = !DILocation(line: 203, column: 8, scope: !299)
!301 = !DILocation(line: 203, column: 15, scope: !302)
!302 = !DILexicalBlockFile(scope: !303, file: !7, discriminator: 2)
!303 = !DILexicalBlockFile(scope: !304, file: !7, discriminator: 1)
!304 = distinct !DILexicalBlock(scope: !299, file: !7, line: 203, column: 3)
!305 = !DILocation(line: 203, column: 19, scope: !304)
!306 = !DILocation(line: 203, column: 17, scope: !304)
!307 = !DILocation(line: 203, column: 3, scope: !299)
!308 = !DILocation(line: 204, column: 12, scope: !309)
!309 = distinct !DILexicalBlock(scope: !304, file: !7, line: 204, column: 5)
!310 = !DILocation(line: 204, column: 10, scope: !309)
!311 = !DILocation(line: 204, column: 17, scope: !312)
!312 = !DILexicalBlockFile(scope: !313, file: !7, discriminator: 2)
!313 = !DILexicalBlockFile(scope: !314, file: !7, discriminator: 1)
!314 = distinct !DILexicalBlock(scope: !309, file: !7, line: 204, column: 5)
!315 = !DILocation(line: 204, column: 21, scope: !314)
!316 = !DILocation(line: 204, column: 19, scope: !314)
!317 = !DILocation(line: 204, column: 5, scope: !309)
!318 = !DILocation(line: 205, column: 19, scope: !319)
!319 = distinct !DILexicalBlock(scope: !314, file: !7, line: 204, column: 38)
!320 = !DILocation(line: 205, column: 22, scope: !319)
!321 = !DILocation(line: 205, column: 12, scope: !319)
!322 = !DILocation(line: 205, column: 9, scope: !319)
!323 = !DILocation(line: 207, column: 5, scope: !319)
!324 = !DILocation(line: 204, column: 31, scope: !314)
!325 = !DILocation(line: 204, column: 28, scope: !314)
!326 = !DILocation(line: 204, column: 5, scope: !314)
!327 = !DILocation(line: 207, column: 5, scope: !309)
!328 = !DILocation(line: 203, column: 29, scope: !304)
!329 = !DILocation(line: 203, column: 26, scope: !304)
!330 = !DILocation(line: 203, column: 3, scope: !304)
!331 = !DILocation(line: 208, column: 10, scope: !23)
!332 = !DILocation(line: 208, column: 3, scope: !23)
!333 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !26, file: !7, line: 211, type: !17)
!334 = !DILocation(line: 211, column: 14, scope: !26)
!335 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !26, file: !7, line: 211, type: !29)
!336 = !DILocation(line: 211, column: 26, scope: !26)
!337 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !7, line: 212, type: !17)
!338 = !DILocation(line: 212, column: 7, scope: !26)
!339 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !26, file: !7, line: 212, type: !17)
!340 = !DILocation(line: 212, column: 10, scope: !26)
!341 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !26, file: !7, line: 212, type: !17)
!342 = !DILocation(line: 212, column: 13, scope: !26)
!343 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !26, file: !7, line: 213, type: !22)
!344 = !DILocation(line: 213, column: 9, scope: !26)
!345 = !DILocation(line: 215, column: 7, scope: !346)
!346 = distinct !DILexicalBlock(scope: !26, file: !7, line: 215, column: 7)
!347 = !DILocation(line: 215, column: 12, scope: !346)
!348 = !DILocation(line: 215, column: 7, scope: !26)
!349 = !DILocation(line: 216, column: 5, scope: !350)
!350 = distinct !DILexicalBlock(scope: !346, file: !7, line: 215, column: 18)
!351 = !DILocation(line: 217, column: 5, scope: !350)
!352 = !DILocation(line: 219, column: 14, scope: !26)
!353 = !DILocation(line: 219, column: 9, scope: !26)
!354 = !DILocation(line: 219, column: 7, scope: !26)
!355 = !DILocation(line: 220, column: 16, scope: !26)
!356 = !DILocation(line: 220, column: 11, scope: !26)
!357 = !DILocation(line: 220, column: 9, scope: !26)
!358 = !DILocation(line: 222, column: 18, scope: !359)
!359 = distinct !DILexicalBlock(scope: !26, file: !7, line: 222, column: 7)
!360 = !DILocation(line: 222, column: 22, scope: !359)
!361 = !DILocation(line: 222, column: 43, scope: !359)
!362 = !DILocation(line: 222, column: 61, scope: !359)
!363 = !DILocation(line: 222, column: 49, scope: !359)
!364 = !DILocation(line: 222, column: 30, scope: !359)
!365 = !DILocation(line: 222, column: 7, scope: !26)
!366 = !DILocation(line: 223, column: 5, scope: !367)
!367 = distinct !DILexicalBlock(scope: !359, file: !7, line: 222, column: 67)
!368 = !DILocation(line: 224, column: 5, scope: !367)
!369 = !DILocation(line: 227, column: 3, scope: !26)
!370 = !DILocation(line: 231, column: 3, scope: !26)
!371 = !DILocation(line: 234, column: 7, scope: !26)
!372 = !DILocation(line: 234, column: 5, scope: !26)
!373 = !DILocation(line: 235, column: 30, scope: !26)
!374 = !DILocation(line: 235, column: 3, scope: !26)
!375 = !DILocation(line: 236, column: 3, scope: !26)
!376 = !DILocation(line: 237, column: 1, scope: !26)
