; ModuleID = '/home/gleison/tf/Benchmarks/Trimaran/netbench-url/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@stderr = external global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [10 x i8] c"fatal: %s\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c" [%s:%s, line %d]\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: nounwind uwtable
define void @_fatal(i8* %file, i8* %func, i32 %line, i8* %fmt, ...) #0 {
entry:
  %file.addr = alloca i8*, align 8
  %func.addr = alloca i8*, align 8
  %line.addr = alloca i32, align 4
  %fmt.addr = alloca i8*, align 8
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !14, metadata !15), !dbg !16
  store i8* %func, i8** %func.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %func.addr, metadata !17, metadata !15), !dbg !18
  store i32 %line, i32* %line.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %line.addr, metadata !19, metadata !15), !dbg !20
  store i8* %fmt, i8** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fmt.addr, metadata !21, metadata !15), !dbg !22
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !23
  %1 = load i8*, i8** %fmt.addr, align 8, !dbg !24
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* %1), !dbg !25
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !26
  %3 = load i8*, i8** %func.addr, align 8, !dbg !27
  %4 = load i8*, i8** %file.addr, align 8, !dbg !28
  %5 = load i32, i32* %line.addr, align 4, !dbg !29
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i8* %3, i8* %4, i32 %5), !dbg !30
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !31
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0)), !dbg !32
  call void @exit(i32 1) #4, !dbg !33
  unreachable, !dbg !33

return:                                           ; No predecessors!
  ret void, !dbg !34
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!11, !12}
!llvm.ident = !{!13}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Trimaran/netbench-url")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "_fatal", scope: !5, file: !5, line: 21, type: !6, isLocal: false, isDefinition: true, scopeLine: 25, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*, i8*, i32, i8*, ...)* @_fatal, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Trimaran/netbench-url/tmp.c", directory: "/home/gleison/tf/Benchmarks/Trimaran/netbench-url")
!6 = !DISubroutineType(types: !7)
!7 = !{null, !8, !8, !10, !8, null}
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!9 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!10 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!11 = !{i32 2, !"Dwarf Version", i32 4}
!12 = !{i32 2, !"Debug Info Version", i32 3}
!13 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!14 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "file", arg: 1, scope: !4, file: !5, line: 21, type: !8)
!15 = !DIExpression()
!16 = !DILocation(line: 21, column: 19, scope: !4)
!17 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "func", arg: 2, scope: !4, file: !5, line: 21, type: !8)
!18 = !DILocation(line: 21, column: 31, scope: !4)
!19 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "line", arg: 3, scope: !4, file: !5, line: 21, type: !10)
!20 = !DILocation(line: 21, column: 41, scope: !4)
!21 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fmt", arg: 4, scope: !4, file: !5, line: 21, type: !8)
!22 = !DILocation(line: 21, column: 53, scope: !4)
!23 = !DILocation(line: 26, column: 11, scope: !4)
!24 = !DILocation(line: 26, column: 32, scope: !4)
!25 = !DILocation(line: 26, column: 3, scope: !4)
!26 = !DILocation(line: 28, column: 11, scope: !4)
!27 = !DILocation(line: 28, column: 40, scope: !4)
!28 = !DILocation(line: 28, column: 46, scope: !4)
!29 = !DILocation(line: 28, column: 52, scope: !4)
!30 = !DILocation(line: 28, column: 3, scope: !4)
!31 = !DILocation(line: 30, column: 11, scope: !4)
!32 = !DILocation(line: 30, column: 3, scope: !4)
!33 = !DILocation(line: 31, column: 3, scope: !4)
!34 = !DILocation(line: 32, column: 1, scope: !4)
