; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@cle = common global [32 x i8] zeroinitializer, align 16
@x1a0 = common global [16 x i16] zeroinitializer, align 16
@res = common global i16 0, align 2
@inter = common global i16 0, align 2
@i = common global i16 0, align 2
@x1a2 = common global i16 0, align 2
@dx = common global i16 0, align 2
@ax = common global i16 0, align 2
@cx = common global i16 0, align 2
@bx = common global i16 0, align 2
@tmp = common global i16 0, align 2
@si = common global i16 0, align 2
@.str = private unnamed_addr constant [33 x i8] c"abcdefghijklmnopqrstuvwxyz012345\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"PC1 Cipher 256 bits \0AENCRYPT file IN.BIN to OUT.BIN\0A\00", align 1
@buff = common global [32 x i8] zeroinitializer, align 16
@count = common global i32 0, align 4
@c1 = common global i32 0, align 4
@c = common global i16 0, align 2
@cfc = common global i16 0, align 2
@cfd = common global i16 0, align 2
@compte = common global i16 0, align 2
@d = common global i16 0, align 2
@e = common global i16 0, align 2
@.str.2 = private unnamed_addr constant [7 x i8] c"%d %d \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = common global %struct._IO_FILE* null, align 8

; Function Attrs: nounwind uwtable
define i32 @assemble() #0 {
entry:
  %tmp = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 0), align 1, !dbg !116
  %conv = zext i8 %tmp to i32, !dbg !116
  %mul = mul nsw i32 %conv, 256, !dbg !117
  %tmp1 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 1), align 1, !dbg !118
  %conv1 = zext i8 %tmp1 to i32, !dbg !118
  %add = add nsw i32 %mul, %conv1, !dbg !119
  %conv2 = trunc i32 %add to i16, !dbg !120
  store i16 %conv2, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 0), align 2, !dbg !121
  %call = call i32 @code(), !dbg !122
  %tmp2 = load i16, i16* @res, align 2, !dbg !123
  store i16 %tmp2, i16* @inter, align 2, !dbg !124
  %tmp3 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 0), align 2, !dbg !125
  %conv3 = zext i16 %tmp3 to i32, !dbg !125
  %tmp4 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 2), align 1, !dbg !126
  %conv4 = zext i8 %tmp4 to i32, !dbg !126
  %mul5 = mul nsw i32 %conv4, 256, !dbg !127
  %tmp5 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 3), align 1, !dbg !128
  %conv6 = zext i8 %tmp5 to i32, !dbg !128
  %add7 = add nsw i32 %mul5, %conv6, !dbg !129
  %xor = xor i32 %conv3, %add7, !dbg !130
  %conv8 = trunc i32 %xor to i16, !dbg !125
  store i16 %conv8, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 1), align 2, !dbg !131
  %call9 = call i32 @code(), !dbg !132
  %tmp6 = load i16, i16* @inter, align 2, !dbg !133
  %conv10 = zext i16 %tmp6 to i32, !dbg !133
  %tmp7 = load i16, i16* @res, align 2, !dbg !134
  %conv11 = zext i16 %tmp7 to i32, !dbg !134
  %xor12 = xor i32 %conv10, %conv11, !dbg !135
  %conv13 = trunc i32 %xor12 to i16, !dbg !133
  store i16 %conv13, i16* @inter, align 2, !dbg !136
  %tmp8 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 1), align 2, !dbg !137
  %conv14 = zext i16 %tmp8 to i32, !dbg !137
  %tmp9 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 4), align 1, !dbg !138
  %conv15 = zext i8 %tmp9 to i32, !dbg !138
  %mul16 = mul nsw i32 %conv15, 256, !dbg !139
  %tmp10 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 5), align 1, !dbg !140
  %conv17 = zext i8 %tmp10 to i32, !dbg !140
  %add18 = add nsw i32 %mul16, %conv17, !dbg !141
  %xor19 = xor i32 %conv14, %add18, !dbg !142
  %conv20 = trunc i32 %xor19 to i16, !dbg !137
  store i16 %conv20, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 2), align 2, !dbg !143
  %call21 = call i32 @code(), !dbg !144
  %tmp11 = load i16, i16* @inter, align 2, !dbg !145
  %conv22 = zext i16 %tmp11 to i32, !dbg !145
  %tmp12 = load i16, i16* @res, align 2, !dbg !146
  %conv23 = zext i16 %tmp12 to i32, !dbg !146
  %xor24 = xor i32 %conv22, %conv23, !dbg !147
  %conv25 = trunc i32 %xor24 to i16, !dbg !145
  store i16 %conv25, i16* @inter, align 2, !dbg !148
  %tmp13 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 2), align 2, !dbg !149
  %conv26 = zext i16 %tmp13 to i32, !dbg !149
  %tmp14 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 6), align 1, !dbg !150
  %conv27 = zext i8 %tmp14 to i32, !dbg !150
  %mul28 = mul nsw i32 %conv27, 256, !dbg !151
  %tmp15 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 7), align 1, !dbg !152
  %conv29 = zext i8 %tmp15 to i32, !dbg !152
  %add30 = add nsw i32 %mul28, %conv29, !dbg !153
  %xor31 = xor i32 %conv26, %add30, !dbg !154
  %conv32 = trunc i32 %xor31 to i16, !dbg !149
  store i16 %conv32, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 3), align 2, !dbg !155
  %call33 = call i32 @code(), !dbg !156
  %tmp16 = load i16, i16* @inter, align 2, !dbg !157
  %conv34 = zext i16 %tmp16 to i32, !dbg !157
  %tmp17 = load i16, i16* @res, align 2, !dbg !158
  %conv35 = zext i16 %tmp17 to i32, !dbg !158
  %xor36 = xor i32 %conv34, %conv35, !dbg !159
  %conv37 = trunc i32 %xor36 to i16, !dbg !157
  store i16 %conv37, i16* @inter, align 2, !dbg !160
  %tmp18 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 3), align 2, !dbg !161
  %conv38 = zext i16 %tmp18 to i32, !dbg !161
  %tmp19 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 8), align 1, !dbg !162
  %conv39 = zext i8 %tmp19 to i32, !dbg !162
  %mul40 = mul nsw i32 %conv39, 256, !dbg !163
  %tmp20 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 9), align 1, !dbg !164
  %conv41 = zext i8 %tmp20 to i32, !dbg !164
  %add42 = add nsw i32 %mul40, %conv41, !dbg !165
  %xor43 = xor i32 %conv38, %add42, !dbg !166
  %conv44 = trunc i32 %xor43 to i16, !dbg !161
  store i16 %conv44, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 4), align 2, !dbg !167
  %call45 = call i32 @code(), !dbg !168
  %tmp21 = load i16, i16* @inter, align 2, !dbg !169
  %conv46 = zext i16 %tmp21 to i32, !dbg !169
  %tmp22 = load i16, i16* @res, align 2, !dbg !170
  %conv47 = zext i16 %tmp22 to i32, !dbg !170
  %xor48 = xor i32 %conv46, %conv47, !dbg !171
  %conv49 = trunc i32 %xor48 to i16, !dbg !169
  store i16 %conv49, i16* @inter, align 2, !dbg !172
  %tmp23 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 4), align 2, !dbg !173
  %conv50 = zext i16 %tmp23 to i32, !dbg !173
  %tmp24 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 10), align 1, !dbg !174
  %conv51 = zext i8 %tmp24 to i32, !dbg !174
  %mul52 = mul nsw i32 %conv51, 256, !dbg !175
  %tmp25 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 11), align 1, !dbg !176
  %conv53 = zext i8 %tmp25 to i32, !dbg !176
  %add54 = add nsw i32 %mul52, %conv53, !dbg !177
  %xor55 = xor i32 %conv50, %add54, !dbg !178
  %conv56 = trunc i32 %xor55 to i16, !dbg !173
  store i16 %conv56, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 5), align 2, !dbg !179
  %call57 = call i32 @code(), !dbg !180
  %tmp26 = load i16, i16* @inter, align 2, !dbg !181
  %conv58 = zext i16 %tmp26 to i32, !dbg !181
  %tmp27 = load i16, i16* @res, align 2, !dbg !182
  %conv59 = zext i16 %tmp27 to i32, !dbg !182
  %xor60 = xor i32 %conv58, %conv59, !dbg !183
  %conv61 = trunc i32 %xor60 to i16, !dbg !181
  store i16 %conv61, i16* @inter, align 2, !dbg !184
  %tmp28 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 5), align 2, !dbg !185
  %conv62 = zext i16 %tmp28 to i32, !dbg !185
  %tmp29 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 12), align 1, !dbg !186
  %conv63 = zext i8 %tmp29 to i32, !dbg !186
  %mul64 = mul nsw i32 %conv63, 256, !dbg !187
  %tmp30 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 13), align 1, !dbg !188
  %conv65 = zext i8 %tmp30 to i32, !dbg !188
  %add66 = add nsw i32 %mul64, %conv65, !dbg !189
  %xor67 = xor i32 %conv62, %add66, !dbg !190
  %conv68 = trunc i32 %xor67 to i16, !dbg !185
  store i16 %conv68, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 6), align 2, !dbg !191
  %call69 = call i32 @code(), !dbg !192
  %tmp31 = load i16, i16* @inter, align 2, !dbg !193
  %conv70 = zext i16 %tmp31 to i32, !dbg !193
  %tmp32 = load i16, i16* @res, align 2, !dbg !194
  %conv71 = zext i16 %tmp32 to i32, !dbg !194
  %xor72 = xor i32 %conv70, %conv71, !dbg !195
  %conv73 = trunc i32 %xor72 to i16, !dbg !193
  store i16 %conv73, i16* @inter, align 2, !dbg !196
  %tmp33 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 6), align 2, !dbg !197
  %conv74 = zext i16 %tmp33 to i32, !dbg !197
  %tmp34 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 14), align 1, !dbg !198
  %conv75 = zext i8 %tmp34 to i32, !dbg !198
  %mul76 = mul nsw i32 %conv75, 256, !dbg !199
  %tmp35 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 15), align 1, !dbg !200
  %conv77 = zext i8 %tmp35 to i32, !dbg !200
  %add78 = add nsw i32 %mul76, %conv77, !dbg !201
  %xor79 = xor i32 %conv74, %add78, !dbg !202
  %conv80 = trunc i32 %xor79 to i16, !dbg !197
  store i16 %conv80, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 7), align 2, !dbg !203
  %call81 = call i32 @code(), !dbg !204
  %tmp36 = load i16, i16* @inter, align 2, !dbg !205
  %conv82 = zext i16 %tmp36 to i32, !dbg !205
  %tmp37 = load i16, i16* @res, align 2, !dbg !206
  %conv83 = zext i16 %tmp37 to i32, !dbg !206
  %xor84 = xor i32 %conv82, %conv83, !dbg !207
  %conv85 = trunc i32 %xor84 to i16, !dbg !205
  store i16 %conv85, i16* @inter, align 2, !dbg !208
  %tmp38 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 7), align 2, !dbg !209
  %conv86 = zext i16 %tmp38 to i32, !dbg !209
  %tmp39 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 16), align 1, !dbg !210
  %conv87 = zext i8 %tmp39 to i32, !dbg !210
  %mul88 = mul nsw i32 %conv87, 256, !dbg !211
  %tmp40 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 17), align 1, !dbg !212
  %conv89 = zext i8 %tmp40 to i32, !dbg !212
  %add90 = add nsw i32 %mul88, %conv89, !dbg !213
  %xor91 = xor i32 %conv86, %add90, !dbg !214
  %conv92 = trunc i32 %xor91 to i16, !dbg !209
  store i16 %conv92, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 8), align 2, !dbg !215
  %call93 = call i32 @code(), !dbg !216
  %tmp41 = load i16, i16* @inter, align 2, !dbg !217
  %conv94 = zext i16 %tmp41 to i32, !dbg !217
  %tmp42 = load i16, i16* @res, align 2, !dbg !218
  %conv95 = zext i16 %tmp42 to i32, !dbg !218
  %xor96 = xor i32 %conv94, %conv95, !dbg !219
  %conv97 = trunc i32 %xor96 to i16, !dbg !217
  store i16 %conv97, i16* @inter, align 2, !dbg !220
  %tmp43 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 8), align 2, !dbg !221
  %conv98 = zext i16 %tmp43 to i32, !dbg !221
  %tmp44 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 18), align 1, !dbg !222
  %conv99 = zext i8 %tmp44 to i32, !dbg !222
  %mul100 = mul nsw i32 %conv99, 256, !dbg !223
  %tmp45 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 19), align 1, !dbg !224
  %conv101 = zext i8 %tmp45 to i32, !dbg !224
  %add102 = add nsw i32 %mul100, %conv101, !dbg !225
  %xor103 = xor i32 %conv98, %add102, !dbg !226
  %conv104 = trunc i32 %xor103 to i16, !dbg !221
  store i16 %conv104, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 9), align 2, !dbg !227
  %call105 = call i32 @code(), !dbg !228
  %tmp46 = load i16, i16* @inter, align 2, !dbg !229
  %conv106 = zext i16 %tmp46 to i32, !dbg !229
  %tmp47 = load i16, i16* @res, align 2, !dbg !230
  %conv107 = zext i16 %tmp47 to i32, !dbg !230
  %xor108 = xor i32 %conv106, %conv107, !dbg !231
  %conv109 = trunc i32 %xor108 to i16, !dbg !229
  store i16 %conv109, i16* @inter, align 2, !dbg !232
  %tmp48 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 9), align 2, !dbg !233
  %conv110 = zext i16 %tmp48 to i32, !dbg !233
  %tmp49 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 20), align 1, !dbg !234
  %conv111 = zext i8 %tmp49 to i32, !dbg !234
  %mul112 = mul nsw i32 %conv111, 256, !dbg !235
  %tmp50 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 21), align 1, !dbg !236
  %conv113 = zext i8 %tmp50 to i32, !dbg !236
  %add114 = add nsw i32 %mul112, %conv113, !dbg !237
  %xor115 = xor i32 %conv110, %add114, !dbg !238
  %conv116 = trunc i32 %xor115 to i16, !dbg !233
  store i16 %conv116, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 10), align 2, !dbg !239
  %call117 = call i32 @code(), !dbg !240
  %tmp51 = load i16, i16* @inter, align 2, !dbg !241
  %conv118 = zext i16 %tmp51 to i32, !dbg !241
  %tmp52 = load i16, i16* @res, align 2, !dbg !242
  %conv119 = zext i16 %tmp52 to i32, !dbg !242
  %xor120 = xor i32 %conv118, %conv119, !dbg !243
  %conv121 = trunc i32 %xor120 to i16, !dbg !241
  store i16 %conv121, i16* @inter, align 2, !dbg !244
  %tmp53 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 10), align 2, !dbg !245
  %conv122 = zext i16 %tmp53 to i32, !dbg !245
  %tmp54 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 22), align 1, !dbg !246
  %conv123 = zext i8 %tmp54 to i32, !dbg !246
  %mul124 = mul nsw i32 %conv123, 256, !dbg !247
  %tmp55 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 23), align 1, !dbg !248
  %conv125 = zext i8 %tmp55 to i32, !dbg !248
  %add126 = add nsw i32 %mul124, %conv125, !dbg !249
  %xor127 = xor i32 %conv122, %add126, !dbg !250
  %conv128 = trunc i32 %xor127 to i16, !dbg !245
  store i16 %conv128, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 11), align 2, !dbg !251
  %call129 = call i32 @code(), !dbg !252
  %tmp56 = load i16, i16* @inter, align 2, !dbg !253
  %conv130 = zext i16 %tmp56 to i32, !dbg !253
  %tmp57 = load i16, i16* @res, align 2, !dbg !254
  %conv131 = zext i16 %tmp57 to i32, !dbg !254
  %xor132 = xor i32 %conv130, %conv131, !dbg !255
  %conv133 = trunc i32 %xor132 to i16, !dbg !253
  store i16 %conv133, i16* @inter, align 2, !dbg !256
  %tmp58 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 11), align 2, !dbg !257
  %conv134 = zext i16 %tmp58 to i32, !dbg !257
  %tmp59 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 24), align 1, !dbg !258
  %conv135 = zext i8 %tmp59 to i32, !dbg !258
  %mul136 = mul nsw i32 %conv135, 256, !dbg !259
  %tmp60 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 25), align 1, !dbg !260
  %conv137 = zext i8 %tmp60 to i32, !dbg !260
  %add138 = add nsw i32 %mul136, %conv137, !dbg !261
  %xor139 = xor i32 %conv134, %add138, !dbg !262
  %conv140 = trunc i32 %xor139 to i16, !dbg !257
  store i16 %conv140, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 12), align 2, !dbg !263
  %call141 = call i32 @code(), !dbg !264
  %tmp61 = load i16, i16* @inter, align 2, !dbg !265
  %conv142 = zext i16 %tmp61 to i32, !dbg !265
  %tmp62 = load i16, i16* @res, align 2, !dbg !266
  %conv143 = zext i16 %tmp62 to i32, !dbg !266
  %xor144 = xor i32 %conv142, %conv143, !dbg !267
  %conv145 = trunc i32 %xor144 to i16, !dbg !265
  store i16 %conv145, i16* @inter, align 2, !dbg !268
  %tmp63 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 12), align 2, !dbg !269
  %conv146 = zext i16 %tmp63 to i32, !dbg !269
  %tmp64 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 26), align 1, !dbg !270
  %conv147 = zext i8 %tmp64 to i32, !dbg !270
  %mul148 = mul nsw i32 %conv147, 256, !dbg !271
  %tmp65 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 27), align 1, !dbg !272
  %conv149 = zext i8 %tmp65 to i32, !dbg !272
  %add150 = add nsw i32 %mul148, %conv149, !dbg !273
  %xor151 = xor i32 %conv146, %add150, !dbg !274
  %conv152 = trunc i32 %xor151 to i16, !dbg !269
  store i16 %conv152, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 13), align 2, !dbg !275
  %call153 = call i32 @code(), !dbg !276
  %tmp66 = load i16, i16* @inter, align 2, !dbg !277
  %conv154 = zext i16 %tmp66 to i32, !dbg !277
  %tmp67 = load i16, i16* @res, align 2, !dbg !278
  %conv155 = zext i16 %tmp67 to i32, !dbg !278
  %xor156 = xor i32 %conv154, %conv155, !dbg !279
  %conv157 = trunc i32 %xor156 to i16, !dbg !277
  store i16 %conv157, i16* @inter, align 2, !dbg !280
  %tmp68 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 13), align 2, !dbg !281
  %conv158 = zext i16 %tmp68 to i32, !dbg !281
  %tmp69 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 28), align 1, !dbg !282
  %conv159 = zext i8 %tmp69 to i32, !dbg !282
  %mul160 = mul nsw i32 %conv159, 256, !dbg !283
  %tmp70 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 29), align 1, !dbg !284
  %conv161 = zext i8 %tmp70 to i32, !dbg !284
  %add162 = add nsw i32 %mul160, %conv161, !dbg !285
  %xor163 = xor i32 %conv158, %add162, !dbg !286
  %conv164 = trunc i32 %xor163 to i16, !dbg !281
  store i16 %conv164, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 14), align 2, !dbg !287
  %call165 = call i32 @code(), !dbg !288
  %tmp71 = load i16, i16* @inter, align 2, !dbg !289
  %conv166 = zext i16 %tmp71 to i32, !dbg !289
  %tmp72 = load i16, i16* @res, align 2, !dbg !290
  %conv167 = zext i16 %tmp72 to i32, !dbg !290
  %xor168 = xor i32 %conv166, %conv167, !dbg !291
  %conv169 = trunc i32 %xor168 to i16, !dbg !289
  store i16 %conv169, i16* @inter, align 2, !dbg !292
  %tmp73 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 14), align 2, !dbg !293
  %conv170 = zext i16 %tmp73 to i32, !dbg !293
  %tmp74 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 30), align 1, !dbg !294
  %conv171 = zext i8 %tmp74 to i32, !dbg !294
  %mul172 = mul nsw i32 %conv171, 256, !dbg !295
  %tmp75 = load i8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i64 31), align 1, !dbg !296
  %conv173 = zext i8 %tmp75 to i32, !dbg !296
  %add174 = add nsw i32 %mul172, %conv173, !dbg !297
  %xor175 = xor i32 %conv170, %add174, !dbg !298
  %conv176 = trunc i32 %xor175 to i16, !dbg !293
  store i16 %conv176, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @x1a0, i32 0, i64 15), align 2, !dbg !299
  %call177 = call i32 @code(), !dbg !300
  %tmp76 = load i16, i16* @inter, align 2, !dbg !301
  %conv178 = zext i16 %tmp76 to i32, !dbg !301
  %tmp77 = load i16, i16* @res, align 2, !dbg !302
  %conv179 = zext i16 %tmp77 to i32, !dbg !302
  %xor180 = xor i32 %conv178, %conv179, !dbg !303
  %conv181 = trunc i32 %xor180 to i16, !dbg !301
  store i16 %conv181, i16* @inter, align 2, !dbg !304
  store i16 0, i16* @i, align 2, !dbg !305
  ret i32 0, !dbg !306
}

; Function Attrs: nounwind uwtable
define i32 @code() #0 {
entry:
  %tmp = load i16, i16* @x1a2, align 2, !dbg !307
  %conv = zext i16 %tmp to i32, !dbg !307
  %tmp1 = load i16, i16* @i, align 2, !dbg !308
  %conv1 = zext i16 %tmp1 to i32, !dbg !308
  %add = add nsw i32 %conv, %conv1, !dbg !309
  %conv2 = trunc i32 %add to i16, !dbg !307
  store i16 %conv2, i16* @dx, align 2, !dbg !310
  %tmp2 = load i16, i16* @i, align 2, !dbg !311
  %idxprom = zext i16 %tmp2 to i64, !dbg !312
  %arrayidx = getelementptr inbounds [16 x i16], [16 x i16]* @x1a0, i32 0, i64 %idxprom, !dbg !312
  %tmp3 = load i16, i16* %arrayidx, align 2, !dbg !312
  store i16 %tmp3, i16* @ax, align 2, !dbg !313
  store i16 346, i16* @cx, align 2, !dbg !314
  store i16 20021, i16* @bx, align 2, !dbg !315
  %tmp4 = load i16, i16* @ax, align 2, !dbg !316
  store i16 %tmp4, i16* @tmp, align 2, !dbg !317
  %tmp5 = load i16, i16* @si, align 2, !dbg !318
  store i16 %tmp5, i16* @ax, align 2, !dbg !319
  %tmp6 = load i16, i16* @tmp, align 2, !dbg !320
  store i16 %tmp6, i16* @si, align 2, !dbg !321
  %tmp7 = load i16, i16* @ax, align 2, !dbg !322
  store i16 %tmp7, i16* @tmp, align 2, !dbg !323
  %tmp8 = load i16, i16* @dx, align 2, !dbg !324
  store i16 %tmp8, i16* @ax, align 2, !dbg !325
  %tmp9 = load i16, i16* @tmp, align 2, !dbg !326
  store i16 %tmp9, i16* @dx, align 2, !dbg !327
  %tmp10 = load i16, i16* @ax, align 2, !dbg !328
  %conv3 = zext i16 %tmp10 to i32, !dbg !328
  %cmp = icmp ne i32 %conv3, 0, !dbg !330
  br i1 %cmp, label %if.then, label %if.end, !dbg !331

if.then:                                          ; preds = %entry
  %tmp11 = load i16, i16* @ax, align 2, !dbg !332
  %conv5 = zext i16 %tmp11 to i32, !dbg !332
  %tmp12 = load i16, i16* @bx, align 2, !dbg !334
  %conv6 = zext i16 %tmp12 to i32, !dbg !334
  %mul = mul nsw i32 %conv5, %conv6, !dbg !335
  %conv7 = trunc i32 %mul to i16, !dbg !332
  store i16 %conv7, i16* @ax, align 2, !dbg !336
  br label %if.end, !dbg !337

if.end:                                           ; preds = %if.then, %entry
  %tmp13 = load i16, i16* @ax, align 2, !dbg !338
  store i16 %tmp13, i16* @tmp, align 2, !dbg !339
  %tmp14 = load i16, i16* @cx, align 2, !dbg !340
  store i16 %tmp14, i16* @ax, align 2, !dbg !341
  %tmp15 = load i16, i16* @tmp, align 2, !dbg !342
  store i16 %tmp15, i16* @cx, align 2, !dbg !343
  %tmp16 = load i16, i16* @ax, align 2, !dbg !344
  %conv8 = zext i16 %tmp16 to i32, !dbg !344
  %cmp9 = icmp ne i32 %conv8, 0, !dbg !346
  br i1 %cmp9, label %if.then.11, label %if.end.20, !dbg !347

if.then.11:                                       ; preds = %if.end
  %tmp17 = load i16, i16* @ax, align 2, !dbg !348
  %conv12 = zext i16 %tmp17 to i32, !dbg !348
  %tmp18 = load i16, i16* @si, align 2, !dbg !350
  %conv13 = zext i16 %tmp18 to i32, !dbg !350
  %mul14 = mul nsw i32 %conv12, %conv13, !dbg !351
  %conv15 = trunc i32 %mul14 to i16, !dbg !348
  store i16 %conv15, i16* @ax, align 2, !dbg !352
  %tmp19 = load i16, i16* @ax, align 2, !dbg !353
  %conv16 = zext i16 %tmp19 to i32, !dbg !353
  %tmp20 = load i16, i16* @cx, align 2, !dbg !354
  %conv17 = zext i16 %tmp20 to i32, !dbg !354
  %add18 = add nsw i32 %conv16, %conv17, !dbg !355
  %conv19 = trunc i32 %add18 to i16, !dbg !353
  store i16 %conv19, i16* @cx, align 2, !dbg !356
  br label %if.end.20, !dbg !357

if.end.20:                                        ; preds = %if.then.11, %if.end
  %tmp21 = load i16, i16* @ax, align 2, !dbg !358
  store i16 %tmp21, i16* @tmp, align 2, !dbg !359
  %tmp22 = load i16, i16* @si, align 2, !dbg !360
  store i16 %tmp22, i16* @ax, align 2, !dbg !361
  %tmp23 = load i16, i16* @tmp, align 2, !dbg !362
  store i16 %tmp23, i16* @si, align 2, !dbg !363
  %tmp24 = load i16, i16* @ax, align 2, !dbg !364
  %conv21 = zext i16 %tmp24 to i32, !dbg !364
  %tmp25 = load i16, i16* @bx, align 2, !dbg !365
  %conv22 = zext i16 %tmp25 to i32, !dbg !365
  %mul23 = mul nsw i32 %conv21, %conv22, !dbg !366
  %conv24 = trunc i32 %mul23 to i16, !dbg !364
  store i16 %conv24, i16* @ax, align 2, !dbg !367
  %tmp26 = load i16, i16* @cx, align 2, !dbg !368
  %conv25 = zext i16 %tmp26 to i32, !dbg !368
  %tmp27 = load i16, i16* @dx, align 2, !dbg !369
  %conv26 = zext i16 %tmp27 to i32, !dbg !369
  %add27 = add nsw i32 %conv25, %conv26, !dbg !370
  %conv28 = trunc i32 %add27 to i16, !dbg !368
  store i16 %conv28, i16* @dx, align 2, !dbg !371
  %tmp28 = load i16, i16* @ax, align 2, !dbg !372
  %conv29 = zext i16 %tmp28 to i32, !dbg !372
  %add30 = add nsw i32 %conv29, 1, !dbg !373
  %conv31 = trunc i32 %add30 to i16, !dbg !372
  store i16 %conv31, i16* @ax, align 2, !dbg !374
  %tmp29 = load i16, i16* @dx, align 2, !dbg !375
  store i16 %tmp29, i16* @x1a2, align 2, !dbg !376
  %tmp30 = load i16, i16* @ax, align 2, !dbg !377
  %tmp31 = load i16, i16* @i, align 2, !dbg !378
  %idxprom32 = zext i16 %tmp31 to i64, !dbg !379
  %arrayidx33 = getelementptr inbounds [16 x i16], [16 x i16]* @x1a0, i32 0, i64 %idxprom32, !dbg !379
  store i16 %tmp30, i16* %arrayidx33, align 2, !dbg !380
  %tmp32 = load i16, i16* @ax, align 2, !dbg !381
  %conv34 = zext i16 %tmp32 to i32, !dbg !381
  %tmp33 = load i16, i16* @dx, align 2, !dbg !382
  %conv35 = zext i16 %tmp33 to i32, !dbg !382
  %xor = xor i32 %conv34, %conv35, !dbg !383
  %conv36 = trunc i32 %xor to i16, !dbg !381
  store i16 %conv36, i16* @res, align 2, !dbg !384
  %tmp34 = load i16, i16* @i, align 2, !dbg !385
  %conv37 = zext i16 %tmp34 to i32, !dbg !385
  %add38 = add nsw i32 %conv37, 1, !dbg !386
  %conv39 = trunc i32 %add38 to i16, !dbg !385
  store i16 %conv39, i16* @i, align 2, !dbg !387
  ret i32 0, !dbg !388
}

; Function Attrs: nounwind uwtable
define i32 @my_rand_r(i32* %seedp) #0 {
entry:
  call void @llvm.dbg.value(metadata i32* %seedp, i64 0, metadata !389, metadata !390), !dbg !391
  %tmp1 = load i32, i32* %seedp, align 4, !dbg !392
  %mul = mul nsw i32 %tmp1, 1664525, !dbg !393
  %add = add nsw i32 %mul, 1013904223, !dbg !394
  call void @llvm.dbg.value(metadata i32 %add, i64 0, metadata !395, metadata !390), !dbg !397
  store i32 %add, i32* %seedp, align 4, !dbg !398
  %shr = lshr i32 %add, 16, !dbg !399
  %and = and i32 %shr, 32767, !dbg !400
  ret i32 %and, !dbg !401
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %random_seed = alloca i32, align 4
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !402, metadata !390), !dbg !403
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !404, metadata !390), !dbg !405
  call void @llvm.dbg.value(metadata i32 20000, i64 0, metadata !406, metadata !390), !dbg !407
  call void @llvm.dbg.declare(metadata i32* %random_seed, metadata !408, metadata !390), !dbg !409
  store i32 1, i32* %random_seed, align 4, !dbg !409
  %cmp = icmp eq i32 %argc, 2, !dbg !410
  br i1 %cmp, label %if.then, label %if.end, !dbg !412

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !413
  %tmp2 = load i8*, i8** %arrayidx, align 8, !dbg !413
  %call = call i32 @atoi(i8* %tmp2) #5, !dbg !414
  call void @llvm.dbg.value(metadata i32 %call, i64 0, metadata !406, metadata !390), !dbg !407
  br label %if.end, !dbg !415

if.end:                                           ; preds = %if.then, %entry
  %NumInput.0 = phi i32 [ %call, %if.then ], [ 20000, %entry ]
  store i16 0, i16* @si, align 2, !dbg !416
  store i16 0, i16* @x1a2, align 2, !dbg !417
  store i16 0, i16* @i, align 2, !dbg !418
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @cle, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i32 0, i32 0), i64 32, i32 1, i1 false), !dbg !419
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i32 0, i32 0)), !dbg !420
  store i8 0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @buff, i32 0, i64 1), align 1, !dbg !421
  %call2 = call i64 @strlen(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @buff, i32 0, i32 0)) #5, !dbg !422
  %cmp3 = icmp ugt i64 %call2, 32, !dbg !424
  br i1 %cmp3, label %if.then.4, label %if.else, !dbg !425

if.then.4:                                        ; preds = %if.end
  store i32 32, i32* @count, align 4, !dbg !426
  br label %if.end.6, !dbg !428

if.else:                                          ; preds = %if.end
  %call5 = call i64 @strlen(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @buff, i32 0, i32 0)) #5, !dbg !429
  %conv = trunc i64 %call5 to i32, !dbg !429
  store i32 %conv, i32* @count, align 4, !dbg !431
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.4
  store i32 0, i32* @c1, align 4, !dbg !432
  br label %for.cond, !dbg !434

for.cond:                                         ; preds = %for.inc, %if.end.6
  %tmp3 = load i32, i32* @c1, align 4, !dbg !435
  %tmp4 = load i32, i32* @count, align 4, !dbg !439
  %cmp7 = icmp slt i32 %tmp3, %tmp4, !dbg !440
  br i1 %cmp7, label %for.body, label %for.end, !dbg !441

for.body:                                         ; preds = %for.cond
  %tmp5 = load i32, i32* @c1, align 4, !dbg !442
  %idxprom = sext i32 %tmp5 to i64, !dbg !444
  %arrayidx9 = getelementptr inbounds [32 x i8], [32 x i8]* @buff, i32 0, i64 %idxprom, !dbg !444
  %tmp6 = load i8, i8* %arrayidx9, align 1, !dbg !444
  %tmp7 = load i32, i32* @c1, align 4, !dbg !445
  %idxprom10 = sext i32 %tmp7 to i64, !dbg !446
  %arrayidx11 = getelementptr inbounds [32 x i8], [32 x i8]* @cle, i32 0, i64 %idxprom10, !dbg !446
  store i8 %tmp6, i8* %arrayidx11, align 1, !dbg !447
  br label %for.inc, !dbg !448

for.inc:                                          ; preds = %for.body
  %tmp8 = load i32, i32* @c1, align 4, !dbg !449
  %inc = add nsw i32 %tmp8, 1, !dbg !449
  store i32 %inc, i32* @c1, align 4, !dbg !449
  br label %for.cond, !dbg !450

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !451, metadata !390), !dbg !452
  br label %while.cond, !dbg !453

while.cond:                                       ; preds = %if.end.54, %for.end
  %NumInput.1 = phi i32 [ %NumInput.0, %for.end ], [ %dec, %if.end.54 ]
  %Print.0 = phi i32 [ 0, %for.end ], [ %inc46, %if.end.54 ]
  %dec = add nsw i32 %NumInput.1, -1, !dbg !454
  call void @llvm.dbg.value(metadata i32 %dec, i64 0, metadata !406, metadata !390), !dbg !407
  %tobool = icmp ne i32 %dec, 0, !dbg !453
  br i1 %tobool, label %while.body, label %while.end, !dbg !453

while.body:                                       ; preds = %while.cond
  %call12 = call i32 @my_rand_r(i32* %random_seed), !dbg !457
  %conv13 = trunc i32 %call12 to i16, !dbg !457
  store i16 %conv13, i16* @c, align 2, !dbg !459
  %call14 = call i32 @assemble(), !dbg !460
  %tmp10 = load i16, i16* @inter, align 2, !dbg !461
  %conv15 = zext i16 %tmp10 to i32, !dbg !461
  %shr = ashr i32 %conv15, 8, !dbg !462
  %conv16 = trunc i32 %shr to i16, !dbg !461
  store i16 %conv16, i16* @cfc, align 2, !dbg !463
  %tmp11 = load i16, i16* @inter, align 2, !dbg !464
  %conv17 = zext i16 %tmp11 to i32, !dbg !464
  %and = and i32 %conv17, 255, !dbg !465
  %conv18 = trunc i32 %and to i16, !dbg !464
  store i16 %conv18, i16* @cfd, align 2, !dbg !466
  store i16 0, i16* @compte, align 2, !dbg !467
  br label %for.cond.19, !dbg !469

for.cond.19:                                      ; preds = %for.inc.31, %while.body
  %tmp12 = load i16, i16* @compte, align 2, !dbg !470
  %conv20 = zext i16 %tmp12 to i32, !dbg !470
  %cmp21 = icmp sle i32 %conv20, 31, !dbg !474
  br i1 %cmp21, label %for.body.23, label %for.end.33, !dbg !475

for.body.23:                                      ; preds = %for.cond.19
  %tmp13 = load i16, i16* @compte, align 2, !dbg !476
  %idxprom24 = zext i16 %tmp13 to i64, !dbg !478
  %arrayidx25 = getelementptr inbounds [32 x i8], [32 x i8]* @cle, i32 0, i64 %idxprom24, !dbg !478
  %tmp14 = load i8, i8* %arrayidx25, align 1, !dbg !478
  %conv26 = zext i8 %tmp14 to i32, !dbg !478
  %tmp15 = load i16, i16* @c, align 2, !dbg !479
  %conv27 = sext i16 %tmp15 to i32, !dbg !479
  %xor = xor i32 %conv26, %conv27, !dbg !480
  %conv28 = trunc i32 %xor to i8, !dbg !478
  %tmp16 = load i16, i16* @compte, align 2, !dbg !481
  %idxprom29 = zext i16 %tmp16 to i64, !dbg !482
  %arrayidx30 = getelementptr inbounds [32 x i8], [32 x i8]* @cle, i32 0, i64 %idxprom29, !dbg !482
  store i8 %conv28, i8* %arrayidx30, align 1, !dbg !483
  br label %for.inc.31, !dbg !484

for.inc.31:                                       ; preds = %for.body.23
  %tmp17 = load i16, i16* @compte, align 2, !dbg !485
  %inc32 = add i16 %tmp17, 1, !dbg !485
  store i16 %inc32, i16* @compte, align 2, !dbg !485
  br label %for.cond.19, !dbg !486

for.end.33:                                       ; preds = %for.cond.19
  %tmp18 = load i16, i16* @c, align 2, !dbg !487
  %conv34 = sext i16 %tmp18 to i32, !dbg !487
  %tmp19 = load i16, i16* @cfc, align 2, !dbg !488
  %conv35 = zext i16 %tmp19 to i32, !dbg !488
  %tmp20 = load i16, i16* @cfd, align 2, !dbg !489
  %conv36 = zext i16 %tmp20 to i32, !dbg !489
  %xor37 = xor i32 %conv35, %conv36, !dbg !490
  %xor38 = xor i32 %conv34, %xor37, !dbg !491
  %conv39 = trunc i32 %xor38 to i16, !dbg !487
  store i16 %conv39, i16* @c, align 2, !dbg !492
  %tmp21 = load i16, i16* @c, align 2, !dbg !493
  %conv40 = sext i16 %tmp21 to i32, !dbg !493
  %shr41 = ashr i32 %conv40, 4, !dbg !494
  %conv42 = trunc i32 %shr41 to i16, !dbg !495
  store i16 %conv42, i16* @d, align 2, !dbg !496
  %tmp22 = load i16, i16* @c, align 2, !dbg !497
  %conv43 = sext i16 %tmp22 to i32, !dbg !497
  %and44 = and i32 %conv43, 15, !dbg !498
  %conv45 = trunc i32 %and44 to i16, !dbg !499
  store i16 %conv45, i16* @e, align 2, !dbg !500
  %inc46 = add nsw i32 %Print.0, 1, !dbg !501
  call void @llvm.dbg.value(metadata i32 %inc46, i64 0, metadata !451, metadata !390), !dbg !452
  %and47 = and i32 %inc46, 2047, !dbg !503
  %cmp48 = icmp eq i32 %and47, 0, !dbg !504
  br i1 %cmp48, label %if.then.50, label %if.end.54, !dbg !505

if.then.50:                                       ; preds = %for.end.33
  %tmp24 = load i16, i16* @d, align 2, !dbg !506
  %conv51 = sext i16 %tmp24 to i32, !dbg !506
  %tmp25 = load i16, i16* @e, align 2, !dbg !507
  %conv52 = sext i16 %tmp25 to i32, !dbg !507
  %call53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i32 %conv51, i32 %conv52), !dbg !508
  br label %if.end.54, !dbg !508

if.end.54:                                        ; preds = %if.then.50, %for.end.33
  br label %while.cond, !dbg !453

while.end:                                        ; preds = %while.cond
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !509
  ret i32 0, !dbg !510
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #2

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

declare i32 @printf(i8*, ...) #4

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!113, !114}
!llvm.ident = !{!115}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3, globals: !21)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Trimaran/enc-pc1")
!2 = !{}
!3 = !{!4, !9, !10, !14}
!4 = !DISubprogram(name: "assemble", scope: !5, file: !5, line: 36, type: !6, isLocal: false, isDefinition: true, scopeLine: 36, isOptimized: false, function: i32 ()* @assemble, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Trimaran/enc-pc1/tmp.c", directory: "/home/gleison/tf/Benchmarks/Trimaran/enc-pc1")
!6 = !DISubroutineType(types: !7)
!7 = !{!8}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DISubprogram(name: "code", scope: !5, file: !5, line: 139, type: !6, isLocal: false, isDefinition: true, scopeLine: 139, isOptimized: false, function: i32 ()* @code, variables: !2)
!10 = !DISubprogram(name: "my_rand_r", scope: !5, file: !5, line: 207, type: !11, isLocal: false, isDefinition: true, scopeLine: 207, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32*)* @my_rand_r, variables: !2)
!11 = !DISubroutineType(types: !12)
!12 = !{!8, !13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!14 = !DISubprogram(name: "main", scope: !5, file: !5, line: 214, type: !15, isLocal: false, isDefinition: true, scopeLine: 214, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!15 = !DISubroutineType(types: !16)
!16 = !{!8, !8, !17}
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64, align: 64)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64, align: 64)
!19 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !20)
!20 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!21 = !{!22, !24, !25, !26, !27, !28, !29, !30, !34, !35, !36, !37, !38, !39, !40, !45, !46, !48, !49, !50, !51, !52}
!22 = !DIGlobalVariable(name: "ax", scope: !0, file: !5, line: 18, type: !23, isLocal: false, isDefinition: true, variable: i16* @ax)
!23 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!24 = !DIGlobalVariable(name: "bx", scope: !0, file: !5, line: 18, type: !23, isLocal: false, isDefinition: true, variable: i16* @bx)
!25 = !DIGlobalVariable(name: "cx", scope: !0, file: !5, line: 18, type: !23, isLocal: false, isDefinition: true, variable: i16* @cx)
!26 = !DIGlobalVariable(name: "dx", scope: !0, file: !5, line: 18, type: !23, isLocal: false, isDefinition: true, variable: i16* @dx)
!27 = !DIGlobalVariable(name: "si", scope: !0, file: !5, line: 18, type: !23, isLocal: false, isDefinition: true, variable: i16* @si)
!28 = !DIGlobalVariable(name: "tmp", scope: !0, file: !5, line: 18, type: !23, isLocal: false, isDefinition: true, variable: i16* @tmp)
!29 = !DIGlobalVariable(name: "x1a2", scope: !0, file: !5, line: 18, type: !23, isLocal: false, isDefinition: true, variable: i16* @x1a2)
!30 = !DIGlobalVariable(name: "x1a0", scope: !0, file: !5, line: 18, type: !31, isLocal: false, isDefinition: true, variable: [16 x i16]* @x1a0)
!31 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 256, align: 16, elements: !32)
!32 = !{!33}
!33 = !DISubrange(count: 16)
!34 = !DIGlobalVariable(name: "res", scope: !0, file: !5, line: 18, type: !23, isLocal: false, isDefinition: true, variable: i16* @res)
!35 = !DIGlobalVariable(name: "i", scope: !0, file: !5, line: 18, type: !23, isLocal: false, isDefinition: true, variable: i16* @i)
!36 = !DIGlobalVariable(name: "inter", scope: !0, file: !5, line: 19, type: !23, isLocal: false, isDefinition: true, variable: i16* @inter)
!37 = !DIGlobalVariable(name: "cfc", scope: !0, file: !5, line: 19, type: !23, isLocal: false, isDefinition: true, variable: i16* @cfc)
!38 = !DIGlobalVariable(name: "cfd", scope: !0, file: !5, line: 19, type: !23, isLocal: false, isDefinition: true, variable: i16* @cfd)
!39 = !DIGlobalVariable(name: "compte", scope: !0, file: !5, line: 19, type: !23, isLocal: false, isDefinition: true, variable: i16* @compte)
!40 = !DIGlobalVariable(name: "cle", scope: !0, file: !5, line: 21, type: !41, isLocal: false, isDefinition: true, variable: [32 x i8]* @cle)
!41 = !DICompositeType(tag: DW_TAG_array_type, baseType: !42, size: 256, align: 8, elements: !43)
!42 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!43 = !{!44}
!44 = !DISubrange(count: 32)
!45 = !DIGlobalVariable(name: "buff", scope: !0, file: !5, line: 24, type: !41, isLocal: false, isDefinition: true, variable: [32 x i8]* @buff)
!46 = !DIGlobalVariable(name: "c", scope: !0, file: !5, line: 26, type: !47, isLocal: false, isDefinition: true, variable: i16* @c)
!47 = !DIBasicType(name: "short", size: 16, align: 16, encoding: DW_ATE_signed)
!48 = !DIGlobalVariable(name: "c1", scope: !0, file: !5, line: 28, type: !8, isLocal: false, isDefinition: true, variable: i32* @c1)
!49 = !DIGlobalVariable(name: "count", scope: !0, file: !5, line: 28, type: !8, isLocal: false, isDefinition: true, variable: i32* @count)
!50 = !DIGlobalVariable(name: "d", scope: !0, file: !5, line: 30, type: !47, isLocal: false, isDefinition: true, variable: i16* @d)
!51 = !DIGlobalVariable(name: "e", scope: !0, file: !5, line: 30, type: !47, isLocal: false, isDefinition: true, variable: i16* @e)
!52 = !DIGlobalVariable(name: "in", scope: !0, file: !5, line: 32, type: !53, isLocal: false, isDefinition: true, variable: %struct._IO_FILE** @in)
!53 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !54, size: 64, align: 64)
!54 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !55, line: 48, baseType: !56)
!55 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/gleison/tf/Benchmarks/Trimaran/enc-pc1")
!56 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !57, line: 241, size: 1728, align: 64, elements: !58)
!57 = !DIFile(filename: "/usr/include/libio.h", directory: "/home/gleison/tf/Benchmarks/Trimaran/enc-pc1")
!58 = !{!59, !60, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !80, !81, !82, !83, !87, !88, !90, !94, !97, !99, !101, !102, !103, !104, !108, !109}
!59 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !56, file: !57, line: 242, baseType: !8, size: 32, align: 32)
!60 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !56, file: !57, line: 247, baseType: !61, size: 64, align: 64, offset: 64)
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64, align: 64)
!62 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !56, file: !57, line: 248, baseType: !61, size: 64, align: 64, offset: 128)
!63 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !56, file: !57, line: 249, baseType: !61, size: 64, align: 64, offset: 192)
!64 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !56, file: !57, line: 250, baseType: !61, size: 64, align: 64, offset: 256)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !56, file: !57, line: 251, baseType: !61, size: 64, align: 64, offset: 320)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !56, file: !57, line: 252, baseType: !61, size: 64, align: 64, offset: 384)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !56, file: !57, line: 253, baseType: !61, size: 64, align: 64, offset: 448)
!68 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !56, file: !57, line: 254, baseType: !61, size: 64, align: 64, offset: 512)
!69 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !56, file: !57, line: 256, baseType: !61, size: 64, align: 64, offset: 576)
!70 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !56, file: !57, line: 257, baseType: !61, size: 64, align: 64, offset: 640)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !56, file: !57, line: 258, baseType: !61, size: 64, align: 64, offset: 704)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !56, file: !57, line: 260, baseType: !73, size: 64, align: 64, offset: 768)
!73 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !74, size: 64, align: 64)
!74 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !57, line: 156, size: 192, align: 64, elements: !75)
!75 = !{!76, !77, !79}
!76 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !74, file: !57, line: 157, baseType: !73, size: 64, align: 64)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !74, file: !57, line: 158, baseType: !78, size: 64, align: 64, offset: 64)
!78 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !56, size: 64, align: 64)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !74, file: !57, line: 162, baseType: !8, size: 32, align: 32, offset: 128)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !56, file: !57, line: 262, baseType: !78, size: 64, align: 64, offset: 832)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !56, file: !57, line: 264, baseType: !8, size: 32, align: 32, offset: 896)
!82 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !56, file: !57, line: 268, baseType: !8, size: 32, align: 32, offset: 928)
!83 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !56, file: !57, line: 270, baseType: !84, size: 64, align: 64, offset: 960)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !85, line: 131, baseType: !86)
!85 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/gleison/tf/Benchmarks/Trimaran/enc-pc1")
!86 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!87 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !56, file: !57, line: 274, baseType: !23, size: 16, align: 16, offset: 1024)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !56, file: !57, line: 275, baseType: !89, size: 8, align: 8, offset: 1040)
!89 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !56, file: !57, line: 276, baseType: !91, size: 8, align: 8, offset: 1048)
!91 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 8, align: 8, elements: !92)
!92 = !{!93}
!93 = !DISubrange(count: 1)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !56, file: !57, line: 280, baseType: !95, size: 64, align: 64, offset: 1088)
!95 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !96, size: 64, align: 64)
!96 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !57, line: 150, baseType: null)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !56, file: !57, line: 289, baseType: !98, size: 64, align: 64, offset: 1152)
!98 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !85, line: 132, baseType: !86)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !56, file: !57, line: 297, baseType: !100, size: 64, align: 64, offset: 1216)
!100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !56, file: !57, line: 298, baseType: !100, size: 64, align: 64, offset: 1280)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !56, file: !57, line: 299, baseType: !100, size: 64, align: 64, offset: 1344)
!103 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !56, file: !57, line: 300, baseType: !100, size: 64, align: 64, offset: 1408)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !56, file: !57, line: 302, baseType: !105, size: 64, align: 64, offset: 1472)
!105 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !106, line: 62, baseType: !107)
!106 = !DIFile(filename: "/home/gleison/lge/llvm-3.7-src/build-debug/bin/../lib/clang/3.7.0/include/stddef.h", directory: "/home/gleison/tf/Benchmarks/Trimaran/enc-pc1")
!107 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!108 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !56, file: !57, line: 303, baseType: !8, size: 32, align: 32, offset: 1536)
!109 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !56, file: !57, line: 305, baseType: !110, size: 160, align: 8, offset: 1568)
!110 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 160, align: 8, elements: !111)
!111 = !{!112}
!112 = !DISubrange(count: 20)
!113 = !{i32 2, !"Dwarf Version", i32 4}
!114 = !{i32 2, !"Debug Info Version", i32 3}
!115 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!116 = !DILocation(line: 38, column: 14, scope: !4)
!117 = !DILocation(line: 38, column: 21, scope: !4)
!118 = !DILocation(line: 38, column: 30, scope: !4)
!119 = !DILocation(line: 38, column: 28, scope: !4)
!120 = !DILocation(line: 38, column: 13, scope: !4)
!121 = !DILocation(line: 38, column: 11, scope: !4)
!122 = !DILocation(line: 40, column: 3, scope: !4)
!123 = !DILocation(line: 42, column: 11, scope: !4)
!124 = !DILocation(line: 42, column: 9, scope: !4)
!125 = !DILocation(line: 44, column: 13, scope: !4)
!126 = !DILocation(line: 44, column: 25, scope: !4)
!127 = !DILocation(line: 44, column: 32, scope: !4)
!128 = !DILocation(line: 44, column: 41, scope: !4)
!129 = !DILocation(line: 44, column: 39, scope: !4)
!130 = !DILocation(line: 44, column: 21, scope: !4)
!131 = !DILocation(line: 44, column: 11, scope: !4)
!132 = !DILocation(line: 46, column: 3, scope: !4)
!133 = !DILocation(line: 48, column: 11, scope: !4)
!134 = !DILocation(line: 48, column: 19, scope: !4)
!135 = !DILocation(line: 48, column: 17, scope: !4)
!136 = !DILocation(line: 48, column: 9, scope: !4)
!137 = !DILocation(line: 50, column: 13, scope: !4)
!138 = !DILocation(line: 50, column: 25, scope: !4)
!139 = !DILocation(line: 50, column: 32, scope: !4)
!140 = !DILocation(line: 50, column: 41, scope: !4)
!141 = !DILocation(line: 50, column: 39, scope: !4)
!142 = !DILocation(line: 50, column: 21, scope: !4)
!143 = !DILocation(line: 50, column: 11, scope: !4)
!144 = !DILocation(line: 52, column: 3, scope: !4)
!145 = !DILocation(line: 54, column: 11, scope: !4)
!146 = !DILocation(line: 54, column: 19, scope: !4)
!147 = !DILocation(line: 54, column: 17, scope: !4)
!148 = !DILocation(line: 54, column: 9, scope: !4)
!149 = !DILocation(line: 56, column: 13, scope: !4)
!150 = !DILocation(line: 56, column: 25, scope: !4)
!151 = !DILocation(line: 56, column: 32, scope: !4)
!152 = !DILocation(line: 56, column: 41, scope: !4)
!153 = !DILocation(line: 56, column: 39, scope: !4)
!154 = !DILocation(line: 56, column: 21, scope: !4)
!155 = !DILocation(line: 56, column: 11, scope: !4)
!156 = !DILocation(line: 58, column: 3, scope: !4)
!157 = !DILocation(line: 60, column: 11, scope: !4)
!158 = !DILocation(line: 60, column: 19, scope: !4)
!159 = !DILocation(line: 60, column: 17, scope: !4)
!160 = !DILocation(line: 60, column: 9, scope: !4)
!161 = !DILocation(line: 62, column: 13, scope: !4)
!162 = !DILocation(line: 62, column: 25, scope: !4)
!163 = !DILocation(line: 62, column: 32, scope: !4)
!164 = !DILocation(line: 62, column: 41, scope: !4)
!165 = !DILocation(line: 62, column: 39, scope: !4)
!166 = !DILocation(line: 62, column: 21, scope: !4)
!167 = !DILocation(line: 62, column: 11, scope: !4)
!168 = !DILocation(line: 64, column: 3, scope: !4)
!169 = !DILocation(line: 66, column: 11, scope: !4)
!170 = !DILocation(line: 66, column: 19, scope: !4)
!171 = !DILocation(line: 66, column: 17, scope: !4)
!172 = !DILocation(line: 66, column: 9, scope: !4)
!173 = !DILocation(line: 68, column: 13, scope: !4)
!174 = !DILocation(line: 68, column: 25, scope: !4)
!175 = !DILocation(line: 68, column: 33, scope: !4)
!176 = !DILocation(line: 68, column: 42, scope: !4)
!177 = !DILocation(line: 68, column: 40, scope: !4)
!178 = !DILocation(line: 68, column: 21, scope: !4)
!179 = !DILocation(line: 68, column: 11, scope: !4)
!180 = !DILocation(line: 70, column: 3, scope: !4)
!181 = !DILocation(line: 72, column: 11, scope: !4)
!182 = !DILocation(line: 72, column: 19, scope: !4)
!183 = !DILocation(line: 72, column: 17, scope: !4)
!184 = !DILocation(line: 72, column: 9, scope: !4)
!185 = !DILocation(line: 74, column: 13, scope: !4)
!186 = !DILocation(line: 74, column: 25, scope: !4)
!187 = !DILocation(line: 74, column: 33, scope: !4)
!188 = !DILocation(line: 74, column: 42, scope: !4)
!189 = !DILocation(line: 74, column: 40, scope: !4)
!190 = !DILocation(line: 74, column: 21, scope: !4)
!191 = !DILocation(line: 74, column: 11, scope: !4)
!192 = !DILocation(line: 76, column: 3, scope: !4)
!193 = !DILocation(line: 78, column: 11, scope: !4)
!194 = !DILocation(line: 78, column: 19, scope: !4)
!195 = !DILocation(line: 78, column: 17, scope: !4)
!196 = !DILocation(line: 78, column: 9, scope: !4)
!197 = !DILocation(line: 80, column: 13, scope: !4)
!198 = !DILocation(line: 80, column: 25, scope: !4)
!199 = !DILocation(line: 80, column: 33, scope: !4)
!200 = !DILocation(line: 80, column: 42, scope: !4)
!201 = !DILocation(line: 80, column: 40, scope: !4)
!202 = !DILocation(line: 80, column: 21, scope: !4)
!203 = !DILocation(line: 80, column: 11, scope: !4)
!204 = !DILocation(line: 82, column: 3, scope: !4)
!205 = !DILocation(line: 84, column: 11, scope: !4)
!206 = !DILocation(line: 84, column: 19, scope: !4)
!207 = !DILocation(line: 84, column: 17, scope: !4)
!208 = !DILocation(line: 84, column: 9, scope: !4)
!209 = !DILocation(line: 86, column: 13, scope: !4)
!210 = !DILocation(line: 86, column: 25, scope: !4)
!211 = !DILocation(line: 86, column: 33, scope: !4)
!212 = !DILocation(line: 86, column: 42, scope: !4)
!213 = !DILocation(line: 86, column: 40, scope: !4)
!214 = !DILocation(line: 86, column: 21, scope: !4)
!215 = !DILocation(line: 86, column: 11, scope: !4)
!216 = !DILocation(line: 88, column: 3, scope: !4)
!217 = !DILocation(line: 90, column: 11, scope: !4)
!218 = !DILocation(line: 90, column: 19, scope: !4)
!219 = !DILocation(line: 90, column: 17, scope: !4)
!220 = !DILocation(line: 90, column: 9, scope: !4)
!221 = !DILocation(line: 92, column: 13, scope: !4)
!222 = !DILocation(line: 92, column: 25, scope: !4)
!223 = !DILocation(line: 92, column: 33, scope: !4)
!224 = !DILocation(line: 92, column: 42, scope: !4)
!225 = !DILocation(line: 92, column: 40, scope: !4)
!226 = !DILocation(line: 92, column: 21, scope: !4)
!227 = !DILocation(line: 92, column: 11, scope: !4)
!228 = !DILocation(line: 94, column: 3, scope: !4)
!229 = !DILocation(line: 96, column: 11, scope: !4)
!230 = !DILocation(line: 96, column: 19, scope: !4)
!231 = !DILocation(line: 96, column: 17, scope: !4)
!232 = !DILocation(line: 96, column: 9, scope: !4)
!233 = !DILocation(line: 98, column: 14, scope: !4)
!234 = !DILocation(line: 98, column: 26, scope: !4)
!235 = !DILocation(line: 98, column: 34, scope: !4)
!236 = !DILocation(line: 98, column: 43, scope: !4)
!237 = !DILocation(line: 98, column: 41, scope: !4)
!238 = !DILocation(line: 98, column: 22, scope: !4)
!239 = !DILocation(line: 98, column: 12, scope: !4)
!240 = !DILocation(line: 100, column: 3, scope: !4)
!241 = !DILocation(line: 102, column: 11, scope: !4)
!242 = !DILocation(line: 102, column: 19, scope: !4)
!243 = !DILocation(line: 102, column: 17, scope: !4)
!244 = !DILocation(line: 102, column: 9, scope: !4)
!245 = !DILocation(line: 104, column: 14, scope: !4)
!246 = !DILocation(line: 104, column: 27, scope: !4)
!247 = !DILocation(line: 104, column: 35, scope: !4)
!248 = !DILocation(line: 104, column: 44, scope: !4)
!249 = !DILocation(line: 104, column: 42, scope: !4)
!250 = !DILocation(line: 104, column: 23, scope: !4)
!251 = !DILocation(line: 104, column: 12, scope: !4)
!252 = !DILocation(line: 106, column: 3, scope: !4)
!253 = !DILocation(line: 108, column: 11, scope: !4)
!254 = !DILocation(line: 108, column: 19, scope: !4)
!255 = !DILocation(line: 108, column: 17, scope: !4)
!256 = !DILocation(line: 108, column: 9, scope: !4)
!257 = !DILocation(line: 110, column: 14, scope: !4)
!258 = !DILocation(line: 110, column: 27, scope: !4)
!259 = !DILocation(line: 110, column: 35, scope: !4)
!260 = !DILocation(line: 110, column: 44, scope: !4)
!261 = !DILocation(line: 110, column: 42, scope: !4)
!262 = !DILocation(line: 110, column: 23, scope: !4)
!263 = !DILocation(line: 110, column: 12, scope: !4)
!264 = !DILocation(line: 112, column: 3, scope: !4)
!265 = !DILocation(line: 114, column: 11, scope: !4)
!266 = !DILocation(line: 114, column: 19, scope: !4)
!267 = !DILocation(line: 114, column: 17, scope: !4)
!268 = !DILocation(line: 114, column: 9, scope: !4)
!269 = !DILocation(line: 116, column: 14, scope: !4)
!270 = !DILocation(line: 116, column: 27, scope: !4)
!271 = !DILocation(line: 116, column: 35, scope: !4)
!272 = !DILocation(line: 116, column: 44, scope: !4)
!273 = !DILocation(line: 116, column: 42, scope: !4)
!274 = !DILocation(line: 116, column: 23, scope: !4)
!275 = !DILocation(line: 116, column: 12, scope: !4)
!276 = !DILocation(line: 118, column: 3, scope: !4)
!277 = !DILocation(line: 120, column: 11, scope: !4)
!278 = !DILocation(line: 120, column: 19, scope: !4)
!279 = !DILocation(line: 120, column: 17, scope: !4)
!280 = !DILocation(line: 120, column: 9, scope: !4)
!281 = !DILocation(line: 122, column: 14, scope: !4)
!282 = !DILocation(line: 122, column: 27, scope: !4)
!283 = !DILocation(line: 122, column: 35, scope: !4)
!284 = !DILocation(line: 122, column: 44, scope: !4)
!285 = !DILocation(line: 122, column: 42, scope: !4)
!286 = !DILocation(line: 122, column: 23, scope: !4)
!287 = !DILocation(line: 122, column: 12, scope: !4)
!288 = !DILocation(line: 124, column: 3, scope: !4)
!289 = !DILocation(line: 126, column: 11, scope: !4)
!290 = !DILocation(line: 126, column: 19, scope: !4)
!291 = !DILocation(line: 126, column: 17, scope: !4)
!292 = !DILocation(line: 126, column: 9, scope: !4)
!293 = !DILocation(line: 128, column: 14, scope: !4)
!294 = !DILocation(line: 128, column: 27, scope: !4)
!295 = !DILocation(line: 128, column: 35, scope: !4)
!296 = !DILocation(line: 128, column: 44, scope: !4)
!297 = !DILocation(line: 128, column: 42, scope: !4)
!298 = !DILocation(line: 128, column: 23, scope: !4)
!299 = !DILocation(line: 128, column: 12, scope: !4)
!300 = !DILocation(line: 130, column: 3, scope: !4)
!301 = !DILocation(line: 132, column: 11, scope: !4)
!302 = !DILocation(line: 132, column: 19, scope: !4)
!303 = !DILocation(line: 132, column: 17, scope: !4)
!304 = !DILocation(line: 132, column: 9, scope: !4)
!305 = !DILocation(line: 134, column: 5, scope: !4)
!306 = !DILocation(line: 136, column: 3, scope: !4)
!307 = !DILocation(line: 141, column: 8, scope: !9)
!308 = !DILocation(line: 141, column: 15, scope: !9)
!309 = !DILocation(line: 141, column: 13, scope: !9)
!310 = !DILocation(line: 141, column: 6, scope: !9)
!311 = !DILocation(line: 143, column: 13, scope: !9)
!312 = !DILocation(line: 143, column: 8, scope: !9)
!313 = !DILocation(line: 143, column: 6, scope: !9)
!314 = !DILocation(line: 145, column: 6, scope: !9)
!315 = !DILocation(line: 147, column: 6, scope: !9)
!316 = !DILocation(line: 149, column: 9, scope: !9)
!317 = !DILocation(line: 149, column: 7, scope: !9)
!318 = !DILocation(line: 151, column: 8, scope: !9)
!319 = !DILocation(line: 151, column: 6, scope: !9)
!320 = !DILocation(line: 153, column: 8, scope: !9)
!321 = !DILocation(line: 153, column: 6, scope: !9)
!322 = !DILocation(line: 155, column: 9, scope: !9)
!323 = !DILocation(line: 155, column: 7, scope: !9)
!324 = !DILocation(line: 157, column: 8, scope: !9)
!325 = !DILocation(line: 157, column: 6, scope: !9)
!326 = !DILocation(line: 159, column: 8, scope: !9)
!327 = !DILocation(line: 159, column: 6, scope: !9)
!328 = !DILocation(line: 161, column: 7, scope: !329)
!329 = distinct !DILexicalBlock(scope: !9, file: !5, line: 161, column: 7)
!330 = !DILocation(line: 161, column: 10, scope: !329)
!331 = !DILocation(line: 161, column: 7, scope: !9)
!332 = !DILocation(line: 165, column: 10, scope: !333)
!333 = distinct !DILexicalBlock(scope: !329, file: !5, line: 163, column: 3)
!334 = !DILocation(line: 165, column: 15, scope: !333)
!335 = !DILocation(line: 165, column: 13, scope: !333)
!336 = !DILocation(line: 165, column: 8, scope: !333)
!337 = !DILocation(line: 166, column: 3, scope: !333)
!338 = !DILocation(line: 168, column: 9, scope: !9)
!339 = !DILocation(line: 168, column: 7, scope: !9)
!340 = !DILocation(line: 170, column: 8, scope: !9)
!341 = !DILocation(line: 170, column: 6, scope: !9)
!342 = !DILocation(line: 172, column: 8, scope: !9)
!343 = !DILocation(line: 172, column: 6, scope: !9)
!344 = !DILocation(line: 174, column: 7, scope: !345)
!345 = distinct !DILexicalBlock(scope: !9, file: !5, line: 174, column: 7)
!346 = !DILocation(line: 174, column: 10, scope: !345)
!347 = !DILocation(line: 174, column: 7, scope: !9)
!348 = !DILocation(line: 178, column: 10, scope: !349)
!349 = distinct !DILexicalBlock(scope: !345, file: !5, line: 176, column: 3)
!350 = !DILocation(line: 178, column: 15, scope: !349)
!351 = !DILocation(line: 178, column: 13, scope: !349)
!352 = !DILocation(line: 178, column: 8, scope: !349)
!353 = !DILocation(line: 180, column: 10, scope: !349)
!354 = !DILocation(line: 180, column: 15, scope: !349)
!355 = !DILocation(line: 180, column: 13, scope: !349)
!356 = !DILocation(line: 180, column: 8, scope: !349)
!357 = !DILocation(line: 181, column: 3, scope: !349)
!358 = !DILocation(line: 183, column: 9, scope: !9)
!359 = !DILocation(line: 183, column: 7, scope: !9)
!360 = !DILocation(line: 185, column: 8, scope: !9)
!361 = !DILocation(line: 185, column: 6, scope: !9)
!362 = !DILocation(line: 187, column: 8, scope: !9)
!363 = !DILocation(line: 187, column: 6, scope: !9)
!364 = !DILocation(line: 189, column: 8, scope: !9)
!365 = !DILocation(line: 189, column: 13, scope: !9)
!366 = !DILocation(line: 189, column: 11, scope: !9)
!367 = !DILocation(line: 189, column: 6, scope: !9)
!368 = !DILocation(line: 191, column: 8, scope: !9)
!369 = !DILocation(line: 191, column: 13, scope: !9)
!370 = !DILocation(line: 191, column: 11, scope: !9)
!371 = !DILocation(line: 191, column: 6, scope: !9)
!372 = !DILocation(line: 193, column: 8, scope: !9)
!373 = !DILocation(line: 193, column: 11, scope: !9)
!374 = !DILocation(line: 193, column: 6, scope: !9)
!375 = !DILocation(line: 195, column: 10, scope: !9)
!376 = !DILocation(line: 195, column: 8, scope: !9)
!377 = !DILocation(line: 197, column: 13, scope: !9)
!378 = !DILocation(line: 197, column: 8, scope: !9)
!379 = !DILocation(line: 197, column: 3, scope: !9)
!380 = !DILocation(line: 197, column: 11, scope: !9)
!381 = !DILocation(line: 199, column: 9, scope: !9)
!382 = !DILocation(line: 199, column: 14, scope: !9)
!383 = !DILocation(line: 199, column: 12, scope: !9)
!384 = !DILocation(line: 199, column: 7, scope: !9)
!385 = !DILocation(line: 201, column: 7, scope: !9)
!386 = !DILocation(line: 201, column: 9, scope: !9)
!387 = !DILocation(line: 201, column: 5, scope: !9)
!388 = !DILocation(line: 203, column: 3, scope: !9)
!389 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "seedp", arg: 1, scope: !10, file: !5, line: 207, type: !13)
!390 = !DIExpression()
!391 = !DILocation(line: 207, column: 20, scope: !10)
!392 = !DILocation(line: 209, column: 16, scope: !10)
!393 = !DILocation(line: 209, column: 23, scope: !10)
!394 = !DILocation(line: 209, column: 33, scope: !10)
!395 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !10, file: !5, line: 209, type: !396)
!396 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!397 = !DILocation(line: 209, column: 12, scope: !10)
!398 = !DILocation(line: 210, column: 10, scope: !10)
!399 = !DILocation(line: 211, column: 13, scope: !10)
!400 = !DILocation(line: 211, column: 20, scope: !10)
!401 = !DILocation(line: 211, column: 3, scope: !10)
!402 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !14, file: !5, line: 214, type: !8)
!403 = !DILocation(line: 214, column: 10, scope: !14)
!404 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !14, file: !5, line: 214, type: !17)
!405 = !DILocation(line: 214, column: 29, scope: !14)
!406 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "NumInput", scope: !14, file: !5, line: 215, type: !8)
!407 = !DILocation(line: 215, column: 7, scope: !14)
!408 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "random_seed", scope: !14, file: !5, line: 217, type: !8)
!409 = !DILocation(line: 217, column: 7, scope: !14)
!410 = !DILocation(line: 219, column: 12, scope: !411)
!411 = distinct !DILexicalBlock(scope: !14, file: !5, line: 219, column: 7)
!412 = !DILocation(line: 219, column: 7, scope: !14)
!413 = !DILocation(line: 220, column: 21, scope: !411)
!414 = !DILocation(line: 220, column: 16, scope: !411)
!415 = !DILocation(line: 220, column: 5, scope: !411)
!416 = !DILocation(line: 222, column: 6, scope: !14)
!417 = !DILocation(line: 224, column: 8, scope: !14)
!418 = !DILocation(line: 226, column: 5, scope: !14)
!419 = !DILocation(line: 232, column: 3, scope: !14)
!420 = !DILocation(line: 234, column: 3, scope: !14)
!421 = !DILocation(line: 237, column: 11, scope: !14)
!422 = !DILocation(line: 239, column: 7, scope: !423)
!423 = distinct !DILexicalBlock(scope: !14, file: !5, line: 239, column: 7)
!424 = !DILocation(line: 239, column: 20, scope: !423)
!425 = !DILocation(line: 239, column: 7, scope: !14)
!426 = !DILocation(line: 242, column: 11, scope: !427)
!427 = distinct !DILexicalBlock(scope: !423, file: !5, line: 241, column: 3)
!428 = !DILocation(line: 243, column: 3, scope: !427)
!429 = !DILocation(line: 246, column: 13, scope: !430)
!430 = distinct !DILexicalBlock(scope: !423, file: !5, line: 245, column: 3)
!431 = !DILocation(line: 246, column: 11, scope: !430)
!432 = !DILocation(line: 249, column: 11, scope: !433)
!433 = distinct !DILexicalBlock(scope: !14, file: !5, line: 249, column: 3)
!434 = !DILocation(line: 249, column: 8, scope: !433)
!435 = !DILocation(line: 249, column: 16, scope: !436)
!436 = !DILexicalBlockFile(scope: !437, file: !5, discriminator: 2)
!437 = !DILexicalBlockFile(scope: !438, file: !5, discriminator: 1)
!438 = distinct !DILexicalBlock(scope: !433, file: !5, line: 249, column: 3)
!439 = !DILocation(line: 249, column: 21, scope: !438)
!440 = !DILocation(line: 249, column: 19, scope: !438)
!441 = !DILocation(line: 249, column: 3, scope: !433)
!442 = !DILocation(line: 253, column: 20, scope: !443)
!443 = distinct !DILexicalBlock(scope: !438, file: !5, line: 251, column: 3)
!444 = !DILocation(line: 253, column: 15, scope: !443)
!445 = !DILocation(line: 253, column: 9, scope: !443)
!446 = !DILocation(line: 253, column: 5, scope: !443)
!447 = !DILocation(line: 253, column: 13, scope: !443)
!448 = !DILocation(line: 254, column: 3, scope: !443)
!449 = !DILocation(line: 249, column: 30, scope: !438)
!450 = !DILocation(line: 249, column: 3, scope: !438)
!451 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Print", scope: !14, file: !5, line: 216, type: !8)
!452 = !DILocation(line: 216, column: 7, scope: !14)
!453 = !DILocation(line: 257, column: 3, scope: !14)
!454 = !DILocation(line: 257, column: 10, scope: !455)
!455 = !DILexicalBlockFile(scope: !456, file: !5, discriminator: 2)
!456 = !DILexicalBlockFile(scope: !14, file: !5, discriminator: 1)
!457 = !DILocation(line: 258, column: 9, scope: !458)
!458 = distinct !DILexicalBlock(scope: !14, file: !5, line: 257, column: 22)
!459 = !DILocation(line: 258, column: 7, scope: !458)
!460 = !DILocation(line: 259, column: 5, scope: !458)
!461 = !DILocation(line: 261, column: 11, scope: !458)
!462 = !DILocation(line: 261, column: 17, scope: !458)
!463 = !DILocation(line: 261, column: 9, scope: !458)
!464 = !DILocation(line: 263, column: 11, scope: !458)
!465 = !DILocation(line: 263, column: 17, scope: !458)
!466 = !DILocation(line: 263, column: 9, scope: !458)
!467 = !DILocation(line: 271, column: 17, scope: !468)
!468 = distinct !DILexicalBlock(scope: !458, file: !5, line: 271, column: 5)
!469 = !DILocation(line: 271, column: 10, scope: !468)
!470 = !DILocation(line: 271, column: 22, scope: !471)
!471 = !DILexicalBlockFile(scope: !472, file: !5, discriminator: 2)
!472 = !DILexicalBlockFile(scope: !473, file: !5, discriminator: 1)
!473 = distinct !DILexicalBlock(scope: !468, file: !5, line: 271, column: 5)
!474 = !DILocation(line: 271, column: 29, scope: !473)
!475 = !DILocation(line: 271, column: 5, scope: !468)
!476 = !DILocation(line: 275, column: 25, scope: !477)
!477 = distinct !DILexicalBlock(scope: !473, file: !5, line: 271, column: 46)
!478 = !DILocation(line: 275, column: 21, scope: !477)
!479 = !DILocation(line: 275, column: 35, scope: !477)
!480 = !DILocation(line: 275, column: 33, scope: !477)
!481 = !DILocation(line: 275, column: 11, scope: !477)
!482 = !DILocation(line: 275, column: 7, scope: !477)
!483 = !DILocation(line: 275, column: 19, scope: !477)
!484 = !DILocation(line: 276, column: 5, scope: !477)
!485 = !DILocation(line: 271, column: 42, scope: !473)
!486 = !DILocation(line: 271, column: 5, scope: !473)
!487 = !DILocation(line: 278, column: 9, scope: !458)
!488 = !DILocation(line: 278, column: 14, scope: !458)
!489 = !DILocation(line: 278, column: 20, scope: !458)
!490 = !DILocation(line: 278, column: 18, scope: !458)
!491 = !DILocation(line: 278, column: 11, scope: !458)
!492 = !DILocation(line: 278, column: 7, scope: !458)
!493 = !DILocation(line: 280, column: 10, scope: !458)
!494 = !DILocation(line: 280, column: 12, scope: !458)
!495 = !DILocation(line: 280, column: 9, scope: !458)
!496 = !DILocation(line: 280, column: 7, scope: !458)
!497 = !DILocation(line: 283, column: 10, scope: !458)
!498 = !DILocation(line: 283, column: 12, scope: !458)
!499 = !DILocation(line: 283, column: 9, scope: !458)
!500 = !DILocation(line: 283, column: 7, scope: !458)
!501 = !DILocation(line: 285, column: 10, scope: !502)
!502 = distinct !DILexicalBlock(scope: !458, file: !5, line: 285, column: 9)
!503 = !DILocation(line: 285, column: 18, scope: !502)
!504 = !DILocation(line: 285, column: 26, scope: !502)
!505 = !DILocation(line: 285, column: 9, scope: !458)
!506 = !DILocation(line: 286, column: 24, scope: !502)
!507 = !DILocation(line: 286, column: 27, scope: !502)
!508 = !DILocation(line: 286, column: 7, scope: !502)
!509 = !DILocation(line: 289, column: 3, scope: !14)
!510 = !DILocation(line: 290, column: 3, scope: !14)
