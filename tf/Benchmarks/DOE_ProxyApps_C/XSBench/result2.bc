; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.Inputs = type { i32, i64, i64, i32, i8* }

@.str = private unnamed_addr constant [488 x i8] c"                   __   __ ___________                 _                        \0A                   \5C \5C / //  ___| ___ \5C               | |                       \0A                    \5C V / \5C `--.| |_/ / ___ _ __   ___| |__                     \0A                    /   \5C  `--. \5C ___ \5C/ _ \5C '_ \5C / __| '_ \5C                    \0A                   / /^\5C \5C/\5C__/ / |_/ /  __/ | | | (__| | | |                   \0A                   \5C/   \5C/\5C____/\5C____/ \5C___|_| |_|\5C___|_| |_|                   \0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"Developed at Argonne National Laboratory\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"Version: %d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"RESULTS\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"Threads:     %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"INPUT SUMMARY\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"Materials:                    %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [34 x i8] c"H-M Benchmark Size:           %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c"Total Nuclides:               %ld\0A\00", align 1
@.str.11 = private unnamed_addr constant [31 x i8] c"Gridpoints (per Nuclide):     \00", align 1
@.str.12 = private unnamed_addr constant [31 x i8] c"Unionized Energy Gridpoints:  \00", align 1
@.str.13 = private unnamed_addr constant [31 x i8] c"XS Lookups:                   \00", align 1
@.str.14 = private unnamed_addr constant [34 x i8] c"Threads:                      %d\0A\00", align 1
@.str.15 = private unnamed_addr constant [31 x i8] c"Est. Memory Usage (MB):       \00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"INITIALIZATION\00", align 1
@.str.17 = private unnamed_addr constant [82 x i8] c"================================================================================\0A\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@.str.19 = private unnamed_addr constant [11 x i8] c"%ld,%03ld\0A\00", align 1
@.str.20 = private unnamed_addr constant [17 x i8] c"%ld,%03ld,%03ld\0A\00", align 1
@.str.21 = private unnamed_addr constant [23 x i8] c"%ld,%03ld,%03ld,%03ld\0A\00", align 1
@.str.22 = private unnamed_addr constant [28 x i8] c"Usage: ./XSBench <options>\0A\00", align 1
@.str.23 = private unnamed_addr constant [18 x i8] c"Options include:\0A\00", align 1
@.str.24 = private unnamed_addr constant [52 x i8] c"  -t <threads>     Number of OpenMP threads to run\0A\00", align 1
@.str.25 = private unnamed_addr constant [73 x i8] c"  -s <size>        Size of H-M Benchmark to run (small, large, XL, XXL)\0A\00", align 1
@.str.26 = private unnamed_addr constant [77 x i8] c"  -g <gridpoints>  Number of gridpoints per nuclide (overrides -s defaults)\0A\00", align 1
@.str.27 = private unnamed_addr constant [57 x i8] c"  -l <lookups>     Number of Cross-section (XS) lookups\0A\00", align 1
@.str.28 = private unnamed_addr constant [48 x i8] c"Default is equivalent to: -s large -l 15000000\0A\00", align 1
@.str.29 = private unnamed_addr constant [55 x i8] c"See readme for full description of default run values\0A\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"-t\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"-g\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"-l\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"-s\00", align 1
@.str.34 = private unnamed_addr constant [6 x i8] c"small\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"large\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"XL\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"XXL\00", align 1

; Function Attrs: nounwind uwtable
define void @logo(i32 %version) #0 {
entry:
  %v = alloca [100 x i8], align 16
  call void @llvm.dbg.value(metadata i32 %version, i64 0, metadata !49, metadata !50), !dbg !51
  call void @border_print(), !dbg !52
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([488 x i8], [488 x i8]* @.str, i32 0, i32 0)), !dbg !53
  call void @border_print(), !dbg !54
  call void @center_print(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i32 0, i32 0), i32 79), !dbg !55
  call void @llvm.dbg.declare(metadata [100 x i8]* %v, metadata !56, metadata !50), !dbg !60
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %v, i32 0, i32 0, !dbg !61
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0), i32 %version) #6, !dbg !62
  %arraydecay2 = getelementptr inbounds [100 x i8], [100 x i8]* %v, i32 0, i32 0, !dbg !63
  call void @center_print(i8* %arraydecay2, i32 79), !dbg !64
  call void @border_print(), !dbg !65
  ret void, !dbg !66
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define void @border_print() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.17, i32 0, i32 0)), !dbg !67
  ret void, !dbg !68
}

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind uwtable
define void @center_print(i8* %s, i32 %width) #0 {
entry:
  call void @llvm.dbg.value(metadata i8* %s, i64 0, metadata !69, metadata !50), !dbg !70
  call void @llvm.dbg.value(metadata i32 %width, i64 0, metadata !71, metadata !50), !dbg !72
  %call = call i64 @strlen(i8* %s) #7, !dbg !73
  %conv = trunc i64 %call to i32, !dbg !73
  call void @llvm.dbg.value(metadata i32 %conv, i64 0, metadata !74, metadata !50), !dbg !75
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !76, metadata !50), !dbg !77
  br label %for.cond, !dbg !78

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %sub = sub nsw i32 %width, %conv, !dbg !80
  %div = sdiv i32 %sub, 2, !dbg !82
  %cmp = icmp sle i32 %i.0, %div, !dbg !83
  br i1 %cmp, label %for.body, label %for.end, !dbg !84

for.body:                                         ; preds = %for.cond
  %tmp4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !85
  %call2 = call i32 @fputs(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0), %struct._IO_FILE* %tmp4), !dbg !87
  br label %for.inc, !dbg !88

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1, !dbg !89
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !76, metadata !50), !dbg !77
  br label %for.cond, !dbg !90

for.end:                                          ; preds = %for.cond
  %tmp7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !91
  %call3 = call i32 @fputs(i8* %s, %struct._IO_FILE* %tmp7), !dbg !92
  %tmp8 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !93
  %call4 = call i32 @fputs(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0), %struct._IO_FILE* %tmp8), !dbg !94
  ret void, !dbg !95
}

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #3

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

declare i32 @fputs(i8*, %struct._IO_FILE*) #2

; Function Attrs: nounwind uwtable
define void @print_results(%struct.Inputs* byval align 8 %in, i32 %mype, double %runtime, i32 %nprocs, i64 %vhash) #0 {
entry:
  call void @llvm.dbg.declare(metadata %struct.Inputs* %in, metadata !96, metadata !50), !dbg !97
  call void @llvm.dbg.value(metadata i32 %mype, i64 0, metadata !98, metadata !50), !dbg !99
  call void @llvm.dbg.value(metadata double %runtime, i64 0, metadata !100, metadata !50), !dbg !101
  call void @llvm.dbg.value(metadata i32 %nprocs, i64 0, metadata !102, metadata !50), !dbg !103
  call void @llvm.dbg.value(metadata i64 %vhash, i64 0, metadata !104, metadata !50), !dbg !105
  %lookups = getelementptr inbounds %struct.Inputs, %struct.Inputs* %in, i32 0, i32 3, !dbg !106
  %tmp = load i32, i32* %lookups, align 4, !dbg !106
  %conv = sitofp i32 %tmp to double, !dbg !107
  %div = fdiv double %conv, %runtime, !dbg !108
  %conv1 = fptosi double %div to i32, !dbg !109
  call void @llvm.dbg.value(metadata i32 %conv1, i64 0, metadata !110, metadata !50), !dbg !111
  %cmp = icmp eq i32 %mype, 0, !dbg !112
  br i1 %cmp, label %if.then, label %if.end, !dbg !114

if.then:                                          ; preds = %entry
  call void @border_print(), !dbg !115
  call void @center_print(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i32 79), !dbg !117
  call void @border_print(), !dbg !118
  %nthreads = getelementptr inbounds %struct.Inputs, %struct.Inputs* %in, i32 0, i32 0, !dbg !119
  %tmp3 = load i32, i32* %nthreads, align 4, !dbg !119
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), i32 %tmp3), !dbg !120
  call void @border_print(), !dbg !121
  br label %if.end, !dbg !122

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !123
}

; Function Attrs: nounwind uwtable
define void @print_inputs(%struct.Inputs* byval align 8 %in, i32 %nprocs, i32 %version) #0 {
entry:
  call void @llvm.dbg.declare(metadata %struct.Inputs* %in, metadata !124, metadata !50), !dbg !125
  call void @llvm.dbg.value(metadata i32 %nprocs, i64 0, metadata !126, metadata !50), !dbg !127
  call void @llvm.dbg.value(metadata i32 %version, i64 0, metadata !128, metadata !50), !dbg !129
  %call = call i64 @estimate_mem_usage(%struct.Inputs* byval align 8 %in), !dbg !130
  %conv = trunc i64 %call to i32, !dbg !130
  call void @llvm.dbg.value(metadata i32 %conv, i64 0, metadata !131, metadata !50), !dbg !132
  call void @logo(i32 %version), !dbg !133
  call void @center_print(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i32 79), !dbg !134
  call void @border_print(), !dbg !135
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i32 0, i32 0), i32 12), !dbg !136
  %HM = getelementptr inbounds %struct.Inputs, %struct.Inputs* %in, i32 0, i32 4, !dbg !137
  %tmp1 = load i8*, i8** %HM, align 8, !dbg !137
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.9, i32 0, i32 0), i8* %tmp1), !dbg !138
  %n_isotopes = getelementptr inbounds %struct.Inputs, %struct.Inputs* %in, i32 0, i32 1, !dbg !139
  %tmp2 = load i64, i64* %n_isotopes, align 8, !dbg !139
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i32 0, i32 0), i64 %tmp2), !dbg !140
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11, i32 0, i32 0)), !dbg !141
  %n_gridpoints = getelementptr inbounds %struct.Inputs, %struct.Inputs* %in, i32 0, i32 2, !dbg !142
  %tmp3 = load i64, i64* %n_gridpoints, align 8, !dbg !142
  call void @fancy_int(i64 %tmp3), !dbg !143
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i32 0, i32 0)), !dbg !144
  %n_isotopes6 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %in, i32 0, i32 1, !dbg !145
  %tmp4 = load i64, i64* %n_isotopes6, align 8, !dbg !145
  %n_gridpoints7 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %in, i32 0, i32 2, !dbg !146
  %tmp5 = load i64, i64* %n_gridpoints7, align 8, !dbg !146
  %mul = mul nsw i64 %tmp4, %tmp5, !dbg !147
  call void @fancy_int(i64 %mul), !dbg !148
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.13, i32 0, i32 0)), !dbg !149
  %lookups = getelementptr inbounds %struct.Inputs, %struct.Inputs* %in, i32 0, i32 3, !dbg !150
  %tmp6 = load i32, i32* %lookups, align 4, !dbg !150
  %conv9 = sext i32 %tmp6 to i64, !dbg !151
  call void @fancy_int(i64 %conv9), !dbg !152
  %nthreads = getelementptr inbounds %struct.Inputs, %struct.Inputs* %in, i32 0, i32 0, !dbg !153
  %tmp7 = load i32, i32* %nthreads, align 4, !dbg !153
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i32 0, i32 0), i32 %tmp7), !dbg !154
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.15, i32 0, i32 0)), !dbg !155
  %conv12 = sext i32 %conv to i64, !dbg !156
  call void @fancy_int(i64 %conv12), !dbg !157
  call void @border_print(), !dbg !158
  call void @center_print(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i32 79), !dbg !159
  call void @border_print(), !dbg !160
  ret void, !dbg !161
}

declare i64 @estimate_mem_usage(%struct.Inputs* byval align 8) #2

; Function Attrs: nounwind uwtable
define void @fancy_int(i64 %a) #0 {
entry:
  call void @llvm.dbg.value(metadata i64 %a, i64 0, metadata !162, metadata !50), !dbg !163
  %cmp = icmp slt i64 %a, 1000, !dbg !164
  br i1 %cmp, label %if.then, label %if.else, !dbg !166

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i64 %a), !dbg !167
  br label %if.end.29, !dbg !167

if.else:                                          ; preds = %entry
  %cmp1 = icmp sge i64 %a, 1000, !dbg !168
  br i1 %cmp1, label %land.lhs.true, label %if.else.5, !dbg !170

land.lhs.true:                                    ; preds = %if.else
  %cmp2 = icmp slt i64 %a, 1000000, !dbg !171
  br i1 %cmp2, label %if.then.3, label %if.else.5, !dbg !172

if.then.3:                                        ; preds = %land.lhs.true
  %div = sdiv i64 %a, 1000, !dbg !173
  %rem = srem i64 %a, 1000, !dbg !174
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i32 0, i32 0), i64 %div, i64 %rem), !dbg !175
  br label %if.end.28, !dbg !175

if.else.5:                                        ; preds = %land.lhs.true, %if.else
  %cmp6 = icmp sge i64 %a, 1000000, !dbg !176
  br i1 %cmp6, label %land.lhs.true.7, label %if.else.15, !dbg !178

land.lhs.true.7:                                  ; preds = %if.else.5
  %cmp8 = icmp slt i64 %a, 1000000000, !dbg !179
  br i1 %cmp8, label %if.then.9, label %if.else.15, !dbg !180

if.then.9:                                        ; preds = %land.lhs.true.7
  %div10 = sdiv i64 %a, 1000000, !dbg !181
  %rem11 = srem i64 %a, 1000000, !dbg !182
  %div12 = sdiv i64 %rem11, 1000, !dbg !183
  %rem13 = srem i64 %a, 1000, !dbg !184
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.20, i32 0, i32 0), i64 %div10, i64 %div12, i64 %rem13), !dbg !185
  br label %if.end.27, !dbg !185

if.else.15:                                       ; preds = %land.lhs.true.7, %if.else.5
  %cmp16 = icmp sge i64 %a, 1000000000, !dbg !186
  br i1 %cmp16, label %if.then.17, label %if.else.25, !dbg !188

if.then.17:                                       ; preds = %if.else.15
  %div18 = sdiv i64 %a, 1000000000, !dbg !189
  %rem19 = srem i64 %a, 1000000000, !dbg !190
  %div20 = sdiv i64 %rem19, 1000000, !dbg !191
  %rem21 = srem i64 %a, 1000000, !dbg !192
  %div22 = sdiv i64 %rem21, 1000, !dbg !193
  %rem23 = srem i64 %a, 1000, !dbg !194
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i32 0, i32 0), i64 %div18, i64 %div20, i64 %div22, i64 %rem23), !dbg !195
  br label %if.end, !dbg !195

if.else.25:                                       ; preds = %if.else.15
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i64 %a), !dbg !196
  br label %if.end

if.end:                                           ; preds = %if.else.25, %if.then.17
  br label %if.end.27

if.end.27:                                        ; preds = %if.end, %if.then.9
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.3
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.then
  ret void, !dbg !197
}

; Function Attrs: nounwind uwtable
define void @print_CLI_error() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.22, i32 0, i32 0)), !dbg !198
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.23, i32 0, i32 0)), !dbg !199
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.24, i32 0, i32 0)), !dbg !200
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.25, i32 0, i32 0)), !dbg !201
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.26, i32 0, i32 0)), !dbg !202
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.27, i32 0, i32 0)), !dbg !203
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.28, i32 0, i32 0)), !dbg !204
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.29, i32 0, i32 0)), !dbg !205
  call void @exit(i32 4) #8, !dbg !206
  unreachable, !dbg !206

return:                                           ; No predecessors!
  ret void, !dbg !207
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) #5

; Function Attrs: nounwind uwtable
define void @read_CLI(%struct.Inputs* noalias sret %agg.result, i32 %argc, i8** %argv) #0 {
entry:
  %input = alloca %struct.Inputs, align 8
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !208, metadata !50), !dbg !209
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !210, metadata !50), !dbg !211
  call void @llvm.dbg.declare(metadata %struct.Inputs* %input, metadata !212, metadata !50), !dbg !213
  %nthreads = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 0, !dbg !214
  store i32 1, i32* %nthreads, align 4, !dbg !215
  %n_isotopes = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 1, !dbg !216
  store i64 355, i64* %n_isotopes, align 8, !dbg !217
  %n_gridpoints = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 2, !dbg !218
  store i64 11303, i64* %n_gridpoints, align 8, !dbg !219
  %lookups = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 3, !dbg !220
  store i32 15000000, i32* %lookups, align 4, !dbg !221
  %call = call noalias i8* @malloc(i64 6) #6, !dbg !222
  %HM = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !223
  store i8* %call, i8** %HM, align 8, !dbg !224
  %HM1 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !225
  %tmp = load i8*, i8** %HM1, align 8, !dbg !225
  %arrayidx = getelementptr inbounds i8, i8* %tmp, i64 0, !dbg !226
  store i8 108, i8* %arrayidx, align 1, !dbg !227
  %HM2 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !228
  %tmp1 = load i8*, i8** %HM2, align 8, !dbg !228
  %arrayidx3 = getelementptr inbounds i8, i8* %tmp1, i64 1, !dbg !229
  store i8 97, i8* %arrayidx3, align 1, !dbg !230
  %HM4 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !231
  %tmp2 = load i8*, i8** %HM4, align 8, !dbg !231
  %arrayidx5 = getelementptr inbounds i8, i8* %tmp2, i64 2, !dbg !232
  store i8 114, i8* %arrayidx5, align 1, !dbg !233
  %HM6 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !234
  %tmp3 = load i8*, i8** %HM6, align 8, !dbg !234
  %arrayidx7 = getelementptr inbounds i8, i8* %tmp3, i64 3, !dbg !235
  store i8 103, i8* %arrayidx7, align 1, !dbg !236
  %HM8 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !237
  %tmp4 = load i8*, i8** %HM8, align 8, !dbg !237
  %arrayidx9 = getelementptr inbounds i8, i8* %tmp4, i64 4, !dbg !238
  store i8 101, i8* %arrayidx9, align 1, !dbg !239
  %HM10 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !240
  %tmp5 = load i8*, i8** %HM10, align 8, !dbg !240
  %arrayidx11 = getelementptr inbounds i8, i8* %tmp5, i64 5, !dbg !241
  store i8 0, i8* %arrayidx11, align 1, !dbg !242
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !243, metadata !50), !dbg !244
  call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !245, metadata !50), !dbg !247
  br label %for.cond, !dbg !248

for.cond:                                         ; preds = %for.inc, %entry
  %user_g.0 = phi i32 [ 0, %entry ], [ %user_g.3, %for.inc ]
  %i.0 = phi i32 [ 1, %entry ], [ %inc64, %for.inc ]
  %cmp = icmp slt i32 %i.0, %argc, !dbg !249
  br i1 %cmp, label %for.body, label %for.end, !dbg !251

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64, !dbg !252
  %arrayidx12 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom, !dbg !252
  %tmp10 = load i8*, i8** %arrayidx12, align 8, !dbg !252
  call void @llvm.dbg.value(metadata i8* %tmp10, i64 0, metadata !254, metadata !50), !dbg !255
  %call13 = call i32 @strcmp(i8* %tmp10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0)) #7, !dbg !256
  %cmp14 = icmp eq i32 %call13, 0, !dbg !258
  br i1 %cmp14, label %if.then, label %if.else.21, !dbg !259

if.then:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1, !dbg !260
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !245, metadata !50), !dbg !247
  %cmp15 = icmp slt i32 %inc, %argc, !dbg !263
  br i1 %cmp15, label %if.then.16, label %if.else, !dbg !264

if.then.16:                                       ; preds = %if.then
  %idxprom17 = sext i32 %inc to i64, !dbg !265
  %arrayidx18 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom17, !dbg !265
  %tmp16 = load i8*, i8** %arrayidx18, align 8, !dbg !265
  %call19 = call i32 @atoi(i8* %tmp16) #7, !dbg !266
  %nthreads20 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 0, !dbg !267
  store i32 %call19, i32* %nthreads20, align 4, !dbg !268
  br label %if.end, !dbg !269

if.else:                                          ; preds = %if.then
  call void @print_CLI_error(), !dbg !270
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.16
  br label %if.end.63, !dbg !271

if.else.21:                                       ; preds = %for.body
  %call22 = call i32 @strcmp(i8* %tmp10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0)) #7, !dbg !272
  %cmp23 = icmp eq i32 %call22, 0, !dbg !274
  br i1 %cmp23, label %if.then.24, label %if.else.34, !dbg !275

if.then.24:                                       ; preds = %if.else.21
  %inc25 = add nsw i32 %i.0, 1, !dbg !276
  call void @llvm.dbg.value(metadata i32 %inc25, i64 0, metadata !245, metadata !50), !dbg !247
  %cmp26 = icmp slt i32 %inc25, %argc, !dbg !279
  br i1 %cmp26, label %if.then.27, label %if.else.32, !dbg !280

if.then.27:                                       ; preds = %if.then.24
  call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !243, metadata !50), !dbg !244
  %idxprom28 = sext i32 %inc25 to i64, !dbg !281
  %arrayidx29 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom28, !dbg !281
  %tmp22 = load i8*, i8** %arrayidx29, align 8, !dbg !281
  %call30 = call i64 @atol(i8* %tmp22) #7, !dbg !283
  %n_gridpoints31 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 2, !dbg !284
  store i64 %call30, i64* %n_gridpoints31, align 8, !dbg !285
  br label %if.end.33, !dbg !286

if.else.32:                                       ; preds = %if.then.24
  call void @print_CLI_error(), !dbg !287
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.32, %if.then.27
  %user_g.1 = phi i32 [ 1, %if.then.27 ], [ %user_g.0, %if.else.32 ]
  br label %if.end.62, !dbg !288

if.else.34:                                       ; preds = %if.else.21
  %call35 = call i32 @strcmp(i8* %tmp10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0)) #7, !dbg !289
  %cmp36 = icmp eq i32 %call35, 0, !dbg !291
  br i1 %cmp36, label %if.then.37, label %if.else.47, !dbg !292

if.then.37:                                       ; preds = %if.else.34
  %inc38 = add nsw i32 %i.0, 1, !dbg !293
  call void @llvm.dbg.value(metadata i32 %inc38, i64 0, metadata !245, metadata !50), !dbg !247
  %cmp39 = icmp slt i32 %inc38, %argc, !dbg !296
  br i1 %cmp39, label %if.then.40, label %if.else.45, !dbg !297

if.then.40:                                       ; preds = %if.then.37
  %idxprom41 = sext i32 %inc38 to i64, !dbg !298
  %arrayidx42 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom41, !dbg !298
  %tmp28 = load i8*, i8** %arrayidx42, align 8, !dbg !298
  %call43 = call i32 @atoi(i8* %tmp28) #7, !dbg !299
  %lookups44 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 3, !dbg !300
  store i32 %call43, i32* %lookups44, align 4, !dbg !301
  br label %if.end.46, !dbg !302

if.else.45:                                       ; preds = %if.then.37
  call void @print_CLI_error(), !dbg !303
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.45, %if.then.40
  br label %if.end.61, !dbg !304

if.else.47:                                       ; preds = %if.else.34
  %call48 = call i32 @strcmp(i8* %tmp10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0)) #7, !dbg !305
  %cmp49 = icmp eq i32 %call48, 0, !dbg !307
  br i1 %cmp49, label %if.then.50, label %if.else.59, !dbg !308

if.then.50:                                       ; preds = %if.else.47
  %inc51 = add nsw i32 %i.0, 1, !dbg !309
  call void @llvm.dbg.value(metadata i32 %inc51, i64 0, metadata !245, metadata !50), !dbg !247
  %cmp52 = icmp slt i32 %inc51, %argc, !dbg !312
  br i1 %cmp52, label %if.then.53, label %if.else.57, !dbg !313

if.then.53:                                       ; preds = %if.then.50
  %idxprom54 = sext i32 %inc51 to i64, !dbg !314
  %arrayidx55 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom54, !dbg !314
  %tmp34 = load i8*, i8** %arrayidx55, align 8, !dbg !314
  %HM56 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !315
  store i8* %tmp34, i8** %HM56, align 8, !dbg !316
  br label %if.end.58, !dbg !317

if.else.57:                                       ; preds = %if.then.50
  call void @print_CLI_error(), !dbg !318
  br label %if.end.58

if.end.58:                                        ; preds = %if.else.57, %if.then.53
  br label %if.end.60, !dbg !319

if.else.59:                                       ; preds = %if.else.47
  call void @print_CLI_error(), !dbg !320
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.59, %if.end.58
  %i.1 = phi i32 [ %inc51, %if.end.58 ], [ %i.0, %if.else.59 ]
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.end.46
  %i.2 = phi i32 [ %inc38, %if.end.46 ], [ %i.1, %if.end.60 ]
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %if.end.33
  %user_g.2 = phi i32 [ %user_g.1, %if.end.33 ], [ %user_g.0, %if.end.61 ]
  %i.3 = phi i32 [ %inc25, %if.end.33 ], [ %i.2, %if.end.61 ]
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.end
  %user_g.3 = phi i32 [ %user_g.0, %if.end ], [ %user_g.2, %if.end.62 ]
  %i.4 = phi i32 [ %inc, %if.end ], [ %i.3, %if.end.62 ]
  br label %for.inc, !dbg !321

for.inc:                                          ; preds = %if.end.63
  %inc64 = add nsw i32 %i.4, 1, !dbg !322
  call void @llvm.dbg.value(metadata i32 %inc64, i64 0, metadata !245, metadata !50), !dbg !247
  br label %for.cond, !dbg !323

for.end:                                          ; preds = %for.cond
  %user_g.0.lcssa = phi i32 [ %user_g.0, %for.cond ]
  %nthreads65 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 0, !dbg !324
  %tmp36 = load i32, i32* %nthreads65, align 4, !dbg !324
  %cmp66 = icmp slt i32 %tmp36, 1, !dbg !326
  br i1 %cmp66, label %if.then.67, label %if.end.68, !dbg !327

if.then.67:                                       ; preds = %for.end
  call void @print_CLI_error(), !dbg !328
  br label %if.end.68, !dbg !328

if.end.68:                                        ; preds = %if.then.67, %for.end
  %n_isotopes69 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 1, !dbg !329
  %tmp37 = load i64, i64* %n_isotopes69, align 8, !dbg !329
  %cmp70 = icmp slt i64 %tmp37, 1, !dbg !331
  br i1 %cmp70, label %if.then.71, label %if.end.72, !dbg !332

if.then.71:                                       ; preds = %if.end.68
  call void @print_CLI_error(), !dbg !333
  br label %if.end.72, !dbg !333

if.end.72:                                        ; preds = %if.then.71, %if.end.68
  %n_gridpoints73 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 2, !dbg !334
  %tmp38 = load i64, i64* %n_gridpoints73, align 8, !dbg !334
  %cmp74 = icmp slt i64 %tmp38, 1, !dbg !336
  br i1 %cmp74, label %if.then.75, label %if.end.76, !dbg !337

if.then.75:                                       ; preds = %if.end.72
  call void @print_CLI_error(), !dbg !338
  br label %if.end.76, !dbg !338

if.end.76:                                        ; preds = %if.then.75, %if.end.72
  %lookups77 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 3, !dbg !339
  %tmp39 = load i32, i32* %lookups77, align 4, !dbg !339
  %cmp78 = icmp slt i32 %tmp39, 1, !dbg !341
  br i1 %cmp78, label %if.then.79, label %if.end.80, !dbg !342

if.then.79:                                       ; preds = %if.end.76
  call void @print_CLI_error(), !dbg !343
  br label %if.end.80, !dbg !343

if.end.80:                                        ; preds = %if.then.79, %if.end.76
  %HM81 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !344
  %tmp40 = load i8*, i8** %HM81, align 8, !dbg !344
  %call82 = call i32 @strcasecmp(i8* %tmp40, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34, i32 0, i32 0)) #7, !dbg !346
  %cmp83 = icmp ne i32 %call82, 0, !dbg !347
  br i1 %cmp83, label %land.lhs.true, label %if.end.96, !dbg !348

land.lhs.true:                                    ; preds = %if.end.80
  %HM84 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !349
  %tmp41 = load i8*, i8** %HM84, align 8, !dbg !349
  %call85 = call i32 @strcasecmp(i8* %tmp41, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0)) #7, !dbg !350
  %cmp86 = icmp ne i32 %call85, 0, !dbg !351
  br i1 %cmp86, label %land.lhs.true.87, label %if.end.96, !dbg !352

land.lhs.true.87:                                 ; preds = %land.lhs.true
  %HM88 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !353
  %tmp42 = load i8*, i8** %HM88, align 8, !dbg !353
  %call89 = call i32 @strcasecmp(i8* %tmp42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0)) #7, !dbg !354
  %cmp90 = icmp ne i32 %call89, 0, !dbg !355
  br i1 %cmp90, label %land.lhs.true.91, label %if.end.96, !dbg !356

land.lhs.true.91:                                 ; preds = %land.lhs.true.87
  %HM92 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !357
  %tmp43 = load i8*, i8** %HM92, align 8, !dbg !357
  %call93 = call i32 @strcasecmp(i8* %tmp43, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i32 0, i32 0)) #7, !dbg !358
  %cmp94 = icmp ne i32 %call93, 0, !dbg !359
  br i1 %cmp94, label %if.then.95, label %if.end.96, !dbg !360

if.then.95:                                       ; preds = %land.lhs.true.91
  call void @print_CLI_error(), !dbg !361
  br label %if.end.96, !dbg !361

if.end.96:                                        ; preds = %if.then.95, %land.lhs.true.91, %land.lhs.true.87, %land.lhs.true, %if.end.80
  %HM97 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !362
  %tmp44 = load i8*, i8** %HM97, align 8, !dbg !362
  %call98 = call i32 @strcasecmp(i8* %tmp44, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34, i32 0, i32 0)) #7, !dbg !364
  %cmp99 = icmp eq i32 %call98, 0, !dbg !365
  br i1 %cmp99, label %if.then.100, label %if.else.102, !dbg !366

if.then.100:                                      ; preds = %if.end.96
  %n_isotopes101 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 1, !dbg !367
  store i64 68, i64* %n_isotopes101, align 8, !dbg !368
  br label %if.end.120, !dbg !369

if.else.102:                                      ; preds = %if.end.96
  %HM103 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !370
  %tmp45 = load i8*, i8** %HM103, align 8, !dbg !370
  %call104 = call i32 @strcasecmp(i8* %tmp45, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0)) #7, !dbg !372
  %cmp105 = icmp eq i32 %call104, 0, !dbg !373
  br i1 %cmp105, label %land.lhs.true.106, label %if.else.110, !dbg !374

land.lhs.true.106:                                ; preds = %if.else.102
  %cmp107 = icmp eq i32 %user_g.0.lcssa, 0, !dbg !375
  br i1 %cmp107, label %if.then.108, label %if.else.110, !dbg !376

if.then.108:                                      ; preds = %land.lhs.true.106
  %n_gridpoints109 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 2, !dbg !377
  store i64 238847, i64* %n_gridpoints109, align 8, !dbg !378
  br label %if.end.119, !dbg !379

if.else.110:                                      ; preds = %land.lhs.true.106, %if.else.102
  %HM111 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 4, !dbg !380
  %tmp47 = load i8*, i8** %HM111, align 8, !dbg !380
  %call112 = call i32 @strcasecmp(i8* %tmp47, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i32 0, i32 0)) #7, !dbg !382
  %cmp113 = icmp eq i32 %call112, 0, !dbg !383
  br i1 %cmp113, label %land.lhs.true.114, label %if.end.118, !dbg !384

land.lhs.true.114:                                ; preds = %if.else.110
  %cmp115 = icmp eq i32 %user_g.0.lcssa, 0, !dbg !385
  br i1 %cmp115, label %if.then.116, label %if.end.118, !dbg !386

if.then.116:                                      ; preds = %land.lhs.true.114
  %n_gridpoints117 = getelementptr inbounds %struct.Inputs, %struct.Inputs* %input, i32 0, i32 2, !dbg !387
  store i64 501578, i64* %n_gridpoints117, align 8, !dbg !388
  br label %if.end.118, !dbg !389

if.end.118:                                       ; preds = %if.then.116, %land.lhs.true.114, %if.else.110
  br label %if.end.119

if.end.119:                                       ; preds = %if.end.118, %if.then.108
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.119, %if.then.100
  %tmp49 = bitcast %struct.Inputs* %agg.result to i8*, !dbg !390
  %tmp50 = bitcast %struct.Inputs* %input to i8*, !dbg !390
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %tmp49, i8* %tmp50, i64 40, i32 8, i1 false), !dbg !390
  ret void, !dbg !391
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #3

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #4

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #4

; Function Attrs: nounwind readonly
declare i64 @atol(i8*) #4

; Function Attrs: nounwind readonly
declare i32 @strcasecmp(i8*, i8*) #4

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #6

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!46, !47}
!llvm.ident = !{!48}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !8)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/XSBench")
!2 = !{}
!3 = !{!4, !5, !6}
!4 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!5 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!7 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!8 = !{!9, !13, !18, !32, !35, !38, !41, !42}
!9 = !DISubprogram(name: "logo", scope: !10, file: !10, line: 8, type: !11, isLocal: false, isDefinition: true, scopeLine: 8, flags: DIFlagPrototyped, isOptimized: false, function: void (i32)* @logo, variables: !2)
!10 = !DIFile(filename: "/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/XSBench/tmp.c", directory: "/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/XSBench")
!11 = !DISubroutineType(types: !12)
!12 = !{null, !4}
!13 = !DISubprogram(name: "center_print", scope: !10, file: !10, line: 26, type: !14, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*, i32)* @center_print, variables: !2)
!14 = !DISubroutineType(types: !15)
!15 = !{null, !16, !4}
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, align: 64)
!17 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!18 = !DISubprogram(name: "print_results", scope: !10, file: !10, line: 36, type: !19, isLocal: false, isDefinition: true, scopeLine: 37, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.Inputs*, i32, double, i32, i64)* @print_results, variables: !2)
!19 = !DISubroutineType(types: !20)
!20 = !{null, !21, !4, !5, !4, !31}
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "Inputs", file: !22, line: 48, baseType: !23)
!22 = !DIFile(filename: "./XSbench_header.h", directory: "/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/XSBench")
!23 = !DICompositeType(tag: DW_TAG_structure_type, file: !22, line: 42, size: 320, align: 64, elements: !24)
!24 = !{!25, !26, !28, !29, !30}
!25 = !DIDerivedType(tag: DW_TAG_member, name: "nthreads", scope: !23, file: !22, line: 43, baseType: !4, size: 32, align: 32)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "n_isotopes", scope: !23, file: !22, line: 44, baseType: !27, size: 64, align: 64, offset: 64)
!27 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "n_gridpoints", scope: !23, file: !22, line: 45, baseType: !27, size: 64, align: 64, offset: 128)
!29 = !DIDerivedType(tag: DW_TAG_member, name: "lookups", scope: !23, file: !22, line: 46, baseType: !4, size: 32, align: 32, offset: 192)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "HM", scope: !23, file: !22, line: 47, baseType: !6, size: 64, align: 64, offset: 256)
!31 = !DIBasicType(name: "long long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!32 = !DISubprogram(name: "print_inputs", scope: !10, file: !10, line: 88, type: !33, isLocal: false, isDefinition: true, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.Inputs*, i32, i32)* @print_inputs, variables: !2)
!33 = !DISubroutineType(types: !34)
!34 = !{null, !21, !4, !4}
!35 = !DISubprogram(name: "border_print", scope: !10, file: !10, line: 121, type: !36, isLocal: false, isDefinition: true, scopeLine: 121, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @border_print, variables: !2)
!36 = !DISubroutineType(types: !37)
!37 = !{null}
!38 = !DISubprogram(name: "fancy_int", scope: !10, file: !10, line: 128, type: !39, isLocal: false, isDefinition: true, scopeLine: 128, flags: DIFlagPrototyped, isOptimized: false, function: void (i64)* @fancy_int, variables: !2)
!39 = !DISubroutineType(types: !40)
!40 = !{null, !27}
!41 = !DISubprogram(name: "print_CLI_error", scope: !10, file: !10, line: 148, type: !36, isLocal: false, isDefinition: true, scopeLine: 148, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @print_CLI_error, variables: !2)
!42 = !DISubprogram(name: "read_CLI", scope: !10, file: !10, line: 160, type: !43, isLocal: false, isDefinition: true, scopeLine: 160, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.Inputs*, i32, i8**)* @read_CLI, variables: !2)
!43 = !DISubroutineType(types: !44)
!44 = !{!21, !4, !45}
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!46 = !{i32 2, !"Dwarf Version", i32 4}
!47 = !{i32 2, !"Debug Info Version", i32 3}
!48 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!49 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "version", arg: 1, scope: !9, file: !10, line: 8, type: !4)
!50 = !DIExpression()
!51 = !DILocation(line: 8, column: 15, scope: !9)
!52 = !DILocation(line: 9, column: 3, scope: !9)
!53 = !DILocation(line: 10, column: 3, scope: !9)
!54 = !DILocation(line: 17, column: 3, scope: !9)
!55 = !DILocation(line: 18, column: 3, scope: !9)
!56 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !9, file: !10, line: 19, type: !57)
!57 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 800, align: 8, elements: !58)
!58 = !{!59}
!59 = !DISubrange(count: 100)
!60 = !DILocation(line: 19, column: 8, scope: !9)
!61 = !DILocation(line: 20, column: 11, scope: !9)
!62 = !DILocation(line: 20, column: 3, scope: !9)
!63 = !DILocation(line: 21, column: 16, scope: !9)
!64 = !DILocation(line: 21, column: 3, scope: !9)
!65 = !DILocation(line: 22, column: 3, scope: !9)
!66 = !DILocation(line: 23, column: 1, scope: !9)
!67 = !DILocation(line: 122, column: 3, scope: !35)
!68 = !DILocation(line: 125, column: 1, scope: !35)
!69 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !13, file: !10, line: 26, type: !16)
!70 = !DILocation(line: 26, column: 31, scope: !13)
!71 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "width", arg: 2, scope: !13, file: !10, line: 26, type: !4)
!72 = !DILocation(line: 26, column: 38, scope: !13)
!73 = !DILocation(line: 27, column: 16, scope: !13)
!74 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "length", scope: !13, file: !10, line: 27, type: !4)
!75 = !DILocation(line: 27, column: 7, scope: !13)
!76 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !13, file: !10, line: 28, type: !4)
!77 = !DILocation(line: 28, column: 7, scope: !13)
!78 = !DILocation(line: 29, column: 8, scope: !79)
!79 = distinct !DILexicalBlock(scope: !13, file: !10, line: 29, column: 3)
!80 = !DILocation(line: 29, column: 27, scope: !81)
!81 = distinct !DILexicalBlock(scope: !79, file: !10, line: 29, column: 3)
!82 = !DILocation(line: 29, column: 37, scope: !81)
!83 = !DILocation(line: 29, column: 17, scope: !81)
!84 = !DILocation(line: 29, column: 3, scope: !79)
!85 = !DILocation(line: 30, column: 16, scope: !86)
!86 = distinct !DILexicalBlock(scope: !81, file: !10, line: 29, column: 47)
!87 = !DILocation(line: 30, column: 5, scope: !86)
!88 = !DILocation(line: 31, column: 3, scope: !86)
!89 = !DILocation(line: 29, column: 43, scope: !81)
!90 = !DILocation(line: 29, column: 3, scope: !81)
!91 = !DILocation(line: 32, column: 12, scope: !13)
!92 = !DILocation(line: 32, column: 3, scope: !13)
!93 = !DILocation(line: 33, column: 15, scope: !13)
!94 = !DILocation(line: 33, column: 3, scope: !13)
!95 = !DILocation(line: 34, column: 1, scope: !13)
!96 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "in", arg: 1, scope: !18, file: !10, line: 36, type: !21)
!97 = !DILocation(line: 36, column: 27, scope: !18)
!98 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "mype", arg: 2, scope: !18, file: !10, line: 36, type: !4)
!99 = !DILocation(line: 36, column: 35, scope: !18)
!100 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "runtime", arg: 3, scope: !18, file: !10, line: 36, type: !5)
!101 = !DILocation(line: 36, column: 48, scope: !18)
!102 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "nprocs", arg: 4, scope: !18, file: !10, line: 36, type: !4)
!103 = !DILocation(line: 36, column: 61, scope: !18)
!104 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "vhash", arg: 5, scope: !18, file: !10, line: 37, type: !31)
!105 = !DILocation(line: 37, column: 39, scope: !18)
!106 = !DILocation(line: 39, column: 42, scope: !18)
!107 = !DILocation(line: 39, column: 31, scope: !18)
!108 = !DILocation(line: 39, column: 50, scope: !18)
!109 = !DILocation(line: 39, column: 25, scope: !18)
!110 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "lookups_per_sec", scope: !18, file: !10, line: 39, type: !4)
!111 = !DILocation(line: 39, column: 7, scope: !18)
!112 = !DILocation(line: 50, column: 12, scope: !113)
!113 = distinct !DILexicalBlock(scope: !18, file: !10, line: 50, column: 7)
!114 = !DILocation(line: 50, column: 7, scope: !18)
!115 = !DILocation(line: 51, column: 5, scope: !116)
!116 = distinct !DILexicalBlock(scope: !113, file: !10, line: 50, column: 18)
!117 = !DILocation(line: 52, column: 5, scope: !116)
!118 = !DILocation(line: 53, column: 5, scope: !116)
!119 = !DILocation(line: 56, column: 36, scope: !116)
!120 = !DILocation(line: 56, column: 5, scope: !116)
!121 = !DILocation(line: 77, column: 5, scope: !116)
!122 = !DILocation(line: 85, column: 3, scope: !116)
!123 = !DILocation(line: 86, column: 1, scope: !18)
!124 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "in", arg: 1, scope: !32, file: !10, line: 88, type: !21)
!125 = !DILocation(line: 88, column: 26, scope: !32)
!126 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "nprocs", arg: 2, scope: !32, file: !10, line: 88, type: !4)
!127 = !DILocation(line: 88, column: 34, scope: !32)
!128 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "version", arg: 3, scope: !32, file: !10, line: 88, type: !4)
!129 = !DILocation(line: 88, column: 46, scope: !32)
!130 = !DILocation(line: 90, column: 17, scope: !32)
!131 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mem_tot", scope: !32, file: !10, line: 90, type: !4)
!132 = !DILocation(line: 90, column: 7, scope: !32)
!133 = !DILocation(line: 91, column: 3, scope: !32)
!134 = !DILocation(line: 92, column: 3, scope: !32)
!135 = !DILocation(line: 93, column: 3, scope: !32)
!136 = !DILocation(line: 97, column: 3, scope: !32)
!137 = !DILocation(line: 98, column: 51, scope: !32)
!138 = !DILocation(line: 98, column: 3, scope: !32)
!139 = !DILocation(line: 99, column: 52, scope: !32)
!140 = !DILocation(line: 99, column: 3, scope: !32)
!141 = !DILocation(line: 100, column: 3, scope: !32)
!142 = !DILocation(line: 101, column: 16, scope: !32)
!143 = !DILocation(line: 101, column: 3, scope: !32)
!144 = !DILocation(line: 102, column: 3, scope: !32)
!145 = !DILocation(line: 103, column: 16, scope: !32)
!146 = !DILocation(line: 103, column: 32, scope: !32)
!147 = !DILocation(line: 103, column: 27, scope: !32)
!148 = !DILocation(line: 103, column: 3, scope: !32)
!149 = !DILocation(line: 104, column: 3, scope: !32)
!150 = !DILocation(line: 105, column: 16, scope: !32)
!151 = !DILocation(line: 105, column: 13, scope: !32)
!152 = !DILocation(line: 105, column: 3, scope: !32)
!153 = !DILocation(line: 112, column: 51, scope: !32)
!154 = !DILocation(line: 112, column: 3, scope: !32)
!155 = !DILocation(line: 113, column: 3, scope: !32)
!156 = !DILocation(line: 114, column: 13, scope: !32)
!157 = !DILocation(line: 114, column: 3, scope: !32)
!158 = !DILocation(line: 116, column: 3, scope: !32)
!159 = !DILocation(line: 117, column: 3, scope: !32)
!160 = !DILocation(line: 118, column: 3, scope: !32)
!161 = !DILocation(line: 119, column: 1, scope: !32)
!162 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !38, file: !10, line: 128, type: !27)
!163 = !DILocation(line: 128, column: 21, scope: !38)
!164 = !DILocation(line: 129, column: 9, scope: !165)
!165 = distinct !DILexicalBlock(scope: !38, file: !10, line: 129, column: 7)
!166 = !DILocation(line: 129, column: 7, scope: !38)
!167 = !DILocation(line: 130, column: 5, scope: !165)
!168 = !DILocation(line: 132, column: 14, scope: !169)
!169 = distinct !DILexicalBlock(scope: !165, file: !10, line: 132, column: 12)
!170 = !DILocation(line: 132, column: 22, scope: !169)
!171 = !DILocation(line: 132, column: 27, scope: !169)
!172 = !DILocation(line: 132, column: 12, scope: !165)
!173 = !DILocation(line: 133, column: 29, scope: !169)
!174 = !DILocation(line: 133, column: 39, scope: !169)
!175 = !DILocation(line: 133, column: 5, scope: !169)
!176 = !DILocation(line: 135, column: 14, scope: !177)
!177 = distinct !DILexicalBlock(scope: !169, file: !10, line: 135, column: 12)
!178 = !DILocation(line: 135, column: 25, scope: !177)
!179 = !DILocation(line: 135, column: 30, scope: !177)
!180 = !DILocation(line: 135, column: 12, scope: !169)
!181 = !DILocation(line: 136, column: 35, scope: !177)
!182 = !DILocation(line: 136, column: 49, scope: !177)
!183 = !DILocation(line: 136, column: 60, scope: !177)
!184 = !DILocation(line: 136, column: 70, scope: !177)
!185 = !DILocation(line: 136, column: 5, scope: !177)
!186 = !DILocation(line: 138, column: 14, scope: !187)
!187 = distinct !DILexicalBlock(scope: !177, file: !10, line: 138, column: 12)
!188 = !DILocation(line: 138, column: 12, scope: !177)
!189 = !DILocation(line: 140, column: 14, scope: !187)
!190 = !DILocation(line: 141, column: 15, scope: !187)
!191 = !DILocation(line: 141, column: 29, scope: !187)
!192 = !DILocation(line: 142, column: 15, scope: !187)
!193 = !DILocation(line: 142, column: 26, scope: !187)
!194 = !DILocation(line: 143, column: 14, scope: !187)
!195 = !DILocation(line: 139, column: 5, scope: !187)
!196 = !DILocation(line: 145, column: 5, scope: !187)
!197 = !DILocation(line: 146, column: 1, scope: !38)
!198 = !DILocation(line: 149, column: 3, scope: !41)
!199 = !DILocation(line: 150, column: 3, scope: !41)
!200 = !DILocation(line: 151, column: 3, scope: !41)
!201 = !DILocation(line: 152, column: 3, scope: !41)
!202 = !DILocation(line: 153, column: 3, scope: !41)
!203 = !DILocation(line: 154, column: 3, scope: !41)
!204 = !DILocation(line: 155, column: 3, scope: !41)
!205 = !DILocation(line: 156, column: 3, scope: !41)
!206 = !DILocation(line: 157, column: 3, scope: !41)
!207 = !DILocation(line: 158, column: 1, scope: !41)
!208 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !42, file: !10, line: 160, type: !4)
!209 = !DILocation(line: 160, column: 21, scope: !42)
!210 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !42, file: !10, line: 160, type: !45)
!211 = !DILocation(line: 160, column: 33, scope: !42)
!212 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "input", scope: !42, file: !10, line: 161, type: !21)
!213 = !DILocation(line: 161, column: 10, scope: !42)
!214 = !DILocation(line: 167, column: 9, scope: !42)
!215 = !DILocation(line: 167, column: 18, scope: !42)
!216 = !DILocation(line: 171, column: 9, scope: !42)
!217 = !DILocation(line: 171, column: 20, scope: !42)
!218 = !DILocation(line: 174, column: 9, scope: !42)
!219 = !DILocation(line: 174, column: 22, scope: !42)
!220 = !DILocation(line: 177, column: 9, scope: !42)
!221 = !DILocation(line: 177, column: 17, scope: !42)
!222 = !DILocation(line: 180, column: 22, scope: !42)
!223 = !DILocation(line: 180, column: 9, scope: !42)
!224 = !DILocation(line: 180, column: 12, scope: !42)
!225 = !DILocation(line: 181, column: 9, scope: !42)
!226 = !DILocation(line: 181, column: 3, scope: !42)
!227 = !DILocation(line: 181, column: 15, scope: !42)
!228 = !DILocation(line: 182, column: 9, scope: !42)
!229 = !DILocation(line: 182, column: 3, scope: !42)
!230 = !DILocation(line: 182, column: 15, scope: !42)
!231 = !DILocation(line: 183, column: 9, scope: !42)
!232 = !DILocation(line: 183, column: 3, scope: !42)
!233 = !DILocation(line: 183, column: 15, scope: !42)
!234 = !DILocation(line: 184, column: 9, scope: !42)
!235 = !DILocation(line: 184, column: 3, scope: !42)
!236 = !DILocation(line: 184, column: 15, scope: !42)
!237 = !DILocation(line: 185, column: 9, scope: !42)
!238 = !DILocation(line: 185, column: 3, scope: !42)
!239 = !DILocation(line: 185, column: 15, scope: !42)
!240 = !DILocation(line: 186, column: 9, scope: !42)
!241 = !DILocation(line: 186, column: 3, scope: !42)
!242 = !DILocation(line: 186, column: 15, scope: !42)
!243 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "user_g", scope: !42, file: !10, line: 189, type: !4)
!244 = !DILocation(line: 189, column: 7, scope: !42)
!245 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !246, file: !10, line: 192, type: !4)
!246 = distinct !DILexicalBlock(scope: !42, file: !10, line: 192, column: 3)
!247 = !DILocation(line: 192, column: 12, scope: !246)
!248 = !DILocation(line: 192, column: 8, scope: !246)
!249 = !DILocation(line: 192, column: 21, scope: !250)
!250 = distinct !DILexicalBlock(scope: !246, file: !10, line: 192, column: 3)
!251 = !DILocation(line: 192, column: 3, scope: !246)
!252 = !DILocation(line: 193, column: 17, scope: !253)
!253 = distinct !DILexicalBlock(scope: !250, file: !10, line: 192, column: 34)
!254 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "arg", scope: !253, file: !10, line: 193, type: !6)
!255 = !DILocation(line: 193, column: 11, scope: !253)
!256 = !DILocation(line: 196, column: 9, scope: !257)
!257 = distinct !DILexicalBlock(scope: !253, file: !10, line: 196, column: 9)
!258 = !DILocation(line: 196, column: 27, scope: !257)
!259 = !DILocation(line: 196, column: 9, scope: !253)
!260 = !DILocation(line: 197, column: 11, scope: !261)
!261 = distinct !DILexicalBlock(scope: !262, file: !10, line: 197, column: 11)
!262 = distinct !DILexicalBlock(scope: !257, file: !10, line: 196, column: 33)
!263 = !DILocation(line: 197, column: 15, scope: !261)
!264 = !DILocation(line: 197, column: 11, scope: !262)
!265 = !DILocation(line: 198, column: 31, scope: !261)
!266 = !DILocation(line: 198, column: 26, scope: !261)
!267 = !DILocation(line: 198, column: 15, scope: !261)
!268 = !DILocation(line: 198, column: 24, scope: !261)
!269 = !DILocation(line: 198, column: 9, scope: !261)
!270 = !DILocation(line: 200, column: 9, scope: !261)
!271 = !DILocation(line: 201, column: 5, scope: !262)
!272 = !DILocation(line: 203, column: 14, scope: !273)
!273 = distinct !DILexicalBlock(scope: !257, file: !10, line: 203, column: 14)
!274 = !DILocation(line: 203, column: 32, scope: !273)
!275 = !DILocation(line: 203, column: 14, scope: !257)
!276 = !DILocation(line: 204, column: 11, scope: !277)
!277 = distinct !DILexicalBlock(scope: !278, file: !10, line: 204, column: 11)
!278 = distinct !DILexicalBlock(scope: !273, file: !10, line: 203, column: 38)
!279 = !DILocation(line: 204, column: 15, scope: !277)
!280 = !DILocation(line: 204, column: 11, scope: !278)
!281 = !DILocation(line: 206, column: 35, scope: !282)
!282 = distinct !DILexicalBlock(scope: !277, file: !10, line: 204, column: 23)
!283 = !DILocation(line: 206, column: 30, scope: !282)
!284 = !DILocation(line: 206, column: 15, scope: !282)
!285 = !DILocation(line: 206, column: 28, scope: !282)
!286 = !DILocation(line: 207, column: 7, scope: !282)
!287 = !DILocation(line: 208, column: 9, scope: !277)
!288 = !DILocation(line: 209, column: 5, scope: !278)
!289 = !DILocation(line: 211, column: 14, scope: !290)
!290 = distinct !DILexicalBlock(scope: !273, file: !10, line: 211, column: 14)
!291 = !DILocation(line: 211, column: 32, scope: !290)
!292 = !DILocation(line: 211, column: 14, scope: !273)
!293 = !DILocation(line: 212, column: 11, scope: !294)
!294 = distinct !DILexicalBlock(scope: !295, file: !10, line: 212, column: 11)
!295 = distinct !DILexicalBlock(scope: !290, file: !10, line: 211, column: 38)
!296 = !DILocation(line: 212, column: 15, scope: !294)
!297 = !DILocation(line: 212, column: 11, scope: !295)
!298 = !DILocation(line: 213, column: 30, scope: !294)
!299 = !DILocation(line: 213, column: 25, scope: !294)
!300 = !DILocation(line: 213, column: 15, scope: !294)
!301 = !DILocation(line: 213, column: 23, scope: !294)
!302 = !DILocation(line: 213, column: 9, scope: !294)
!303 = !DILocation(line: 215, column: 9, scope: !294)
!304 = !DILocation(line: 216, column: 5, scope: !295)
!305 = !DILocation(line: 218, column: 14, scope: !306)
!306 = distinct !DILexicalBlock(scope: !290, file: !10, line: 218, column: 14)
!307 = !DILocation(line: 218, column: 32, scope: !306)
!308 = !DILocation(line: 218, column: 14, scope: !290)
!309 = !DILocation(line: 219, column: 11, scope: !310)
!310 = distinct !DILexicalBlock(scope: !311, file: !10, line: 219, column: 11)
!311 = distinct !DILexicalBlock(scope: !306, file: !10, line: 218, column: 38)
!312 = !DILocation(line: 219, column: 15, scope: !310)
!313 = !DILocation(line: 219, column: 11, scope: !311)
!314 = !DILocation(line: 220, column: 20, scope: !310)
!315 = !DILocation(line: 220, column: 15, scope: !310)
!316 = !DILocation(line: 220, column: 18, scope: !310)
!317 = !DILocation(line: 220, column: 9, scope: !310)
!318 = !DILocation(line: 222, column: 9, scope: !310)
!319 = !DILocation(line: 223, column: 5, scope: !311)
!320 = !DILocation(line: 224, column: 7, scope: !306)
!321 = !DILocation(line: 225, column: 3, scope: !253)
!322 = !DILocation(line: 192, column: 30, scope: !250)
!323 = !DILocation(line: 192, column: 3, scope: !250)
!324 = !DILocation(line: 230, column: 13, scope: !325)
!325 = distinct !DILexicalBlock(scope: !42, file: !10, line: 230, column: 7)
!326 = !DILocation(line: 230, column: 22, scope: !325)
!327 = !DILocation(line: 230, column: 7, scope: !42)
!328 = !DILocation(line: 231, column: 5, scope: !325)
!329 = !DILocation(line: 234, column: 13, scope: !330)
!330 = distinct !DILexicalBlock(scope: !42, file: !10, line: 234, column: 7)
!331 = !DILocation(line: 234, column: 24, scope: !330)
!332 = !DILocation(line: 234, column: 7, scope: !42)
!333 = !DILocation(line: 235, column: 5, scope: !330)
!334 = !DILocation(line: 238, column: 13, scope: !335)
!335 = distinct !DILexicalBlock(scope: !42, file: !10, line: 238, column: 7)
!336 = !DILocation(line: 238, column: 26, scope: !335)
!337 = !DILocation(line: 238, column: 7, scope: !42)
!338 = !DILocation(line: 239, column: 5, scope: !335)
!339 = !DILocation(line: 242, column: 13, scope: !340)
!340 = distinct !DILexicalBlock(scope: !42, file: !10, line: 242, column: 7)
!341 = !DILocation(line: 242, column: 21, scope: !340)
!342 = !DILocation(line: 242, column: 7, scope: !42)
!343 = !DILocation(line: 243, column: 5, scope: !340)
!344 = !DILocation(line: 246, column: 24, scope: !345)
!345 = distinct !DILexicalBlock(scope: !42, file: !10, line: 246, column: 7)
!346 = !DILocation(line: 246, column: 7, scope: !345)
!347 = !DILocation(line: 246, column: 37, scope: !345)
!348 = !DILocation(line: 246, column: 42, scope: !345)
!349 = !DILocation(line: 247, column: 24, scope: !345)
!350 = !DILocation(line: 247, column: 7, scope: !345)
!351 = !DILocation(line: 247, column: 37, scope: !345)
!352 = !DILocation(line: 247, column: 42, scope: !345)
!353 = !DILocation(line: 248, column: 24, scope: !345)
!354 = !DILocation(line: 248, column: 7, scope: !345)
!355 = !DILocation(line: 248, column: 34, scope: !345)
!356 = !DILocation(line: 248, column: 39, scope: !345)
!357 = !DILocation(line: 249, column: 24, scope: !345)
!358 = !DILocation(line: 249, column: 7, scope: !345)
!359 = !DILocation(line: 249, column: 35, scope: !345)
!360 = !DILocation(line: 246, column: 7, scope: !42)
!361 = !DILocation(line: 250, column: 5, scope: !345)
!362 = !DILocation(line: 254, column: 24, scope: !363)
!363 = distinct !DILexicalBlock(scope: !42, file: !10, line: 254, column: 7)
!364 = !DILocation(line: 254, column: 7, scope: !363)
!365 = !DILocation(line: 254, column: 37, scope: !363)
!366 = !DILocation(line: 254, column: 7, scope: !42)
!367 = !DILocation(line: 255, column: 11, scope: !363)
!368 = !DILocation(line: 255, column: 22, scope: !363)
!369 = !DILocation(line: 255, column: 5, scope: !363)
!370 = !DILocation(line: 256, column: 29, scope: !371)
!371 = distinct !DILexicalBlock(scope: !363, file: !10, line: 256, column: 12)
!372 = !DILocation(line: 256, column: 12, scope: !371)
!373 = !DILocation(line: 256, column: 39, scope: !371)
!374 = !DILocation(line: 256, column: 44, scope: !371)
!375 = !DILocation(line: 256, column: 54, scope: !371)
!376 = !DILocation(line: 256, column: 12, scope: !363)
!377 = !DILocation(line: 257, column: 11, scope: !371)
!378 = !DILocation(line: 257, column: 24, scope: !371)
!379 = !DILocation(line: 257, column: 5, scope: !371)
!380 = !DILocation(line: 258, column: 29, scope: !381)
!381 = distinct !DILexicalBlock(scope: !371, file: !10, line: 258, column: 12)
!382 = !DILocation(line: 258, column: 12, scope: !381)
!383 = !DILocation(line: 258, column: 40, scope: !381)
!384 = !DILocation(line: 258, column: 45, scope: !381)
!385 = !DILocation(line: 258, column: 55, scope: !381)
!386 = !DILocation(line: 258, column: 12, scope: !371)
!387 = !DILocation(line: 259, column: 11, scope: !381)
!388 = !DILocation(line: 259, column: 24, scope: !381)
!389 = !DILocation(line: 259, column: 5, scope: !381)
!390 = !DILocation(line: 262, column: 10, scope: !42)
!391 = !DILocation(line: 262, column: 3, scope: !42)
