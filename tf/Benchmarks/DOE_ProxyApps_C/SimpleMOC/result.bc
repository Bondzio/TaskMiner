; ModuleID = '/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/SimpleMOC/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Table = type { float*, float, float, i32 }
%struct.Input = type { i32, i32, i32, i32, i32, float, float, i32, i32, i32, i8, i32, i64, float, float, float, float, i64, i64, i32, i64, i32, i32, i64, i64, i8, i8*, i64 }

; Function Attrs: nounwind uwtable
define float @urand() #0 {
entry:
  %call = call i32 @glibc_compat_rand(), !dbg !84
  %conv = sitofp i32 %call to float, !dbg !85
  %div = fdiv float %conv, 0x41E0000000000000, !dbg !86
  ret float %div, !dbg !87
}

declare i32 @glibc_compat_rand() #1

; Function Attrs: nounwind uwtable
define float @nrand(float %mean, float %sigma) #0 {
entry:
  %mean.addr = alloca float, align 4
  %sigma.addr = alloca float, align 4
  %rand1 = alloca float, align 4
  %rand2 = alloca float, align 4
  %x = alloca float, align 4
  store float %mean, float* %mean.addr, align 4
  call void @llvm.dbg.declare(metadata float* %mean.addr, metadata !88, metadata !89), !dbg !90
  store float %sigma, float* %sigma.addr, align 4
  call void @llvm.dbg.declare(metadata float* %sigma.addr, metadata !91, metadata !89), !dbg !92
  call void @llvm.dbg.declare(metadata float* %rand1, metadata !93, metadata !89), !dbg !94
  %call = call float @urand(), !dbg !95
  store float %call, float* %rand1, align 4, !dbg !94
  call void @llvm.dbg.declare(metadata float* %rand2, metadata !96, metadata !89), !dbg !97
  %call1 = call float @urand(), !dbg !98
  store float %call1, float* %rand2, align 4, !dbg !97
  call void @llvm.dbg.declare(metadata float* %x, metadata !99, metadata !89), !dbg !100
  %0 = load float, float* %rand1, align 4, !dbg !101
  %conv = fpext float %0 to double, !dbg !101
  %call2 = call double @log(double %conv) #4, !dbg !102
  %mul = fmul double -2.000000e+00, %call2, !dbg !103
  %call3 = call double @sqrt(double %mul) #4, !dbg !104
  %1 = load float, float* %rand2, align 4, !dbg !105
  %conv4 = fpext float %1 to double, !dbg !105
  %mul5 = fmul double 0x401921FB54442D18, %conv4, !dbg !106
  %call6 = call double @cos(double %mul5) #4, !dbg !107
  %mul7 = fmul double %call3, %call6, !dbg !108
  %conv8 = fptrunc double %mul7 to float, !dbg !104
  store float %conv8, float* %x, align 4, !dbg !100
  %2 = load float, float* %x, align 4, !dbg !109
  %3 = load float, float* %sigma.addr, align 4, !dbg !110
  %mul9 = fmul float %2, %3, !dbg !111
  %4 = load float, float* %mean.addr, align 4, !dbg !112
  %add = fadd float %mul9, %4, !dbg !113
  ret float %add, !dbg !114
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: nounwind
declare double @sqrt(double) #3

; Function Attrs: nounwind
declare double @log(double) #3

; Function Attrs: nounwind
declare double @cos(double) #3

; Function Attrs: nounwind uwtable
define float @pairwise_sum(float* %vector, i64 %size) #0 {
entry:
  %vector.addr = alloca float*, align 8
  %size.addr = alloca i64, align 8
  %sum = alloca float, align 4
  %i = alloca i32, align 4
  store float* %vector, float** %vector.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vector.addr, metadata !115, metadata !89), !dbg !116
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !117, metadata !89), !dbg !118
  call void @llvm.dbg.declare(metadata float* %sum, metadata !119, metadata !89), !dbg !120
  store float 0.000000e+00, float* %sum, align 4, !dbg !120
  %0 = load i64, i64* %size.addr, align 8, !dbg !121
  %cmp = icmp sle i64 %0, 16, !dbg !123
  br i1 %cmp, label %if.then, label %if.else, !dbg !124

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !125, metadata !89), !dbg !127
  store i32 0, i32* %i, align 4, !dbg !127
  br label %for.cond, !dbg !128

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4, !dbg !129
  %conv = sext i32 %1 to i64, !dbg !129
  %2 = load i64, i64* %size.addr, align 8, !dbg !133
  %cmp1 = icmp slt i64 %conv, %2, !dbg !134
  br i1 %cmp1, label %for.body, label %for.end, !dbg !135

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4, !dbg !136
  %idxprom = sext i32 %3 to i64, !dbg !137
  %4 = load float*, float** %vector.addr, align 8, !dbg !137
  %arrayidx = getelementptr inbounds float, float* %4, i64 %idxprom, !dbg !137
  %5 = load float, float* %arrayidx, align 4, !dbg !137
  %6 = load float, float* %sum, align 4, !dbg !138
  %add = fadd float %6, %5, !dbg !138
  store float %add, float* %sum, align 4, !dbg !138
  br label %for.inc, !dbg !139

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !140
  %inc = add nsw i32 %7, 1, !dbg !140
  store i32 %inc, i32* %i, align 4, !dbg !140
  br label %for.cond, !dbg !141

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !142

if.else:                                          ; preds = %entry
  %8 = load float*, float** %vector.addr, align 8, !dbg !143
  %arrayidx3 = getelementptr inbounds float, float* %8, i64 0, !dbg !143
  %9 = load i64, i64* %size.addr, align 8, !dbg !145
  %div = sdiv i64 %9, 2, !dbg !146
  %call = call float @pairwise_sum(float* %arrayidx3, i64 %div), !dbg !147
  %10 = load i64, i64* %size.addr, align 8, !dbg !148
  %div4 = sdiv i64 %10, 2, !dbg !149
  %11 = load float*, float** %vector.addr, align 8, !dbg !150
  %arrayidx5 = getelementptr inbounds float, float* %11, i64 %div4, !dbg !150
  %12 = load i64, i64* %size.addr, align 8, !dbg !151
  %13 = load i64, i64* %size.addr, align 8, !dbg !152
  %div6 = sdiv i64 %13, 2, !dbg !153
  %sub = sub nsw i64 %12, %div6, !dbg !154
  %call7 = call float @pairwise_sum(float* %arrayidx5, i64 %sub), !dbg !155
  %add8 = fadd float %call, %call7, !dbg !156
  store float %add8, float* %sum, align 4, !dbg !157
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  %14 = load float, float* %sum, align 4, !dbg !158
  ret float %14, !dbg !159
}

; Function Attrs: nounwind uwtable
define void @buildExponentialTable(%struct.Table* noalias sret %agg.result, float %precision, float %maxVal) #0 {
entry:
  %precision.addr = alloca float, align 4
  %maxVal.addr = alloca float, align 4
  %table = alloca %struct.Table, align 8
  %N = alloca i32, align 4
  %dx = alloca float, align 4
  %tableVals = alloca float*, align 8
  %n = alloca i32, align 4
  %exponential = alloca float, align 4
  store float %precision, float* %precision.addr, align 4
  call void @llvm.dbg.declare(metadata float* %precision.addr, metadata !160, metadata !89), !dbg !161
  store float %maxVal, float* %maxVal.addr, align 4
  call void @llvm.dbg.declare(metadata float* %maxVal.addr, metadata !162, metadata !89), !dbg !163
  call void @llvm.dbg.declare(metadata %struct.Table* %table, metadata !164, metadata !89), !dbg !165
  call void @llvm.dbg.declare(metadata i32* %N, metadata !166, metadata !89), !dbg !167
  %0 = load float, float* %maxVal.addr, align 4, !dbg !168
  %conv = fpext float %0 to double, !dbg !168
  %1 = load float, float* %precision.addr, align 4, !dbg !169
  %conv1 = fpext float %1 to double, !dbg !169
  %mul = fmul double 8.000000e+00, %conv1, !dbg !170
  %mul2 = fmul double %mul, 1.000000e-02, !dbg !171
  %div = fdiv double 1.000000e+00, %mul2, !dbg !172
  %call = call double @sqrt(double %div) #4, !dbg !173
  %mul3 = fmul double %conv, %call, !dbg !174
  %conv4 = fptosi double %mul3 to i32, !dbg !175
  store i32 %conv4, i32* %N, align 4, !dbg !167
  call void @llvm.dbg.declare(metadata float* %dx, metadata !176, metadata !89), !dbg !177
  %2 = load float, float* %maxVal.addr, align 4, !dbg !178
  %3 = load i32, i32* %N, align 4, !dbg !179
  %conv5 = sitofp i32 %3 to float, !dbg !180
  %div6 = fdiv float %2, %conv5, !dbg !181
  store float %div6, float* %dx, align 4, !dbg !177
  call void @llvm.dbg.declare(metadata float** %tableVals, metadata !182, metadata !89), !dbg !183
  %4 = load i32, i32* %N, align 4, !dbg !184
  %mul7 = mul nsw i32 2, %4, !dbg !185
  %conv8 = sext i32 %mul7 to i64, !dbg !186
  %mul9 = mul i64 %conv8, 4, !dbg !187
  %call10 = call noalias i8* @malloc(i64 %mul9) #4, !dbg !188
  %5 = bitcast i8* %call10 to float*, !dbg !188
  store float* %5, float** %tableVals, align 8, !dbg !183
  call void @llvm.dbg.declare(metadata i32* %n, metadata !189, metadata !89), !dbg !191
  store i32 0, i32* %n, align 4, !dbg !191
  br label %for.cond, !dbg !192

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %n, align 4, !dbg !193
  %7 = load i32, i32* %N, align 4, !dbg !197
  %cmp = icmp slt i32 %6, %7, !dbg !198
  br i1 %cmp, label %for.body, label %for.end, !dbg !199

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata float* %exponential, metadata !200, metadata !89), !dbg !202
  %8 = load i32, i32* %n, align 4, !dbg !203
  %sub = sub nsw i32 0, %8, !dbg !204
  %conv12 = sitofp i32 %sub to float, !dbg !204
  %9 = load float, float* %dx, align 4, !dbg !205
  %mul13 = fmul float %conv12, %9, !dbg !206
  %conv14 = fpext float %mul13 to double, !dbg !204
  %call15 = call double @exp(double %conv14) #4, !dbg !207
  %conv16 = fptrunc double %call15 to float, !dbg !207
  store float %conv16, float* %exponential, align 4, !dbg !202
  %10 = load float, float* %exponential, align 4, !dbg !208
  %sub17 = fsub float -0.000000e+00, %10, !dbg !209
  %11 = load i32, i32* %n, align 4, !dbg !210
  %mul18 = mul nsw i32 2, %11, !dbg !211
  %idxprom = sext i32 %mul18 to i64, !dbg !212
  %12 = load float*, float** %tableVals, align 8, !dbg !212
  %arrayidx = getelementptr inbounds float, float* %12, i64 %idxprom, !dbg !212
  store float %sub17, float* %arrayidx, align 4, !dbg !213
  %13 = load i32, i32* %n, align 4, !dbg !214
  %conv19 = sitofp i32 %13 to float, !dbg !214
  %14 = load float, float* %dx, align 4, !dbg !215
  %mul20 = fmul float %conv19, %14, !dbg !216
  %sub21 = fsub float %mul20, 1.000000e+00, !dbg !217
  %15 = load float, float* %exponential, align 4, !dbg !218
  %mul22 = fmul float %sub21, %15, !dbg !219
  %add = fadd float 1.000000e+00, %mul22, !dbg !220
  %16 = load i32, i32* %n, align 4, !dbg !221
  %mul23 = mul nsw i32 2, %16, !dbg !222
  %add24 = add nsw i32 %mul23, 1, !dbg !223
  %idxprom25 = sext i32 %add24 to i64, !dbg !224
  %17 = load float*, float** %tableVals, align 8, !dbg !224
  %arrayidx26 = getelementptr inbounds float, float* %17, i64 %idxprom25, !dbg !224
  store float %add, float* %arrayidx26, align 4, !dbg !225
  br label %for.inc, !dbg !226

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %n, align 4, !dbg !227
  %inc = add nsw i32 %18, 1, !dbg !227
  store i32 %inc, i32* %n, align 4, !dbg !227
  br label %for.cond, !dbg !228

for.end:                                          ; preds = %for.cond
  %19 = load float, float* %dx, align 4, !dbg !229
  %dx27 = getelementptr inbounds %struct.Table, %struct.Table* %table, i32 0, i32 1, !dbg !230
  store float %19, float* %dx27, align 4, !dbg !231
  %20 = load float*, float** %tableVals, align 8, !dbg !232
  %values = getelementptr inbounds %struct.Table, %struct.Table* %table, i32 0, i32 0, !dbg !233
  store float* %20, float** %values, align 8, !dbg !234
  %21 = load float, float* %maxVal.addr, align 4, !dbg !235
  %dx28 = getelementptr inbounds %struct.Table, %struct.Table* %table, i32 0, i32 1, !dbg !236
  %22 = load float, float* %dx28, align 4, !dbg !236
  %sub29 = fsub float %21, %22, !dbg !237
  %maxVal30 = getelementptr inbounds %struct.Table, %struct.Table* %table, i32 0, i32 2, !dbg !238
  store float %sub29, float* %maxVal30, align 4, !dbg !239
  %23 = load i32, i32* %N, align 4, !dbg !240
  %N31 = getelementptr inbounds %struct.Table, %struct.Table* %table, i32 0, i32 3, !dbg !241
  store i32 %23, i32* %N31, align 4, !dbg !242
  %24 = bitcast %struct.Table* %agg.result to i8*, !dbg !243
  %25 = bitcast %struct.Table* %table to i8*, !dbg !243
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 24, i32 8, i1 false), !dbg !243
  ret void, !dbg !244
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #3

; Function Attrs: nounwind
declare double @exp(double) #3

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define double @get_time() #0 {
entry:
  %time = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %time, metadata !245, metadata !89), !dbg !248
  %call = call i64 @clock() #4, !dbg !249
  store i64 %call, i64* %time, align 8, !dbg !250
  %0 = load i64, i64* %time, align 8, !dbg !251
  %conv = sitofp i64 %0 to double, !dbg !252
  %div = fdiv double %conv, 1.000000e+06, !dbg !253
  ret double %div, !dbg !254
}

; Function Attrs: nounwind
declare i64 @clock() #3

; Function Attrs: nounwind uwtable
define i64 @est_mem_usage(%struct.Input* byval align 8 %I) #0 {
entry:
  %nbytes = alloca i64, align 8
  %z_stacked = alloca i32, align 4
  %n_xs_regions = alloca i64, align 8
  call void @llvm.dbg.declare(metadata %struct.Input* %I, metadata !255, metadata !89), !dbg !256
  call void @llvm.dbg.declare(metadata i64* %nbytes, metadata !257, metadata !89), !dbg !258
  store i64 0, i64* %nbytes, align 8, !dbg !258
  call void @llvm.dbg.declare(metadata i32* %z_stacked, metadata !259, metadata !89), !dbg !260
  %height = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 14, !dbg !261
  %0 = load float, float* %height, align 4, !dbg !261
  %axial_z_sep = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 6, !dbg !262
  %1 = load float, float* %axial_z_sep, align 4, !dbg !262
  %decomp_assemblies_ax = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 11, !dbg !263
  %2 = load i32, i32* %decomp_assemblies_ax, align 4, !dbg !263
  %conv = sitofp i32 %2 to float, !dbg !264
  %mul = fmul float %1, %conv, !dbg !265
  %div = fdiv float %0, %mul, !dbg !266
  %conv1 = fptosi float %div to i32, !dbg !267
  store i32 %conv1, i32* %z_stacked, align 4, !dbg !260
  call void @llvm.dbg.declare(metadata i64* %n_xs_regions, metadata !268, metadata !89), !dbg !269
  %n_source_regions_per_node = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 24, !dbg !270
  %3 = load i64, i64* %n_source_regions_per_node, align 8, !dbg !270
  %div2 = sdiv i64 %3, 8, !dbg !271
  store i64 %div2, i64* %n_xs_regions, align 8, !dbg !269
  %ntracks_2D = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 18, !dbg !272
  %4 = load i64, i64* %ntracks_2D, align 8, !dbg !272
  %mul3 = mul i64 %4, 32, !dbg !273
  %5 = load i64, i64* %nbytes, align 8, !dbg !274
  %add = add i64 %5, %mul3, !dbg !274
  store i64 %add, i64* %nbytes, align 8, !dbg !274
  %segments_per_track = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 12, !dbg !275
  %6 = load i64, i64* %segments_per_track, align 8, !dbg !275
  %ntracks_2D4 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 18, !dbg !276
  %7 = load i64, i64* %ntracks_2D4, align 8, !dbg !276
  %mul5 = mul nsw i64 %6, %7, !dbg !277
  %mul6 = mul i64 %mul5, 16, !dbg !278
  %8 = load i64, i64* %nbytes, align 8, !dbg !279
  %add7 = add i64 %8, %mul6, !dbg !279
  store i64 %add7, i64* %nbytes, align 8, !dbg !279
  %ntracks_2D8 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 18, !dbg !280
  %9 = load i64, i64* %ntracks_2D8, align 8, !dbg !280
  %mul9 = mul i64 %9, 8, !dbg !281
  %10 = load i64, i64* %nbytes, align 8, !dbg !282
  %add10 = add i64 %10, %mul9, !dbg !282
  store i64 %add10, i64* %nbytes, align 8, !dbg !282
  %ntracks_2D11 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 18, !dbg !283
  %11 = load i64, i64* %ntracks_2D11, align 8, !dbg !283
  %n_polar_angles = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 8, !dbg !284
  %12 = load i32, i32* %n_polar_angles, align 4, !dbg !284
  %conv12 = sext i32 %12 to i64, !dbg !285
  %mul13 = mul nsw i64 %11, %conv12, !dbg !286
  %mul14 = mul i64 %mul13, 8, !dbg !287
  %13 = load i64, i64* %nbytes, align 8, !dbg !288
  %add15 = add i64 %13, %mul14, !dbg !288
  store i64 %add15, i64* %nbytes, align 8, !dbg !288
  %ntracks = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 20, !dbg !289
  %14 = load i64, i64* %ntracks, align 8, !dbg !289
  %mul16 = mul i64 %14, 40, !dbg !290
  %15 = load i64, i64* %nbytes, align 8, !dbg !291
  %add17 = add i64 %15, %mul16, !dbg !291
  store i64 %add17, i64* %nbytes, align 8, !dbg !291
  %ntracks_2D18 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 18, !dbg !292
  %16 = load i64, i64* %ntracks_2D18, align 8, !dbg !292
  %n_polar_angles19 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 8, !dbg !293
  %17 = load i32, i32* %n_polar_angles19, align 4, !dbg !293
  %conv20 = sext i32 %17 to i64, !dbg !294
  %mul21 = mul nsw i64 %16, %conv20, !dbg !295
  %18 = load i32, i32* %z_stacked, align 4, !dbg !296
  %conv22 = sext i32 %18 to i64, !dbg !296
  %mul23 = mul nsw i64 %mul21, %conv22, !dbg !297
  %n_egroups = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 9, !dbg !298
  %19 = load i32, i32* %n_egroups, align 4, !dbg !298
  %conv24 = sext i32 %19 to i64, !dbg !299
  %mul25 = mul nsw i64 %mul23, %conv24, !dbg !300
  %mul26 = mul i64 %mul25, 4, !dbg !301
  %mul27 = mul i64 %mul26, 2, !dbg !302
  %20 = load i64, i64* %nbytes, align 8, !dbg !303
  %add28 = add i64 %20, %mul27, !dbg !303
  store i64 %add28, i64* %nbytes, align 8, !dbg !303
  %n_source_regions_per_node29 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 24, !dbg !304
  %21 = load i64, i64* %n_source_regions_per_node29, align 8, !dbg !304
  %mul30 = mul i64 %21, 48, !dbg !305
  %22 = load i64, i64* %nbytes, align 8, !dbg !306
  %add31 = add i64 %22, %mul30, !dbg !306
  store i64 %add31, i64* %nbytes, align 8, !dbg !306
  %23 = load i64, i64* %n_xs_regions, align 8, !dbg !307
  %mul32 = mul i64 %23, 8, !dbg !308
  %24 = load i64, i64* %nbytes, align 8, !dbg !309
  %add33 = add i64 %24, %mul32, !dbg !309
  store i64 %add33, i64* %nbytes, align 8, !dbg !309
  %25 = load i64, i64* %n_xs_regions, align 8, !dbg !310
  %mul34 = mul i64 %25, 8, !dbg !311
  %26 = load i64, i64* %nbytes, align 8, !dbg !312
  %add35 = add i64 %26, %mul34, !dbg !312
  store i64 %add35, i64* %nbytes, align 8, !dbg !312
  %27 = load i64, i64* %n_xs_regions, align 8, !dbg !313
  %n_egroups36 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 9, !dbg !314
  %28 = load i32, i32* %n_egroups36, align 4, !dbg !314
  %conv37 = sext i32 %28 to i64, !dbg !315
  %mul38 = mul nsw i64 %27, %conv37, !dbg !316
  %n_egroups39 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 9, !dbg !317
  %29 = load i32, i32* %n_egroups39, align 4, !dbg !317
  %conv40 = sext i32 %29 to i64, !dbg !318
  %mul41 = mul nsw i64 %mul38, %conv40, !dbg !319
  %mul42 = mul i64 %mul41, 4, !dbg !320
  %30 = load i64, i64* %nbytes, align 8, !dbg !321
  %add43 = add i64 %30, %mul42, !dbg !321
  store i64 %add43, i64* %nbytes, align 8, !dbg !321
  %31 = load i64, i64* %n_xs_regions, align 8, !dbg !322
  %mul44 = mul i64 %31, 8, !dbg !323
  %32 = load i64, i64* %nbytes, align 8, !dbg !324
  %add45 = add i64 %32, %mul44, !dbg !324
  store i64 %add45, i64* %nbytes, align 8, !dbg !324
  %33 = load i64, i64* %n_xs_regions, align 8, !dbg !325
  %n_egroups46 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 9, !dbg !326
  %34 = load i32, i32* %n_egroups46, align 4, !dbg !326
  %conv47 = sext i32 %34 to i64, !dbg !327
  %mul48 = mul nsw i64 %33, %conv47, !dbg !328
  %mul49 = mul i64 %mul48, 8, !dbg !329
  %35 = load i64, i64* %nbytes, align 8, !dbg !330
  %add50 = add i64 %35, %mul49, !dbg !330
  store i64 %add50, i64* %nbytes, align 8, !dbg !330
  %36 = load i64, i64* %n_xs_regions, align 8, !dbg !331
  %n_egroups51 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 9, !dbg !332
  %37 = load i32, i32* %n_egroups51, align 4, !dbg !332
  %conv52 = sext i32 %37 to i64, !dbg !333
  %mul53 = mul nsw i64 %36, %conv52, !dbg !334
  %mul54 = mul nsw i64 %mul53, 3, !dbg !335
  %mul55 = mul i64 %mul54, 4, !dbg !336
  %38 = load i64, i64* %nbytes, align 8, !dbg !337
  %add56 = add i64 %38, %mul55, !dbg !337
  store i64 %add56, i64* %nbytes, align 8, !dbg !337
  %n_source_regions_per_node57 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 24, !dbg !338
  %39 = load i64, i64* %n_source_regions_per_node57, align 8, !dbg !338
  %mul58 = mul i64 %39, 8, !dbg !339
  %40 = load i64, i64* %nbytes, align 8, !dbg !340
  %add59 = add i64 %40, %mul58, !dbg !340
  store i64 %add59, i64* %nbytes, align 8, !dbg !340
  %n_source_regions_per_node60 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 24, !dbg !341
  %41 = load i64, i64* %n_source_regions_per_node60, align 8, !dbg !341
  %fai = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 3, !dbg !342
  %42 = load i32, i32* %fai, align 4, !dbg !342
  %conv61 = sext i32 %42 to i64, !dbg !343
  %mul62 = mul nsw i64 %41, %conv61, !dbg !344
  %mul63 = mul i64 %mul62, 8, !dbg !345
  %43 = load i64, i64* %nbytes, align 8, !dbg !346
  %add64 = add i64 %43, %mul63, !dbg !346
  store i64 %add64, i64* %nbytes, align 8, !dbg !346
  %n_source_regions_per_node65 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 24, !dbg !347
  %44 = load i64, i64* %n_source_regions_per_node65, align 8, !dbg !347
  %mul66 = mul i64 %44, 8, !dbg !348
  %45 = load i64, i64* %nbytes, align 8, !dbg !349
  %add67 = add i64 %45, %mul66, !dbg !349
  store i64 %add67, i64* %nbytes, align 8, !dbg !349
  %n_source_regions_per_node68 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 24, !dbg !350
  %46 = load i64, i64* %n_source_regions_per_node68, align 8, !dbg !350
  %fai69 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 3, !dbg !351
  %47 = load i32, i32* %fai69, align 4, !dbg !351
  %conv70 = sext i32 %47 to i64, !dbg !352
  %mul71 = mul nsw i64 %46, %conv70, !dbg !353
  %mul72 = mul i64 %mul71, 8, !dbg !354
  %48 = load i64, i64* %nbytes, align 8, !dbg !355
  %add73 = add i64 %48, %mul72, !dbg !355
  store i64 %add73, i64* %nbytes, align 8, !dbg !355
  %n_source_regions_per_node74 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 24, !dbg !356
  %49 = load i64, i64* %n_source_regions_per_node74, align 8, !dbg !356
  %fai75 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 3, !dbg !357
  %50 = load i32, i32* %fai75, align 4, !dbg !357
  %conv76 = sext i32 %50 to i64, !dbg !358
  %mul77 = mul nsw i64 %49, %conv76, !dbg !359
  %n_egroups78 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 9, !dbg !360
  %51 = load i32, i32* %n_egroups78, align 4, !dbg !360
  %conv79 = sext i32 %51 to i64, !dbg !361
  %mul80 = mul nsw i64 %mul77, %conv79, !dbg !362
  %mul81 = mul i64 %mul80, 4, !dbg !363
  %52 = load i64, i64* %nbytes, align 8, !dbg !364
  %add82 = add i64 %52, %mul81, !dbg !364
  store i64 %add82, i64* %nbytes, align 8, !dbg !364
  %nthreads = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 21, !dbg !365
  %53 = load i32, i32* %nthreads, align 4, !dbg !365
  %z_stacked83 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 19, !dbg !366
  %54 = load i32, i32* %z_stacked83, align 4, !dbg !366
  %mul84 = mul nsw i32 %53, %54, !dbg !367
  %conv85 = sext i32 %mul84 to i64, !dbg !368
  %mul86 = mul i64 %conv85, 8, !dbg !369
  %55 = load i64, i64* %nbytes, align 8, !dbg !370
  %add87 = add i64 %55, %mul86, !dbg !370
  store i64 %add87, i64* %nbytes, align 8, !dbg !370
  %nthreads88 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 21, !dbg !371
  %56 = load i32, i32* %nthreads88, align 4, !dbg !371
  %z_stacked89 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 19, !dbg !372
  %57 = load i32, i32* %z_stacked89, align 4, !dbg !372
  %mul90 = mul nsw i32 %56, %57, !dbg !373
  %conv91 = sext i32 %mul90 to i64, !dbg !374
  %mul92 = mul i64 %conv91, 8, !dbg !375
  %58 = load i64, i64* %nbytes, align 8, !dbg !376
  %add93 = add i64 %58, %mul92, !dbg !376
  store i64 %add93, i64* %nbytes, align 8, !dbg !376
  %nthreads94 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 21, !dbg !377
  %59 = load i32, i32* %nthreads94, align 4, !dbg !377
  %z_stacked95 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 19, !dbg !378
  %60 = load i32, i32* %z_stacked95, align 4, !dbg !378
  %mul96 = mul nsw i32 %59, %60, !dbg !379
  %conv97 = sext i32 %mul96 to i64, !dbg !380
  %mul98 = mul i64 %conv97, 4, !dbg !381
  %61 = load i64, i64* %nbytes, align 8, !dbg !382
  %add99 = add i64 %61, %mul98, !dbg !382
  store i64 %add99, i64* %nbytes, align 8, !dbg !382
  %nthreads100 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 21, !dbg !383
  %62 = load i32, i32* %nthreads100, align 4, !dbg !383
  %z_stacked101 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 19, !dbg !384
  %63 = load i32, i32* %z_stacked101, align 4, !dbg !384
  %mul102 = mul nsw i32 %62, %63, !dbg !385
  %conv103 = sext i32 %mul102 to i64, !dbg !386
  %mul104 = mul i64 %conv103, 4, !dbg !387
  %64 = load i64, i64* %nbytes, align 8, !dbg !388
  %add105 = add i64 %64, %mul104, !dbg !388
  store i64 %add105, i64* %nbytes, align 8, !dbg !388
  %nthreads106 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 21, !dbg !389
  %65 = load i32, i32* %nthreads106, align 4, !dbg !389
  %z_stacked107 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 19, !dbg !390
  %66 = load i32, i32* %z_stacked107, align 4, !dbg !390
  %mul108 = mul nsw i32 %65, %66, !dbg !391
  %mul109 = mul nsw i32 %mul108, 2, !dbg !392
  %conv110 = sext i32 %mul109 to i64, !dbg !393
  %segments_per_track111 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 12, !dbg !394
  %67 = load i64, i64* %segments_per_track111, align 8, !dbg !394
  %mul112 = mul nsw i64 %conv110, %67, !dbg !395
  %mul113 = mul i64 %mul112, 8, !dbg !396
  %68 = load i64, i64* %nbytes, align 8, !dbg !397
  %add114 = add i64 %68, %mul113, !dbg !397
  store i64 %add114, i64* %nbytes, align 8, !dbg !397
  %nthreads115 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 21, !dbg !398
  %69 = load i32, i32* %nthreads115, align 4, !dbg !398
  %z_stacked116 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 19, !dbg !399
  %70 = load i32, i32* %z_stacked116, align 4, !dbg !399
  %mul117 = mul nsw i32 %69, %70, !dbg !400
  %mul118 = mul nsw i32 %mul117, 2, !dbg !401
  %conv119 = sext i32 %mul118 to i64, !dbg !402
  %segments_per_track120 = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 12, !dbg !403
  %71 = load i64, i64* %segments_per_track120, align 8, !dbg !403
  %mul121 = mul nsw i64 %conv119, %71, !dbg !404
  %mul122 = mul i64 %mul121, 8, !dbg !405
  %72 = load i64, i64* %nbytes, align 8, !dbg !406
  %add123 = add i64 %72, %mul122, !dbg !406
  store i64 %add123, i64* %nbytes, align 8, !dbg !406
  %73 = load i64, i64* %nbytes, align 8, !dbg !407
  ret i64 %73, !dbg !408
}

; Function Attrs: nounwind uwtable
define double @time_per_intersection(%struct.Input* byval align 8 %I, double %time) #0 {
entry:
  %time.addr = alloca double, align 8
  %tpi = alloca double, align 8
  call void @llvm.dbg.declare(metadata %struct.Input* %I, metadata !409, metadata !89), !dbg !410
  store double %time, double* %time.addr, align 8
  call void @llvm.dbg.declare(metadata double* %time.addr, metadata !411, metadata !89), !dbg !412
  call void @llvm.dbg.declare(metadata double* %tpi, metadata !413, metadata !89), !dbg !414
  %0 = load double, double* %time.addr, align 8, !dbg !415
  %segments_processed = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 27, !dbg !416
  %1 = load i64, i64* %segments_processed, align 8, !dbg !416
  %conv = sitofp i64 %1 to double, !dbg !417
  %div = fdiv double %0, %conv, !dbg !418
  %mul = fmul double %div, 1.000000e+09, !dbg !419
  %n_egroups = getelementptr inbounds %struct.Input, %struct.Input* %I, i32 0, i32 9, !dbg !420
  %2 = load i32, i32* %n_egroups, align 4, !dbg !420
  %conv1 = sitofp i32 %2 to double, !dbg !421
  %div2 = fdiv double %mul, %conv1, !dbg !422
  store double %div2, double* %tpi, align 8, !dbg !414
  %3 = load double, double* %tpi, align 8, !dbg !423
  ret double %3, !dbg !424
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!81, !82}
!llvm.ident = !{!83}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !12)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/SimpleMOC")
!2 = !{}
!3 = !{!4, !5, !6, !7}
!4 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!5 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!6 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "clock_t", file: !8, line: 59, baseType: !9)
!8 = !DIFile(filename: "/usr/include/time.h", directory: "/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/SimpleMOC")
!9 = !DIDerivedType(tag: DW_TAG_typedef, name: "__clock_t", file: !10, line: 135, baseType: !11)
!10 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/SimpleMOC")
!11 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!12 = !{!13, !17, !20, !24, !35, !38, !78}
!13 = !DISubprogram(name: "urand", scope: !14, file: !14, line: 4, type: !15, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: false, function: float ()* @urand, variables: !2)
!14 = !DIFile(filename: "/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/SimpleMOC/tmp.c", directory: "/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/SimpleMOC")
!15 = !DISubroutineType(types: !16)
!16 = !{!4}
!17 = !DISubprogram(name: "nrand", scope: !14, file: !14, line: 10, type: !18, isLocal: false, isDefinition: true, scopeLine: 10, flags: DIFlagPrototyped, isOptimized: false, function: float (float, float)* @nrand, variables: !2)
!18 = !DISubroutineType(types: !19)
!19 = !{!4, !4, !4}
!20 = !DISubprogram(name: "pairwise_sum", scope: !14, file: !14, line: 27, type: !21, isLocal: false, isDefinition: true, scopeLine: 27, flags: DIFlagPrototyped, isOptimized: false, function: float (float*, i64)* @pairwise_sum, variables: !2)
!21 = !DISubroutineType(types: !22)
!22 = !{!4, !23, !11}
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64, align: 64)
!24 = !DISubprogram(name: "buildExponentialTable", scope: !14, file: !14, line: 45, type: !25, isLocal: false, isDefinition: true, scopeLine: 45, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.Table*, float, float)* @buildExponentialTable, variables: !2)
!25 = !DISubroutineType(types: !26)
!26 = !{!27, !4, !4}
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "Table", file: !28, line: 136, baseType: !29)
!28 = !DIFile(filename: "./SimpleMOC_header.h", directory: "/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/SimpleMOC")
!29 = !DICompositeType(tag: DW_TAG_structure_type, file: !28, line: 131, size: 192, align: 64, elements: !30)
!30 = !{!31, !32, !33, !34}
!31 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !29, file: !28, line: 132, baseType: !23, size: 64, align: 64)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "dx", scope: !29, file: !28, line: 133, baseType: !4, size: 32, align: 32, offset: 64)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "maxVal", scope: !29, file: !28, line: 134, baseType: !4, size: 32, align: 32, offset: 96)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "N", scope: !29, file: !28, line: 135, baseType: !5, size: 32, align: 32, offset: 128)
!35 = !DISubprogram(name: "get_time", scope: !14, file: !14, line: 76, type: !36, isLocal: false, isDefinition: true, scopeLine: 76, flags: DIFlagPrototyped, isOptimized: false, function: double ()* @get_time, variables: !2)
!36 = !DISubroutineType(types: !37)
!37 = !{!6}
!38 = !DISubprogram(name: "est_mem_usage", scope: !14, file: !14, line: 92, type: !39, isLocal: false, isDefinition: true, scopeLine: 92, flags: DIFlagPrototyped, isOptimized: false, function: i64 (%struct.Input*)* @est_mem_usage, variables: !2)
!39 = !DISubroutineType(types: !40)
!40 = !{!41, !44}
!41 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !42, line: 62, baseType: !43)
!42 = !DIFile(filename: "/home/gleison/lge/llvm-3.7-src/build-debug/bin/../lib/clang/3.7.0/include/stddef.h", directory: "/home/gleison/tf/Benchmarks/DOE_ProxyApps_C/SimpleMOC")
!43 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!44 = !DIDerivedType(tag: DW_TAG_typedef, name: "Input", file: !28, line: 84, baseType: !45)
!45 = !DICompositeType(tag: DW_TAG_structure_type, file: !28, line: 36, size: 1216, align: 64, elements: !46)
!46 = !{!47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !77}
!47 = !DIDerivedType(tag: DW_TAG_member, name: "x_assemblies", scope: !45, file: !28, line: 37, baseType: !5, size: 32, align: 32)
!48 = !DIDerivedType(tag: DW_TAG_member, name: "y_assemblies", scope: !45, file: !28, line: 39, baseType: !5, size: 32, align: 32, offset: 32)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "cai", scope: !45, file: !28, line: 41, baseType: !5, size: 32, align: 32, offset: 64)
!50 = !DIDerivedType(tag: DW_TAG_member, name: "fai", scope: !45, file: !28, line: 42, baseType: !5, size: 32, align: 32, offset: 96)
!51 = !DIDerivedType(tag: DW_TAG_member, name: "axial_exp", scope: !45, file: !28, line: 44, baseType: !5, size: 32, align: 32, offset: 128)
!52 = !DIDerivedType(tag: DW_TAG_member, name: "radial_ray_sep", scope: !45, file: !28, line: 45, baseType: !4, size: 32, align: 32, offset: 160)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "axial_z_sep", scope: !45, file: !28, line: 46, baseType: !4, size: 32, align: 32, offset: 192)
!54 = !DIDerivedType(tag: DW_TAG_member, name: "n_azimuthal", scope: !45, file: !28, line: 47, baseType: !5, size: 32, align: 32, offset: 224)
!55 = !DIDerivedType(tag: DW_TAG_member, name: "n_polar_angles", scope: !45, file: !28, line: 48, baseType: !5, size: 32, align: 32, offset: 256)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "n_egroups", scope: !45, file: !28, line: 49, baseType: !5, size: 32, align: 32, offset: 288)
!57 = !DIDerivedType(tag: DW_TAG_member, name: "decompose", scope: !45, file: !28, line: 50, baseType: !58, size: 8, align: 8, offset: 320)
!58 = !DIBasicType(name: "_Bool", size: 8, align: 8, encoding: DW_ATE_boolean)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "decomp_assemblies_ax", scope: !45, file: !28, line: 51, baseType: !5, size: 32, align: 32, offset: 352)
!60 = !DIDerivedType(tag: DW_TAG_member, name: "segments_per_track", scope: !45, file: !28, line: 52, baseType: !11, size: 64, align: 64, offset: 384)
!61 = !DIDerivedType(tag: DW_TAG_member, name: "assembly_width", scope: !45, file: !28, line: 53, baseType: !4, size: 32, align: 32, offset: 448)
!62 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !45, file: !28, line: 54, baseType: !4, size: 32, align: 32, offset: 480)
!63 = !DIDerivedType(tag: DW_TAG_member, name: "domain_height", scope: !45, file: !28, line: 55, baseType: !4, size: 32, align: 32, offset: 512)
!64 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !45, file: !28, line: 56, baseType: !4, size: 32, align: 32, offset: 544)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "mype", scope: !45, file: !28, line: 57, baseType: !11, size: 64, align: 64, offset: 576)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "ntracks_2D", scope: !45, file: !28, line: 58, baseType: !11, size: 64, align: 64, offset: 640)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "z_stacked", scope: !45, file: !28, line: 59, baseType: !5, size: 32, align: 32, offset: 704)
!68 = !DIDerivedType(tag: DW_TAG_member, name: "ntracks", scope: !45, file: !28, line: 60, baseType: !11, size: 64, align: 64, offset: 768)
!69 = !DIDerivedType(tag: DW_TAG_member, name: "nthreads", scope: !45, file: !28, line: 62, baseType: !5, size: 32, align: 32, offset: 832)
!70 = !DIDerivedType(tag: DW_TAG_member, name: "papi_event_set", scope: !45, file: !28, line: 63, baseType: !5, size: 32, align: 32, offset: 864)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "n_2D_source_regions_per_assembly", scope: !45, file: !28, line: 67, baseType: !11, size: 64, align: 64, offset: 896)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "n_source_regions_per_node", scope: !45, file: !28, line: 70, baseType: !11, size: 64, align: 64, offset: 960)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "load_tracks", scope: !45, file: !28, line: 79, baseType: !58, size: 8, align: 8, offset: 1024)
!74 = !DIDerivedType(tag: DW_TAG_member, name: "track_file", scope: !45, file: !28, line: 80, baseType: !75, size: 64, align: 64, offset: 1088)
!75 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !76, size: 64, align: 64)
!76 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "segments_processed", scope: !45, file: !28, line: 82, baseType: !11, size: 64, align: 64, offset: 1152)
!78 = !DISubprogram(name: "time_per_intersection", scope: !14, file: !14, line: 136, type: !79, isLocal: false, isDefinition: true, scopeLine: 136, flags: DIFlagPrototyped, isOptimized: false, function: double (%struct.Input*, double)* @time_per_intersection, variables: !2)
!79 = !DISubroutineType(types: !80)
!80 = !{!6, !44, !6}
!81 = !{i32 2, !"Dwarf Version", i32 4}
!82 = !{i32 2, !"Debug Info Version", i32 3}
!83 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!84 = !DILocation(line: 5, column: 17, scope: !13)
!85 = !DILocation(line: 5, column: 10, scope: !13)
!86 = !DILocation(line: 5, column: 24, scope: !13)
!87 = !DILocation(line: 5, column: 3, scope: !13)
!88 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "mean", arg: 1, scope: !17, file: !14, line: 10, type: !4)
!89 = !DIExpression()
!90 = !DILocation(line: 10, column: 19, scope: !17)
!91 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sigma", arg: 2, scope: !17, file: !14, line: 10, type: !4)
!92 = !DILocation(line: 10, column: 31, scope: !17)
!93 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rand1", scope: !17, file: !14, line: 12, type: !4)
!94 = !DILocation(line: 12, column: 9, scope: !17)
!95 = !DILocation(line: 12, column: 17, scope: !17)
!96 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rand2", scope: !17, file: !14, line: 13, type: !4)
!97 = !DILocation(line: 13, column: 9, scope: !17)
!98 = !DILocation(line: 13, column: 17, scope: !17)
!99 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !17, file: !14, line: 17, type: !4)
!100 = !DILocation(line: 17, column: 9, scope: !17)
!101 = !DILocation(line: 17, column: 27, scope: !17)
!102 = !DILocation(line: 17, column: 23, scope: !17)
!103 = !DILocation(line: 17, column: 21, scope: !17)
!104 = !DILocation(line: 17, column: 13, scope: !17)
!105 = !DILocation(line: 17, column: 52, scope: !17)
!106 = !DILocation(line: 17, column: 50, scope: !17)
!107 = !DILocation(line: 17, column: 37, scope: !17)
!108 = !DILocation(line: 17, column: 35, scope: !17)
!109 = !DILocation(line: 23, column: 10, scope: !17)
!110 = !DILocation(line: 23, column: 14, scope: !17)
!111 = !DILocation(line: 23, column: 12, scope: !17)
!112 = !DILocation(line: 23, column: 22, scope: !17)
!113 = !DILocation(line: 23, column: 20, scope: !17)
!114 = !DILocation(line: 23, column: 3, scope: !17)
!115 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "vector", arg: 1, scope: !20, file: !14, line: 27, type: !23)
!116 = !DILocation(line: 27, column: 27, scope: !20)
!117 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "size", arg: 2, scope: !20, file: !14, line: 27, type: !11)
!118 = !DILocation(line: 27, column: 40, scope: !20)
!119 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sum", scope: !20, file: !14, line: 28, type: !4)
!120 = !DILocation(line: 28, column: 9, scope: !20)
!121 = !DILocation(line: 31, column: 7, scope: !122)
!122 = distinct !DILexicalBlock(scope: !20, file: !14, line: 31, column: 7)
!123 = !DILocation(line: 31, column: 12, scope: !122)
!124 = !DILocation(line: 31, column: 7, scope: !20)
!125 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !126, file: !14, line: 32, type: !5)
!126 = distinct !DILexicalBlock(scope: !122, file: !14, line: 32, column: 5)
!127 = !DILocation(line: 32, column: 14, scope: !126)
!128 = !DILocation(line: 32, column: 10, scope: !126)
!129 = !DILocation(line: 32, column: 21, scope: !130)
!130 = !DILexicalBlockFile(scope: !131, file: !14, discriminator: 2)
!131 = !DILexicalBlockFile(scope: !132, file: !14, discriminator: 1)
!132 = distinct !DILexicalBlock(scope: !126, file: !14, line: 32, column: 5)
!133 = !DILocation(line: 32, column: 25, scope: !132)
!134 = !DILocation(line: 32, column: 23, scope: !132)
!135 = !DILocation(line: 32, column: 5, scope: !126)
!136 = !DILocation(line: 33, column: 21, scope: !132)
!137 = !DILocation(line: 33, column: 14, scope: !132)
!138 = !DILocation(line: 33, column: 11, scope: !132)
!139 = !DILocation(line: 33, column: 7, scope: !132)
!140 = !DILocation(line: 32, column: 32, scope: !132)
!141 = !DILocation(line: 32, column: 5, scope: !132)
!142 = !DILocation(line: 33, column: 22, scope: !126)
!143 = !DILocation(line: 37, column: 25, scope: !144)
!144 = distinct !DILexicalBlock(scope: !122, file: !14, line: 35, column: 8)
!145 = !DILocation(line: 37, column: 36, scope: !144)
!146 = !DILocation(line: 37, column: 41, scope: !144)
!147 = !DILocation(line: 37, column: 11, scope: !144)
!148 = !DILocation(line: 38, column: 32, scope: !144)
!149 = !DILocation(line: 38, column: 37, scope: !144)
!150 = !DILocation(line: 38, column: 25, scope: !144)
!151 = !DILocation(line: 38, column: 43, scope: !144)
!152 = !DILocation(line: 38, column: 50, scope: !144)
!153 = !DILocation(line: 38, column: 55, scope: !144)
!154 = !DILocation(line: 38, column: 48, scope: !144)
!155 = !DILocation(line: 38, column: 11, scope: !144)
!156 = !DILocation(line: 37, column: 46, scope: !144)
!157 = !DILocation(line: 37, column: 9, scope: !144)
!158 = !DILocation(line: 41, column: 10, scope: !20)
!159 = !DILocation(line: 41, column: 3, scope: !20)
!160 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "precision", arg: 1, scope: !24, file: !14, line: 45, type: !4)
!161 = !DILocation(line: 45, column: 35, scope: !24)
!162 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxVal", arg: 2, scope: !24, file: !14, line: 45, type: !4)
!163 = !DILocation(line: 45, column: 52, scope: !24)
!164 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "table", scope: !24, file: !14, line: 47, type: !27)
!165 = !DILocation(line: 47, column: 9, scope: !24)
!166 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "N", scope: !24, file: !14, line: 50, type: !5)
!167 = !DILocation(line: 50, column: 7, scope: !24)
!168 = !DILocation(line: 50, column: 17, scope: !24)
!169 = !DILocation(line: 50, column: 44, scope: !24)
!170 = !DILocation(line: 50, column: 42, scope: !24)
!171 = !DILocation(line: 50, column: 54, scope: !24)
!172 = !DILocation(line: 50, column: 35, scope: !24)
!173 = !DILocation(line: 50, column: 26, scope: !24)
!174 = !DILocation(line: 50, column: 24, scope: !24)
!175 = !DILocation(line: 50, column: 11, scope: !24)
!176 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dx", scope: !24, file: !14, line: 53, type: !4)
!177 = !DILocation(line: 53, column: 9, scope: !24)
!178 = !DILocation(line: 53, column: 14, scope: !24)
!179 = !DILocation(line: 53, column: 30, scope: !24)
!180 = !DILocation(line: 53, column: 23, scope: !24)
!181 = !DILocation(line: 53, column: 21, scope: !24)
!182 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tableVals", scope: !24, file: !14, line: 56, type: !23)
!183 = !DILocation(line: 56, column: 10, scope: !24)
!184 = !DILocation(line: 56, column: 34, scope: !24)
!185 = !DILocation(line: 56, column: 32, scope: !24)
!186 = !DILocation(line: 56, column: 29, scope: !24)
!187 = !DILocation(line: 56, column: 37, scope: !24)
!188 = !DILocation(line: 56, column: 22, scope: !24)
!189 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !190, file: !14, line: 59, type: !5)
!190 = distinct !DILexicalBlock(scope: !24, file: !14, line: 59, column: 3)
!191 = !DILocation(line: 59, column: 12, scope: !190)
!192 = !DILocation(line: 59, column: 8, scope: !190)
!193 = !DILocation(line: 59, column: 19, scope: !194)
!194 = !DILexicalBlockFile(scope: !195, file: !14, discriminator: 2)
!195 = !DILexicalBlockFile(scope: !196, file: !14, discriminator: 1)
!196 = distinct !DILexicalBlock(scope: !190, file: !14, line: 59, column: 3)
!197 = !DILocation(line: 59, column: 23, scope: !196)
!198 = !DILocation(line: 59, column: 21, scope: !196)
!199 = !DILocation(line: 59, column: 3, scope: !190)
!200 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "exponential", scope: !201, file: !14, line: 61, type: !4)
!201 = distinct !DILexicalBlock(scope: !196, file: !14, line: 59, column: 31)
!202 = !DILocation(line: 61, column: 11, scope: !201)
!203 = !DILocation(line: 61, column: 30, scope: !201)
!204 = !DILocation(line: 61, column: 29, scope: !201)
!205 = !DILocation(line: 61, column: 34, scope: !201)
!206 = !DILocation(line: 61, column: 32, scope: !201)
!207 = !DILocation(line: 61, column: 25, scope: !201)
!208 = !DILocation(line: 62, column: 25, scope: !201)
!209 = !DILocation(line: 62, column: 24, scope: !201)
!210 = !DILocation(line: 62, column: 19, scope: !201)
!211 = !DILocation(line: 62, column: 17, scope: !201)
!212 = !DILocation(line: 62, column: 5, scope: !201)
!213 = !DILocation(line: 62, column: 22, scope: !201)
!214 = !DILocation(line: 63, column: 33, scope: !201)
!215 = !DILocation(line: 63, column: 37, scope: !201)
!216 = !DILocation(line: 63, column: 35, scope: !201)
!217 = !DILocation(line: 63, column: 40, scope: !201)
!218 = !DILocation(line: 63, column: 47, scope: !201)
!219 = !DILocation(line: 63, column: 45, scope: !201)
!220 = !DILocation(line: 63, column: 30, scope: !201)
!221 = !DILocation(line: 63, column: 19, scope: !201)
!222 = !DILocation(line: 63, column: 17, scope: !201)
!223 = !DILocation(line: 63, column: 21, scope: !201)
!224 = !DILocation(line: 63, column: 5, scope: !201)
!225 = !DILocation(line: 63, column: 26, scope: !201)
!226 = !DILocation(line: 64, column: 3, scope: !201)
!227 = !DILocation(line: 59, column: 27, scope: !196)
!228 = !DILocation(line: 59, column: 3, scope: !196)
!229 = !DILocation(line: 67, column: 14, scope: !24)
!230 = !DILocation(line: 67, column: 9, scope: !24)
!231 = !DILocation(line: 67, column: 12, scope: !24)
!232 = !DILocation(line: 68, column: 18, scope: !24)
!233 = !DILocation(line: 68, column: 9, scope: !24)
!234 = !DILocation(line: 68, column: 16, scope: !24)
!235 = !DILocation(line: 69, column: 18, scope: !24)
!236 = !DILocation(line: 69, column: 33, scope: !24)
!237 = !DILocation(line: 69, column: 25, scope: !24)
!238 = !DILocation(line: 69, column: 9, scope: !24)
!239 = !DILocation(line: 69, column: 16, scope: !24)
!240 = !DILocation(line: 70, column: 13, scope: !24)
!241 = !DILocation(line: 70, column: 9, scope: !24)
!242 = !DILocation(line: 70, column: 11, scope: !24)
!243 = !DILocation(line: 72, column: 10, scope: !24)
!244 = !DILocation(line: 72, column: 3, scope: !24)
!245 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "time", scope: !35, file: !14, line: 85, type: !246)
!246 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !8, line: 75, baseType: !247)
!247 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !10, line: 139, baseType: !11)
!248 = !DILocation(line: 85, column: 10, scope: !35)
!249 = !DILocation(line: 86, column: 10, scope: !35)
!250 = !DILocation(line: 86, column: 8, scope: !35)
!251 = !DILocation(line: 88, column: 18, scope: !35)
!252 = !DILocation(line: 88, column: 10, scope: !35)
!253 = !DILocation(line: 88, column: 23, scope: !35)
!254 = !DILocation(line: 88, column: 3, scope: !35)
!255 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "I", arg: 1, scope: !38, file: !14, line: 92, type: !44)
!256 = !DILocation(line: 92, column: 28, scope: !38)
!257 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "nbytes", scope: !38, file: !14, line: 93, type: !41)
!258 = !DILocation(line: 93, column: 10, scope: !38)
!259 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "z_stacked", scope: !38, file: !14, line: 95, type: !5)
!260 = !DILocation(line: 95, column: 7, scope: !38)
!261 = !DILocation(line: 95, column: 27, scope: !38)
!262 = !DILocation(line: 95, column: 39, scope: !38)
!263 = !DILocation(line: 96, column: 39, scope: !38)
!264 = !DILocation(line: 96, column: 37, scope: !38)
!265 = !DILocation(line: 95, column: 51, scope: !38)
!266 = !DILocation(line: 95, column: 34, scope: !38)
!267 = !DILocation(line: 95, column: 19, scope: !38)
!268 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n_xs_regions", scope: !38, file: !14, line: 98, type: !11)
!269 = !DILocation(line: 98, column: 8, scope: !38)
!270 = !DILocation(line: 98, column: 25, scope: !38)
!271 = !DILocation(line: 98, column: 51, scope: !38)
!272 = !DILocation(line: 100, column: 15, scope: !38)
!273 = !DILocation(line: 100, column: 26, scope: !38)
!274 = !DILocation(line: 100, column: 10, scope: !38)
!275 = !DILocation(line: 101, column: 15, scope: !38)
!276 = !DILocation(line: 101, column: 38, scope: !38)
!277 = !DILocation(line: 101, column: 34, scope: !38)
!278 = !DILocation(line: 101, column: 49, scope: !38)
!279 = !DILocation(line: 101, column: 10, scope: !38)
!280 = !DILocation(line: 102, column: 15, scope: !38)
!281 = !DILocation(line: 102, column: 26, scope: !38)
!282 = !DILocation(line: 102, column: 10, scope: !38)
!283 = !DILocation(line: 103, column: 15, scope: !38)
!284 = !DILocation(line: 103, column: 30, scope: !38)
!285 = !DILocation(line: 103, column: 28, scope: !38)
!286 = !DILocation(line: 103, column: 26, scope: !38)
!287 = !DILocation(line: 103, column: 45, scope: !38)
!288 = !DILocation(line: 103, column: 10, scope: !38)
!289 = !DILocation(line: 104, column: 15, scope: !38)
!290 = !DILocation(line: 104, column: 23, scope: !38)
!291 = !DILocation(line: 104, column: 10, scope: !38)
!292 = !DILocation(line: 105, column: 15, scope: !38)
!293 = !DILocation(line: 105, column: 30, scope: !38)
!294 = !DILocation(line: 105, column: 28, scope: !38)
!295 = !DILocation(line: 105, column: 26, scope: !38)
!296 = !DILocation(line: 105, column: 47, scope: !38)
!297 = !DILocation(line: 105, column: 45, scope: !38)
!298 = !DILocation(line: 105, column: 61, scope: !38)
!299 = !DILocation(line: 105, column: 59, scope: !38)
!300 = !DILocation(line: 105, column: 57, scope: !38)
!301 = !DILocation(line: 105, column: 71, scope: !38)
!302 = !DILocation(line: 105, column: 87, scope: !38)
!303 = !DILocation(line: 105, column: 10, scope: !38)
!304 = !DILocation(line: 106, column: 15, scope: !38)
!305 = !DILocation(line: 106, column: 41, scope: !38)
!306 = !DILocation(line: 106, column: 10, scope: !38)
!307 = !DILocation(line: 107, column: 13, scope: !38)
!308 = !DILocation(line: 107, column: 26, scope: !38)
!309 = !DILocation(line: 107, column: 10, scope: !38)
!310 = !DILocation(line: 108, column: 13, scope: !38)
!311 = !DILocation(line: 108, column: 26, scope: !38)
!312 = !DILocation(line: 108, column: 10, scope: !38)
!313 = !DILocation(line: 109, column: 13, scope: !38)
!314 = !DILocation(line: 109, column: 30, scope: !38)
!315 = !DILocation(line: 109, column: 28, scope: !38)
!316 = !DILocation(line: 109, column: 26, scope: !38)
!317 = !DILocation(line: 109, column: 44, scope: !38)
!318 = !DILocation(line: 109, column: 42, scope: !38)
!319 = !DILocation(line: 109, column: 40, scope: !38)
!320 = !DILocation(line: 109, column: 54, scope: !38)
!321 = !DILocation(line: 109, column: 10, scope: !38)
!322 = !DILocation(line: 110, column: 13, scope: !38)
!323 = !DILocation(line: 110, column: 26, scope: !38)
!324 = !DILocation(line: 110, column: 10, scope: !38)
!325 = !DILocation(line: 111, column: 13, scope: !38)
!326 = !DILocation(line: 111, column: 30, scope: !38)
!327 = !DILocation(line: 111, column: 28, scope: !38)
!328 = !DILocation(line: 111, column: 26, scope: !38)
!329 = !DILocation(line: 111, column: 40, scope: !38)
!330 = !DILocation(line: 111, column: 10, scope: !38)
!331 = !DILocation(line: 112, column: 13, scope: !38)
!332 = !DILocation(line: 112, column: 30, scope: !38)
!333 = !DILocation(line: 112, column: 28, scope: !38)
!334 = !DILocation(line: 112, column: 26, scope: !38)
!335 = !DILocation(line: 112, column: 40, scope: !38)
!336 = !DILocation(line: 112, column: 44, scope: !38)
!337 = !DILocation(line: 112, column: 10, scope: !38)
!338 = !DILocation(line: 113, column: 15, scope: !38)
!339 = !DILocation(line: 113, column: 41, scope: !38)
!340 = !DILocation(line: 113, column: 10, scope: !38)
!341 = !DILocation(line: 114, column: 15, scope: !38)
!342 = !DILocation(line: 114, column: 45, scope: !38)
!343 = !DILocation(line: 114, column: 43, scope: !38)
!344 = !DILocation(line: 114, column: 41, scope: !38)
!345 = !DILocation(line: 114, column: 49, scope: !38)
!346 = !DILocation(line: 114, column: 10, scope: !38)
!347 = !DILocation(line: 115, column: 15, scope: !38)
!348 = !DILocation(line: 115, column: 41, scope: !38)
!349 = !DILocation(line: 115, column: 10, scope: !38)
!350 = !DILocation(line: 116, column: 15, scope: !38)
!351 = !DILocation(line: 116, column: 45, scope: !38)
!352 = !DILocation(line: 116, column: 43, scope: !38)
!353 = !DILocation(line: 116, column: 41, scope: !38)
!354 = !DILocation(line: 116, column: 49, scope: !38)
!355 = !DILocation(line: 116, column: 10, scope: !38)
!356 = !DILocation(line: 117, column: 15, scope: !38)
!357 = !DILocation(line: 117, column: 45, scope: !38)
!358 = !DILocation(line: 117, column: 43, scope: !38)
!359 = !DILocation(line: 117, column: 41, scope: !38)
!360 = !DILocation(line: 117, column: 53, scope: !38)
!361 = !DILocation(line: 117, column: 51, scope: !38)
!362 = !DILocation(line: 117, column: 49, scope: !38)
!363 = !DILocation(line: 117, column: 63, scope: !38)
!364 = !DILocation(line: 117, column: 10, scope: !38)
!365 = !DILocation(line: 120, column: 15, scope: !38)
!366 = !DILocation(line: 120, column: 28, scope: !38)
!367 = !DILocation(line: 120, column: 24, scope: !38)
!368 = !DILocation(line: 120, column: 13, scope: !38)
!369 = !DILocation(line: 120, column: 38, scope: !38)
!370 = !DILocation(line: 120, column: 10, scope: !38)
!371 = !DILocation(line: 121, column: 15, scope: !38)
!372 = !DILocation(line: 121, column: 28, scope: !38)
!373 = !DILocation(line: 121, column: 24, scope: !38)
!374 = !DILocation(line: 121, column: 13, scope: !38)
!375 = !DILocation(line: 121, column: 38, scope: !38)
!376 = !DILocation(line: 121, column: 10, scope: !38)
!377 = !DILocation(line: 122, column: 15, scope: !38)
!378 = !DILocation(line: 122, column: 28, scope: !38)
!379 = !DILocation(line: 122, column: 24, scope: !38)
!380 = !DILocation(line: 122, column: 13, scope: !38)
!381 = !DILocation(line: 122, column: 38, scope: !38)
!382 = !DILocation(line: 122, column: 10, scope: !38)
!383 = !DILocation(line: 123, column: 15, scope: !38)
!384 = !DILocation(line: 123, column: 28, scope: !38)
!385 = !DILocation(line: 123, column: 24, scope: !38)
!386 = !DILocation(line: 123, column: 13, scope: !38)
!387 = !DILocation(line: 123, column: 38, scope: !38)
!388 = !DILocation(line: 123, column: 10, scope: !38)
!389 = !DILocation(line: 124, column: 15, scope: !38)
!390 = !DILocation(line: 124, column: 28, scope: !38)
!391 = !DILocation(line: 124, column: 24, scope: !38)
!392 = !DILocation(line: 124, column: 38, scope: !38)
!393 = !DILocation(line: 124, column: 13, scope: !38)
!394 = !DILocation(line: 124, column: 46, scope: !38)
!395 = !DILocation(line: 124, column: 42, scope: !38)
!396 = !DILocation(line: 124, column: 65, scope: !38)
!397 = !DILocation(line: 124, column: 10, scope: !38)
!398 = !DILocation(line: 125, column: 15, scope: !38)
!399 = !DILocation(line: 125, column: 28, scope: !38)
!400 = !DILocation(line: 125, column: 24, scope: !38)
!401 = !DILocation(line: 125, column: 38, scope: !38)
!402 = !DILocation(line: 125, column: 13, scope: !38)
!403 = !DILocation(line: 125, column: 46, scope: !38)
!404 = !DILocation(line: 125, column: 42, scope: !38)
!405 = !DILocation(line: 125, column: 65, scope: !38)
!406 = !DILocation(line: 125, column: 10, scope: !38)
!407 = !DILocation(line: 132, column: 10, scope: !38)
!408 = !DILocation(line: 132, column: 3, scope: !38)
!409 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "I", arg: 1, scope: !78, file: !14, line: 136, type: !44)
!410 = !DILocation(line: 136, column: 36, scope: !78)
!411 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "time", arg: 2, scope: !78, file: !14, line: 136, type: !6)
!412 = !DILocation(line: 136, column: 46, scope: !78)
!413 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tpi", scope: !78, file: !14, line: 141, type: !6)
!414 = !DILocation(line: 141, column: 10, scope: !78)
!415 = !DILocation(line: 141, column: 16, scope: !78)
!416 = !DILocation(line: 141, column: 33, scope: !78)
!417 = !DILocation(line: 141, column: 23, scope: !78)
!418 = !DILocation(line: 141, column: 21, scope: !78)
!419 = !DILocation(line: 141, column: 52, scope: !78)
!420 = !DILocation(line: 141, column: 72, scope: !78)
!421 = !DILocation(line: 141, column: 62, scope: !78)
!422 = !DILocation(line: 141, column: 60, scope: !78)
!423 = !DILocation(line: 142, column: 10, scope: !78)
!424 = !DILocation(line: 142, column: 3, scope: !78)
