; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@next = internal global i64 1, align 8
@.str = private unnamed_addr constant [32 x i8] c"Usage: fft <waves> <length> -i\0A\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"-i performs an inverse fft\0A\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"make <waves> random sinusoids\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"<length> is the number of samples\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"-i\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"RealOut:\0A\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"%f \09\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"ImagOut:\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @rand() #0 {
entry:
  %tmp = load i64, i64* @next, align 8, !dbg !28
  %mul = mul i64 %tmp, 1103515245, !dbg !29
  %add = add i64 %mul, 12345, !dbg !30
  store i64 %add, i64* @next, align 8, !dbg !31
  %tmp1 = load i64, i64* @next, align 8, !dbg !32
  %div = udiv i64 %tmp1, 65536, !dbg !33
  %conv = trunc i64 %div to i32, !dbg !34
  %rem = urem i32 %conv, 32767, !dbg !35
  %add1 = add i32 %rem, 1, !dbg !36
  ret i32 %add1, !dbg !37
}

; Function Attrs: nounwind uwtable
define void @srand(i32 %seed) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %seed, i64 0, metadata !38, metadata !39), !dbg !40
  %conv = zext i32 %seed to i64, !dbg !41
  store i64 %conv, i64* @next, align 8, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !44, metadata !39), !dbg !45
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !46, metadata !39), !dbg !47
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !48, metadata !39), !dbg !49
  %cmp = icmp slt i32 %argc, 3, !dbg !50
  br i1 %cmp, label %if.then, label %if.else, !dbg !52

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i32 0, i32 0)), !dbg !53
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i32 0, i32 0)), !dbg !55
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0)), !dbg !56
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i32 0, i32 0)), !dbg !57
  call void @exit(i32 -1) #6, !dbg !58
  unreachable, !dbg !58

if.else:                                          ; preds = %entry
  %cmp4 = icmp eq i32 %argc, 4, !dbg !59
  br i1 %cmp4, label %if.then.5, label %if.end, !dbg !61

if.then.5:                                        ; preds = %if.else
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 3, !dbg !62
  %tmp3 = load i8*, i8** %arrayidx, align 8, !dbg !62
  %call6 = call i32 @strncmp(i8* %tmp3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i64 2) #7, !dbg !63
  %tobool = icmp ne i32 %call6, 0, !dbg !64
  %lnot = xor i1 %tobool, true, !dbg !64
  %lnot.ext = zext i1 %lnot to i32, !dbg !64
  call void @llvm.dbg.value(metadata i32 %lnot.ext, i64 0, metadata !48, metadata !39), !dbg !49
  br label %if.end, !dbg !65

if.end:                                           ; preds = %if.then.5, %if.else
  %invfft.0 = phi i32 [ %lnot.ext, %if.then.5 ], [ 0, %if.else ]
  br label %if.end.7

if.end.7:                                         ; preds = %if.end
  %arrayidx8 = getelementptr inbounds i8*, i8** %argv, i64 2, !dbg !66
  %tmp5 = load i8*, i8** %arrayidx8, align 8, !dbg !66
  %call9 = call i32 @atoi(i8* %tmp5) #7, !dbg !67
  call void @llvm.dbg.value(metadata i32 %call9, i64 0, metadata !68, metadata !39), !dbg !69
  %arrayidx10 = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !70
  %tmp7 = load i8*, i8** %arrayidx10, align 8, !dbg !70
  %call11 = call i32 @atoi(i8* %tmp7) #7, !dbg !71
  call void @llvm.dbg.value(metadata i32 %call11, i64 0, metadata !72, metadata !39), !dbg !73
  call void @srand(i32 1) #8, !dbg !74
  %conv = zext i32 %call9 to i64, !dbg !75
  %mul = mul i64 4, %conv, !dbg !76
  %call12 = call noalias i8* @malloc(i64 %mul) #8, !dbg !77
  %tmp9 = bitcast i8* %call12 to float*, !dbg !78
  call void @llvm.dbg.value(metadata float* %tmp9, i64 0, metadata !79, metadata !39), !dbg !80
  %conv13 = zext i32 %call9 to i64, !dbg !81
  %mul14 = mul i64 4, %conv13, !dbg !82
  %call15 = call noalias i8* @malloc(i64 %mul14) #8, !dbg !83
  %tmp11 = bitcast i8* %call15 to float*, !dbg !84
  call void @llvm.dbg.value(metadata float* %tmp11, i64 0, metadata !85, metadata !39), !dbg !86
  %conv16 = zext i32 %call9 to i64, !dbg !87
  %mul17 = mul i64 4, %conv16, !dbg !88
  %call18 = call noalias i8* @malloc(i64 %mul17) #8, !dbg !89
  %tmp13 = bitcast i8* %call18 to float*, !dbg !90
  call void @llvm.dbg.value(metadata float* %tmp13, i64 0, metadata !91, metadata !39), !dbg !92
  %conv19 = zext i32 %call9 to i64, !dbg !93
  %mul20 = mul i64 4, %conv19, !dbg !94
  %call21 = call noalias i8* @malloc(i64 %mul20) #8, !dbg !95
  %tmp15 = bitcast i8* %call21 to float*, !dbg !96
  call void @llvm.dbg.value(metadata float* %tmp15, i64 0, metadata !97, metadata !39), !dbg !98
  %conv22 = zext i32 %call11 to i64, !dbg !99
  %mul23 = mul i64 4, %conv22, !dbg !100
  %call24 = call noalias i8* @malloc(i64 %mul23) #8, !dbg !101
  %0 = ptrtoint i8* %call24 to i64
  %call2490 = ptrtoint i8* %call24 to i64
  %tmp17 = bitcast i8* %call24 to float*, !dbg !102
  call void @llvm.dbg.value(metadata float* %tmp17, i64 0, metadata !103, metadata !39), !dbg !104
  %conv25 = zext i32 %call11 to i64, !dbg !105
  %mul26 = mul i64 4, %conv25, !dbg !106
  %call27 = call noalias i8* @malloc(i64 %mul26) #8, !dbg !107
  %1 = ptrtoint i8* %call27 to i64
  %call2791 = ptrtoint i8* %call27 to i64
  %tmp19 = bitcast i8* %call27 to float*, !dbg !108
  call void @llvm.dbg.value(metadata float* %tmp19, i64 0, metadata !109, metadata !39), !dbg !110
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !111, metadata !39), !dbg !112
  %2 = add i64 %call2490, 1, !dbg !113
  %3 = add i64 %call2490, 1, !dbg !113
  %4 = mul i32 1, %call11, !dbg !113
  %5 = add i32 0, %4, !dbg !113
  %6 = add i64 %call2791, 1, !dbg !113
  %7 = add i64 %call2791, 1, !dbg !113
  %8 = add i64 %0, 1, !dbg !113
  %9 = add i64 %0, 1, !dbg !113
  %10 = mul i32 1, %call11, !dbg !113
  %11 = add i32 0, %10, !dbg !113
  %12 = add i64 %1, 1, !dbg !113
  %13 = add i64 %1, 1, !dbg !113
  br label %for.cond, !dbg !115

for.cond:                                         ; preds = %for.inc, %if.end.7
  %i.0 = phi i32 [ 0, %if.end.7 ], [ %inc, %for.inc ]
  %cmp28 = icmp ult i32 %i.0, %call11, !dbg !116
  %14 = ptrtoint i8* undef to i64, !dbg !113
  %15 = sub i64 %2, %0, !dbg !113
  %16 = ptrtoint i8* undef to i64, !dbg !113
  %17 = sub i64 %6, %1, !dbg !113
  %18 = ptrtoint i8* %call24 to i64, !dbg !113
  %19 = sub i64 %8, %18, !dbg !113
  %20 = ptrtoint i8* %call27 to i64, !dbg !113
  %21 = sub i64 %12, %20, !dbg !113
  br i1 %cmp28, label %for.body, label %for.end, !dbg !113

for.body:                                         ; preds = %for.cond
  %rem = urem i32 %i.0, 1000, !dbg !118
  %conv30 = uitofp i32 %rem to float, !dbg !120
  %idxprom = zext i32 %i.0 to i64, !dbg !121
  %arrayidx31 = getelementptr inbounds float, float* %tmp17, i64 %idxprom, !dbg !121
  store float %conv30, float* %arrayidx31, align 4, !dbg !122
  %rem32 = urem i32 %i.0, 1000, !dbg !123
  %conv33 = uitofp i32 %rem32 to float, !dbg !124
  %idxprom34 = zext i32 %i.0 to i64, !dbg !125
  %arrayidx35 = getelementptr inbounds float, float* %tmp19, i64 %idxprom34, !dbg !125
  store float %conv33, float* %arrayidx35, align 4, !dbg !126
  br label %for.inc, !dbg !127

for.inc:                                          ; preds = %for.body
  %inc = add i32 %i.0, 1, !dbg !128
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !111, metadata !39), !dbg !112
  br label %for.cond, !dbg !129

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !111, metadata !39), !dbg !112
  br label %for.cond.36, !dbg !130

for.cond.36:                                      ; preds = %for.inc.86, %for.end
  %i.1 = phi i32 [ 0, %for.end ], [ %inc87, %for.inc.86 ]
  %cmp37 = icmp ult i32 %i.1, %call9, !dbg !132
  br i1 %cmp37, label %for.body.39, label %for.end.88, !dbg !134

for.body.39:                                      ; preds = %for.cond.36
  %idxprom40 = zext i32 %i.1 to i64, !dbg !135
  %arrayidx41 = getelementptr inbounds float, float* %tmp9, i64 %idxprom40, !dbg !135
  store float 0.000000e+00, float* %arrayidx41, align 4, !dbg !137
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !138, metadata !39), !dbg !139
  br label %for.cond.42, !dbg !140

for.cond.42:                                      ; preds = %for.inc.83, %for.body.39
  %j.0 = phi i32 [ 0, %for.body.39 ], [ %inc84, %for.inc.83 ]
  %cmp43 = icmp ult i32 %j.0, %call11, !dbg !142
  br i1 %cmp43, label %for.body.45, label %for.end.85, !dbg !144

for.body.45:                                      ; preds = %for.cond.42
  %call46 = call i32 @rand() #8, !dbg !145
  %rem47 = srem i32 %call46, 2, !dbg !148
  %tobool48 = icmp ne i32 %rem47, 0, !dbg !148
  br i1 %tobool48, label %if.then.49, label %if.else.64, !dbg !149

if.then.49:                                       ; preds = %for.body.45
  %idxprom50 = zext i32 %j.0 to i64, !dbg !150
  %arrayidx51 = getelementptr inbounds float, float* %tmp17, i64 %idxprom50, !dbg !150
  %tmp37 = load float, float* %arrayidx51, align 4, !dbg !150
  %conv52 = fpext float %tmp37 to double, !dbg !150
  %idxprom53 = zext i32 %j.0 to i64, !dbg !152
  %arrayidx54 = getelementptr inbounds float, float* %tmp19, i64 %idxprom53, !dbg !152
  %tmp40 = load float, float* %arrayidx54, align 4, !dbg !152
  %conv55 = uitofp i32 %i.1 to float, !dbg !153
  %mul56 = fmul float %tmp40, %conv55, !dbg !154
  %conv57 = fpext float %mul56 to double, !dbg !152
  %call58 = call double @cos(double %conv57) #8, !dbg !155
  %mul59 = fmul double %conv52, %call58, !dbg !156
  %idxprom60 = zext i32 %i.1 to i64, !dbg !157
  %arrayidx61 = getelementptr inbounds float, float* %tmp9, i64 %idxprom60, !dbg !157
  %tmp44 = load float, float* %arrayidx61, align 4, !dbg !158
  %conv62 = fpext float %tmp44 to double, !dbg !158
  %add = fadd double %conv62, %mul59, !dbg !158
  %conv63 = fptrunc double %add to float, !dbg !158
  store float %conv63, float* %arrayidx61, align 4, !dbg !158
  br label %if.end.80, !dbg !159

if.else.64:                                       ; preds = %for.body.45
  %idxprom65 = zext i32 %j.0 to i64, !dbg !160
  %arrayidx66 = getelementptr inbounds float, float* %tmp17, i64 %idxprom65, !dbg !160
  %tmp47 = load float, float* %arrayidx66, align 4, !dbg !160
  %conv67 = fpext float %tmp47 to double, !dbg !160
  %idxprom68 = zext i32 %j.0 to i64, !dbg !162
  %arrayidx69 = getelementptr inbounds float, float* %tmp19, i64 %idxprom68, !dbg !162
  %tmp50 = load float, float* %arrayidx69, align 4, !dbg !162
  %conv70 = uitofp i32 %i.1 to float, !dbg !163
  %mul71 = fmul float %tmp50, %conv70, !dbg !164
  %conv72 = fpext float %mul71 to double, !dbg !162
  %call73 = call double @sin(double %conv72) #8, !dbg !165
  %mul74 = fmul double %conv67, %call73, !dbg !166
  %idxprom75 = zext i32 %i.1 to i64, !dbg !167
  %arrayidx76 = getelementptr inbounds float, float* %tmp9, i64 %idxprom75, !dbg !167
  %tmp54 = load float, float* %arrayidx76, align 4, !dbg !168
  %conv77 = fpext float %tmp54 to double, !dbg !168
  %add78 = fadd double %conv77, %mul74, !dbg !168
  %conv79 = fptrunc double %add78 to float, !dbg !168
  store float %conv79, float* %arrayidx76, align 4, !dbg !168
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.64, %if.then.49
  %idxprom81 = zext i32 %i.1 to i64, !dbg !169
  %arrayidx82 = getelementptr inbounds float, float* %tmp11, i64 %idxprom81, !dbg !169
  store float 0.000000e+00, float* %arrayidx82, align 4, !dbg !170
  br label %for.inc.83, !dbg !171

for.inc.83:                                       ; preds = %if.end.80
  %inc84 = add i32 %j.0, 1, !dbg !172
  call void @llvm.dbg.value(metadata i32 %inc84, i64 0, metadata !138, metadata !39), !dbg !139
  br label %for.cond.42, !dbg !173

for.end.85:                                       ; preds = %for.cond.42
  br label %for.inc.86, !dbg !174

for.inc.86:                                       ; preds = %for.end.85
  %inc87 = add i32 %i.1, 1, !dbg !175
  call void @llvm.dbg.value(metadata i32 %inc87, i64 0, metadata !111, metadata !39), !dbg !112
  br label %for.cond.36, !dbg !176

for.end.88:                                       ; preds = %for.cond.36
  call void @fft_float(i32 %call9, i32 %invfft.0, float* %tmp9, float* %tmp11, float* %tmp13, float* %tmp15), !dbg !177
  %call89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0)), !dbg !178
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !111, metadata !39), !dbg !112
  br label %for.cond.90, !dbg !179

for.cond.90:                                      ; preds = %for.inc.98, %for.end.88
  %i.2 = phi i32 [ 0, %for.end.88 ], [ %inc99, %for.inc.98 ]
  %cmp91 = icmp ult i32 %i.2, %call9, !dbg !181
  br i1 %cmp91, label %for.body.93, label %for.end.100, !dbg !183

for.body.93:                                      ; preds = %for.cond.90
  %idxprom94 = zext i32 %i.2 to i64, !dbg !184
  %arrayidx95 = getelementptr inbounds float, float* %tmp13, i64 %idxprom94, !dbg !184
  %tmp69 = load float, float* %arrayidx95, align 4, !dbg !184
  %conv96 = fpext float %tmp69 to double, !dbg !184
  %call97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), double %conv96), !dbg !185
  br label %for.inc.98, !dbg !185

for.inc.98:                                       ; preds = %for.body.93
  %inc99 = add i32 %i.2, 1, !dbg !186
  call void @llvm.dbg.value(metadata i32 %inc99, i64 0, metadata !111, metadata !39), !dbg !112
  br label %for.cond.90, !dbg !187

for.end.100:                                      ; preds = %for.cond.90
  %call101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0)), !dbg !188
  %call102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0)), !dbg !189
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !111, metadata !39), !dbg !112
  br label %for.cond.103, !dbg !190

for.cond.103:                                     ; preds = %for.inc.111, %for.end.100
  %i.3 = phi i32 [ 0, %for.end.100 ], [ %inc112, %for.inc.111 ]
  %cmp104 = icmp ult i32 %i.3, %call9, !dbg !192
  br i1 %cmp104, label %for.body.106, label %for.end.113, !dbg !194

for.body.106:                                     ; preds = %for.cond.103
  %idxprom107 = zext i32 %i.3 to i64, !dbg !195
  %arrayidx108 = getelementptr inbounds float, float* %tmp15, i64 %idxprom107, !dbg !195
  %tmp75 = load float, float* %arrayidx108, align 4, !dbg !195
  %conv109 = fpext float %tmp75 to double, !dbg !195
  %call110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), double %conv109), !dbg !196
  br label %for.inc.111, !dbg !196

for.inc.111:                                      ; preds = %for.body.106
  %inc112 = add i32 %i.3, 1, !dbg !197
  call void @llvm.dbg.value(metadata i32 %inc112, i64 0, metadata !111, metadata !39), !dbg !112
  br label %for.cond.103, !dbg !198

for.end.113:                                      ; preds = %for.cond.103
  %call114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0)), !dbg !199
  %tmp78 = bitcast float* %tmp9 to i8*, !dbg !200
  call void @free(i8* %tmp78) #8, !dbg !201
  %tmp80 = bitcast float* %tmp11 to i8*, !dbg !202
  call void @free(i8* %tmp80) #8, !dbg !203
  %tmp82 = bitcast float* %tmp13 to i8*, !dbg !204
  call void @free(i8* %tmp82) #8, !dbg !205
  %tmp84 = bitcast float* %tmp15 to i8*, !dbg !206
  call void @free(i8* %tmp84) #8, !dbg !207
  %tmp86 = bitcast float* %tmp17 to i8*, !dbg !208
  call void @free(i8* %tmp86) #8, !dbg !209
  %tmp88 = bitcast float* %tmp19 to i8*, !dbg !210
  call void @free(i8* %tmp88) #8, !dbg !211
  call void @exit(i32 0) #6, !dbg !212
  unreachable, !dbg !212

return:                                           ; No predecessors!
  ret i32 0, !dbg !213
}

declare i32 @printf(i8*, ...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #4

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #4

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #5

; Function Attrs: nounwind
declare double @cos(double) #5

; Function Attrs: nounwind
declare double @sin(double) #5

declare void @fft_float(i32, i32, float*, float*, float*, float*) #2

; Function Attrs: nounwind
declare void @free(i8*) #5

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind }
attributes #7 = { nounwind readonly }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!25, !26}
!llvm.ident = !{!27}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !7, globals: !22)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/MiBench/telecomm-FFT")
!2 = !{}
!3 = !{!4, !5}
!4 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!6 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!7 = !{!8, !13, !16}
!8 = !DISubprogram(name: "rand", scope: !9, file: !9, line: 14, type: !10, isLocal: false, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: false, function: i32 ()* @rand, variables: !2)
!9 = !DIFile(filename: "/home/gleison/tf/Benchmarks/MiBench/telecomm-FFT/tmp.c", directory: "/home/gleison/tf/Benchmarks/MiBench/telecomm-FFT")
!10 = !DISubroutineType(types: !11)
!11 = !{!12}
!12 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!13 = !DISubprogram(name: "srand", scope: !9, file: !9, line: 19, type: !14, isLocal: false, isDefinition: true, scopeLine: 19, flags: DIFlagPrototyped, isOptimized: false, function: void (i32)* @srand, variables: !2)
!14 = !DISubroutineType(types: !15)
!15 = !{null, !4}
!16 = !DISubprogram(name: "main", scope: !9, file: !9, line: 24, type: !17, isLocal: false, isDefinition: true, scopeLine: 24, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!17 = !DISubroutineType(types: !18)
!18 = !{!12, !12, !19}
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64, align: 64)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64, align: 64)
!21 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!22 = !{!23}
!23 = !DIGlobalVariable(name: "next", scope: !0, file: !9, line: 12, type: !24, isLocal: true, isDefinition: true, variable: i64* @next)
!24 = !DIBasicType(name: "long long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!25 = !{i32 2, !"Dwarf Version", i32 4}
!26 = !{i32 2, !"Debug Info Version", i32 3}
!27 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!28 = !DILocation(line: 15, column: 10, scope: !8)
!29 = !DILocation(line: 15, column: 15, scope: !8)
!30 = !DILocation(line: 15, column: 28, scope: !8)
!31 = !DILocation(line: 15, column: 8, scope: !8)
!32 = !DILocation(line: 16, column: 25, scope: !8)
!33 = !DILocation(line: 16, column: 30, scope: !8)
!34 = !DILocation(line: 16, column: 10, scope: !8)
!35 = !DILocation(line: 16, column: 39, scope: !8)
!36 = !DILocation(line: 16, column: 50, scope: !8)
!37 = !DILocation(line: 16, column: 3, scope: !8)
!38 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "seed", arg: 1, scope: !13, file: !9, line: 19, type: !4)
!39 = !DIExpression()
!40 = !DILocation(line: 19, column: 25, scope: !13)
!41 = !DILocation(line: 20, column: 10, scope: !13)
!42 = !DILocation(line: 20, column: 8, scope: !13)
!43 = !DILocation(line: 21, column: 1, scope: !13)
!44 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !16, file: !9, line: 24, type: !12)
!45 = !DILocation(line: 24, column: 14, scope: !16)
!46 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !16, file: !9, line: 24, type: !19)
!47 = !DILocation(line: 24, column: 26, scope: !16)
!48 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "invfft", scope: !16, file: !9, line: 34, type: !12)
!49 = !DILocation(line: 34, column: 7, scope: !16)
!50 = !DILocation(line: 36, column: 12, scope: !51)
!51 = distinct !DILexicalBlock(scope: !16, file: !9, line: 36, column: 7)
!52 = !DILocation(line: 36, column: 7, scope: !16)
!53 = !DILocation(line: 37, column: 5, scope: !54)
!54 = distinct !DILexicalBlock(scope: !51, file: !9, line: 36, column: 17)
!55 = !DILocation(line: 38, column: 5, scope: !54)
!56 = !DILocation(line: 39, column: 5, scope: !54)
!57 = !DILocation(line: 40, column: 5, scope: !54)
!58 = !DILocation(line: 41, column: 5, scope: !54)
!59 = !DILocation(line: 42, column: 19, scope: !60)
!60 = distinct !DILexicalBlock(scope: !51, file: !9, line: 42, column: 14)
!61 = !DILocation(line: 42, column: 14, scope: !51)
!62 = !DILocation(line: 43, column: 23, scope: !60)
!63 = !DILocation(line: 43, column: 15, scope: !60)
!64 = !DILocation(line: 43, column: 14, scope: !60)
!65 = !DILocation(line: 43, column: 5, scope: !60)
!66 = !DILocation(line: 44, column: 18, scope: !16)
!67 = !DILocation(line: 44, column: 13, scope: !16)
!68 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "MAXSIZE", scope: !16, file: !9, line: 25, type: !4)
!69 = !DILocation(line: 25, column: 12, scope: !16)
!70 = !DILocation(line: 45, column: 19, scope: !16)
!71 = !DILocation(line: 45, column: 14, scope: !16)
!72 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "MAXWAVES", scope: !16, file: !9, line: 26, type: !4)
!73 = !DILocation(line: 26, column: 12, scope: !16)
!74 = !DILocation(line: 46, column: 3, scope: !16)
!75 = !DILocation(line: 48, column: 44, scope: !16)
!76 = !DILocation(line: 48, column: 42, scope: !16)
!77 = !DILocation(line: 48, column: 21, scope: !16)
!78 = !DILocation(line: 48, column: 12, scope: !16)
!79 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "RealIn", scope: !16, file: !9, line: 28, type: !5)
!80 = !DILocation(line: 28, column: 10, scope: !16)
!81 = !DILocation(line: 49, column: 44, scope: !16)
!82 = !DILocation(line: 49, column: 42, scope: !16)
!83 = !DILocation(line: 49, column: 21, scope: !16)
!84 = !DILocation(line: 49, column: 12, scope: !16)
!85 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ImagIn", scope: !16, file: !9, line: 29, type: !5)
!86 = !DILocation(line: 29, column: 10, scope: !16)
!87 = !DILocation(line: 50, column: 45, scope: !16)
!88 = !DILocation(line: 50, column: 43, scope: !16)
!89 = !DILocation(line: 50, column: 22, scope: !16)
!90 = !DILocation(line: 50, column: 13, scope: !16)
!91 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "RealOut", scope: !16, file: !9, line: 30, type: !5)
!92 = !DILocation(line: 30, column: 10, scope: !16)
!93 = !DILocation(line: 51, column: 45, scope: !16)
!94 = !DILocation(line: 51, column: 43, scope: !16)
!95 = !DILocation(line: 51, column: 22, scope: !16)
!96 = !DILocation(line: 51, column: 13, scope: !16)
!97 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ImagOut", scope: !16, file: !9, line: 31, type: !5)
!98 = !DILocation(line: 31, column: 10, scope: !16)
!99 = !DILocation(line: 52, column: 43, scope: !16)
!100 = !DILocation(line: 52, column: 41, scope: !16)
!101 = !DILocation(line: 52, column: 20, scope: !16)
!102 = !DILocation(line: 52, column: 11, scope: !16)
!103 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "coeff", scope: !16, file: !9, line: 32, type: !5)
!104 = !DILocation(line: 32, column: 10, scope: !16)
!105 = !DILocation(line: 53, column: 41, scope: !16)
!106 = !DILocation(line: 53, column: 39, scope: !16)
!107 = !DILocation(line: 53, column: 18, scope: !16)
!108 = !DILocation(line: 53, column: 9, scope: !16)
!109 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "amp", scope: !16, file: !9, line: 33, type: !5)
!110 = !DILocation(line: 33, column: 10, scope: !16)
!111 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !16, file: !9, line: 27, type: !4)
!112 = !DILocation(line: 27, column: 12, scope: !16)
!113 = !DILocation(line: 56, column: 3, scope: !114)
!114 = distinct !DILexicalBlock(scope: !16, file: !9, line: 56, column: 3)
!115 = !DILocation(line: 56, column: 8, scope: !114)
!116 = !DILocation(line: 56, column: 17, scope: !117)
!117 = distinct !DILexicalBlock(scope: !114, file: !9, line: 56, column: 3)
!118 = !DILocation(line: 57, column: 18, scope: !119)
!119 = distinct !DILexicalBlock(scope: !117, file: !9, line: 56, column: 34)
!120 = !DILocation(line: 57, column: 16, scope: !119)
!121 = !DILocation(line: 57, column: 5, scope: !119)
!122 = !DILocation(line: 57, column: 14, scope: !119)
!123 = !DILocation(line: 58, column: 16, scope: !119)
!124 = !DILocation(line: 58, column: 14, scope: !119)
!125 = !DILocation(line: 58, column: 5, scope: !119)
!126 = !DILocation(line: 58, column: 12, scope: !119)
!127 = !DILocation(line: 59, column: 3, scope: !119)
!128 = !DILocation(line: 56, column: 30, scope: !117)
!129 = !DILocation(line: 56, column: 3, scope: !117)
!130 = !DILocation(line: 60, column: 8, scope: !131)
!131 = distinct !DILexicalBlock(scope: !16, file: !9, line: 60, column: 3)
!132 = !DILocation(line: 60, column: 17, scope: !133)
!133 = distinct !DILexicalBlock(scope: !131, file: !9, line: 60, column: 3)
!134 = !DILocation(line: 60, column: 3, scope: !131)
!135 = !DILocation(line: 62, column: 5, scope: !136)
!136 = distinct !DILexicalBlock(scope: !133, file: !9, line: 60, column: 33)
!137 = !DILocation(line: 62, column: 15, scope: !136)
!138 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !16, file: !9, line: 27, type: !4)
!139 = !DILocation(line: 27, column: 15, scope: !16)
!140 = !DILocation(line: 63, column: 10, scope: !141)
!141 = distinct !DILexicalBlock(scope: !136, file: !9, line: 63, column: 5)
!142 = !DILocation(line: 63, column: 19, scope: !143)
!143 = distinct !DILexicalBlock(scope: !141, file: !9, line: 63, column: 5)
!144 = !DILocation(line: 63, column: 5, scope: !141)
!145 = !DILocation(line: 65, column: 11, scope: !146)
!146 = distinct !DILexicalBlock(scope: !147, file: !9, line: 65, column: 11)
!147 = distinct !DILexicalBlock(scope: !143, file: !9, line: 63, column: 36)
!148 = !DILocation(line: 65, column: 18, scope: !146)
!149 = !DILocation(line: 65, column: 11, scope: !147)
!150 = !DILocation(line: 66, column: 22, scope: !151)
!151 = distinct !DILexicalBlock(scope: !146, file: !9, line: 65, column: 23)
!152 = !DILocation(line: 66, column: 37, scope: !151)
!153 = !DILocation(line: 66, column: 46, scope: !151)
!154 = !DILocation(line: 66, column: 44, scope: !151)
!155 = !DILocation(line: 66, column: 33, scope: !151)
!156 = !DILocation(line: 66, column: 31, scope: !151)
!157 = !DILocation(line: 66, column: 9, scope: !151)
!158 = !DILocation(line: 66, column: 19, scope: !151)
!159 = !DILocation(line: 67, column: 7, scope: !151)
!160 = !DILocation(line: 68, column: 22, scope: !161)
!161 = distinct !DILexicalBlock(scope: !146, file: !9, line: 67, column: 14)
!162 = !DILocation(line: 68, column: 37, scope: !161)
!163 = !DILocation(line: 68, column: 46, scope: !161)
!164 = !DILocation(line: 68, column: 44, scope: !161)
!165 = !DILocation(line: 68, column: 33, scope: !161)
!166 = !DILocation(line: 68, column: 31, scope: !161)
!167 = !DILocation(line: 68, column: 9, scope: !161)
!168 = !DILocation(line: 68, column: 19, scope: !161)
!169 = !DILocation(line: 70, column: 7, scope: !147)
!170 = !DILocation(line: 70, column: 17, scope: !147)
!171 = !DILocation(line: 71, column: 5, scope: !147)
!172 = !DILocation(line: 63, column: 32, scope: !143)
!173 = !DILocation(line: 63, column: 5, scope: !143)
!174 = !DILocation(line: 72, column: 3, scope: !136)
!175 = !DILocation(line: 60, column: 29, scope: !133)
!176 = !DILocation(line: 60, column: 3, scope: !133)
!177 = !DILocation(line: 75, column: 3, scope: !16)
!178 = !DILocation(line: 77, column: 3, scope: !16)
!179 = !DILocation(line: 78, column: 8, scope: !180)
!180 = distinct !DILexicalBlock(scope: !16, file: !9, line: 78, column: 3)
!181 = !DILocation(line: 78, column: 17, scope: !182)
!182 = distinct !DILexicalBlock(scope: !180, file: !9, line: 78, column: 3)
!183 = !DILocation(line: 78, column: 3, scope: !180)
!184 = !DILocation(line: 79, column: 21, scope: !182)
!185 = !DILocation(line: 79, column: 5, scope: !182)
!186 = !DILocation(line: 78, column: 29, scope: !182)
!187 = !DILocation(line: 78, column: 3, scope: !182)
!188 = !DILocation(line: 80, column: 3, scope: !16)
!189 = !DILocation(line: 82, column: 3, scope: !16)
!190 = !DILocation(line: 83, column: 8, scope: !191)
!191 = distinct !DILexicalBlock(scope: !16, file: !9, line: 83, column: 3)
!192 = !DILocation(line: 83, column: 17, scope: !193)
!193 = distinct !DILexicalBlock(scope: !191, file: !9, line: 83, column: 3)
!194 = !DILocation(line: 83, column: 3, scope: !191)
!195 = !DILocation(line: 84, column: 21, scope: !193)
!196 = !DILocation(line: 84, column: 5, scope: !193)
!197 = !DILocation(line: 83, column: 29, scope: !193)
!198 = !DILocation(line: 83, column: 3, scope: !193)
!199 = !DILocation(line: 85, column: 3, scope: !16)
!200 = !DILocation(line: 87, column: 8, scope: !16)
!201 = !DILocation(line: 87, column: 3, scope: !16)
!202 = !DILocation(line: 88, column: 8, scope: !16)
!203 = !DILocation(line: 88, column: 3, scope: !16)
!204 = !DILocation(line: 89, column: 8, scope: !16)
!205 = !DILocation(line: 89, column: 3, scope: !16)
!206 = !DILocation(line: 90, column: 8, scope: !16)
!207 = !DILocation(line: 90, column: 3, scope: !16)
!208 = !DILocation(line: 91, column: 8, scope: !16)
!209 = !DILocation(line: 91, column: 3, scope: !16)
!210 = !DILocation(line: 92, column: 8, scope: !16)
!211 = !DILocation(line: 92, column: 3, scope: !16)
!212 = !DILocation(line: 93, column: 3, scope: !16)
!213 = !DILocation(line: 94, column: 1, scope: !16)
