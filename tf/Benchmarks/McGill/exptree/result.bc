; ModuleID = '/home/gleison/tf/Benchmarks/McGill/exptree/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.Comb = type { i32, i32, i32 }

@stderr = external global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [29 x i8] c"Out of memory for work list\0A\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"Out of memory for combination list\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c" d%d \00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"%d=%d\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"; \00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c".\0A\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@stopSearch = internal global i32 0, align 4
@nbNodes = internal global i32 0, align 4
@dmax = internal global i32 0, align 4
@listLength = internal global i32 0, align 4
@workList = internal global i32* null, align 8
@goal = internal global i32 0, align 4
@best = internal global i32 0, align 4
@bestDepth = internal global i32 0, align 4
@solution = internal global %struct.Comb* null, align 8
@combList = internal global %struct.Comb* null, align 8

; Function Attrs: nounwind uwtable
define i32* @newWorkList(i32 %length) #0 {
entry:
  %length.addr = alloca i32, align 4
  %newList = alloca i32*, align 8
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !67, metadata !68), !dbg !69
  call void @llvm.dbg.declare(metadata i32** %newList, metadata !70, metadata !68), !dbg !71
  %0 = load i32, i32* %length.addr, align 4, !dbg !72
  %conv = sext i32 %0 to i64, !dbg !72
  %call = call noalias i8* @calloc(i64 %conv, i64 4) #6, !dbg !73
  %1 = bitcast i8* %call to i32*, !dbg !74
  store i32* %1, i32** %newList, align 8, !dbg !71
  %2 = load i32*, i32** %newList, align 8, !dbg !75
  %tobool = icmp ne i32* %2, null, !dbg !75
  br i1 %tobool, label %if.then, label %if.else, !dbg !77

if.then:                                          ; preds = %entry
  %3 = load i32*, i32** %newList, align 8, !dbg !78
  ret i32* %3, !dbg !79

if.else:                                          ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !80
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0)), !dbg !82
  call void @exit(i32 1) #7, !dbg !83
  unreachable, !dbg !83
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

; Function Attrs: nounwind uwtable
define %struct.Comb* @newCombList(i32 %length) #0 {
entry:
  %length.addr = alloca i32, align 4
  %newList = alloca %struct.Comb*, align 8
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !84, metadata !68), !dbg !85
  call void @llvm.dbg.declare(metadata %struct.Comb** %newList, metadata !86, metadata !68), !dbg !87
  %0 = load i32, i32* %length.addr, align 4, !dbg !88
  %conv = sext i32 %0 to i64, !dbg !88
  %call = call noalias i8* @calloc(i64 %conv, i64 12) #6, !dbg !89
  %1 = bitcast i8* %call to %struct.Comb*, !dbg !90
  store %struct.Comb* %1, %struct.Comb** %newList, align 8, !dbg !87
  %2 = load %struct.Comb*, %struct.Comb** %newList, align 8, !dbg !91
  %tobool = icmp ne %struct.Comb* %2, null, !dbg !91
  br i1 %tobool, label %if.then, label %if.else, !dbg !93

if.then:                                          ; preds = %entry
  %3 = load %struct.Comb*, %struct.Comb** %newList, align 8, !dbg !94
  ret %struct.Comb* %3, !dbg !95

if.else:                                          ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !96
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i32 0, i32 0)), !dbg !98
  call void @exit(i32 1) #7, !dbg !99
  unreachable, !dbg !99
}

; Function Attrs: nounwind uwtable
define void @initWorkList(i32* %workList, i32* %givenList, i32 %length) #0 {
entry:
  %workList.addr = alloca i32*, align 8
  %givenList.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %workList, i32** %workList.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %workList.addr, metadata !100, metadata !68), !dbg !101
  store i32* %givenList, i32** %givenList.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %givenList.addr, metadata !102, metadata !68), !dbg !103
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !104, metadata !68), !dbg !105
  call void @llvm.dbg.declare(metadata i32* %i, metadata !106, metadata !68), !dbg !107
  store i32 0, i32* %i, align 4, !dbg !108
  br label %for.cond, !dbg !110

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !111
  %1 = load i32, i32* %length.addr, align 4, !dbg !115
  %cmp = icmp slt i32 %0, %1, !dbg !116
  br i1 %cmp, label %for.body, label %for.end, !dbg !117

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !118
  %idxprom = sext i32 %2 to i64, !dbg !119
  %3 = load i32*, i32** %givenList.addr, align 8, !dbg !119
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !119
  %4 = load i32, i32* %arrayidx, align 4, !dbg !119
  %5 = load i32, i32* %i, align 4, !dbg !120
  %idxprom1 = sext i32 %5 to i64, !dbg !121
  %6 = load i32*, i32** %workList.addr, align 8, !dbg !121
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i64 %idxprom1, !dbg !121
  store i32 %4, i32* %arrayidx2, align 4, !dbg !122
  br label %for.inc, !dbg !121

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !123
  %inc = add nsw i32 %7, 1, !dbg !123
  store i32 %inc, i32* %i, align 4, !dbg !123
  br label %for.cond, !dbg !124

for.end:                                          ; preds = %for.cond
  ret void, !dbg !125
}

; Function Attrs: nounwind uwtable
define void @initCombList(%struct.Comb* %combList, i32 %length) #0 {
entry:
  %combList.addr = alloca %struct.Comb*, align 8
  %length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.Comb* %combList, %struct.Comb** %combList.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Comb** %combList.addr, metadata !126, metadata !68), !dbg !127
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !128, metadata !68), !dbg !129
  call void @llvm.dbg.declare(metadata i32* %i, metadata !130, metadata !68), !dbg !131
  store i32 0, i32* %i, align 4, !dbg !132
  br label %for.cond, !dbg !134

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !135
  %1 = load i32, i32* %length.addr, align 4, !dbg !139
  %cmp = icmp slt i32 %0, %1, !dbg !140
  br i1 %cmp, label %for.body, label %for.end, !dbg !141

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !142
  %idxprom = sext i32 %2 to i64, !dbg !143
  %3 = load %struct.Comb*, %struct.Comb** %combList.addr, align 8, !dbg !143
  %arrayidx = getelementptr inbounds %struct.Comb, %struct.Comb* %3, i64 %idxprom, !dbg !143
  %operation = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx, i32 0, i32 2, !dbg !144
  store i32 0, i32* %operation, align 4, !dbg !145
  br label %for.inc, !dbg !143

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !146
  %inc = add nsw i32 %4, 1, !dbg !146
  store i32 %inc, i32* %i, align 4, !dbg !146
  br label %for.cond, !dbg !147

for.end:                                          ; preds = %for.cond
  ret void, !dbg !148
}

; Function Attrs: nounwind uwtable
define void @saveSolution(%struct.Comb* %sol, %struct.Comb* %combList, i32 %length) #0 {
entry:
  %sol.addr = alloca %struct.Comb*, align 8
  %combList.addr = alloca %struct.Comb*, align 8
  %length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.Comb* %sol, %struct.Comb** %sol.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Comb** %sol.addr, metadata !149, metadata !68), !dbg !150
  store %struct.Comb* %combList, %struct.Comb** %combList.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Comb** %combList.addr, metadata !151, metadata !68), !dbg !152
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !153, metadata !68), !dbg !154
  call void @llvm.dbg.declare(metadata i32* %i, metadata !155, metadata !68), !dbg !156
  store i32 0, i32* %i, align 4, !dbg !157
  br label %for.cond, !dbg !159

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !160
  %1 = load i32, i32* %length.addr, align 4, !dbg !164
  %cmp = icmp slt i32 %0, %1, !dbg !165
  br i1 %cmp, label %for.body, label %for.end, !dbg !166

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !167
  %idxprom = sext i32 %2 to i64, !dbg !169
  %3 = load %struct.Comb*, %struct.Comb** %combList.addr, align 8, !dbg !169
  %arrayidx = getelementptr inbounds %struct.Comb, %struct.Comb* %3, i64 %idxprom, !dbg !169
  %operand1 = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx, i32 0, i32 0, !dbg !170
  %4 = load i32, i32* %operand1, align 4, !dbg !170
  %5 = load i32, i32* %i, align 4, !dbg !171
  %idxprom1 = sext i32 %5 to i64, !dbg !172
  %6 = load %struct.Comb*, %struct.Comb** %sol.addr, align 8, !dbg !172
  %arrayidx2 = getelementptr inbounds %struct.Comb, %struct.Comb* %6, i64 %idxprom1, !dbg !172
  %operand13 = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx2, i32 0, i32 0, !dbg !173
  store i32 %4, i32* %operand13, align 4, !dbg !174
  %7 = load i32, i32* %i, align 4, !dbg !175
  %idxprom4 = sext i32 %7 to i64, !dbg !176
  %8 = load %struct.Comb*, %struct.Comb** %combList.addr, align 8, !dbg !176
  %arrayidx5 = getelementptr inbounds %struct.Comb, %struct.Comb* %8, i64 %idxprom4, !dbg !176
  %operand2 = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx5, i32 0, i32 1, !dbg !177
  %9 = load i32, i32* %operand2, align 4, !dbg !177
  %10 = load i32, i32* %i, align 4, !dbg !178
  %idxprom6 = sext i32 %10 to i64, !dbg !179
  %11 = load %struct.Comb*, %struct.Comb** %sol.addr, align 8, !dbg !179
  %arrayidx7 = getelementptr inbounds %struct.Comb, %struct.Comb* %11, i64 %idxprom6, !dbg !179
  %operand28 = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx7, i32 0, i32 1, !dbg !180
  store i32 %9, i32* %operand28, align 4, !dbg !181
  %12 = load i32, i32* %i, align 4, !dbg !182
  %idxprom9 = sext i32 %12 to i64, !dbg !183
  %13 = load %struct.Comb*, %struct.Comb** %combList.addr, align 8, !dbg !183
  %arrayidx10 = getelementptr inbounds %struct.Comb, %struct.Comb* %13, i64 %idxprom9, !dbg !183
  %operation = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx10, i32 0, i32 2, !dbg !184
  %14 = load i32, i32* %operation, align 4, !dbg !184
  %15 = load i32, i32* %i, align 4, !dbg !185
  %idxprom11 = sext i32 %15 to i64, !dbg !186
  %16 = load %struct.Comb*, %struct.Comb** %sol.addr, align 8, !dbg !186
  %arrayidx12 = getelementptr inbounds %struct.Comb, %struct.Comb* %16, i64 %idxprom11, !dbg !186
  %operation13 = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx12, i32 0, i32 2, !dbg !187
  store i32 %14, i32* %operation13, align 4, !dbg !188
  br label %for.inc, !dbg !189

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !190
  %inc = add nsw i32 %17, 1, !dbg !190
  store i32 %inc, i32* %i, align 4, !dbg !190
  br label %for.cond, !dbg !191

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %length.addr, align 4, !dbg !192
  %idxprom14 = sext i32 %18 to i64, !dbg !193
  %19 = load %struct.Comb*, %struct.Comb** %sol.addr, align 8, !dbg !193
  %arrayidx15 = getelementptr inbounds %struct.Comb, %struct.Comb* %19, i64 %idxprom14, !dbg !193
  %operation16 = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx15, i32 0, i32 2, !dbg !194
  store i32 0, i32* %operation16, align 4, !dbg !195
  ret void, !dbg !196
}

; Function Attrs: nounwind uwtable
define i32 @calculate(%struct.Comb* %comb) #0 {
entry:
  %retval = alloca i32, align 4
  %comb.addr = alloca %struct.Comb*, align 8
  store %struct.Comb* %comb, %struct.Comb** %comb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Comb** %comb.addr, metadata !197, metadata !68), !dbg !198
  %0 = load %struct.Comb*, %struct.Comb** %comb.addr, align 8, !dbg !199
  %operation = getelementptr inbounds %struct.Comb, %struct.Comb* %0, i32 0, i32 2, !dbg !200
  %1 = load i32, i32* %operation, align 4, !dbg !200
  switch i32 %1, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.1
    i32 3, label %sw.bb.4
    i32 4, label %sw.bb.7
  ], !dbg !201

sw.bb:                                            ; preds = %entry
  %2 = load %struct.Comb*, %struct.Comb** %comb.addr, align 8, !dbg !202
  %operand1 = getelementptr inbounds %struct.Comb, %struct.Comb* %2, i32 0, i32 0, !dbg !204
  %3 = load i32, i32* %operand1, align 4, !dbg !204
  %4 = load %struct.Comb*, %struct.Comb** %comb.addr, align 8, !dbg !205
  %operand2 = getelementptr inbounds %struct.Comb, %struct.Comb* %4, i32 0, i32 1, !dbg !206
  %5 = load i32, i32* %operand2, align 4, !dbg !206
  %add = add nsw i32 %3, %5, !dbg !207
  store i32 %add, i32* %retval, !dbg !208
  br label %return, !dbg !208

sw.bb.1:                                          ; preds = %entry
  %6 = load %struct.Comb*, %struct.Comb** %comb.addr, align 8, !dbg !209
  %operand12 = getelementptr inbounds %struct.Comb, %struct.Comb* %6, i32 0, i32 0, !dbg !210
  %7 = load i32, i32* %operand12, align 4, !dbg !210
  %8 = load %struct.Comb*, %struct.Comb** %comb.addr, align 8, !dbg !211
  %operand23 = getelementptr inbounds %struct.Comb, %struct.Comb* %8, i32 0, i32 1, !dbg !212
  %9 = load i32, i32* %operand23, align 4, !dbg !212
  %sub = sub nsw i32 %7, %9, !dbg !213
  store i32 %sub, i32* %retval, !dbg !214
  br label %return, !dbg !214

sw.bb.4:                                          ; preds = %entry
  %10 = load %struct.Comb*, %struct.Comb** %comb.addr, align 8, !dbg !215
  %operand15 = getelementptr inbounds %struct.Comb, %struct.Comb* %10, i32 0, i32 0, !dbg !216
  %11 = load i32, i32* %operand15, align 4, !dbg !216
  %12 = load %struct.Comb*, %struct.Comb** %comb.addr, align 8, !dbg !217
  %operand26 = getelementptr inbounds %struct.Comb, %struct.Comb* %12, i32 0, i32 1, !dbg !218
  %13 = load i32, i32* %operand26, align 4, !dbg !218
  %mul = mul nsw i32 %11, %13, !dbg !219
  store i32 %mul, i32* %retval, !dbg !220
  br label %return, !dbg !220

sw.bb.7:                                          ; preds = %entry
  %14 = load %struct.Comb*, %struct.Comb** %comb.addr, align 8, !dbg !221
  %operand18 = getelementptr inbounds %struct.Comb, %struct.Comb* %14, i32 0, i32 0, !dbg !222
  %15 = load i32, i32* %operand18, align 4, !dbg !222
  %16 = load %struct.Comb*, %struct.Comb** %comb.addr, align 8, !dbg !223
  %operand29 = getelementptr inbounds %struct.Comb, %struct.Comb* %16, i32 0, i32 1, !dbg !224
  %17 = load i32, i32* %operand29, align 4, !dbg !224
  %div = sdiv i32 %15, %17, !dbg !225
  store i32 %div, i32* %retval, !dbg !226
  br label %return, !dbg !226

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval, !dbg !227
  br label %return, !dbg !227

return:                                           ; preds = %sw.default, %sw.bb.7, %sw.bb.4, %sw.bb.1, %sw.bb
  %18 = load i32, i32* %retval, !dbg !228
  ret i32 %18, !dbg !228
}

; Function Attrs: nounwind uwtable
define void @printSolution(%struct.Comb* %combList, i32 %length) #0 {
entry:
  %combList.addr = alloca %struct.Comb*, align 8
  %length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.Comb* %combList, %struct.Comb** %combList.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Comb** %combList.addr, metadata !229, metadata !68), !dbg !230
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !231, metadata !68), !dbg !232
  call void @llvm.dbg.declare(metadata i32* %i, metadata !233, metadata !68), !dbg !234
  store i32 0, i32* %i, align 4, !dbg !235
  br label %for.cond, !dbg !237

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !238
  %1 = load i32, i32* %length.addr, align 4, !dbg !242
  %cmp = icmp slt i32 %0, %1, !dbg !243
  br i1 %cmp, label %for.body, label %for.end, !dbg !244

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !245
  %idxprom = sext i32 %2 to i64, !dbg !247
  %3 = load %struct.Comb*, %struct.Comb** %combList.addr, align 8, !dbg !247
  %arrayidx = getelementptr inbounds %struct.Comb, %struct.Comb* %3, i64 %idxprom, !dbg !247
  %operand1 = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx, i32 0, i32 0, !dbg !248
  %4 = load i32, i32* %operand1, align 4, !dbg !248
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 %4), !dbg !249
  %5 = load i32, i32* %i, align 4, !dbg !250
  %idxprom1 = sext i32 %5 to i64, !dbg !251
  %6 = load %struct.Comb*, %struct.Comb** %combList.addr, align 8, !dbg !251
  %arrayidx2 = getelementptr inbounds %struct.Comb, %struct.Comb* %6, i64 %idxprom1, !dbg !251
  %operation = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx2, i32 0, i32 2, !dbg !252
  %7 = load i32, i32* %operation, align 4, !dbg !252
  switch i32 %7, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.4
    i32 2, label %sw.bb.6
    i32 3, label %sw.bb.8
    i32 4, label %sw.bb.10
  ], !dbg !253

sw.bb:                                            ; preds = %for.body
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !254
  br label %sw.epilog, !dbg !256

sw.bb.4:                                          ; preds = %for.body
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0)), !dbg !257
  br label %sw.epilog, !dbg !258

sw.bb.6:                                          ; preds = %for.body
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)), !dbg !259
  br label %sw.epilog, !dbg !260

sw.bb.8:                                          ; preds = %for.body
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0)), !dbg !261
  br label %sw.epilog, !dbg !262

sw.bb.10:                                         ; preds = %for.body
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0)), !dbg !263
  br label %sw.epilog, !dbg !264

sw.default:                                       ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !265
  %idxprom12 = sext i32 %8 to i64, !dbg !266
  %9 = load %struct.Comb*, %struct.Comb** %combList.addr, align 8, !dbg !266
  %arrayidx13 = getelementptr inbounds %struct.Comb, %struct.Comb* %9, i64 %idxprom12, !dbg !266
  %operation14 = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx13, i32 0, i32 2, !dbg !267
  %10 = load i32, i32* %operation14, align 4, !dbg !267
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i32 %10), !dbg !268
  br label %sw.epilog, !dbg !269

sw.epilog:                                        ; preds = %sw.default, %sw.bb.10, %sw.bb.8, %sw.bb.6, %sw.bb.4, %sw.bb
  %11 = load i32, i32* %i, align 4, !dbg !270
  %idxprom16 = sext i32 %11 to i64, !dbg !271
  %12 = load %struct.Comb*, %struct.Comb** %combList.addr, align 8, !dbg !271
  %arrayidx17 = getelementptr inbounds %struct.Comb, %struct.Comb* %12, i64 %idxprom16, !dbg !271
  %operand2 = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx17, i32 0, i32 1, !dbg !272
  %13 = load i32, i32* %operand2, align 4, !dbg !272
  %14 = load i32, i32* %i, align 4, !dbg !273
  %idxprom18 = sext i32 %14 to i64, !dbg !274
  %15 = load %struct.Comb*, %struct.Comb** %combList.addr, align 8, !dbg !274
  %arrayidx19 = getelementptr inbounds %struct.Comb, %struct.Comb* %15, i64 %idxprom18, !dbg !274
  %call20 = call i32 @calculate(%struct.Comb* %arrayidx19), !dbg !275
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i32 %13, i32 %call20), !dbg !276
  %16 = load i32, i32* %i, align 4, !dbg !277
  %17 = load i32, i32* %length.addr, align 4, !dbg !279
  %sub = sub nsw i32 %17, 1, !dbg !280
  %cmp22 = icmp slt i32 %16, %sub, !dbg !281
  br i1 %cmp22, label %if.then, label %if.else, !dbg !282

if.then:                                          ; preds = %sw.epilog
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0)), !dbg !283
  br label %if.end, !dbg !283

if.else:                                          ; preds = %sw.epilog
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)), !dbg !284
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !285

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %i, align 4, !dbg !286
  %inc = add nsw i32 %18, 1, !dbg !286
  store i32 %inc, i32* %i, align 4, !dbg !286
  br label %for.cond, !dbg !287

for.end:                                          ; preds = %for.cond
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !288
  ret void, !dbg !289
}

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind uwtable
define void @printList(i32* %list, i32 %length, i32 %mask) #0 {
entry:
  %list.addr = alloca i32*, align 8
  %length.addr = alloca i32, align 4
  %mask.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %list, i32** %list.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %list.addr, metadata !290, metadata !68), !dbg !291
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !292, metadata !68), !dbg !293
  store i32 %mask, i32* %mask.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mask.addr, metadata !294, metadata !68), !dbg !295
  call void @llvm.dbg.declare(metadata i32* %i, metadata !296, metadata !68), !dbg !297
  store i32 0, i32* %i, align 4, !dbg !298
  br label %for.cond, !dbg !300

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !301
  %1 = load i32, i32* %length.addr, align 4, !dbg !305
  %cmp = icmp slt i32 %0, %1, !dbg !306
  br i1 %cmp, label %for.body, label %for.end, !dbg !307

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !308
  %shl = shl i32 1, %2, !dbg !311
  %3 = load i32, i32* %mask.addr, align 4, !dbg !312
  %and = and i32 %shl, %3, !dbg !313
  %tobool = icmp ne i32 %and, 0, !dbg !313
  br i1 %tobool, label %if.then, label %if.end, !dbg !314

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !315

if.end:                                           ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !316
  %idxprom = sext i32 %4 to i64, !dbg !317
  %5 = load i32*, i32** %list.addr, align 8, !dbg !317
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom, !dbg !317
  %6 = load i32, i32* %arrayidx, align 4, !dbg !317
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i32 %6), !dbg !318
  br label %for.inc, !dbg !319

for.inc:                                          ; preds = %if.end, %if.then
  %7 = load i32, i32* %i, align 4, !dbg !320
  %inc = add nsw i32 %7, 1, !dbg !320
  store i32 %inc, i32* %i, align 4, !dbg !320
  br label %for.cond, !dbg !321

for.end:                                          ; preds = %for.cond
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !322
  ret void, !dbg !323
}

; Function Attrs: nounwind uwtable
define void @recSearch(i32 %searchDepth, i32 %usedMask) #0 {
entry:
  %searchDepth.addr = alloca i32, align 4
  %usedMask.addr = alloca i32, align 4
  %currOp = alloca i32, align 4
  %newMask = alloca i32, align 4
  %operand1 = alloca i32, align 4
  %operand2 = alloca i32, align 4
  %working1 = alloca i32, align 4
  %working2 = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %searchDepth, i32* %searchDepth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %searchDepth.addr, metadata !324, metadata !68), !dbg !325
  store i32 %usedMask, i32* %usedMask.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %usedMask.addr, metadata !326, metadata !68), !dbg !327
  call void @llvm.dbg.declare(metadata i32* %currOp, metadata !328, metadata !68), !dbg !329
  call void @llvm.dbg.declare(metadata i32* %newMask, metadata !330, metadata !68), !dbg !331
  call void @llvm.dbg.declare(metadata i32* %operand1, metadata !332, metadata !68), !dbg !333
  call void @llvm.dbg.declare(metadata i32* %operand2, metadata !334, metadata !68), !dbg !335
  %0 = load i32, i32* @stopSearch, align 4, !dbg !336
  %tobool = icmp ne i32 %0, 0, !dbg !336
  br i1 %tobool, label %if.then, label %if.end, !dbg !338

if.then:                                          ; preds = %entry
  br label %if.end.84, !dbg !339

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @nbNodes, align 4, !dbg !340
  %inc = add nsw i32 %1, 1, !dbg !340
  store i32 %inc, i32* @nbNodes, align 4, !dbg !340
  %2 = load i32, i32* %searchDepth.addr, align 4, !dbg !341
  %3 = load i32, i32* @dmax, align 4, !dbg !343
  %cmp = icmp eq i32 %2, %3, !dbg !344
  br i1 %cmp, label %if.then.1, label %if.else, !dbg !345

if.then.1:                                        ; preds = %if.end
  %4 = load i32, i32* @listLength, align 4, !dbg !346
  %5 = load i32, i32* %searchDepth.addr, align 4, !dbg !349
  %add = add nsw i32 %4, %5, !dbg !350
  %sub = sub nsw i32 %add, 1, !dbg !351
  %idxprom = sext i32 %sub to i64, !dbg !352
  %6 = load i32*, i32** @workList, align 8, !dbg !352
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !352
  %7 = load i32, i32* %arrayidx, align 4, !dbg !352
  %8 = load i32, i32* @goal, align 4, !dbg !353
  %sub2 = sub nsw i32 %7, %8, !dbg !354
  %call = call i32 @abs(i32 %sub2) #1, !dbg !355
  %9 = load i32, i32* @best, align 4, !dbg !356
  %10 = load i32, i32* @goal, align 4, !dbg !357
  %sub3 = sub nsw i32 %9, %10, !dbg !358
  %call4 = call i32 @abs(i32 %sub3) #1, !dbg !359
  %cmp5 = icmp slt i32 %call, %call4, !dbg !360
  br i1 %cmp5, label %if.then.6, label %if.end.14, !dbg !361

if.then.6:                                        ; preds = %if.then.1
  %11 = load i32, i32* @listLength, align 4, !dbg !362
  %12 = load i32, i32* %searchDepth.addr, align 4, !dbg !364
  %add7 = add nsw i32 %11, %12, !dbg !365
  %sub8 = sub nsw i32 %add7, 1, !dbg !366
  %idxprom9 = sext i32 %sub8 to i64, !dbg !367
  %13 = load i32*, i32** @workList, align 8, !dbg !367
  %arrayidx10 = getelementptr inbounds i32, i32* %13, i64 %idxprom9, !dbg !367
  %14 = load i32, i32* %arrayidx10, align 4, !dbg !367
  store i32 %14, i32* @best, align 4, !dbg !368
  %15 = load i32, i32* %searchDepth.addr, align 4, !dbg !369
  store i32 %15, i32* @bestDepth, align 4, !dbg !370
  %16 = load %struct.Comb*, %struct.Comb** @solution, align 8, !dbg !371
  %17 = load %struct.Comb*, %struct.Comb** @combList, align 8, !dbg !372
  %18 = load i32, i32* %searchDepth.addr, align 4, !dbg !373
  call void @saveSolution(%struct.Comb* %16, %struct.Comb* %17, i32 %18), !dbg !374
  %19 = load i32, i32* @best, align 4, !dbg !375
  %20 = load i32, i32* @goal, align 4, !dbg !377
  %cmp11 = icmp eq i32 %19, %20, !dbg !378
  br i1 %cmp11, label %if.then.12, label %if.end.13, !dbg !379

if.then.12:                                       ; preds = %if.then.6
  %21 = load %struct.Comb*, %struct.Comb** @combList, align 8, !dbg !380
  %22 = load i32, i32* %searchDepth.addr, align 4, !dbg !382
  call void @printSolution(%struct.Comb* %21, i32 %22), !dbg !383
  store i32 1, i32* @stopSearch, align 4, !dbg !384
  br label %if.end.13, !dbg !385

if.end.13:                                        ; preds = %if.then.12, %if.then.6
  br label %if.end.14, !dbg !386

if.end.14:                                        ; preds = %if.end.13, %if.then.1
  br label %if.end.84, !dbg !387

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %working1, metadata !388, metadata !68), !dbg !390
  call void @llvm.dbg.declare(metadata i32* %working2, metadata !391, metadata !68), !dbg !392
  call void @llvm.dbg.declare(metadata i32* %temp, metadata !393, metadata !68), !dbg !394
  store i32 1, i32* %currOp, align 4, !dbg !395
  br label %for.cond, !dbg !397

for.cond:                                         ; preds = %for.inc.81, %if.else
  %23 = load i32, i32* %currOp, align 4, !dbg !398
  %cmp15 = icmp sle i32 %23, 4, !dbg !402
  br i1 %cmp15, label %for.body, label %for.end.83, !dbg !403

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %operand1, align 4, !dbg !404
  br label %for.cond.16, !dbg !407

for.cond.16:                                      ; preds = %for.inc.78, %for.body
  %24 = load i32, i32* %operand1, align 4, !dbg !408
  %25 = load i32, i32* @listLength, align 4, !dbg !412
  %26 = load i32, i32* %searchDepth.addr, align 4, !dbg !413
  %add17 = add nsw i32 %25, %26, !dbg !414
  %cmp18 = icmp slt i32 %24, %add17, !dbg !415
  br i1 %cmp18, label %for.body.19, label %for.end.80, !dbg !416

for.body.19:                                      ; preds = %for.cond.16
  %27 = load i32, i32* %operand1, align 4, !dbg !417
  %shl = shl i32 1, %27, !dbg !420
  %28 = load i32, i32* %usedMask.addr, align 4, !dbg !421
  %and = and i32 %shl, %28, !dbg !422
  %tobool20 = icmp ne i32 %and, 0, !dbg !422
  br i1 %tobool20, label %if.then.21, label %if.end.22, !dbg !423

if.then.21:                                       ; preds = %for.body.19
  br label %for.inc.78, !dbg !424

if.end.22:                                        ; preds = %for.body.19
  store i32 0, i32* %operand2, align 4, !dbg !425
  br label %for.cond.23, !dbg !427

for.cond.23:                                      ; preds = %for.inc, %if.end.22
  %29 = load i32, i32* %operand2, align 4, !dbg !428
  %30 = load i32, i32* %operand1, align 4, !dbg !432
  %cmp24 = icmp slt i32 %29, %30, !dbg !433
  br i1 %cmp24, label %for.body.25, label %for.end, !dbg !434

for.body.25:                                      ; preds = %for.cond.23
  %31 = load i32, i32* %operand2, align 4, !dbg !435
  %shl26 = shl i32 1, %31, !dbg !438
  %32 = load i32, i32* %usedMask.addr, align 4, !dbg !439
  %and27 = and i32 %shl26, %32, !dbg !440
  %tobool28 = icmp ne i32 %and27, 0, !dbg !440
  br i1 %tobool28, label %if.then.29, label %if.end.30, !dbg !441

if.then.29:                                       ; preds = %for.body.25
  br label %for.inc, !dbg !442

if.end.30:                                        ; preds = %for.body.25
  %33 = load i32, i32* %operand1, align 4, !dbg !443
  %idxprom31 = sext i32 %33 to i64, !dbg !444
  %34 = load i32*, i32** @workList, align 8, !dbg !444
  %arrayidx32 = getelementptr inbounds i32, i32* %34, i64 %idxprom31, !dbg !444
  %35 = load i32, i32* %arrayidx32, align 4, !dbg !444
  store i32 %35, i32* %working1, align 4, !dbg !445
  %36 = load i32, i32* %operand2, align 4, !dbg !446
  %idxprom33 = sext i32 %36 to i64, !dbg !447
  %37 = load i32*, i32** @workList, align 8, !dbg !447
  %arrayidx34 = getelementptr inbounds i32, i32* %37, i64 %idxprom33, !dbg !447
  %38 = load i32, i32* %arrayidx34, align 4, !dbg !447
  store i32 %38, i32* %working2, align 4, !dbg !448
  %39 = load i32, i32* %currOp, align 4, !dbg !449
  %cmp35 = icmp eq i32 %39, 3, !dbg !451
  br i1 %cmp35, label %land.lhs.true, label %lor.lhs.false, !dbg !452

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load i32, i32* %currOp, align 4, !dbg !453
  %cmp36 = icmp eq i32 %40, 4, !dbg !455
  br i1 %cmp36, label %land.lhs.true, label %if.end.41, !dbg !456

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end.30
  %41 = load i32, i32* %working1, align 4, !dbg !457
  %cmp37 = icmp eq i32 %41, 1, !dbg !458
  br i1 %cmp37, label %if.then.40, label %lor.lhs.false.38, !dbg !459

lor.lhs.false.38:                                 ; preds = %land.lhs.true
  %42 = load i32, i32* %working2, align 4, !dbg !460
  %cmp39 = icmp eq i32 %42, 1, !dbg !461
  br i1 %cmp39, label %if.then.40, label %if.end.41, !dbg !462

if.then.40:                                       ; preds = %lor.lhs.false.38, %land.lhs.true
  br label %for.inc, !dbg !463

if.end.41:                                        ; preds = %lor.lhs.false.38, %lor.lhs.false
  %43 = load i32, i32* %working1, align 4, !dbg !464
  %cmp42 = icmp eq i32 %43, 0, !dbg !466
  br i1 %cmp42, label %if.then.45, label %lor.lhs.false.43, !dbg !467

lor.lhs.false.43:                                 ; preds = %if.end.41
  %44 = load i32, i32* %working2, align 4, !dbg !468
  %cmp44 = icmp eq i32 %44, 0, !dbg !470
  br i1 %cmp44, label %if.then.45, label %if.end.46, !dbg !471

if.then.45:                                       ; preds = %lor.lhs.false.43, %if.end.41
  br label %for.inc, !dbg !472

if.end.46:                                        ; preds = %lor.lhs.false.43
  %45 = load i32, i32* %currOp, align 4, !dbg !473
  %cmp47 = icmp eq i32 %45, 4, !dbg !475
  br i1 %cmp47, label %land.lhs.true.48, label %if.end.51, !dbg !476

land.lhs.true.48:                                 ; preds = %if.end.46
  %46 = load i32, i32* %working1, align 4, !dbg !477
  %47 = load i32, i32* %working2, align 4, !dbg !478
  %rem = srem i32 %46, %47, !dbg !479
  %tobool49 = icmp ne i32 %rem, 0, !dbg !479
  br i1 %tobool49, label %if.then.50, label %if.end.51, !dbg !480

if.then.50:                                       ; preds = %land.lhs.true.48
  br label %for.inc, !dbg !481

if.end.51:                                        ; preds = %land.lhs.true.48, %if.end.46
  %48 = load i32, i32* %currOp, align 4, !dbg !482
  %cmp52 = icmp eq i32 %48, 4, !dbg !484
  br i1 %cmp52, label %land.lhs.true.55, label %lor.lhs.false.53, !dbg !485

lor.lhs.false.53:                                 ; preds = %if.end.51
  %49 = load i32, i32* %currOp, align 4, !dbg !486
  %cmp54 = icmp eq i32 %49, 2, !dbg !488
  br i1 %cmp54, label %land.lhs.true.55, label %if.end.58, !dbg !489

land.lhs.true.55:                                 ; preds = %lor.lhs.false.53, %if.end.51
  %50 = load i32, i32* %working1, align 4, !dbg !490
  %51 = load i32, i32* %working2, align 4, !dbg !491
  %cmp56 = icmp slt i32 %50, %51, !dbg !492
  br i1 %cmp56, label %if.then.57, label %if.end.58, !dbg !493

if.then.57:                                       ; preds = %land.lhs.true.55
  %52 = load i32, i32* %working1, align 4, !dbg !494
  store i32 %52, i32* %temp, align 4, !dbg !496
  %53 = load i32, i32* %working2, align 4, !dbg !497
  store i32 %53, i32* %working1, align 4, !dbg !498
  %54 = load i32, i32* %temp, align 4, !dbg !499
  store i32 %54, i32* %working2, align 4, !dbg !500
  br label %if.end.58, !dbg !501

if.end.58:                                        ; preds = %if.then.57, %land.lhs.true.55, %lor.lhs.false.53
  %55 = load i32, i32* %usedMask.addr, align 4, !dbg !502
  %56 = load i32, i32* %operand1, align 4, !dbg !503
  %shl59 = shl i32 1, %56, !dbg !504
  %or = or i32 %55, %shl59, !dbg !505
  %57 = load i32, i32* %operand2, align 4, !dbg !506
  %shl60 = shl i32 1, %57, !dbg !507
  %or61 = or i32 %or, %shl60, !dbg !508
  store i32 %or61, i32* %newMask, align 4, !dbg !509
  %58 = load i32, i32* %working1, align 4, !dbg !510
  %59 = load i32, i32* %searchDepth.addr, align 4, !dbg !511
  %idxprom62 = sext i32 %59 to i64, !dbg !512
  %60 = load %struct.Comb*, %struct.Comb** @combList, align 8, !dbg !512
  %arrayidx63 = getelementptr inbounds %struct.Comb, %struct.Comb* %60, i64 %idxprom62, !dbg !512
  %operand164 = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx63, i32 0, i32 0, !dbg !513
  store i32 %58, i32* %operand164, align 4, !dbg !514
  %61 = load i32, i32* %working2, align 4, !dbg !515
  %62 = load i32, i32* %searchDepth.addr, align 4, !dbg !516
  %idxprom65 = sext i32 %62 to i64, !dbg !517
  %63 = load %struct.Comb*, %struct.Comb** @combList, align 8, !dbg !517
  %arrayidx66 = getelementptr inbounds %struct.Comb, %struct.Comb* %63, i64 %idxprom65, !dbg !517
  %operand267 = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx66, i32 0, i32 1, !dbg !518
  store i32 %61, i32* %operand267, align 4, !dbg !519
  %64 = load i32, i32* %currOp, align 4, !dbg !520
  %65 = load i32, i32* %searchDepth.addr, align 4, !dbg !521
  %idxprom68 = sext i32 %65 to i64, !dbg !522
  %66 = load %struct.Comb*, %struct.Comb** @combList, align 8, !dbg !522
  %arrayidx69 = getelementptr inbounds %struct.Comb, %struct.Comb* %66, i64 %idxprom68, !dbg !522
  %operation = getelementptr inbounds %struct.Comb, %struct.Comb* %arrayidx69, i32 0, i32 2, !dbg !523
  store i32 %64, i32* %operation, align 4, !dbg !524
  %67 = load i32, i32* %searchDepth.addr, align 4, !dbg !525
  %idxprom70 = sext i32 %67 to i64, !dbg !526
  %68 = load %struct.Comb*, %struct.Comb** @combList, align 8, !dbg !526
  %arrayidx71 = getelementptr inbounds %struct.Comb, %struct.Comb* %68, i64 %idxprom70, !dbg !526
  %call72 = call i32 @calculate(%struct.Comb* %arrayidx71), !dbg !527
  %69 = load i32, i32* @listLength, align 4, !dbg !528
  %70 = load i32, i32* %searchDepth.addr, align 4, !dbg !529
  %add73 = add nsw i32 %69, %70, !dbg !530
  %idxprom74 = sext i32 %add73 to i64, !dbg !531
  %71 = load i32*, i32** @workList, align 8, !dbg !531
  %arrayidx75 = getelementptr inbounds i32, i32* %71, i64 %idxprom74, !dbg !531
  store i32 %call72, i32* %arrayidx75, align 4, !dbg !532
  %72 = load i32, i32* %searchDepth.addr, align 4, !dbg !533
  %add76 = add nsw i32 %72, 1, !dbg !534
  %73 = load i32, i32* %newMask, align 4, !dbg !535
  call void @recSearch(i32 %add76, i32 %73), !dbg !536
  br label %for.inc, !dbg !537

for.inc:                                          ; preds = %if.end.58, %if.then.50, %if.then.45, %if.then.40, %if.then.29
  %74 = load i32, i32* %operand2, align 4, !dbg !538
  %inc77 = add nsw i32 %74, 1, !dbg !538
  store i32 %inc77, i32* %operand2, align 4, !dbg !538
  br label %for.cond.23, !dbg !539

for.end:                                          ; preds = %for.cond.23
  br label %for.inc.78, !dbg !540

for.inc.78:                                       ; preds = %for.end, %if.then.21
  %75 = load i32, i32* %operand1, align 4, !dbg !541
  %inc79 = add nsw i32 %75, 1, !dbg !541
  store i32 %inc79, i32* %operand1, align 4, !dbg !541
  br label %for.cond.16, !dbg !542

for.end.80:                                       ; preds = %for.cond.16
  br label %for.inc.81, !dbg !543

for.inc.81:                                       ; preds = %for.end.80
  %76 = load i32, i32* %currOp, align 4, !dbg !544
  %inc82 = add nsw i32 %76, 1, !dbg !544
  store i32 %inc82, i32* %currOp, align 4, !dbg !544
  br label %for.cond, !dbg !545

for.end.83:                                       ; preds = %for.cond
  br label %if.end.84

if.end.84:                                        ; preds = %if.then, %for.end.83, %if.end.14
  ret void, !dbg !546
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32) #5

; Function Attrs: nounwind uwtable
define void @doSearch() #0 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !547, metadata !68), !dbg !548
  store i32 0, i32* %i, align 4, !dbg !549
  br label %for.cond, !dbg !551

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !552
  %1 = load i32, i32* @listLength, align 4, !dbg !556
  %cmp = icmp slt i32 %0, %1, !dbg !557
  br i1 %cmp, label %for.body, label %for.end, !dbg !558

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !559
  %idxprom = sext i32 %2 to i64, !dbg !561
  %3 = load i32*, i32** @workList, align 8, !dbg !561
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !561
  %4 = load i32, i32* %arrayidx, align 4, !dbg !561
  %5 = load i32, i32* @goal, align 4, !dbg !562
  %sub = sub nsw i32 %4, %5, !dbg !563
  %call = call i32 @abs(i32 %sub) #1, !dbg !564
  %6 = load i32, i32* @best, align 4, !dbg !565
  %7 = load i32, i32* @goal, align 4, !dbg !566
  %sub1 = sub nsw i32 %6, %7, !dbg !567
  %call2 = call i32 @abs(i32 %sub1) #1, !dbg !568
  %cmp3 = icmp slt i32 %call, %call2, !dbg !569
  br i1 %cmp3, label %if.then, label %if.end, !dbg !570

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !571
  %idxprom4 = sext i32 %8 to i64, !dbg !573
  %9 = load i32*, i32** @workList, align 8, !dbg !573
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i64 %idxprom4, !dbg !573
  %10 = load i32, i32* %arrayidx5, align 4, !dbg !573
  store i32 %10, i32* @best, align 4, !dbg !574
  br label %if.end, !dbg !575

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !576

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !578
  %inc = add nsw i32 %11, 1, !dbg !578
  store i32 %inc, i32* %i, align 4, !dbg !578
  br label %for.cond, !dbg !579

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* @best, align 4, !dbg !580
  %13 = load i32, i32* @goal, align 4, !dbg !582
  %cmp6 = icmp eq i32 %12, %13, !dbg !583
  br i1 %cmp6, label %if.then.7, label %if.end.9, !dbg !584

if.then.7:                                        ; preds = %for.end
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)), !dbg !585
  br label %if.end.20, !dbg !587

if.end.9:                                         ; preds = %for.end
  store i32 1, i32* @dmax, align 4, !dbg !588
  br label %for.cond.10, !dbg !590

for.cond.10:                                      ; preds = %for.inc.15, %if.end.9
  %14 = load i32, i32* @dmax, align 4, !dbg !591
  %15 = load i32, i32* @listLength, align 4, !dbg !595
  %cmp11 = icmp slt i32 %14, %15, !dbg !596
  br i1 %cmp11, label %for.body.12, label %for.end.17, !dbg !597

for.body.12:                                      ; preds = %for.cond.10
  call void @recSearch(i32 0, i32 0), !dbg !598
  %16 = load i32, i32* @stopSearch, align 4, !dbg !600
  %tobool = icmp ne i32 %16, 0, !dbg !600
  br i1 %tobool, label %if.then.13, label %if.end.14, !dbg !602

if.then.13:                                       ; preds = %for.body.12
  br label %for.end.17, !dbg !603

if.end.14:                                        ; preds = %for.body.12
  br label %for.inc.15, !dbg !604

for.inc.15:                                       ; preds = %if.end.14
  %17 = load i32, i32* @dmax, align 4, !dbg !605
  %inc16 = add nsw i32 %17, 1, !dbg !605
  store i32 %inc16, i32* @dmax, align 4, !dbg !605
  br label %for.cond.10, !dbg !606

for.end.17:                                       ; preds = %if.then.13, %for.cond.10
  %18 = load i32, i32* @stopSearch, align 4, !dbg !607
  %cmp18 = icmp eq i32 %18, 0, !dbg !609
  br i1 %cmp18, label %if.then.19, label %if.end.20, !dbg !610

if.then.19:                                       ; preds = %for.end.17
  %19 = load %struct.Comb*, %struct.Comb** @solution, align 8, !dbg !611
  %20 = load i32, i32* @bestDepth, align 4, !dbg !612
  call void @printSolution(%struct.Comb* %19, i32 %20), !dbg !613
  br label %if.end.20, !dbg !613

if.end.20:                                        ; preds = %if.then.7, %if.then.19, %for.end.17
  ret void, !dbg !614
}

; Function Attrs: nounwind uwtable
define i32 @getInput() #0 {
entry:
  %nums = alloca [16 x i32], align 16
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  call void @llvm.dbg.declare(metadata [16 x i32]* %nums, metadata !615, metadata !68), !dbg !619
  call void @llvm.dbg.declare(metadata i32* %i, metadata !620, metadata !68), !dbg !621
  store i32 0, i32* %i, align 4, !dbg !621
  call void @llvm.dbg.declare(metadata i32* %c, metadata !622, metadata !68), !dbg !623
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* %nums, i32 0, i64 0, !dbg !624
  store i32 13, i32* %arrayidx, align 4, !dbg !625
  %arrayidx1 = getelementptr inbounds [16 x i32], [16 x i32]* %nums, i32 0, i64 1, !dbg !626
  store i32 32, i32* %arrayidx1, align 4, !dbg !627
  %arrayidx2 = getelementptr inbounds [16 x i32], [16 x i32]* %nums, i32 0, i64 2, !dbg !628
  store i32 14, i32* %arrayidx2, align 4, !dbg !629
  %arrayidx3 = getelementptr inbounds [16 x i32], [16 x i32]* %nums, i32 0, i64 3, !dbg !630
  store i32 1412, i32* %arrayidx3, align 4, !dbg !631
  %0 = load i32, i32* %i, align 4, !dbg !632
  %cmp = icmp eq i32 %0, 0, !dbg !634
  br i1 %cmp, label %if.then, label %if.end, !dbg !635

if.then:                                          ; preds = %entry
  store i32 4, i32* %i, align 4, !dbg !636
  br label %if.end, !dbg !637

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %i, align 4, !dbg !638
  %sub = sub nsw i32 %1, 1, !dbg !639
  store i32 %sub, i32* @listLength, align 4, !dbg !640
  %2 = load i32, i32* @listLength, align 4, !dbg !641
  %idxprom = sext i32 %2 to i64, !dbg !642
  %arrayidx4 = getelementptr inbounds [16 x i32], [16 x i32]* %nums, i32 0, i64 %idxprom, !dbg !642
  %3 = load i32, i32* %arrayidx4, align 4, !dbg !642
  store i32 %3, i32* @goal, align 4, !dbg !643
  %4 = load i32, i32* @listLength, align 4, !dbg !644
  %mul = mul nsw i32 2, %4, !dbg !645
  %call = call i32* @newWorkList(i32 %mul), !dbg !646
  store i32* %call, i32** @workList, align 8, !dbg !647
  %5 = load i32, i32* @listLength, align 4, !dbg !648
  %call5 = call %struct.Comb* @newCombList(i32 %5), !dbg !649
  store %struct.Comb* %call5, %struct.Comb** @combList, align 8, !dbg !650
  %6 = load i32, i32* @listLength, align 4, !dbg !651
  %call6 = call %struct.Comb* @newCombList(i32 %6), !dbg !652
  store %struct.Comb* %call6, %struct.Comb** @solution, align 8, !dbg !653
  %7 = load i32*, i32** @workList, align 8, !dbg !654
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %nums, i32 0, i32 0, !dbg !655
  %8 = load i32, i32* @listLength, align 4, !dbg !656
  call void @initWorkList(i32* %7, i32* %arraydecay, i32 %8), !dbg !657
  %9 = load %struct.Comb*, %struct.Comb** @combList, align 8, !dbg !658
  %10 = load i32, i32* @listLength, align 4, !dbg !659
  call void @initCombList(%struct.Comb* %9, i32 %10), !dbg !660
  %11 = load %struct.Comb*, %struct.Comb** @solution, align 8, !dbg !661
  %12 = load i32, i32* @listLength, align 4, !dbg !662
  call void @initCombList(%struct.Comb* %11, i32 %12), !dbg !663
  %13 = load i32, i32* @listLength, align 4, !dbg !664
  ret i32 %13, !dbg !665
}

; Function Attrs: nounwind uwtable
define void @search() #0 {
entry:
  store i32 0, i32* @stopSearch, align 4, !dbg !666
  store i32 0, i32* @nbNodes, align 4, !dbg !667
  call void @doSearch(), !dbg !668
  ret void, !dbg !669
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !670, metadata !68), !dbg !671
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !672, metadata !68), !dbg !673
  %call = call i32 @getInput(), !dbg !674
  %tobool = icmp ne i32 %call, 0, !dbg !674
  br i1 %tobool, label %if.then, label %if.end, !dbg !676

if.then:                                          ; preds = %entry
  call void @search(), !dbg !677
  br label %if.end, !dbg !677

if.end:                                           ; preds = %if.then, %entry
  ret i32 0, !dbg !678
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!64, !65}
!llvm.ident = !{!66}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !14, globals: !53)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/McGill/exptree")
!2 = !{}
!3 = !{!4, !6}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "Comb", file: !8, line: 53, baseType: !9)
!8 = !DIFile(filename: "/home/gleison/tf/Benchmarks/McGill/exptree/tmp.c", directory: "/home/gleison/tf/Benchmarks/McGill/exptree")
!9 = !DICompositeType(tag: DW_TAG_structure_type, file: !8, line: 48, size: 96, align: 32, elements: !10)
!10 = !{!11, !12, !13}
!11 = !DIDerivedType(tag: DW_TAG_member, name: "operand1", scope: !9, file: !8, line: 50, baseType: !5, size: 32, align: 32)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "operand2", scope: !9, file: !8, line: 50, baseType: !5, size: 32, align: 32, offset: 32)
!13 = !DIDerivedType(tag: DW_TAG_member, name: "operation", scope: !9, file: !8, line: 51, baseType: !5, size: 32, align: 32, offset: 64)
!14 = !{!15, !18, !21, !24, !27, !30, !33, !34, !37, !40, !43, !46, !47}
!15 = !DISubprogram(name: "newWorkList", scope: !8, file: !8, line: 72, type: !16, isLocal: false, isDefinition: true, scopeLine: 78, flags: DIFlagPrototyped, isOptimized: false, function: i32* (i32)* @newWorkList, variables: !2)
!16 = !DISubroutineType(types: !17)
!17 = !{!4, !5}
!18 = !DISubprogram(name: "newCombList", scope: !8, file: !8, line: 90, type: !19, isLocal: false, isDefinition: true, scopeLine: 96, flags: DIFlagPrototyped, isOptimized: false, function: %struct.Comb* (i32)* @newCombList, variables: !2)
!19 = !DISubroutineType(types: !20)
!20 = !{!6, !5}
!21 = !DISubprogram(name: "initWorkList", scope: !8, file: !8, line: 108, type: !22, isLocal: false, isDefinition: true, scopeLine: 110, flags: DIFlagPrototyped, isOptimized: false, function: void (i32*, i32*, i32)* @initWorkList, variables: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{null, !4, !4, !5}
!24 = !DISubprogram(name: "initCombList", scope: !8, file: !8, line: 117, type: !25, isLocal: false, isDefinition: true, scopeLine: 117, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.Comb*, i32)* @initCombList, variables: !2)
!25 = !DISubroutineType(types: !26)
!26 = !{null, !6, !5}
!27 = !DISubprogram(name: "saveSolution", scope: !8, file: !8, line: 126, type: !28, isLocal: false, isDefinition: true, scopeLine: 131, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.Comb*, %struct.Comb*, i32)* @saveSolution, variables: !2)
!28 = !DISubroutineType(types: !29)
!29 = !{null, !6, !6, !5}
!30 = !DISubprogram(name: "calculate", scope: !8, file: !8, line: 143, type: !31, isLocal: false, isDefinition: true, scopeLine: 148, flags: DIFlagPrototyped, isOptimized: false, function: i32 (%struct.Comb*)* @calculate, variables: !2)
!31 = !DISubroutineType(types: !32)
!32 = !{!5, !6}
!33 = !DISubprogram(name: "printSolution", scope: !8, file: !8, line: 166, type: !25, isLocal: false, isDefinition: true, scopeLine: 166, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.Comb*, i32)* @printSolution, variables: !2)
!34 = !DISubprogram(name: "printList", scope: !8, file: !8, line: 204, type: !35, isLocal: false, isDefinition: true, scopeLine: 204, flags: DIFlagPrototyped, isOptimized: false, function: void (i32*, i32, i32)* @printList, variables: !2)
!35 = !DISubroutineType(types: !36)
!36 = !{null, !4, !5, !5}
!37 = !DISubprogram(name: "recSearch", scope: !8, file: !8, line: 219, type: !38, isLocal: false, isDefinition: true, scopeLine: 226, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32)* @recSearch, variables: !2)
!38 = !DISubroutineType(types: !39)
!39 = !{null, !5, !5}
!40 = !DISubprogram(name: "doSearch", scope: !8, file: !8, line: 318, type: !41, isLocal: false, isDefinition: true, scopeLine: 323, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @doSearch, variables: !2)
!41 = !DISubroutineType(types: !42)
!42 = !{null}
!43 = !DISubprogram(name: "getInput", scope: !8, file: !8, line: 348, type: !44, isLocal: false, isDefinition: true, scopeLine: 348, flags: DIFlagPrototyped, isOptimized: false, function: i32 ()* @getInput, variables: !2)
!44 = !DISubroutineType(types: !45)
!45 = !{!5}
!46 = !DISubprogram(name: "search", scope: !8, file: !8, line: 381, type: !41, isLocal: false, isDefinition: true, scopeLine: 381, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @search, variables: !2)
!47 = !DISubprogram(name: "main", scope: !8, file: !8, line: 389, type: !48, isLocal: false, isDefinition: true, scopeLine: 389, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!48 = !DISubroutineType(types: !49)
!49 = !{!5, !5, !50}
!50 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !51, size: 64, align: 64)
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64, align: 64)
!52 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!53 = !{!54, !55, !56, !57, !58, !59, !60, !61, !62, !63}
!54 = !DIGlobalVariable(name: "goal", scope: !0, file: !8, line: 57, type: !5, isLocal: true, isDefinition: true, variable: i32* @goal)
!55 = !DIGlobalVariable(name: "listLength", scope: !0, file: !8, line: 58, type: !5, isLocal: true, isDefinition: true, variable: i32* @listLength)
!56 = !DIGlobalVariable(name: "workList", scope: !0, file: !8, line: 59, type: !4, isLocal: true, isDefinition: true, variable: i32** @workList)
!57 = !DIGlobalVariable(name: "combList", scope: !0, file: !8, line: 60, type: !6, isLocal: true, isDefinition: true, variable: %struct.Comb** @combList)
!58 = !DIGlobalVariable(name: "solution", scope: !0, file: !8, line: 61, type: !6, isLocal: true, isDefinition: true, variable: %struct.Comb** @solution)
!59 = !DIGlobalVariable(name: "dmax", scope: !0, file: !8, line: 63, type: !5, isLocal: true, isDefinition: true, variable: i32* @dmax)
!60 = !DIGlobalVariable(name: "stopSearch", scope: !0, file: !8, line: 64, type: !5, isLocal: true, isDefinition: true, variable: i32* @stopSearch)
!61 = !DIGlobalVariable(name: "nbNodes", scope: !0, file: !8, line: 67, type: !5, isLocal: true, isDefinition: true, variable: i32* @nbNodes)
!62 = !DIGlobalVariable(name: "best", scope: !0, file: !8, line: 62, type: !5, isLocal: true, isDefinition: true, variable: i32* @best)
!63 = !DIGlobalVariable(name: "bestDepth", scope: !0, file: !8, line: 65, type: !5, isLocal: true, isDefinition: true, variable: i32* @bestDepth)
!64 = !{i32 2, !"Dwarf Version", i32 4}
!65 = !{i32 2, !"Debug Info Version", i32 3}
!66 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!67 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "length", arg: 1, scope: !15, file: !8, line: 72, type: !5)
!68 = !DIExpression()
!69 = !DILocation(line: 72, column: 22, scope: !15)
!70 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newList", scope: !15, file: !8, line: 79, type: !4)
!71 = !DILocation(line: 79, column: 8, scope: !15)
!72 = !DILocation(line: 79, column: 32, scope: !15)
!73 = !DILocation(line: 79, column: 25, scope: !15)
!74 = !DILocation(line: 79, column: 18, scope: !15)
!75 = !DILocation(line: 81, column: 7, scope: !76)
!76 = distinct !DILexicalBlock(scope: !15, file: !8, line: 81, column: 7)
!77 = !DILocation(line: 81, column: 7, scope: !15)
!78 = !DILocation(line: 82, column: 12, scope: !76)
!79 = !DILocation(line: 82, column: 5, scope: !76)
!80 = !DILocation(line: 85, column: 13, scope: !81)
!81 = distinct !DILexicalBlock(scope: !76, file: !8, line: 84, column: 8)
!82 = !DILocation(line: 85, column: 5, scope: !81)
!83 = !DILocation(line: 86, column: 5, scope: !81)
!84 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "length", arg: 1, scope: !18, file: !8, line: 90, type: !5)
!85 = !DILocation(line: 90, column: 23, scope: !18)
!86 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newList", scope: !18, file: !8, line: 97, type: !6)
!87 = !DILocation(line: 97, column: 9, scope: !18)
!88 = !DILocation(line: 97, column: 34, scope: !18)
!89 = !DILocation(line: 97, column: 27, scope: !18)
!90 = !DILocation(line: 97, column: 19, scope: !18)
!91 = !DILocation(line: 99, column: 7, scope: !92)
!92 = distinct !DILexicalBlock(scope: !18, file: !8, line: 99, column: 7)
!93 = !DILocation(line: 99, column: 7, scope: !18)
!94 = !DILocation(line: 100, column: 12, scope: !92)
!95 = !DILocation(line: 100, column: 5, scope: !92)
!96 = !DILocation(line: 103, column: 13, scope: !97)
!97 = distinct !DILexicalBlock(scope: !92, file: !8, line: 102, column: 8)
!98 = !DILocation(line: 103, column: 5, scope: !97)
!99 = !DILocation(line: 104, column: 5, scope: !97)
!100 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "workList", arg: 1, scope: !21, file: !8, line: 108, type: !4)
!101 = !DILocation(line: 108, column: 24, scope: !21)
!102 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "givenList", arg: 2, scope: !21, file: !8, line: 108, type: !4)
!103 = !DILocation(line: 108, column: 39, scope: !21)
!104 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "length", arg: 3, scope: !21, file: !8, line: 108, type: !5)
!105 = !DILocation(line: 108, column: 54, scope: !21)
!106 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !21, file: !8, line: 111, type: !5)
!107 = !DILocation(line: 111, column: 7, scope: !21)
!108 = !DILocation(line: 113, column: 10, scope: !109)
!109 = distinct !DILexicalBlock(scope: !21, file: !8, line: 113, column: 3)
!110 = !DILocation(line: 113, column: 8, scope: !109)
!111 = !DILocation(line: 113, column: 15, scope: !112)
!112 = !DILexicalBlockFile(scope: !113, file: !8, discriminator: 2)
!113 = !DILexicalBlockFile(scope: !114, file: !8, discriminator: 1)
!114 = distinct !DILexicalBlock(scope: !109, file: !8, line: 113, column: 3)
!115 = !DILocation(line: 113, column: 19, scope: !114)
!116 = !DILocation(line: 113, column: 17, scope: !114)
!117 = !DILocation(line: 113, column: 3, scope: !109)
!118 = !DILocation(line: 114, column: 29, scope: !114)
!119 = !DILocation(line: 114, column: 19, scope: !114)
!120 = !DILocation(line: 114, column: 14, scope: !114)
!121 = !DILocation(line: 114, column: 5, scope: !114)
!122 = !DILocation(line: 114, column: 17, scope: !114)
!123 = !DILocation(line: 113, column: 28, scope: !114)
!124 = !DILocation(line: 113, column: 3, scope: !114)
!125 = !DILocation(line: 115, column: 1, scope: !21)
!126 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "combList", arg: 1, scope: !24, file: !8, line: 117, type: !6)
!127 = !DILocation(line: 117, column: 25, scope: !24)
!128 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "length", arg: 2, scope: !24, file: !8, line: 117, type: !5)
!129 = !DILocation(line: 117, column: 39, scope: !24)
!130 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !24, file: !8, line: 118, type: !5)
!131 = !DILocation(line: 118, column: 7, scope: !24)
!132 = !DILocation(line: 120, column: 10, scope: !133)
!133 = distinct !DILexicalBlock(scope: !24, file: !8, line: 120, column: 3)
!134 = !DILocation(line: 120, column: 8, scope: !133)
!135 = !DILocation(line: 120, column: 15, scope: !136)
!136 = !DILexicalBlockFile(scope: !137, file: !8, discriminator: 2)
!137 = !DILexicalBlockFile(scope: !138, file: !8, discriminator: 1)
!138 = distinct !DILexicalBlock(scope: !133, file: !8, line: 120, column: 3)
!139 = !DILocation(line: 120, column: 19, scope: !138)
!140 = !DILocation(line: 120, column: 17, scope: !138)
!141 = !DILocation(line: 120, column: 3, scope: !133)
!142 = !DILocation(line: 121, column: 14, scope: !138)
!143 = !DILocation(line: 121, column: 5, scope: !138)
!144 = !DILocation(line: 121, column: 17, scope: !138)
!145 = !DILocation(line: 121, column: 27, scope: !138)
!146 = !DILocation(line: 120, column: 28, scope: !138)
!147 = !DILocation(line: 120, column: 3, scope: !138)
!148 = !DILocation(line: 122, column: 1, scope: !24)
!149 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sol", arg: 1, scope: !27, file: !8, line: 126, type: !6)
!150 = !DILocation(line: 126, column: 25, scope: !27)
!151 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "combList", arg: 2, scope: !27, file: !8, line: 126, type: !6)
!152 = !DILocation(line: 126, column: 36, scope: !27)
!153 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "length", arg: 3, scope: !27, file: !8, line: 126, type: !5)
!154 = !DILocation(line: 126, column: 50, scope: !27)
!155 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !27, file: !8, line: 132, type: !5)
!156 = !DILocation(line: 132, column: 7, scope: !27)
!157 = !DILocation(line: 134, column: 10, scope: !158)
!158 = distinct !DILexicalBlock(scope: !27, file: !8, line: 134, column: 3)
!159 = !DILocation(line: 134, column: 8, scope: !158)
!160 = !DILocation(line: 134, column: 15, scope: !161)
!161 = !DILexicalBlockFile(scope: !162, file: !8, discriminator: 2)
!162 = !DILexicalBlockFile(scope: !163, file: !8, discriminator: 1)
!163 = distinct !DILexicalBlock(scope: !158, file: !8, line: 134, column: 3)
!164 = !DILocation(line: 134, column: 19, scope: !163)
!165 = !DILocation(line: 134, column: 17, scope: !163)
!166 = !DILocation(line: 134, column: 3, scope: !158)
!167 = !DILocation(line: 135, column: 32, scope: !168)
!168 = distinct !DILexicalBlock(scope: !163, file: !8, line: 134, column: 32)
!169 = !DILocation(line: 135, column: 23, scope: !168)
!170 = !DILocation(line: 135, column: 35, scope: !168)
!171 = !DILocation(line: 135, column: 9, scope: !168)
!172 = !DILocation(line: 135, column: 5, scope: !168)
!173 = !DILocation(line: 135, column: 12, scope: !168)
!174 = !DILocation(line: 135, column: 21, scope: !168)
!175 = !DILocation(line: 136, column: 32, scope: !168)
!176 = !DILocation(line: 136, column: 23, scope: !168)
!177 = !DILocation(line: 136, column: 35, scope: !168)
!178 = !DILocation(line: 136, column: 9, scope: !168)
!179 = !DILocation(line: 136, column: 5, scope: !168)
!180 = !DILocation(line: 136, column: 12, scope: !168)
!181 = !DILocation(line: 136, column: 21, scope: !168)
!182 = !DILocation(line: 137, column: 33, scope: !168)
!183 = !DILocation(line: 137, column: 24, scope: !168)
!184 = !DILocation(line: 137, column: 36, scope: !168)
!185 = !DILocation(line: 137, column: 9, scope: !168)
!186 = !DILocation(line: 137, column: 5, scope: !168)
!187 = !DILocation(line: 137, column: 12, scope: !168)
!188 = !DILocation(line: 137, column: 22, scope: !168)
!189 = !DILocation(line: 138, column: 3, scope: !168)
!190 = !DILocation(line: 134, column: 28, scope: !163)
!191 = !DILocation(line: 134, column: 3, scope: !163)
!192 = !DILocation(line: 140, column: 7, scope: !27)
!193 = !DILocation(line: 140, column: 3, scope: !27)
!194 = !DILocation(line: 140, column: 15, scope: !27)
!195 = !DILocation(line: 140, column: 25, scope: !27)
!196 = !DILocation(line: 141, column: 1, scope: !27)
!197 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "comb", arg: 1, scope: !30, file: !8, line: 143, type: !6)
!198 = !DILocation(line: 143, column: 21, scope: !30)
!199 = !DILocation(line: 149, column: 11, scope: !30)
!200 = !DILocation(line: 149, column: 17, scope: !30)
!201 = !DILocation(line: 149, column: 3, scope: !30)
!202 = !DILocation(line: 151, column: 12, scope: !203)
!203 = distinct !DILexicalBlock(scope: !30, file: !8, line: 149, column: 28)
!204 = !DILocation(line: 151, column: 18, scope: !203)
!205 = !DILocation(line: 151, column: 29, scope: !203)
!206 = !DILocation(line: 151, column: 35, scope: !203)
!207 = !DILocation(line: 151, column: 27, scope: !203)
!208 = !DILocation(line: 151, column: 5, scope: !203)
!209 = !DILocation(line: 153, column: 12, scope: !203)
!210 = !DILocation(line: 153, column: 18, scope: !203)
!211 = !DILocation(line: 153, column: 29, scope: !203)
!212 = !DILocation(line: 153, column: 35, scope: !203)
!213 = !DILocation(line: 153, column: 27, scope: !203)
!214 = !DILocation(line: 153, column: 5, scope: !203)
!215 = !DILocation(line: 155, column: 12, scope: !203)
!216 = !DILocation(line: 155, column: 18, scope: !203)
!217 = !DILocation(line: 155, column: 29, scope: !203)
!218 = !DILocation(line: 155, column: 35, scope: !203)
!219 = !DILocation(line: 155, column: 27, scope: !203)
!220 = !DILocation(line: 155, column: 5, scope: !203)
!221 = !DILocation(line: 157, column: 12, scope: !203)
!222 = !DILocation(line: 157, column: 18, scope: !203)
!223 = !DILocation(line: 157, column: 29, scope: !203)
!224 = !DILocation(line: 157, column: 35, scope: !203)
!225 = !DILocation(line: 157, column: 27, scope: !203)
!226 = !DILocation(line: 157, column: 5, scope: !203)
!227 = !DILocation(line: 160, column: 5, scope: !203)
!228 = !DILocation(line: 162, column: 1, scope: !30)
!229 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "combList", arg: 1, scope: !33, file: !8, line: 166, type: !6)
!230 = !DILocation(line: 166, column: 26, scope: !33)
!231 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "length", arg: 2, scope: !33, file: !8, line: 166, type: !5)
!232 = !DILocation(line: 166, column: 40, scope: !33)
!233 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !33, file: !8, line: 167, type: !5)
!234 = !DILocation(line: 167, column: 7, scope: !33)
!235 = !DILocation(line: 169, column: 10, scope: !236)
!236 = distinct !DILexicalBlock(scope: !33, file: !8, line: 169, column: 3)
!237 = !DILocation(line: 169, column: 8, scope: !236)
!238 = !DILocation(line: 169, column: 15, scope: !239)
!239 = !DILexicalBlockFile(scope: !240, file: !8, discriminator: 2)
!240 = !DILexicalBlockFile(scope: !241, file: !8, discriminator: 1)
!241 = distinct !DILexicalBlock(scope: !236, file: !8, line: 169, column: 3)
!242 = !DILocation(line: 169, column: 19, scope: !241)
!243 = !DILocation(line: 169, column: 17, scope: !241)
!244 = !DILocation(line: 169, column: 3, scope: !236)
!245 = !DILocation(line: 170, column: 27, scope: !246)
!246 = distinct !DILexicalBlock(scope: !241, file: !8, line: 169, column: 32)
!247 = !DILocation(line: 170, column: 18, scope: !246)
!248 = !DILocation(line: 170, column: 30, scope: !246)
!249 = !DILocation(line: 170, column: 5, scope: !246)
!250 = !DILocation(line: 172, column: 22, scope: !246)
!251 = !DILocation(line: 172, column: 13, scope: !246)
!252 = !DILocation(line: 172, column: 25, scope: !246)
!253 = !DILocation(line: 172, column: 5, scope: !246)
!254 = !DILocation(line: 174, column: 7, scope: !255)
!255 = distinct !DILexicalBlock(scope: !246, file: !8, line: 172, column: 36)
!256 = !DILocation(line: 175, column: 7, scope: !255)
!257 = !DILocation(line: 177, column: 7, scope: !255)
!258 = !DILocation(line: 178, column: 7, scope: !255)
!259 = !DILocation(line: 180, column: 7, scope: !255)
!260 = !DILocation(line: 181, column: 7, scope: !255)
!261 = !DILocation(line: 183, column: 7, scope: !255)
!262 = !DILocation(line: 184, column: 7, scope: !255)
!263 = !DILocation(line: 186, column: 7, scope: !255)
!264 = !DILocation(line: 187, column: 7, scope: !255)
!265 = !DILocation(line: 190, column: 32, scope: !255)
!266 = !DILocation(line: 190, column: 23, scope: !255)
!267 = !DILocation(line: 190, column: 35, scope: !255)
!268 = !DILocation(line: 190, column: 7, scope: !255)
!269 = !DILocation(line: 191, column: 5, scope: !255)
!270 = !DILocation(line: 193, column: 30, scope: !246)
!271 = !DILocation(line: 193, column: 21, scope: !246)
!272 = !DILocation(line: 193, column: 33, scope: !246)
!273 = !DILocation(line: 193, column: 63, scope: !246)
!274 = !DILocation(line: 193, column: 54, scope: !246)
!275 = !DILocation(line: 193, column: 43, scope: !246)
!276 = !DILocation(line: 193, column: 5, scope: !246)
!277 = !DILocation(line: 195, column: 9, scope: !278)
!278 = distinct !DILexicalBlock(scope: !246, file: !8, line: 195, column: 9)
!279 = !DILocation(line: 195, column: 13, scope: !278)
!280 = !DILocation(line: 195, column: 20, scope: !278)
!281 = !DILocation(line: 195, column: 11, scope: !278)
!282 = !DILocation(line: 195, column: 9, scope: !246)
!283 = !DILocation(line: 196, column: 7, scope: !278)
!284 = !DILocation(line: 198, column: 7, scope: !278)
!285 = !DILocation(line: 199, column: 3, scope: !246)
!286 = !DILocation(line: 169, column: 28, scope: !241)
!287 = !DILocation(line: 169, column: 3, scope: !241)
!288 = !DILocation(line: 201, column: 3, scope: !33)
!289 = !DILocation(line: 202, column: 1, scope: !33)
!290 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "list", arg: 1, scope: !34, file: !8, line: 204, type: !4)
!291 = !DILocation(line: 204, column: 21, scope: !34)
!292 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "length", arg: 2, scope: !34, file: !8, line: 204, type: !5)
!293 = !DILocation(line: 204, column: 31, scope: !34)
!294 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "mask", arg: 3, scope: !34, file: !8, line: 204, type: !5)
!295 = !DILocation(line: 204, column: 43, scope: !34)
!296 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !34, file: !8, line: 205, type: !5)
!297 = !DILocation(line: 205, column: 7, scope: !34)
!298 = !DILocation(line: 207, column: 10, scope: !299)
!299 = distinct !DILexicalBlock(scope: !34, file: !8, line: 207, column: 3)
!300 = !DILocation(line: 207, column: 8, scope: !299)
!301 = !DILocation(line: 207, column: 15, scope: !302)
!302 = !DILexicalBlockFile(scope: !303, file: !8, discriminator: 2)
!303 = !DILexicalBlockFile(scope: !304, file: !8, discriminator: 1)
!304 = distinct !DILexicalBlock(scope: !299, file: !8, line: 207, column: 3)
!305 = !DILocation(line: 207, column: 19, scope: !304)
!306 = !DILocation(line: 207, column: 17, scope: !304)
!307 = !DILocation(line: 207, column: 3, scope: !299)
!308 = !DILocation(line: 208, column: 15, scope: !309)
!309 = distinct !DILexicalBlock(scope: !310, file: !8, line: 208, column: 9)
!310 = distinct !DILexicalBlock(scope: !304, file: !8, line: 207, column: 32)
!311 = !DILocation(line: 208, column: 12, scope: !309)
!312 = !DILocation(line: 208, column: 20, scope: !309)
!313 = !DILocation(line: 208, column: 18, scope: !309)
!314 = !DILocation(line: 208, column: 9, scope: !310)
!315 = !DILocation(line: 209, column: 7, scope: !309)
!316 = !DILocation(line: 211, column: 24, scope: !310)
!317 = !DILocation(line: 211, column: 19, scope: !310)
!318 = !DILocation(line: 211, column: 5, scope: !310)
!319 = !DILocation(line: 212, column: 3, scope: !310)
!320 = !DILocation(line: 207, column: 28, scope: !304)
!321 = !DILocation(line: 207, column: 3, scope: !304)
!322 = !DILocation(line: 214, column: 3, scope: !34)
!323 = !DILocation(line: 215, column: 1, scope: !34)
!324 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "searchDepth", arg: 1, scope: !37, file: !8, line: 219, type: !5)
!325 = !DILocation(line: 219, column: 20, scope: !37)
!326 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "usedMask", arg: 2, scope: !37, file: !8, line: 219, type: !5)
!327 = !DILocation(line: 219, column: 37, scope: !37)
!328 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "currOp", scope: !37, file: !8, line: 227, type: !5)
!329 = !DILocation(line: 227, column: 7, scope: !37)
!330 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newMask", scope: !37, file: !8, line: 228, type: !5)
!331 = !DILocation(line: 228, column: 7, scope: !37)
!332 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "operand1", scope: !37, file: !8, line: 229, type: !5)
!333 = !DILocation(line: 229, column: 7, scope: !37)
!334 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "operand2", scope: !37, file: !8, line: 230, type: !5)
!335 = !DILocation(line: 230, column: 7, scope: !37)
!336 = !DILocation(line: 232, column: 7, scope: !337)
!337 = distinct !DILexicalBlock(scope: !37, file: !8, line: 232, column: 7)
!338 = !DILocation(line: 232, column: 7, scope: !37)
!339 = !DILocation(line: 233, column: 5, scope: !337)
!340 = !DILocation(line: 235, column: 10, scope: !37)
!341 = !DILocation(line: 237, column: 7, scope: !342)
!342 = distinct !DILexicalBlock(scope: !37, file: !8, line: 237, column: 7)
!343 = !DILocation(line: 237, column: 22, scope: !342)
!344 = !DILocation(line: 237, column: 19, scope: !342)
!345 = !DILocation(line: 237, column: 7, scope: !37)
!346 = !DILocation(line: 239, column: 22, scope: !347)
!347 = distinct !DILexicalBlock(scope: !348, file: !8, line: 239, column: 9)
!348 = distinct !DILexicalBlock(scope: !342, file: !8, line: 237, column: 28)
!349 = !DILocation(line: 239, column: 35, scope: !347)
!350 = !DILocation(line: 239, column: 33, scope: !347)
!351 = !DILocation(line: 239, column: 47, scope: !347)
!352 = !DILocation(line: 239, column: 13, scope: !347)
!353 = !DILocation(line: 239, column: 54, scope: !347)
!354 = !DILocation(line: 239, column: 52, scope: !347)
!355 = !DILocation(line: 239, column: 9, scope: !347)
!356 = !DILocation(line: 239, column: 66, scope: !347)
!357 = !DILocation(line: 239, column: 73, scope: !347)
!358 = !DILocation(line: 239, column: 71, scope: !347)
!359 = !DILocation(line: 239, column: 62, scope: !347)
!360 = !DILocation(line: 239, column: 60, scope: !347)
!361 = !DILocation(line: 239, column: 9, scope: !348)
!362 = !DILocation(line: 241, column: 23, scope: !363)
!363 = distinct !DILexicalBlock(scope: !347, file: !8, line: 239, column: 80)
!364 = !DILocation(line: 241, column: 36, scope: !363)
!365 = !DILocation(line: 241, column: 34, scope: !363)
!366 = !DILocation(line: 241, column: 48, scope: !363)
!367 = !DILocation(line: 241, column: 14, scope: !363)
!368 = !DILocation(line: 241, column: 12, scope: !363)
!369 = !DILocation(line: 242, column: 19, scope: !363)
!370 = !DILocation(line: 242, column: 17, scope: !363)
!371 = !DILocation(line: 243, column: 20, scope: !363)
!372 = !DILocation(line: 243, column: 30, scope: !363)
!373 = !DILocation(line: 243, column: 40, scope: !363)
!374 = !DILocation(line: 243, column: 7, scope: !363)
!375 = !DILocation(line: 245, column: 11, scope: !376)
!376 = distinct !DILexicalBlock(scope: !363, file: !8, line: 245, column: 11)
!377 = !DILocation(line: 245, column: 19, scope: !376)
!378 = !DILocation(line: 245, column: 16, scope: !376)
!379 = !DILocation(line: 245, column: 11, scope: !363)
!380 = !DILocation(line: 246, column: 23, scope: !381)
!381 = distinct !DILexicalBlock(scope: !376, file: !8, line: 245, column: 25)
!382 = !DILocation(line: 246, column: 33, scope: !381)
!383 = !DILocation(line: 246, column: 9, scope: !381)
!384 = !DILocation(line: 247, column: 20, scope: !381)
!385 = !DILocation(line: 248, column: 7, scope: !381)
!386 = !DILocation(line: 249, column: 5, scope: !363)
!387 = !DILocation(line: 250, column: 3, scope: !348)
!388 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "working1", scope: !389, file: !8, line: 253, type: !5)
!389 = distinct !DILexicalBlock(scope: !342, file: !8, line: 252, column: 8)
!390 = !DILocation(line: 253, column: 9, scope: !389)
!391 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "working2", scope: !389, file: !8, line: 253, type: !5)
!392 = !DILocation(line: 253, column: 19, scope: !389)
!393 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "temp", scope: !389, file: !8, line: 255, type: !5)
!394 = !DILocation(line: 255, column: 9, scope: !389)
!395 = !DILocation(line: 258, column: 17, scope: !396)
!396 = distinct !DILexicalBlock(scope: !389, file: !8, line: 258, column: 5)
!397 = !DILocation(line: 258, column: 10, scope: !396)
!398 = !DILocation(line: 258, column: 24, scope: !399)
!399 = !DILexicalBlockFile(scope: !400, file: !8, discriminator: 2)
!400 = !DILexicalBlockFile(scope: !401, file: !8, discriminator: 1)
!401 = distinct !DILexicalBlock(scope: !396, file: !8, line: 258, column: 5)
!402 = !DILocation(line: 258, column: 31, scope: !401)
!403 = !DILocation(line: 258, column: 5, scope: !396)
!404 = !DILocation(line: 259, column: 21, scope: !405)
!405 = distinct !DILexicalBlock(scope: !406, file: !8, line: 259, column: 7)
!406 = distinct !DILexicalBlock(scope: !401, file: !8, line: 258, column: 49)
!407 = !DILocation(line: 259, column: 12, scope: !405)
!408 = !DILocation(line: 259, column: 26, scope: !409)
!409 = !DILexicalBlockFile(scope: !410, file: !8, discriminator: 2)
!410 = !DILexicalBlockFile(scope: !411, file: !8, discriminator: 1)
!411 = distinct !DILexicalBlock(scope: !405, file: !8, line: 259, column: 7)
!412 = !DILocation(line: 259, column: 37, scope: !411)
!413 = !DILocation(line: 259, column: 50, scope: !411)
!414 = !DILocation(line: 259, column: 48, scope: !411)
!415 = !DILocation(line: 259, column: 35, scope: !411)
!416 = !DILocation(line: 259, column: 7, scope: !405)
!417 = !DILocation(line: 262, column: 19, scope: !418)
!418 = distinct !DILexicalBlock(scope: !419, file: !8, line: 262, column: 13)
!419 = distinct !DILexicalBlock(scope: !411, file: !8, line: 260, column: 24)
!420 = !DILocation(line: 262, column: 16, scope: !418)
!421 = !DILocation(line: 262, column: 31, scope: !418)
!422 = !DILocation(line: 262, column: 29, scope: !418)
!423 = !DILocation(line: 262, column: 13, scope: !419)
!424 = !DILocation(line: 263, column: 11, scope: !418)
!425 = !DILocation(line: 265, column: 23, scope: !426)
!426 = distinct !DILexicalBlock(scope: !419, file: !8, line: 265, column: 9)
!427 = !DILocation(line: 265, column: 14, scope: !426)
!428 = !DILocation(line: 265, column: 28, scope: !429)
!429 = !DILexicalBlockFile(scope: !430, file: !8, discriminator: 2)
!430 = !DILexicalBlockFile(scope: !431, file: !8, discriminator: 1)
!431 = distinct !DILexicalBlock(scope: !426, file: !8, line: 265, column: 9)
!432 = !DILocation(line: 265, column: 39, scope: !431)
!433 = !DILocation(line: 265, column: 37, scope: !431)
!434 = !DILocation(line: 265, column: 9, scope: !426)
!435 = !DILocation(line: 266, column: 21, scope: !436)
!436 = distinct !DILexicalBlock(scope: !437, file: !8, line: 266, column: 15)
!437 = distinct !DILexicalBlock(scope: !431, file: !8, line: 265, column: 61)
!438 = !DILocation(line: 266, column: 18, scope: !436)
!439 = !DILocation(line: 266, column: 33, scope: !436)
!440 = !DILocation(line: 266, column: 31, scope: !436)
!441 = !DILocation(line: 266, column: 15, scope: !437)
!442 = !DILocation(line: 267, column: 13, scope: !436)
!443 = !DILocation(line: 269, column: 31, scope: !437)
!444 = !DILocation(line: 269, column: 22, scope: !437)
!445 = !DILocation(line: 269, column: 20, scope: !437)
!446 = !DILocation(line: 270, column: 31, scope: !437)
!447 = !DILocation(line: 270, column: 22, scope: !437)
!448 = !DILocation(line: 270, column: 20, scope: !437)
!449 = !DILocation(line: 273, column: 16, scope: !450)
!450 = distinct !DILexicalBlock(scope: !437, file: !8, line: 273, column: 15)
!451 = !DILocation(line: 273, column: 23, scope: !450)
!452 = !DILocation(line: 273, column: 30, scope: !450)
!453 = !DILocation(line: 273, column: 33, scope: !454)
!454 = !DILexicalBlockFile(scope: !450, file: !8, discriminator: 1)
!455 = !DILocation(line: 273, column: 40, scope: !450)
!456 = !DILocation(line: 273, column: 48, scope: !450)
!457 = !DILocation(line: 274, column: 16, scope: !450)
!458 = !DILocation(line: 274, column: 25, scope: !450)
!459 = !DILocation(line: 274, column: 30, scope: !450)
!460 = !DILocation(line: 274, column: 33, scope: !454)
!461 = !DILocation(line: 274, column: 42, scope: !450)
!462 = !DILocation(line: 273, column: 15, scope: !437)
!463 = !DILocation(line: 275, column: 13, scope: !450)
!464 = !DILocation(line: 278, column: 15, scope: !465)
!465 = distinct !DILexicalBlock(scope: !437, file: !8, line: 278, column: 15)
!466 = !DILocation(line: 278, column: 24, scope: !465)
!467 = !DILocation(line: 278, column: 29, scope: !465)
!468 = !DILocation(line: 278, column: 32, scope: !469)
!469 = !DILexicalBlockFile(scope: !465, file: !8, discriminator: 1)
!470 = !DILocation(line: 278, column: 41, scope: !465)
!471 = !DILocation(line: 278, column: 15, scope: !437)
!472 = !DILocation(line: 279, column: 13, scope: !465)
!473 = !DILocation(line: 282, column: 15, scope: !474)
!474 = distinct !DILexicalBlock(scope: !437, file: !8, line: 282, column: 15)
!475 = !DILocation(line: 282, column: 22, scope: !474)
!476 = !DILocation(line: 282, column: 29, scope: !474)
!477 = !DILocation(line: 283, column: 16, scope: !474)
!478 = !DILocation(line: 283, column: 27, scope: !474)
!479 = !DILocation(line: 283, column: 25, scope: !474)
!480 = !DILocation(line: 282, column: 15, scope: !437)
!481 = !DILocation(line: 284, column: 13, scope: !474)
!482 = !DILocation(line: 288, column: 16, scope: !483)
!483 = distinct !DILexicalBlock(scope: !437, file: !8, line: 288, column: 15)
!484 = !DILocation(line: 288, column: 23, scope: !483)
!485 = !DILocation(line: 288, column: 30, scope: !483)
!486 = !DILocation(line: 288, column: 33, scope: !487)
!487 = !DILexicalBlockFile(scope: !483, file: !8, discriminator: 1)
!488 = !DILocation(line: 288, column: 40, scope: !483)
!489 = !DILocation(line: 288, column: 48, scope: !483)
!490 = !DILocation(line: 289, column: 16, scope: !483)
!491 = !DILocation(line: 289, column: 27, scope: !483)
!492 = !DILocation(line: 289, column: 25, scope: !483)
!493 = !DILocation(line: 288, column: 15, scope: !437)
!494 = !DILocation(line: 290, column: 20, scope: !495)
!495 = distinct !DILexicalBlock(scope: !483, file: !8, line: 289, column: 38)
!496 = !DILocation(line: 290, column: 18, scope: !495)
!497 = !DILocation(line: 291, column: 24, scope: !495)
!498 = !DILocation(line: 291, column: 22, scope: !495)
!499 = !DILocation(line: 292, column: 24, scope: !495)
!500 = !DILocation(line: 292, column: 22, scope: !495)
!501 = !DILocation(line: 293, column: 11, scope: !495)
!502 = !DILocation(line: 296, column: 21, scope: !437)
!503 = !DILocation(line: 297, column: 27, scope: !437)
!504 = !DILocation(line: 297, column: 24, scope: !437)
!505 = !DILocation(line: 296, column: 30, scope: !437)
!506 = !DILocation(line: 298, column: 27, scope: !437)
!507 = !DILocation(line: 298, column: 24, scope: !437)
!508 = !DILocation(line: 297, column: 37, scope: !437)
!509 = !DILocation(line: 296, column: 19, scope: !437)
!510 = !DILocation(line: 302, column: 15, scope: !437)
!511 = !DILocation(line: 301, column: 20, scope: !437)
!512 = !DILocation(line: 301, column: 11, scope: !437)
!513 = !DILocation(line: 301, column: 33, scope: !437)
!514 = !DILocation(line: 301, column: 42, scope: !437)
!515 = !DILocation(line: 304, column: 15, scope: !437)
!516 = !DILocation(line: 303, column: 20, scope: !437)
!517 = !DILocation(line: 303, column: 11, scope: !437)
!518 = !DILocation(line: 303, column: 33, scope: !437)
!519 = !DILocation(line: 303, column: 42, scope: !437)
!520 = !DILocation(line: 305, column: 45, scope: !437)
!521 = !DILocation(line: 305, column: 20, scope: !437)
!522 = !DILocation(line: 305, column: 11, scope: !437)
!523 = !DILocation(line: 305, column: 33, scope: !437)
!524 = !DILocation(line: 305, column: 43, scope: !437)
!525 = !DILocation(line: 308, column: 35, scope: !437)
!526 = !DILocation(line: 308, column: 26, scope: !437)
!527 = !DILocation(line: 308, column: 15, scope: !437)
!528 = !DILocation(line: 307, column: 20, scope: !437)
!529 = !DILocation(line: 307, column: 33, scope: !437)
!530 = !DILocation(line: 307, column: 31, scope: !437)
!531 = !DILocation(line: 307, column: 11, scope: !437)
!532 = !DILocation(line: 307, column: 46, scope: !437)
!533 = !DILocation(line: 311, column: 21, scope: !437)
!534 = !DILocation(line: 311, column: 33, scope: !437)
!535 = !DILocation(line: 311, column: 38, scope: !437)
!536 = !DILocation(line: 311, column: 11, scope: !437)
!537 = !DILocation(line: 312, column: 9, scope: !437)
!538 = !DILocation(line: 265, column: 57, scope: !431)
!539 = !DILocation(line: 265, column: 9, scope: !431)
!540 = !DILocation(line: 313, column: 7, scope: !419)
!541 = !DILocation(line: 260, column: 20, scope: !411)
!542 = !DILocation(line: 259, column: 7, scope: !411)
!543 = !DILocation(line: 314, column: 5, scope: !406)
!544 = !DILocation(line: 258, column: 45, scope: !401)
!545 = !DILocation(line: 258, column: 5, scope: !401)
!546 = !DILocation(line: 316, column: 1, scope: !37)
!547 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !40, file: !8, line: 324, type: !5)
!548 = !DILocation(line: 324, column: 7, scope: !40)
!549 = !DILocation(line: 326, column: 10, scope: !550)
!550 = distinct !DILexicalBlock(scope: !40, file: !8, line: 326, column: 3)
!551 = !DILocation(line: 326, column: 8, scope: !550)
!552 = !DILocation(line: 326, column: 15, scope: !553)
!553 = !DILexicalBlockFile(scope: !554, file: !8, discriminator: 2)
!554 = !DILexicalBlockFile(scope: !555, file: !8, discriminator: 1)
!555 = distinct !DILexicalBlock(scope: !550, file: !8, line: 326, column: 3)
!556 = !DILocation(line: 326, column: 19, scope: !555)
!557 = !DILocation(line: 326, column: 17, scope: !555)
!558 = !DILocation(line: 326, column: 3, scope: !550)
!559 = !DILocation(line: 327, column: 22, scope: !560)
!560 = distinct !DILexicalBlock(scope: !555, file: !8, line: 327, column: 9)
!561 = !DILocation(line: 327, column: 13, scope: !560)
!562 = !DILocation(line: 327, column: 27, scope: !560)
!563 = !DILocation(line: 327, column: 25, scope: !560)
!564 = !DILocation(line: 327, column: 9, scope: !560)
!565 = !DILocation(line: 327, column: 39, scope: !560)
!566 = !DILocation(line: 327, column: 46, scope: !560)
!567 = !DILocation(line: 327, column: 44, scope: !560)
!568 = !DILocation(line: 327, column: 35, scope: !560)
!569 = !DILocation(line: 327, column: 33, scope: !560)
!570 = !DILocation(line: 327, column: 9, scope: !555)
!571 = !DILocation(line: 328, column: 23, scope: !572)
!572 = distinct !DILexicalBlock(scope: !560, file: !8, line: 327, column: 53)
!573 = !DILocation(line: 328, column: 14, scope: !572)
!574 = !DILocation(line: 328, column: 12, scope: !572)
!575 = !DILocation(line: 329, column: 5, scope: !572)
!576 = !DILocation(line: 327, column: 50, scope: !577)
!577 = !DILexicalBlockFile(scope: !560, file: !8, discriminator: 1)
!578 = !DILocation(line: 326, column: 32, scope: !555)
!579 = !DILocation(line: 326, column: 3, scope: !555)
!580 = !DILocation(line: 331, column: 7, scope: !581)
!581 = distinct !DILexicalBlock(scope: !40, file: !8, line: 331, column: 7)
!582 = !DILocation(line: 331, column: 15, scope: !581)
!583 = !DILocation(line: 331, column: 12, scope: !581)
!584 = !DILocation(line: 331, column: 7, scope: !40)
!585 = !DILocation(line: 332, column: 5, scope: !586)
!586 = distinct !DILexicalBlock(scope: !581, file: !8, line: 331, column: 21)
!587 = !DILocation(line: 333, column: 5, scope: !586)
!588 = !DILocation(line: 336, column: 13, scope: !589)
!589 = distinct !DILexicalBlock(scope: !40, file: !8, line: 336, column: 3)
!590 = !DILocation(line: 336, column: 8, scope: !589)
!591 = !DILocation(line: 336, column: 18, scope: !592)
!592 = !DILexicalBlockFile(scope: !593, file: !8, discriminator: 2)
!593 = !DILexicalBlockFile(scope: !594, file: !8, discriminator: 1)
!594 = distinct !DILexicalBlock(scope: !589, file: !8, line: 336, column: 3)
!595 = !DILocation(line: 336, column: 25, scope: !594)
!596 = !DILocation(line: 336, column: 23, scope: !594)
!597 = !DILocation(line: 336, column: 3, scope: !589)
!598 = !DILocation(line: 337, column: 5, scope: !599)
!599 = distinct !DILexicalBlock(scope: !594, file: !8, line: 336, column: 45)
!600 = !DILocation(line: 339, column: 9, scope: !601)
!601 = distinct !DILexicalBlock(scope: !599, file: !8, line: 339, column: 9)
!602 = !DILocation(line: 339, column: 9, scope: !599)
!603 = !DILocation(line: 340, column: 7, scope: !601)
!604 = !DILocation(line: 341, column: 3, scope: !599)
!605 = !DILocation(line: 336, column: 41, scope: !594)
!606 = !DILocation(line: 336, column: 3, scope: !594)
!607 = !DILocation(line: 344, column: 7, scope: !608)
!608 = distinct !DILexicalBlock(scope: !40, file: !8, line: 344, column: 7)
!609 = !DILocation(line: 344, column: 18, scope: !608)
!610 = !DILocation(line: 344, column: 7, scope: !40)
!611 = !DILocation(line: 345, column: 19, scope: !608)
!612 = !DILocation(line: 345, column: 29, scope: !608)
!613 = !DILocation(line: 345, column: 5, scope: !608)
!614 = !DILocation(line: 346, column: 1, scope: !40)
!615 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "nums", scope: !43, file: !8, line: 349, type: !616)
!616 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 512, align: 32, elements: !617)
!617 = !{!618}
!618 = !DISubrange(count: 16)
!619 = !DILocation(line: 349, column: 7, scope: !43)
!620 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !43, file: !8, line: 350, type: !5)
!621 = !DILocation(line: 350, column: 7, scope: !43)
!622 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !43, file: !8, line: 351, type: !5)
!623 = !DILocation(line: 351, column: 7, scope: !43)
!624 = !DILocation(line: 352, column: 3, scope: !43)
!625 = !DILocation(line: 352, column: 11, scope: !43)
!626 = !DILocation(line: 353, column: 3, scope: !43)
!627 = !DILocation(line: 353, column: 11, scope: !43)
!628 = !DILocation(line: 354, column: 3, scope: !43)
!629 = !DILocation(line: 354, column: 11, scope: !43)
!630 = !DILocation(line: 355, column: 3, scope: !43)
!631 = !DILocation(line: 355, column: 11, scope: !43)
!632 = !DILocation(line: 364, column: 7, scope: !633)
!633 = distinct !DILexicalBlock(scope: !43, file: !8, line: 364, column: 7)
!634 = !DILocation(line: 364, column: 9, scope: !633)
!635 = !DILocation(line: 364, column: 7, scope: !43)
!636 = !DILocation(line: 365, column: 7, scope: !633)
!637 = !DILocation(line: 365, column: 5, scope: !633)
!638 = !DILocation(line: 367, column: 16, scope: !43)
!639 = !DILocation(line: 367, column: 18, scope: !43)
!640 = !DILocation(line: 367, column: 14, scope: !43)
!641 = !DILocation(line: 368, column: 15, scope: !43)
!642 = !DILocation(line: 368, column: 10, scope: !43)
!643 = !DILocation(line: 368, column: 8, scope: !43)
!644 = !DILocation(line: 370, column: 30, scope: !43)
!645 = !DILocation(line: 370, column: 28, scope: !43)
!646 = !DILocation(line: 370, column: 14, scope: !43)
!647 = !DILocation(line: 370, column: 12, scope: !43)
!648 = !DILocation(line: 371, column: 26, scope: !43)
!649 = !DILocation(line: 371, column: 14, scope: !43)
!650 = !DILocation(line: 371, column: 12, scope: !43)
!651 = !DILocation(line: 372, column: 26, scope: !43)
!652 = !DILocation(line: 372, column: 14, scope: !43)
!653 = !DILocation(line: 372, column: 12, scope: !43)
!654 = !DILocation(line: 374, column: 16, scope: !43)
!655 = !DILocation(line: 374, column: 26, scope: !43)
!656 = !DILocation(line: 374, column: 32, scope: !43)
!657 = !DILocation(line: 374, column: 3, scope: !43)
!658 = !DILocation(line: 375, column: 16, scope: !43)
!659 = !DILocation(line: 375, column: 26, scope: !43)
!660 = !DILocation(line: 375, column: 3, scope: !43)
!661 = !DILocation(line: 376, column: 16, scope: !43)
!662 = !DILocation(line: 376, column: 26, scope: !43)
!663 = !DILocation(line: 376, column: 3, scope: !43)
!664 = !DILocation(line: 378, column: 11, scope: !43)
!665 = !DILocation(line: 378, column: 3, scope: !43)
!666 = !DILocation(line: 383, column: 14, scope: !46)
!667 = !DILocation(line: 384, column: 11, scope: !46)
!668 = !DILocation(line: 386, column: 3, scope: !46)
!669 = !DILocation(line: 387, column: 1, scope: !46)
!670 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !47, file: !8, line: 389, type: !5)
!671 = !DILocation(line: 389, column: 14, scope: !47)
!672 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !47, file: !8, line: 389, type: !50)
!673 = !DILocation(line: 389, column: 26, scope: !47)
!674 = !DILocation(line: 390, column: 7, scope: !675)
!675 = distinct !DILexicalBlock(scope: !47, file: !8, line: 390, column: 7)
!676 = !DILocation(line: 390, column: 7, scope: !47)
!677 = !DILocation(line: 391, column: 5, scope: !675)
!678 = !DILocation(line: 392, column: 3, scope: !47)
