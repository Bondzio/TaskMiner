; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@printing = global i32 1, align 4
@findall = global i32 0, align 4
@solutions = global i64 0, align 8
@progname = global i8* null, align 8
@.str = private unnamed_addr constant [168 x i8] c"Usage:  %s [-ac] n\0A\09n\09Number of queens (rows and columns). An integer from 1 to 100.\0A\09-a\09Find and print all solutions.\0A\09-c\09Count all solutions, but do not print them.\0A\00", align 1
@queens = common global i32 0, align 4
@stderr = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [25 x i8] c"%s: Illegal option '%s'\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"%s: Non-integer argument '%s'\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"%s: n must be positive integer\0A\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"%s: Can't have more than %d queens\0A\00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"%s: Missing n argument\0A\00", align 1
@files = common global i32 0, align 4
@ranks = common global i32 0, align 4
@.str.7 = private unnamed_addr constant [32 x i8] c"%d queen%s on a %dx%d board...\0A\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.9 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@stdout = external global %struct._IO_FILE*, align 8
@file = common global [100 x i32] zeroinitializer, align 16
@bakdiag = common global [199 x i32] zeroinitializer, align 16
@fordiag = common global [199 x i32] zeroinitializer, align 16
@.str.10 = private unnamed_addr constant [24 x i8] c"...there is 1 solution\0A\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"...there are %ld solutions\0A\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"\0ASolution #%lu:\0A\00", align 1
@queen = common global [100 x i32] zeroinitializer, align 16

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !40, metadata !41), !dbg !42
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !43, metadata !41), !dbg !44
  call void @llvm.dbg.value(metadata i8* getelementptr inbounds ([168 x i8], [168 x i8]* @.str, i32 0, i32 0), i64 0, metadata !45, metadata !41), !dbg !46
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 0, !dbg !47
  %tmp1 = load i8*, i8** %arrayidx, align 8, !dbg !47
  store i8* %tmp1, i8** @progname, align 8, !dbg !48
  store i32 0, i32* @printing, align 4, !dbg !49
  store i32 14, i32* @queens, align 4, !dbg !50
  store i32 1, i32* @findall, align 4, !dbg !51
  call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !52, metadata !41), !dbg !53
  br label %for.cond, !dbg !54

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 1, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, %argc, !dbg !56
  br i1 %cmp, label %for.body, label %for.end, !dbg !58

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64, !dbg !59
  %arrayidx1 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom, !dbg !59
  %tmp6 = load i8*, i8** %arrayidx1, align 8, !dbg !59
  call void @llvm.dbg.value(metadata i8* %tmp6, i64 0, metadata !61, metadata !41), !dbg !62
  %tmp8 = load i8, i8* %tmp6, align 1, !dbg !63
  %conv = sext i8 %tmp8 to i32, !dbg !63
  %cmp2 = icmp eq i32 %conv, 45, !dbg !65
  br i1 %cmp2, label %if.then, label %if.else, !dbg !66

if.then:                                          ; preds = %for.body
  br label %while.cond, !dbg !67

while.cond:                                       ; preds = %sw.epilog, %if.then
  %p.0 = phi i8* [ %tmp6, %if.then ], [ %incdec.ptr, %sw.epilog ]
  %incdec.ptr = getelementptr inbounds i8, i8* %p.0, i32 1, !dbg !69
  call void @llvm.dbg.value(metadata i8* %incdec.ptr, i64 0, metadata !61, metadata !41), !dbg !62
  %tmp10 = load i8, i8* %incdec.ptr, align 1, !dbg !72
  %tobool = icmp ne i8 %tmp10, 0, !dbg !67
  br i1 %tobool, label %while.body, label %while.end, !dbg !67

while.body:                                       ; preds = %while.cond
  %tmp12 = load i8, i8* %incdec.ptr, align 1, !dbg !73
  %conv4 = sext i8 %tmp12 to i32, !dbg !73
  switch i32 %conv4, label %sw.default [
    i32 99, label %sw.bb
    i32 97, label %sw.bb.5
  ], !dbg !75

sw.bb:                                            ; preds = %while.body
  store i32 0, i32* @printing, align 4, !dbg !76
  br label %sw.bb.5, !dbg !78

sw.bb.5:                                          ; preds = %sw.bb, %while.body
  store i32 1, i32* @findall, align 4, !dbg !79
  br label %sw.epilog, !dbg !80

sw.default:                                       ; preds = %while.body
  %i.0.lcssa59 = phi i32 [ %i.0, %while.body ]
  %tmp13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !81
  %tmp14 = load i8*, i8** @progname, align 8, !dbg !82
  %idxprom6 = sext i32 %i.0.lcssa59 to i64, !dbg !83
  %arrayidx7 = getelementptr inbounds i8*, i8** %argv, i64 %idxprom6, !dbg !83
  %tmp17 = load i8*, i8** %arrayidx7, align 8, !dbg !83
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp13, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i8* %tmp14, i8* %tmp17), !dbg !84
  %tmp18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !85
  %tmp20 = load i8*, i8** @progname, align 8, !dbg !86
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp18, i8* getelementptr inbounds ([168 x i8], [168 x i8]* @.str, i32 0, i32 0), i8* %tmp20), !dbg !87
  call void @exit(i32 -1) #5, !dbg !88
  unreachable, !dbg !88

sw.epilog:                                        ; preds = %sw.bb.5
  br label %while.cond, !dbg !67

while.end:                                        ; preds = %while.cond
  br label %if.end.24, !dbg !89

if.else:                                          ; preds = %for.body
  %call9 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %tmp6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32* @queens) #6, !dbg !90
  %cmp10 = icmp ne i32 %call9, 1, !dbg !93
  br i1 %cmp10, label %if.then.12, label %if.end, !dbg !94

if.then.12:                                       ; preds = %if.else
  %tmp6.lcssa = phi i8* [ %tmp6, %if.else ]
  %tmp22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !95
  %tmp23 = load i8*, i8** @progname, align 8, !dbg !97
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp22, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i32 0, i32 0), i8* %tmp23, i8* %tmp6.lcssa), !dbg !98
  call void @exit(i32 -1) #5, !dbg !99
  unreachable, !dbg !99

if.end:                                           ; preds = %if.else
  %tmp25 = load i32, i32* @queens, align 4, !dbg !100
  %cmp14 = icmp sle i32 %tmp25, 0, !dbg !102
  br i1 %cmp14, label %if.then.16, label %if.end.18, !dbg !103

if.then.16:                                       ; preds = %if.end
  %tmp26 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !104
  %tmp27 = load i8*, i8** @progname, align 8, !dbg !106
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp26, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i32 0, i32 0), i8* %tmp27), !dbg !107
  call void @exit(i32 -1) #5, !dbg !108
  unreachable, !dbg !108

if.end.18:                                        ; preds = %if.end
  %tmp28 = load i32, i32* @queens, align 4, !dbg !109
  %cmp19 = icmp sgt i32 %tmp28, 100, !dbg !111
  br i1 %cmp19, label %if.then.21, label %if.end.23, !dbg !112

if.then.21:                                       ; preds = %if.end.18
  %tmp29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !113
  %tmp30 = load i8*, i8** @progname, align 8, !dbg !115
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp29, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i32 0, i32 0), i8* %tmp30, i32 100), !dbg !116
  call void @exit(i32 -1) #5, !dbg !117
  unreachable, !dbg !117

if.end.23:                                        ; preds = %if.end.18
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %while.end
  br label %for.inc, !dbg !118

for.inc:                                          ; preds = %if.end.24
  %inc = add nsw i32 %i.0, 1, !dbg !119
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !52, metadata !41), !dbg !53
  br label %for.cond, !dbg !120

for.end:                                          ; preds = %for.cond
  %tmp32 = load i32, i32* @queens, align 4, !dbg !121
  %tobool25 = icmp ne i32 %tmp32, 0, !dbg !121
  br i1 %tobool25, label %if.end.29, label %if.then.26, !dbg !123

if.then.26:                                       ; preds = %for.end
  %tmp33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !124
  %tmp34 = load i8*, i8** @progname, align 8, !dbg !126
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp33, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i32 0, i32 0), i8* %tmp34), !dbg !127
  %tmp35 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !128
  %tmp37 = load i8*, i8** @progname, align 8, !dbg !129
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp35, i8* getelementptr inbounds ([168 x i8], [168 x i8]* @.str, i32 0, i32 0), i8* %tmp37), !dbg !130
  call void @exit(i32 -1) #5, !dbg !131
  unreachable, !dbg !131

if.end.29:                                        ; preds = %for.end
  %tmp38 = load i32, i32* @queens, align 4, !dbg !132
  store i32 %tmp38, i32* @files, align 4, !dbg !133
  store i32 %tmp38, i32* @ranks, align 4, !dbg !134
  %tmp39 = load i32, i32* @queens, align 4, !dbg !135
  %tmp40 = load i32, i32* @queens, align 4, !dbg !136
  %cmp30 = icmp sgt i32 %tmp40, 1, !dbg !137
  %cond = select i1 %cmp30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i32 0, i32 0), !dbg !136
  %tmp41 = load i32, i32* @ranks, align 4, !dbg !138
  %tmp42 = load i32, i32* @files, align 4, !dbg !139
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7, i32 0, i32 0), i32 %tmp39, i8* %cond, i32 %tmp41, i32 %tmp42), !dbg !140
  %tmp43 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !141
  %call33 = call i32 @fflush(%struct._IO_FILE* %tmp43), !dbg !142
  store i64 0, i64* @solutions, align 8, !dbg !143
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !52, metadata !41), !dbg !53
  br label %for.cond.34, !dbg !144

for.cond.34:                                      ; preds = %for.inc.40, %if.end.29
  %i.1 = phi i32 [ 0, %if.end.29 ], [ %inc41, %for.inc.40 ]
  %cmp35 = icmp slt i32 %i.1, 100, !dbg !146
  %fileLD = load [100 x i32], [100 x i32]* @file
  %fileLD63 = load [100 x i32], [100 x i32]* @file
  br i1 %cmp35, label %for.body.37, label %for.end.42, !dbg !148

for.body.37:                                      ; preds = %for.cond.34
  %idxprom38 = sext i32 %i.1 to i64, !dbg !149
  %arrayidx39 = getelementptr inbounds [100 x i32], [100 x i32]* @file, i32 0, i64 %idxprom38, !dbg !149
  store i32 101, i32* %arrayidx39, align 4, !dbg !150
  br label %for.inc.40, !dbg !149

for.inc.40:                                       ; preds = %for.body.37
  %inc41 = add nsw i32 %i.1, 1, !dbg !151
  call void @llvm.dbg.value(metadata i32 %inc41, i64 0, metadata !52, metadata !41), !dbg !53
  br label %for.cond.34, !dbg !152

for.end.42:                                       ; preds = %for.cond.34
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !52, metadata !41), !dbg !53
  br label %for.cond.43, !dbg !153

for.cond.43:                                      ; preds = %for.inc.51, %for.end.42
  %i.2 = phi i32 [ 0, %for.end.42 ], [ %inc52, %for.inc.51 ]
  %cmp44 = icmp slt i32 %i.2, 199, !dbg !155
  %bakdiagLD = load [199 x i32], [199 x i32]* @bakdiag
  %fordiagLD = load [199 x i32], [199 x i32]* @fordiag
  %bakdiagLD64 = load [199 x i32], [199 x i32]* @bakdiag
  %fordiagLD65 = load [199 x i32], [199 x i32]* @fordiag
  br i1 %cmp44, label %for.body.46, label %for.end.53, !dbg !157

for.body.46:                                      ; preds = %for.cond.43
  %idxprom47 = sext i32 %i.2 to i64, !dbg !158
  %arrayidx48 = getelementptr inbounds [199 x i32], [199 x i32]* @bakdiag, i32 0, i64 %idxprom47, !dbg !158
  store i32 101, i32* %arrayidx48, align 4, !dbg !159
  %idxprom49 = sext i32 %i.2 to i64, !dbg !160
  %arrayidx50 = getelementptr inbounds [199 x i32], [199 x i32]* @fordiag, i32 0, i64 %idxprom49, !dbg !160
  store i32 101, i32* %arrayidx50, align 4, !dbg !161
  br label %for.inc.51, !dbg !160

for.inc.51:                                       ; preds = %for.body.46
  %inc52 = add nsw i32 %i.2, 1, !dbg !162
  call void @llvm.dbg.value(metadata i32 %inc52, i64 0, metadata !52, metadata !41), !dbg !53
  br label %for.cond.43, !dbg !163

for.end.53:                                       ; preds = %for.cond.43
  call void @find(i32 0), !dbg !164
  %tmp51 = load i32, i32* @printing, align 4, !dbg !165
  %tobool54 = icmp ne i32 %tmp51, 0, !dbg !165
  br i1 %tobool54, label %land.lhs.true, label %if.end.58, !dbg !167

land.lhs.true:                                    ; preds = %for.end.53
  %tmp52 = load i64, i64* @solutions, align 8, !dbg !168
  %tobool55 = icmp ne i64 %tmp52, 0, !dbg !168
  br i1 %tobool55, label %if.then.56, label %if.end.58, !dbg !170

if.then.56:                                       ; preds = %land.lhs.true
  %call57 = call i32 @putchar(i32 10), !dbg !171
  br label %if.end.58, !dbg !171

if.end.58:                                        ; preds = %if.then.56, %land.lhs.true, %for.end.53
  %tmp53 = load i64, i64* @solutions, align 8, !dbg !172
  %cmp59 = icmp eq i64 %tmp53, 1, !dbg !174
  br i1 %cmp59, label %if.then.61, label %if.else.63, !dbg !175

if.then.61:                                       ; preds = %if.end.58
  %call62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i32 0, i32 0)), !dbg !176
  br label %if.end.65, !dbg !176

if.else.63:                                       ; preds = %if.end.58
  %tmp54 = load i64, i64* @solutions, align 8, !dbg !177
  %call64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i32 0, i32 0), i64 %tmp54), !dbg !178
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.63, %if.then.61
  call void @exit(i32 0) #5, !dbg !179
  unreachable, !dbg !179

return:                                           ; No predecessors!
  ret i32 0, !dbg !180
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8*, i8*, ...) #4

declare i32 @printf(i8*, ...) #2

declare i32 @fflush(%struct._IO_FILE*) #2

; Function Attrs: nounwind uwtable
define void @find(i32 %level) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %level, i64 0, metadata !181, metadata !41), !dbg !182
  %tmp1 = load i32, i32* @queens, align 4, !dbg !183
  %cmp = icmp eq i32 %level, %tmp1, !dbg !185
  br i1 %cmp, label %if.then, label %if.else, !dbg !186

if.then:                                          ; preds = %entry
  %tmp2 = load i64, i64* @solutions, align 8, !dbg !187
  %inc = add i64 %tmp2, 1, !dbg !187
  store i64 %inc, i64* @solutions, align 8, !dbg !187
  %tmp3 = load i32, i32* @printing, align 4, !dbg !189
  %tobool = icmp ne i32 %tmp3, 0, !dbg !189
  br i1 %tobool, label %if.then.1, label %if.end, !dbg !191

if.then.1:                                        ; preds = %if.then
  call void @pboard(), !dbg !192
  br label %if.end, !dbg !192

if.end:                                           ; preds = %if.then.1, %if.then
  %tmp4 = load i32, i32* @findall, align 4, !dbg !193
  %tobool2 = icmp ne i32 %tmp4, 0, !dbg !193
  br i1 %tobool2, label %if.end.4, label %if.then.3, !dbg !195

if.then.3:                                        ; preds = %if.end
  call void @exit(i32 0) #5, !dbg !196
  unreachable, !dbg !196

if.end.4:                                         ; preds = %if.end
  br label %if.end.20, !dbg !197

if.else:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !198, metadata !41), !dbg !199
  call void @llvm.dbg.value(metadata i32* getelementptr inbounds ([100 x i32], [100 x i32]* @file, i32 0, i32 0), i64 0, metadata !200, metadata !41), !dbg !202
  %idxprom = sext i32 %level to i64, !dbg !203
  %arrayidx = getelementptr inbounds [199 x i32], [199 x i32]* @fordiag, i32 0, i64 %idxprom, !dbg !203
  call void @llvm.dbg.value(metadata i32* %arrayidx, i64 0, metadata !206, metadata !41), !dbg !207
  %tmp7 = load i32, i32* @files, align 4, !dbg !208
  %add = add nsw i32 %level, %tmp7, !dbg !209
  %sub = sub nsw i32 %add, 1, !dbg !210
  %idxprom5 = sext i32 %sub to i64, !dbg !211
  %arrayidx6 = getelementptr inbounds [199 x i32], [199 x i32]* @bakdiag, i32 0, i64 %idxprom5, !dbg !211
  call void @llvm.dbg.value(metadata i32* %arrayidx6, i64 0, metadata !212, metadata !41), !dbg !213
  br label %for.cond, !dbg !214

for.cond:                                         ; preds = %for.inc, %if.else
  %fdp.0 = phi i32* [ %arrayidx, %if.else ], [ %incdec.ptr18, %for.inc ]
  %fp.0 = phi i32* [ getelementptr inbounds ([100 x i32], [100 x i32]* @file, i32 0, i32 0), %if.else ], [ %incdec.ptr, %for.inc ]
  %f.0 = phi i32 [ 0, %if.else ], [ %inc17, %for.inc ]
  %bdp.0 = phi i32* [ %arrayidx6, %if.else ], [ %incdec.ptr19, %for.inc ]
  %tmp9 = load i32, i32* @files, align 4, !dbg !215
  %cmp7 = icmp slt i32 %f.0, %tmp9, !dbg !217
  br i1 %cmp7, label %for.body, label %for.end, !dbg !218

for.body:                                         ; preds = %for.cond
  %tmp11 = load i32, i32* %fp.0, align 4, !dbg !219
  %cmp8 = icmp sge i32 %tmp11, %level, !dbg !222
  br i1 %cmp8, label %land.lhs.true, label %if.end.16, !dbg !223

land.lhs.true:                                    ; preds = %for.body
  %tmp14 = load i32, i32* %fdp.0, align 4, !dbg !224
  %cmp9 = icmp sge i32 %tmp14, %level, !dbg !225
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.16, !dbg !226

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %tmp17 = load i32, i32* %bdp.0, align 4, !dbg !227
  %cmp11 = icmp sge i32 %tmp17, %level, !dbg !228
  br i1 %cmp11, label %if.then.12, label %if.end.16, !dbg !229

if.then.12:                                       ; preds = %land.lhs.true.10
  %idxprom13 = sext i32 %level to i64, !dbg !230
  %arrayidx14 = getelementptr inbounds [100 x i32], [100 x i32]* @queen, i32 0, i64 %idxprom13, !dbg !230
  store i32 %f.0, i32* %arrayidx14, align 4, !dbg !232
  store i32 %level, i32* %bdp.0, align 4, !dbg !233
  store i32 %level, i32* %fdp.0, align 4, !dbg !234
  store i32 %level, i32* %fp.0, align 4, !dbg !235
  %add15 = add nsw i32 %level, 1, !dbg !236
  call void @find(i32 %add15), !dbg !237
  store i32 101, i32* %bdp.0, align 4, !dbg !238
  store i32 101, i32* %fdp.0, align 4, !dbg !239
  store i32 101, i32* %fp.0, align 4, !dbg !240
  br label %if.end.16, !dbg !241

if.end.16:                                        ; preds = %if.then.12, %land.lhs.true.10, %land.lhs.true, %for.body
  br label %for.inc, !dbg !242

for.inc:                                          ; preds = %if.end.16
  %inc17 = add nsw i32 %f.0, 1, !dbg !243
  call void @llvm.dbg.value(metadata i32 %inc17, i64 0, metadata !198, metadata !41), !dbg !199
  %incdec.ptr = getelementptr inbounds i32, i32* %fp.0, i32 1, !dbg !244
  call void @llvm.dbg.value(metadata i32* %incdec.ptr, i64 0, metadata !200, metadata !41), !dbg !202
  %incdec.ptr18 = getelementptr inbounds i32, i32* %fdp.0, i32 1, !dbg !245
  call void @llvm.dbg.value(metadata i32* %incdec.ptr18, i64 0, metadata !206, metadata !41), !dbg !207
  %incdec.ptr19 = getelementptr inbounds i32, i32* %bdp.0, i32 -1, !dbg !246
  call void @llvm.dbg.value(metadata i32* %incdec.ptr19, i64 0, metadata !212, metadata !41), !dbg !213
  br label %for.cond, !dbg !247

for.end:                                          ; preds = %for.cond
  br label %if.end.20

if.end.20:                                        ; preds = %for.end, %if.end.4
  ret void, !dbg !248
}

declare i32 @putchar(i32) #2

; Function Attrs: nounwind uwtable
define void @pboard() #0 {
entry:
  %tmp = load i32, i32* @findall, align 4, !dbg !249
  %tobool = icmp ne i32 %tmp, 0, !dbg !249
  br i1 %tobool, label %if.then, label %if.end, !dbg !251

if.then:                                          ; preds = %entry
  %tmp1 = load i64, i64* @solutions, align 8, !dbg !252
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0), i64 %tmp1), !dbg !253
  br label %if.end, !dbg !253

if.end:                                           ; preds = %if.then, %entry
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !254, metadata !41), !dbg !255
  br label %for.cond, !dbg !256

for.cond:                                         ; preds = %for.inc.11, %if.end
  %i.0 = phi i32 [ 0, %if.end ], [ %inc12, %for.inc.11 ]
  %tmp3 = load i32, i32* @ranks, align 4, !dbg !258
  %cmp = icmp slt i32 %i.0, %tmp3, !dbg !260
  br i1 %cmp, label %for.body, label %for.end.13, !dbg !261

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !262, metadata !41), !dbg !263
  br label %for.cond.1, !dbg !264

for.cond.1:                                       ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ]
  %tmp5 = load i32, i32* @files, align 4, !dbg !267
  %cmp2 = icmp slt i32 %j.0, %tmp5, !dbg !269
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !270

for.body.3:                                       ; preds = %for.cond.1
  %call4 = call i32 @putchar(i32 32), !dbg !271
  %idxprom = sext i32 %i.0 to i64, !dbg !273
  %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* @queen, i32 0, i64 %idxprom, !dbg !273
  %tmp8 = load i32, i32* %arrayidx, align 4, !dbg !273
  %cmp5 = icmp eq i32 %j.0, %tmp8, !dbg !275
  br i1 %cmp5, label %if.then.6, label %if.else, !dbg !276

if.then.6:                                        ; preds = %for.body.3
  %call7 = call i32 @putchar(i32 81), !dbg !277
  br label %if.end.9, !dbg !277

if.else:                                          ; preds = %for.body.3
  %call8 = call i32 @putchar(i32 45), !dbg !278
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.6
  br label %for.inc, !dbg !279

for.inc:                                          ; preds = %if.end.9
  %inc = add nsw i32 %j.0, 1, !dbg !280
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !262, metadata !41), !dbg !263
  br label %for.cond.1, !dbg !281

for.end:                                          ; preds = %for.cond.1
  %call10 = call i32 @putchar(i32 10), !dbg !282
  br label %for.inc.11, !dbg !283

for.inc.11:                                       ; preds = %for.end
  %inc12 = add nsw i32 %i.0, 1, !dbg !284
  call void @llvm.dbg.value(metadata i32 %inc12, i64 0, metadata !254, metadata !41), !dbg !255
  br label %for.cond, !dbg !285

for.end.13:                                       ; preds = %for.cond
  %tmp11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !286
  %call14 = call i32 @fflush(%struct._IO_FILE* %tmp11), !dbg !287
  ret void, !dbg !288
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!37, !38}
!llvm.ident = !{!39}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3, globals: !18)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/McGill/queens")
!2 = !{}
!3 = !{!4, !12, !15}
!4 = !DISubprogram(name: "main", scope: !5, file: !5, line: 202, type: !6, isLocal: false, isDefinition: true, scopeLine: 202, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/McGill/queens/tmp.c", directory: "/home/gleison/tf/Benchmarks/McGill/queens")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8, !9}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!12 = !DISubprogram(name: "pboard", scope: !5, file: !5, line: 299, type: !13, isLocal: false, isDefinition: true, scopeLine: 299, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @pboard, variables: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{null}
!15 = !DISubprogram(name: "find", scope: !5, file: !5, line: 328, type: !16, isLocal: false, isDefinition: true, scopeLine: 328, flags: DIFlagPrototyped, isOptimized: false, function: void (i32)* @find, variables: !2)
!16 = !DISubroutineType(types: !17)
!17 = !{null, !8}
!18 = !{!19, !20, !21, !23, !24, !25, !26, !27, !31, !32, !36}
!19 = !DIGlobalVariable(name: "printing", scope: !0, file: !5, line: 182, type: !8, isLocal: false, isDefinition: true, variable: i32* @printing)
!20 = !DIGlobalVariable(name: "findall", scope: !0, file: !5, line: 183, type: !8, isLocal: false, isDefinition: true, variable: i32* @findall)
!21 = !DIGlobalVariable(name: "solutions", scope: !0, file: !5, line: 185, type: !22, isLocal: false, isDefinition: true, variable: i64* @solutions)
!22 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!23 = !DIGlobalVariable(name: "progname", scope: !0, file: !5, line: 190, type: !10, isLocal: false, isDefinition: true, variable: i8** @progname)
!24 = !DIGlobalVariable(name: "queens", scope: !0, file: !5, line: 179, type: !8, isLocal: false, isDefinition: true, variable: i32* @queens)
!25 = !DIGlobalVariable(name: "ranks", scope: !0, file: !5, line: 180, type: !8, isLocal: false, isDefinition: true, variable: i32* @ranks)
!26 = !DIGlobalVariable(name: "files", scope: !0, file: !5, line: 181, type: !8, isLocal: false, isDefinition: true, variable: i32* @files)
!27 = !DIGlobalVariable(name: "queen", scope: !0, file: !5, line: 186, type: !28, isLocal: false, isDefinition: true, variable: [100 x i32]* @queen)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 3200, align: 32, elements: !29)
!29 = !{!30}
!30 = !DISubrange(count: 100)
!31 = !DIGlobalVariable(name: "file", scope: !0, file: !5, line: 187, type: !28, isLocal: false, isDefinition: true, variable: [100 x i32]* @file)
!32 = !DIGlobalVariable(name: "fordiag", scope: !0, file: !5, line: 188, type: !33, isLocal: false, isDefinition: true, variable: [199 x i32]* @fordiag)
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 6368, align: 32, elements: !34)
!34 = !{!35}
!35 = !DISubrange(count: 199)
!36 = !DIGlobalVariable(name: "bakdiag", scope: !0, file: !5, line: 189, type: !33, isLocal: false, isDefinition: true, variable: [199 x i32]* @bakdiag)
!37 = !{i32 2, !"Dwarf Version", i32 4}
!38 = !{i32 2, !"Debug Info Version", i32 3}
!39 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!40 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !4, file: !5, line: 202, type: !8)
!41 = !DIExpression()
!42 = !DILocation(line: 202, column: 14, scope: !4)
!43 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !4, file: !5, line: 202, type: !9)
!44 = !DILocation(line: 202, column: 27, scope: !4)
!45 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "usage", scope: !4, file: !5, line: 205, type: !10)
!46 = !DILocation(line: 205, column: 9, scope: !4)
!47 = !DILocation(line: 215, column: 14, scope: !4)
!48 = !DILocation(line: 215, column: 12, scope: !4)
!49 = !DILocation(line: 218, column: 12, scope: !4)
!50 = !DILocation(line: 222, column: 10, scope: !4)
!51 = !DILocation(line: 224, column: 11, scope: !4)
!52 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !4, file: !5, line: 203, type: !8)
!53 = !DILocation(line: 203, column: 16, scope: !4)
!54 = !DILocation(line: 226, column: 8, scope: !55)
!55 = distinct !DILexicalBlock(scope: !4, file: !5, line: 226, column: 3)
!56 = !DILocation(line: 226, column: 17, scope: !57)
!57 = distinct !DILexicalBlock(scope: !55, file: !5, line: 226, column: 3)
!58 = !DILocation(line: 226, column: 3, scope: !55)
!59 = !DILocation(line: 227, column: 9, scope: !60)
!60 = distinct !DILexicalBlock(scope: !57, file: !5, line: 226, column: 30)
!61 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !4, file: !5, line: 204, type: !10)
!62 = !DILocation(line: 204, column: 18, scope: !4)
!63 = !DILocation(line: 228, column: 9, scope: !64)
!64 = distinct !DILexicalBlock(scope: !60, file: !5, line: 228, column: 9)
!65 = !DILocation(line: 228, column: 12, scope: !64)
!66 = !DILocation(line: 228, column: 9, scope: !60)
!67 = !DILocation(line: 229, column: 7, scope: !68)
!68 = distinct !DILexicalBlock(scope: !64, file: !5, line: 228, column: 20)
!69 = !DILocation(line: 229, column: 15, scope: !70)
!70 = !DILexicalBlockFile(scope: !71, file: !5, discriminator: 2)
!71 = !DILexicalBlockFile(scope: !68, file: !5, discriminator: 1)
!72 = !DILocation(line: 229, column: 14, scope: !68)
!73 = !DILocation(line: 230, column: 17, scope: !74)
!74 = distinct !DILexicalBlock(scope: !68, file: !5, line: 229, column: 20)
!75 = !DILocation(line: 230, column: 9, scope: !74)
!76 = !DILocation(line: 232, column: 20, scope: !77)
!77 = distinct !DILexicalBlock(scope: !74, file: !5, line: 230, column: 21)
!78 = !DILocation(line: 232, column: 11, scope: !77)
!79 = !DILocation(line: 234, column: 19, scope: !77)
!80 = !DILocation(line: 235, column: 11, scope: !77)
!81 = !DILocation(line: 237, column: 19, scope: !77)
!82 = !DILocation(line: 237, column: 56, scope: !77)
!83 = !DILocation(line: 237, column: 66, scope: !77)
!84 = !DILocation(line: 237, column: 11, scope: !77)
!85 = !DILocation(line: 238, column: 19, scope: !77)
!86 = !DILocation(line: 238, column: 34, scope: !77)
!87 = !DILocation(line: 238, column: 11, scope: !77)
!88 = !DILocation(line: 239, column: 11, scope: !77)
!89 = !DILocation(line: 242, column: 5, scope: !68)
!90 = !DILocation(line: 244, column: 11, scope: !91)
!91 = distinct !DILexicalBlock(scope: !92, file: !5, line: 244, column: 11)
!92 = distinct !DILexicalBlock(scope: !64, file: !5, line: 243, column: 10)
!93 = !DILocation(line: 244, column: 36, scope: !91)
!94 = !DILocation(line: 244, column: 11, scope: !92)
!95 = !DILocation(line: 245, column: 17, scope: !96)
!96 = distinct !DILexicalBlock(scope: !91, file: !5, line: 244, column: 42)
!97 = !DILocation(line: 245, column: 60, scope: !96)
!98 = !DILocation(line: 245, column: 9, scope: !96)
!99 = !DILocation(line: 246, column: 9, scope: !96)
!100 = !DILocation(line: 248, column: 11, scope: !101)
!101 = distinct !DILexicalBlock(scope: !92, file: !5, line: 248, column: 11)
!102 = !DILocation(line: 248, column: 18, scope: !101)
!103 = !DILocation(line: 248, column: 11, scope: !92)
!104 = !DILocation(line: 249, column: 17, scope: !105)
!105 = distinct !DILexicalBlock(scope: !101, file: !5, line: 248, column: 24)
!106 = !DILocation(line: 249, column: 61, scope: !105)
!107 = !DILocation(line: 249, column: 9, scope: !105)
!108 = !DILocation(line: 250, column: 9, scope: !105)
!109 = !DILocation(line: 252, column: 11, scope: !110)
!110 = distinct !DILexicalBlock(scope: !92, file: !5, line: 252, column: 11)
!111 = !DILocation(line: 252, column: 18, scope: !110)
!112 = !DILocation(line: 252, column: 11, scope: !92)
!113 = !DILocation(line: 253, column: 17, scope: !114)
!114 = distinct !DILexicalBlock(scope: !110, file: !5, line: 252, column: 31)
!115 = !DILocation(line: 254, column: 17, scope: !114)
!116 = !DILocation(line: 253, column: 9, scope: !114)
!117 = !DILocation(line: 255, column: 9, scope: !114)
!118 = !DILocation(line: 258, column: 3, scope: !60)
!119 = !DILocation(line: 226, column: 25, scope: !57)
!120 = !DILocation(line: 226, column: 3, scope: !57)
!121 = !DILocation(line: 259, column: 8, scope: !122)
!122 = distinct !DILexicalBlock(scope: !4, file: !5, line: 259, column: 7)
!123 = !DILocation(line: 259, column: 7, scope: !4)
!124 = !DILocation(line: 260, column: 13, scope: !125)
!125 = distinct !DILexicalBlock(scope: !122, file: !5, line: 259, column: 16)
!126 = !DILocation(line: 260, column: 49, scope: !125)
!127 = !DILocation(line: 260, column: 5, scope: !125)
!128 = !DILocation(line: 261, column: 13, scope: !125)
!129 = !DILocation(line: 261, column: 28, scope: !125)
!130 = !DILocation(line: 261, column: 5, scope: !125)
!131 = !DILocation(line: 262, column: 5, scope: !125)
!132 = !DILocation(line: 265, column: 19, scope: !4)
!133 = !DILocation(line: 265, column: 17, scope: !4)
!134 = !DILocation(line: 265, column: 9, scope: !4)
!135 = !DILocation(line: 267, column: 10, scope: !4)
!136 = !DILocation(line: 267, column: 18, scope: !4)
!137 = !DILocation(line: 267, column: 25, scope: !4)
!138 = !DILocation(line: 267, column: 41, scope: !4)
!139 = !DILocation(line: 267, column: 48, scope: !4)
!140 = !DILocation(line: 266, column: 3, scope: !4)
!141 = !DILocation(line: 268, column: 10, scope: !4)
!142 = !DILocation(line: 268, column: 3, scope: !4)
!143 = !DILocation(line: 271, column: 13, scope: !4)
!144 = !DILocation(line: 272, column: 8, scope: !145)
!145 = distinct !DILexicalBlock(scope: !4, file: !5, line: 272, column: 3)
!146 = !DILocation(line: 272, column: 17, scope: !147)
!147 = distinct !DILexicalBlock(scope: !145, file: !5, line: 272, column: 3)
!148 = !DILocation(line: 272, column: 3, scope: !145)
!149 = !DILocation(line: 273, column: 5, scope: !147)
!150 = !DILocation(line: 273, column: 13, scope: !147)
!151 = !DILocation(line: 272, column: 29, scope: !147)
!152 = !DILocation(line: 272, column: 3, scope: !147)
!153 = !DILocation(line: 274, column: 8, scope: !154)
!154 = distinct !DILexicalBlock(scope: !4, file: !5, line: 274, column: 3)
!155 = !DILocation(line: 274, column: 17, scope: !156)
!156 = distinct !DILexicalBlock(scope: !154, file: !5, line: 274, column: 3)
!157 = !DILocation(line: 274, column: 3, scope: !154)
!158 = !DILocation(line: 275, column: 18, scope: !156)
!159 = !DILocation(line: 275, column: 29, scope: !156)
!160 = !DILocation(line: 275, column: 5, scope: !156)
!161 = !DILocation(line: 275, column: 16, scope: !156)
!162 = !DILocation(line: 274, column: 29, scope: !156)
!163 = !DILocation(line: 274, column: 3, scope: !156)
!164 = !DILocation(line: 278, column: 3, scope: !4)
!165 = !DILocation(line: 279, column: 7, scope: !166)
!166 = distinct !DILexicalBlock(scope: !4, file: !5, line: 279, column: 7)
!167 = !DILocation(line: 279, column: 16, scope: !166)
!168 = !DILocation(line: 279, column: 19, scope: !169)
!169 = !DILexicalBlockFile(scope: !166, file: !5, discriminator: 1)
!170 = !DILocation(line: 279, column: 7, scope: !4)
!171 = !DILocation(line: 280, column: 5, scope: !166)
!172 = !DILocation(line: 283, column: 7, scope: !173)
!173 = distinct !DILexicalBlock(scope: !4, file: !5, line: 283, column: 7)
!174 = !DILocation(line: 283, column: 17, scope: !173)
!175 = !DILocation(line: 283, column: 7, scope: !4)
!176 = !DILocation(line: 284, column: 5, scope: !173)
!177 = !DILocation(line: 286, column: 44, scope: !173)
!178 = !DILocation(line: 286, column: 5, scope: !173)
!179 = !DILocation(line: 288, column: 3, scope: !4)
!180 = !DILocation(line: 289, column: 1, scope: !4)
!181 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "level", arg: 1, scope: !15, file: !5, line: 328, type: !8)
!182 = !DILocation(line: 328, column: 24, scope: !15)
!183 = !DILocation(line: 337, column: 16, scope: !184)
!184 = distinct !DILexicalBlock(scope: !15, file: !5, line: 337, column: 7)
!185 = !DILocation(line: 337, column: 13, scope: !184)
!186 = !DILocation(line: 337, column: 7, scope: !15)
!187 = !DILocation(line: 338, column: 5, scope: !188)
!188 = distinct !DILexicalBlock(scope: !184, file: !5, line: 337, column: 24)
!189 = !DILocation(line: 339, column: 9, scope: !190)
!190 = distinct !DILexicalBlock(scope: !188, file: !5, line: 339, column: 9)
!191 = !DILocation(line: 339, column: 9, scope: !188)
!192 = !DILocation(line: 340, column: 7, scope: !190)
!193 = !DILocation(line: 341, column: 10, scope: !194)
!194 = distinct !DILexicalBlock(scope: !188, file: !5, line: 341, column: 9)
!195 = !DILocation(line: 341, column: 9, scope: !188)
!196 = !DILocation(line: 342, column: 7, scope: !194)
!197 = !DILocation(line: 346, column: 3, scope: !188)
!198 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "f", scope: !15, file: !5, line: 329, type: !8)
!199 = !DILocation(line: 329, column: 16, scope: !15)
!200 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fp", scope: !15, file: !5, line: 330, type: !201)
!201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!202 = !DILocation(line: 330, column: 17, scope: !15)
!203 = !DILocation(line: 350, column: 17, scope: !204)
!204 = distinct !DILexicalBlock(scope: !205, file: !5, line: 347, column: 5)
!205 = distinct !DILexicalBlock(scope: !184, file: !5, line: 346, column: 10)
!206 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fdp", scope: !15, file: !5, line: 330, type: !201)
!207 = !DILocation(line: 330, column: 22, scope: !15)
!208 = !DILocation(line: 351, column: 33, scope: !204)
!209 = !DILocation(line: 351, column: 31, scope: !204)
!210 = !DILocation(line: 351, column: 39, scope: !204)
!211 = !DILocation(line: 351, column: 17, scope: !204)
!212 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bdp", scope: !15, file: !5, line: 330, type: !201)
!213 = !DILocation(line: 330, column: 28, scope: !15)
!214 = !DILocation(line: 348, column: 10, scope: !204)
!215 = !DILocation(line: 353, column: 14, scope: !216)
!216 = distinct !DILexicalBlock(scope: !204, file: !5, line: 347, column: 5)
!217 = !DILocation(line: 353, column: 12, scope: !216)
!218 = !DILocation(line: 347, column: 5, scope: !204)
!219 = !DILocation(line: 358, column: 11, scope: !220)
!220 = distinct !DILexicalBlock(scope: !221, file: !5, line: 358, column: 11)
!221 = distinct !DILexicalBlock(scope: !216, file: !5, line: 357, column: 12)
!222 = !DILocation(line: 358, column: 15, scope: !220)
!223 = !DILocation(line: 358, column: 24, scope: !220)
!224 = !DILocation(line: 359, column: 11, scope: !220)
!225 = !DILocation(line: 359, column: 16, scope: !220)
!226 = !DILocation(line: 359, column: 25, scope: !220)
!227 = !DILocation(line: 359, column: 28, scope: !220)
!228 = !DILocation(line: 359, column: 33, scope: !220)
!229 = !DILocation(line: 358, column: 11, scope: !221)
!230 = !DILocation(line: 361, column: 9, scope: !231)
!231 = distinct !DILexicalBlock(scope: !220, file: !5, line: 360, column: 13)
!232 = !DILocation(line: 361, column: 22, scope: !231)
!233 = !DILocation(line: 362, column: 27, scope: !231)
!234 = !DILocation(line: 362, column: 20, scope: !231)
!235 = !DILocation(line: 362, column: 13, scope: !231)
!236 = !DILocation(line: 363, column: 20, scope: !231)
!237 = !DILocation(line: 363, column: 9, scope: !231)
!238 = !DILocation(line: 364, column: 27, scope: !231)
!239 = !DILocation(line: 364, column: 20, scope: !231)
!240 = !DILocation(line: 364, column: 13, scope: !231)
!241 = !DILocation(line: 365, column: 7, scope: !231)
!242 = !DILocation(line: 366, column: 5, scope: !221)
!243 = !DILocation(line: 355, column: 10, scope: !216)
!244 = !DILocation(line: 356, column: 10, scope: !216)
!245 = !DILocation(line: 356, column: 16, scope: !216)
!246 = !DILocation(line: 356, column: 23, scope: !216)
!247 = !DILocation(line: 347, column: 5, scope: !216)
!248 = !DILocation(line: 368, column: 1, scope: !15)
!249 = !DILocation(line: 302, column: 7, scope: !250)
!250 = distinct !DILexicalBlock(scope: !12, file: !5, line: 302, column: 7)
!251 = !DILocation(line: 302, column: 7, scope: !12)
!252 = !DILocation(line: 303, column: 34, scope: !250)
!253 = !DILocation(line: 303, column: 5, scope: !250)
!254 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !12, file: !5, line: 300, type: !8)
!255 = !DILocation(line: 300, column: 16, scope: !12)
!256 = !DILocation(line: 305, column: 8, scope: !257)
!257 = distinct !DILexicalBlock(scope: !12, file: !5, line: 305, column: 3)
!258 = !DILocation(line: 305, column: 19, scope: !259)
!259 = distinct !DILexicalBlock(scope: !257, file: !5, line: 305, column: 3)
!260 = !DILocation(line: 305, column: 17, scope: !259)
!261 = !DILocation(line: 305, column: 3, scope: !257)
!262 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !12, file: !5, line: 300, type: !8)
!263 = !DILocation(line: 300, column: 19, scope: !12)
!264 = !DILocation(line: 306, column: 10, scope: !265)
!265 = distinct !DILexicalBlock(scope: !266, file: !5, line: 306, column: 5)
!266 = distinct !DILexicalBlock(scope: !259, file: !5, line: 305, column: 31)
!267 = !DILocation(line: 306, column: 21, scope: !268)
!268 = distinct !DILexicalBlock(scope: !265, file: !5, line: 306, column: 5)
!269 = !DILocation(line: 306, column: 19, scope: !268)
!270 = !DILocation(line: 306, column: 5, scope: !265)
!271 = !DILocation(line: 307, column: 7, scope: !272)
!272 = distinct !DILexicalBlock(scope: !268, file: !5, line: 306, column: 33)
!273 = !DILocation(line: 308, column: 16, scope: !274)
!274 = distinct !DILexicalBlock(scope: !272, file: !5, line: 308, column: 11)
!275 = !DILocation(line: 308, column: 13, scope: !274)
!276 = !DILocation(line: 308, column: 11, scope: !272)
!277 = !DILocation(line: 309, column: 9, scope: !274)
!278 = !DILocation(line: 311, column: 9, scope: !274)
!279 = !DILocation(line: 312, column: 5, scope: !272)
!280 = !DILocation(line: 306, column: 28, scope: !268)
!281 = !DILocation(line: 306, column: 5, scope: !268)
!282 = !DILocation(line: 313, column: 5, scope: !266)
!283 = !DILocation(line: 314, column: 3, scope: !266)
!284 = !DILocation(line: 305, column: 26, scope: !259)
!285 = !DILocation(line: 305, column: 3, scope: !259)
!286 = !DILocation(line: 315, column: 10, scope: !12)
!287 = !DILocation(line: 315, column: 3, scope: !12)
!288 = !DILocation(line: 316, column: 1, scope: !12)
