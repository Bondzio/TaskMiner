; ModuleID = '/home/gleison/tf/Benchmarks/McGill/queens/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@printing = global i32 1, align 4
@findall = global i32 0, align 4
@solutions = global i64 0, align 8
@progname = global i8* null, align 8
@.str = private unnamed_addr constant [168 x i8] c"Usage:  %s [-ac] n\0A\09n\09Number of queens (rows and columns). An integer from 1 to 100.\0A\09-a\09Find and print all solutions.\0A\09-c\09Count all solutions, but do not print them.\0A\00", align 1
@queens = common global i32 0, align 4
@stderr = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [25 x i8] c"%s: Illegal option '%s'\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"%s: Non-integer argument '%s'\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"%s: n must be positive integer\0A\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"%s: Can't have more than %d queens\0A\00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"%s: Missing n argument\0A\00", align 1
@files = common global i32 0, align 4
@ranks = common global i32 0, align 4
@.str.7 = private unnamed_addr constant [32 x i8] c"%d queen%s on a %dx%d board...\0A\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.9 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@stdout = external global %struct._IO_FILE*, align 8
@file = common global [100 x i32] zeroinitializer, align 16
@bakdiag = common global [199 x i32] zeroinitializer, align 16
@fordiag = common global [199 x i32] zeroinitializer, align 16
@.str.10 = private unnamed_addr constant [24 x i8] c"...there is 1 solution\0A\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"...there are %ld solutions\0A\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"\0ASolution #%lu:\0A\00", align 1
@queen = common global [100 x i32] zeroinitializer, align 16

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %usage = alloca i8*, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !40, metadata !41), !dbg !42
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !43, metadata !41), !dbg !44
  call void @llvm.dbg.declare(metadata i32* %i, metadata !45, metadata !41), !dbg !46
  call void @llvm.dbg.declare(metadata i8** %p, metadata !47, metadata !41), !dbg !48
  call void @llvm.dbg.declare(metadata i8** %usage, metadata !49, metadata !41), !dbg !50
  store i8* getelementptr inbounds ([168 x i8], [168 x i8]* @.str, i32 0, i32 0), i8** %usage, align 8, !dbg !50
  %0 = load i8**, i8*** %argv.addr, align 8, !dbg !51
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0, !dbg !51
  %1 = load i8*, i8** %arrayidx, align 8, !dbg !51
  store i8* %1, i8** @progname, align 8, !dbg !52
  store i32 0, i32* @printing, align 4, !dbg !53
  store i32 14, i32* @queens, align 4, !dbg !54
  store i32 1, i32* @findall, align 4, !dbg !55
  store i32 1, i32* %i, align 4, !dbg !56
  br label %for.cond, !dbg !58

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !59
  %3 = load i32, i32* %argc.addr, align 4, !dbg !63
  %cmp = icmp slt i32 %2, %3, !dbg !64
  br i1 %cmp, label %for.body, label %for.end, !dbg !65

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4, !dbg !66
  %idxprom = sext i32 %4 to i64, !dbg !68
  %5 = load i8**, i8*** %argv.addr, align 8, !dbg !68
  %arrayidx1 = getelementptr inbounds i8*, i8** %5, i64 %idxprom, !dbg !68
  %6 = load i8*, i8** %arrayidx1, align 8, !dbg !68
  store i8* %6, i8** %p, align 8, !dbg !69
  %7 = load i8*, i8** %p, align 8, !dbg !70
  %8 = load i8, i8* %7, align 1, !dbg !72
  %conv = sext i8 %8 to i32, !dbg !72
  %cmp2 = icmp eq i32 %conv, 45, !dbg !73
  br i1 %cmp2, label %if.then, label %if.else, !dbg !74

if.then:                                          ; preds = %for.body
  br label %while.cond, !dbg !75

while.cond:                                       ; preds = %sw.epilog, %if.then
  %9 = load i8*, i8** %p, align 8, !dbg !77
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1, !dbg !77
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !77
  %10 = load i8, i8* %incdec.ptr, align 1, !dbg !80
  %tobool = icmp ne i8 %10, 0, !dbg !75
  br i1 %tobool, label %while.body, label %while.end, !dbg !75

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %p, align 8, !dbg !81
  %12 = load i8, i8* %11, align 1, !dbg !83
  %conv4 = sext i8 %12 to i32, !dbg !83
  switch i32 %conv4, label %sw.default [
    i32 99, label %sw.bb
    i32 97, label %sw.bb.5
  ], !dbg !84

sw.bb:                                            ; preds = %while.body
  store i32 0, i32* @printing, align 4, !dbg !85
  br label %sw.bb.5, !dbg !87

sw.bb.5:                                          ; preds = %while.body, %sw.bb
  store i32 1, i32* @findall, align 4, !dbg !88
  br label %sw.epilog, !dbg !89

sw.default:                                       ; preds = %while.body
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !90
  %14 = load i8*, i8** @progname, align 8, !dbg !91
  %15 = load i32, i32* %i, align 4, !dbg !92
  %idxprom6 = sext i32 %15 to i64, !dbg !93
  %16 = load i8**, i8*** %argv.addr, align 8, !dbg !93
  %arrayidx7 = getelementptr inbounds i8*, i8** %16, i64 %idxprom6, !dbg !93
  %17 = load i8*, i8** %arrayidx7, align 8, !dbg !93
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i8* %14, i8* %17), !dbg !94
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !95
  %19 = load i8*, i8** %usage, align 8, !dbg !96
  %20 = load i8*, i8** @progname, align 8, !dbg !97
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* %19, i8* %20), !dbg !98
  call void @exit(i32 -1) #5, !dbg !99
  unreachable, !dbg !99

sw.epilog:                                        ; preds = %sw.bb.5
  br label %while.cond, !dbg !75

while.end:                                        ; preds = %while.cond
  br label %if.end.24, !dbg !100

if.else:                                          ; preds = %for.body
  %21 = load i8*, i8** %p, align 8, !dbg !101
  %call9 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32* @queens) #6, !dbg !104
  %cmp10 = icmp ne i32 %call9, 1, !dbg !105
  br i1 %cmp10, label %if.then.12, label %if.end, !dbg !106

if.then.12:                                       ; preds = %if.else
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !107
  %23 = load i8*, i8** @progname, align 8, !dbg !109
  %24 = load i8*, i8** %p, align 8, !dbg !110
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i32 0, i32 0), i8* %23, i8* %24), !dbg !111
  call void @exit(i32 -1) #5, !dbg !112
  unreachable, !dbg !112

if.end:                                           ; preds = %if.else
  %25 = load i32, i32* @queens, align 4, !dbg !113
  %cmp14 = icmp sle i32 %25, 0, !dbg !115
  br i1 %cmp14, label %if.then.16, label %if.end.18, !dbg !116

if.then.16:                                       ; preds = %if.end
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !117
  %27 = load i8*, i8** @progname, align 8, !dbg !119
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i32 0, i32 0), i8* %27), !dbg !120
  call void @exit(i32 -1) #5, !dbg !121
  unreachable, !dbg !121

if.end.18:                                        ; preds = %if.end
  %28 = load i32, i32* @queens, align 4, !dbg !122
  %cmp19 = icmp sgt i32 %28, 100, !dbg !124
  br i1 %cmp19, label %if.then.21, label %if.end.23, !dbg !125

if.then.21:                                       ; preds = %if.end.18
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !126
  %30 = load i8*, i8** @progname, align 8, !dbg !128
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i32 0, i32 0), i8* %30, i32 100), !dbg !129
  call void @exit(i32 -1) #5, !dbg !130
  unreachable, !dbg !130

if.end.23:                                        ; preds = %if.end.18
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %while.end
  br label %for.inc, !dbg !131

for.inc:                                          ; preds = %if.end.24
  %31 = load i32, i32* %i, align 4, !dbg !132
  %inc = add nsw i32 %31, 1, !dbg !132
  store i32 %inc, i32* %i, align 4, !dbg !132
  br label %for.cond, !dbg !133

for.end:                                          ; preds = %for.cond
  %32 = load i32, i32* @queens, align 4, !dbg !134
  %tobool25 = icmp ne i32 %32, 0, !dbg !134
  br i1 %tobool25, label %if.end.29, label %if.then.26, !dbg !136

if.then.26:                                       ; preds = %for.end
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !137
  %34 = load i8*, i8** @progname, align 8, !dbg !139
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i32 0, i32 0), i8* %34), !dbg !140
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !141
  %36 = load i8*, i8** %usage, align 8, !dbg !142
  %37 = load i8*, i8** @progname, align 8, !dbg !143
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* %36, i8* %37), !dbg !144
  call void @exit(i32 -1) #5, !dbg !145
  unreachable, !dbg !145

if.end.29:                                        ; preds = %for.end
  %38 = load i32, i32* @queens, align 4, !dbg !146
  store i32 %38, i32* @files, align 4, !dbg !147
  store i32 %38, i32* @ranks, align 4, !dbg !148
  %39 = load i32, i32* @queens, align 4, !dbg !149
  %40 = load i32, i32* @queens, align 4, !dbg !150
  %cmp30 = icmp sgt i32 %40, 1, !dbg !151
  %cond = select i1 %cmp30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i32 0, i32 0), !dbg !150
  %41 = load i32, i32* @ranks, align 4, !dbg !152
  %42 = load i32, i32* @files, align 4, !dbg !153
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7, i32 0, i32 0), i32 %39, i8* %cond, i32 %41, i32 %42), !dbg !154
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !155
  %call33 = call i32 @fflush(%struct._IO_FILE* %43), !dbg !156
  store i64 0, i64* @solutions, align 8, !dbg !157
  store i32 0, i32* %i, align 4, !dbg !158
  br label %for.cond.34, !dbg !160

for.cond.34:                                      ; preds = %for.inc.40, %if.end.29
  %44 = load i32, i32* %i, align 4, !dbg !161
  %cmp35 = icmp slt i32 %44, 100, !dbg !165
  br i1 %cmp35, label %for.body.37, label %for.end.42, !dbg !166

for.body.37:                                      ; preds = %for.cond.34
  %45 = load i32, i32* %i, align 4, !dbg !167
  %idxprom38 = sext i32 %45 to i64, !dbg !168
  %arrayidx39 = getelementptr inbounds [100 x i32], [100 x i32]* @file, i32 0, i64 %idxprom38, !dbg !168
  store i32 101, i32* %arrayidx39, align 4, !dbg !169
  br label %for.inc.40, !dbg !168

for.inc.40:                                       ; preds = %for.body.37
  %46 = load i32, i32* %i, align 4, !dbg !170
  %inc41 = add nsw i32 %46, 1, !dbg !170
  store i32 %inc41, i32* %i, align 4, !dbg !170
  br label %for.cond.34, !dbg !171

for.end.42:                                       ; preds = %for.cond.34
  store i32 0, i32* %i, align 4, !dbg !172
  br label %for.cond.43, !dbg !174

for.cond.43:                                      ; preds = %for.inc.51, %for.end.42
  %47 = load i32, i32* %i, align 4, !dbg !175
  %cmp44 = icmp slt i32 %47, 199, !dbg !179
  br i1 %cmp44, label %for.body.46, label %for.end.53, !dbg !180

for.body.46:                                      ; preds = %for.cond.43
  %48 = load i32, i32* %i, align 4, !dbg !181
  %idxprom47 = sext i32 %48 to i64, !dbg !182
  %arrayidx48 = getelementptr inbounds [199 x i32], [199 x i32]* @bakdiag, i32 0, i64 %idxprom47, !dbg !182
  store i32 101, i32* %arrayidx48, align 4, !dbg !183
  %49 = load i32, i32* %i, align 4, !dbg !184
  %idxprom49 = sext i32 %49 to i64, !dbg !185
  %arrayidx50 = getelementptr inbounds [199 x i32], [199 x i32]* @fordiag, i32 0, i64 %idxprom49, !dbg !185
  store i32 101, i32* %arrayidx50, align 4, !dbg !186
  br label %for.inc.51, !dbg !185

for.inc.51:                                       ; preds = %for.body.46
  %50 = load i32, i32* %i, align 4, !dbg !187
  %inc52 = add nsw i32 %50, 1, !dbg !187
  store i32 %inc52, i32* %i, align 4, !dbg !187
  br label %for.cond.43, !dbg !188

for.end.53:                                       ; preds = %for.cond.43
  call void @find(i32 0), !dbg !189
  %51 = load i32, i32* @printing, align 4, !dbg !190
  %tobool54 = icmp ne i32 %51, 0, !dbg !190
  br i1 %tobool54, label %land.lhs.true, label %if.end.58, !dbg !192

land.lhs.true:                                    ; preds = %for.end.53
  %52 = load i64, i64* @solutions, align 8, !dbg !193
  %tobool55 = icmp ne i64 %52, 0, !dbg !193
  br i1 %tobool55, label %if.then.56, label %if.end.58, !dbg !195

if.then.56:                                       ; preds = %land.lhs.true
  %call57 = call i32 @putchar(i32 10), !dbg !196
  br label %if.end.58, !dbg !196

if.end.58:                                        ; preds = %if.then.56, %land.lhs.true, %for.end.53
  %53 = load i64, i64* @solutions, align 8, !dbg !197
  %cmp59 = icmp eq i64 %53, 1, !dbg !199
  br i1 %cmp59, label %if.then.61, label %if.else.63, !dbg !200

if.then.61:                                       ; preds = %if.end.58
  %call62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i32 0, i32 0)), !dbg !201
  br label %if.end.65, !dbg !201

if.else.63:                                       ; preds = %if.end.58
  %54 = load i64, i64* @solutions, align 8, !dbg !202
  %call64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i32 0, i32 0), i64 %54), !dbg !203
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.63, %if.then.61
  call void @exit(i32 0) #5, !dbg !204
  unreachable, !dbg !204

return:                                           ; No predecessors!
  %55 = load i32, i32* %retval, !dbg !205
  ret i32 %55, !dbg !205
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8*, i8*, ...) #4

declare i32 @printf(i8*, ...) #2

declare i32 @fflush(%struct._IO_FILE*) #2

; Function Attrs: nounwind uwtable
define void @find(i32 %level) #0 {
entry:
  %level.addr = alloca i32, align 4
  %f = alloca i32, align 4
  %fp = alloca i32*, align 8
  %fdp = alloca i32*, align 8
  %bdp = alloca i32*, align 8
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !206, metadata !41), !dbg !207
  call void @llvm.dbg.declare(metadata i32* %f, metadata !208, metadata !41), !dbg !209
  call void @llvm.dbg.declare(metadata i32** %fp, metadata !210, metadata !41), !dbg !212
  call void @llvm.dbg.declare(metadata i32** %fdp, metadata !213, metadata !41), !dbg !214
  call void @llvm.dbg.declare(metadata i32** %bdp, metadata !215, metadata !41), !dbg !216
  %0 = load i32, i32* %level.addr, align 4, !dbg !217
  %1 = load i32, i32* @queens, align 4, !dbg !219
  %cmp = icmp eq i32 %0, %1, !dbg !220
  br i1 %cmp, label %if.then, label %if.else, !dbg !221

if.then:                                          ; preds = %entry
  %2 = load i64, i64* @solutions, align 8, !dbg !222
  %inc = add i64 %2, 1, !dbg !222
  store i64 %inc, i64* @solutions, align 8, !dbg !222
  %3 = load i32, i32* @printing, align 4, !dbg !224
  %tobool = icmp ne i32 %3, 0, !dbg !224
  br i1 %tobool, label %if.then.1, label %if.end, !dbg !226

if.then.1:                                        ; preds = %if.then
  call void @pboard(), !dbg !227
  br label %if.end, !dbg !227

if.end:                                           ; preds = %if.then.1, %if.then
  %4 = load i32, i32* @findall, align 4, !dbg !228
  %tobool2 = icmp ne i32 %4, 0, !dbg !228
  br i1 %tobool2, label %if.end.4, label %if.then.3, !dbg !230

if.then.3:                                        ; preds = %if.end
  call void @exit(i32 0) #5, !dbg !231
  unreachable, !dbg !231

if.end.4:                                         ; preds = %if.end
  br label %if.end.20, !dbg !232

if.else:                                          ; preds = %entry
  store i32 0, i32* %f, align 4, !dbg !233
  store i32* getelementptr inbounds ([100 x i32], [100 x i32]* @file, i32 0, i32 0), i32** %fp, align 8, !dbg !236
  %5 = load i32, i32* %level.addr, align 4, !dbg !237
  %idxprom = sext i32 %5 to i64, !dbg !238
  %arrayidx = getelementptr inbounds [199 x i32], [199 x i32]* @fordiag, i32 0, i64 %idxprom, !dbg !238
  store i32* %arrayidx, i32** %fdp, align 8, !dbg !239
  %6 = load i32, i32* %level.addr, align 4, !dbg !240
  %7 = load i32, i32* @files, align 4, !dbg !241
  %add = add nsw i32 %6, %7, !dbg !242
  %sub = sub nsw i32 %add, 1, !dbg !243
  %idxprom5 = sext i32 %sub to i64, !dbg !244
  %arrayidx6 = getelementptr inbounds [199 x i32], [199 x i32]* @bakdiag, i32 0, i64 %idxprom5, !dbg !244
  store i32* %arrayidx6, i32** %bdp, align 8, !dbg !245
  br label %for.cond, !dbg !246

for.cond:                                         ; preds = %for.inc, %if.else
  %8 = load i32, i32* %f, align 4, !dbg !247
  %9 = load i32, i32* @files, align 4, !dbg !249
  %cmp7 = icmp slt i32 %8, %9, !dbg !250
  br i1 %cmp7, label %for.body, label %for.end, !dbg !251

for.body:                                         ; preds = %for.cond
  %10 = load i32*, i32** %fp, align 8, !dbg !252
  %11 = load i32, i32* %10, align 4, !dbg !255
  %12 = load i32, i32* %level.addr, align 4, !dbg !256
  %cmp8 = icmp sge i32 %11, %12, !dbg !257
  br i1 %cmp8, label %land.lhs.true, label %if.end.16, !dbg !258

land.lhs.true:                                    ; preds = %for.body
  %13 = load i32*, i32** %fdp, align 8, !dbg !259
  %14 = load i32, i32* %13, align 4, !dbg !260
  %15 = load i32, i32* %level.addr, align 4, !dbg !261
  %cmp9 = icmp sge i32 %14, %15, !dbg !262
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.16, !dbg !263

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %16 = load i32*, i32** %bdp, align 8, !dbg !264
  %17 = load i32, i32* %16, align 4, !dbg !266
  %18 = load i32, i32* %level.addr, align 4, !dbg !267
  %cmp11 = icmp sge i32 %17, %18, !dbg !268
  br i1 %cmp11, label %if.then.12, label %if.end.16, !dbg !269

if.then.12:                                       ; preds = %land.lhs.true.10
  %19 = load i32, i32* %f, align 4, !dbg !270
  %20 = load i32, i32* %level.addr, align 4, !dbg !272
  %idxprom13 = sext i32 %20 to i64, !dbg !273
  %arrayidx14 = getelementptr inbounds [100 x i32], [100 x i32]* @queen, i32 0, i64 %idxprom13, !dbg !273
  store i32 %19, i32* %arrayidx14, align 4, !dbg !274
  %21 = load i32, i32* %level.addr, align 4, !dbg !275
  %22 = load i32*, i32** %bdp, align 8, !dbg !276
  store i32 %21, i32* %22, align 4, !dbg !277
  %23 = load i32*, i32** %fdp, align 8, !dbg !278
  store i32 %21, i32* %23, align 4, !dbg !279
  %24 = load i32*, i32** %fp, align 8, !dbg !280
  store i32 %21, i32* %24, align 4, !dbg !281
  %25 = load i32, i32* %level.addr, align 4, !dbg !282
  %add15 = add nsw i32 %25, 1, !dbg !283
  call void @find(i32 %add15), !dbg !284
  %26 = load i32*, i32** %bdp, align 8, !dbg !285
  store i32 101, i32* %26, align 4, !dbg !286
  %27 = load i32*, i32** %fdp, align 8, !dbg !287
  store i32 101, i32* %27, align 4, !dbg !288
  %28 = load i32*, i32** %fp, align 8, !dbg !289
  store i32 101, i32* %28, align 4, !dbg !290
  br label %if.end.16, !dbg !291

if.end.16:                                        ; preds = %if.then.12, %land.lhs.true.10, %land.lhs.true, %for.body
  br label %for.inc, !dbg !292

for.inc:                                          ; preds = %if.end.16
  %29 = load i32, i32* %f, align 4, !dbg !293
  %inc17 = add nsw i32 %29, 1, !dbg !293
  store i32 %inc17, i32* %f, align 4, !dbg !293
  %30 = load i32*, i32** %fp, align 8, !dbg !294
  %incdec.ptr = getelementptr inbounds i32, i32* %30, i32 1, !dbg !294
  store i32* %incdec.ptr, i32** %fp, align 8, !dbg !294
  %31 = load i32*, i32** %fdp, align 8, !dbg !295
  %incdec.ptr18 = getelementptr inbounds i32, i32* %31, i32 1, !dbg !295
  store i32* %incdec.ptr18, i32** %fdp, align 8, !dbg !295
  %32 = load i32*, i32** %bdp, align 8, !dbg !296
  %incdec.ptr19 = getelementptr inbounds i32, i32* %32, i32 -1, !dbg !296
  store i32* %incdec.ptr19, i32** %bdp, align 8, !dbg !296
  br label %for.cond, !dbg !297

for.end:                                          ; preds = %for.cond
  br label %if.end.20

if.end.20:                                        ; preds = %for.end, %if.end.4
  ret void, !dbg !298
}

declare i32 @putchar(i32) #2

; Function Attrs: nounwind uwtable
define void @pboard() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !299, metadata !41), !dbg !300
  call void @llvm.dbg.declare(metadata i32* %j, metadata !301, metadata !41), !dbg !302
  %0 = load i32, i32* @findall, align 4, !dbg !303
  %tobool = icmp ne i32 %0, 0, !dbg !303
  br i1 %tobool, label %if.then, label %if.end, !dbg !305

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @solutions, align 8, !dbg !306
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0), i64 %1), !dbg !307
  br label %if.end, !dbg !307

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !308
  br label %for.cond, !dbg !310

for.cond:                                         ; preds = %for.inc.11, %if.end
  %2 = load i32, i32* %i, align 4, !dbg !311
  %3 = load i32, i32* @ranks, align 4, !dbg !315
  %cmp = icmp slt i32 %2, %3, !dbg !316
  br i1 %cmp, label %for.body, label %for.end.13, !dbg !317

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !318
  br label %for.cond.1, !dbg !321

for.cond.1:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4, !dbg !322
  %5 = load i32, i32* @files, align 4, !dbg !326
  %cmp2 = icmp slt i32 %4, %5, !dbg !327
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !328

for.body.3:                                       ; preds = %for.cond.1
  %call4 = call i32 @putchar(i32 32), !dbg !329
  %6 = load i32, i32* %j, align 4, !dbg !331
  %7 = load i32, i32* %i, align 4, !dbg !333
  %idxprom = sext i32 %7 to i64, !dbg !334
  %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* @queen, i32 0, i64 %idxprom, !dbg !334
  %8 = load i32, i32* %arrayidx, align 4, !dbg !334
  %cmp5 = icmp eq i32 %6, %8, !dbg !335
  br i1 %cmp5, label %if.then.6, label %if.else, !dbg !336

if.then.6:                                        ; preds = %for.body.3
  %call7 = call i32 @putchar(i32 81), !dbg !337
  br label %if.end.9, !dbg !337

if.else:                                          ; preds = %for.body.3
  %call8 = call i32 @putchar(i32 45), !dbg !338
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.6
  br label %for.inc, !dbg !339

for.inc:                                          ; preds = %if.end.9
  %9 = load i32, i32* %j, align 4, !dbg !340
  %inc = add nsw i32 %9, 1, !dbg !340
  store i32 %inc, i32* %j, align 4, !dbg !340
  br label %for.cond.1, !dbg !341

for.end:                                          ; preds = %for.cond.1
  %call10 = call i32 @putchar(i32 10), !dbg !342
  br label %for.inc.11, !dbg !343

for.inc.11:                                       ; preds = %for.end
  %10 = load i32, i32* %i, align 4, !dbg !344
  %inc12 = add nsw i32 %10, 1, !dbg !344
  store i32 %inc12, i32* %i, align 4, !dbg !344
  br label %for.cond, !dbg !345

for.end.13:                                       ; preds = %for.cond
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !346
  %call14 = call i32 @fflush(%struct._IO_FILE* %11), !dbg !347
  ret void, !dbg !348
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!37, !38}
!llvm.ident = !{!39}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3, globals: !18)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/McGill/queens")
!2 = !{}
!3 = !{!4, !12, !15}
!4 = !DISubprogram(name: "main", scope: !5, file: !5, line: 202, type: !6, isLocal: false, isDefinition: true, scopeLine: 202, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/McGill/queens/tmp.c", directory: "/home/gleison/tf/Benchmarks/McGill/queens")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8, !9}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!12 = !DISubprogram(name: "pboard", scope: !5, file: !5, line: 299, type: !13, isLocal: false, isDefinition: true, scopeLine: 299, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @pboard, variables: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{null}
!15 = !DISubprogram(name: "find", scope: !5, file: !5, line: 328, type: !16, isLocal: false, isDefinition: true, scopeLine: 328, flags: DIFlagPrototyped, isOptimized: false, function: void (i32)* @find, variables: !2)
!16 = !DISubroutineType(types: !17)
!17 = !{null, !8}
!18 = !{!19, !20, !21, !23, !24, !25, !26, !27, !31, !32, !36}
!19 = !DIGlobalVariable(name: "printing", scope: !0, file: !5, line: 182, type: !8, isLocal: false, isDefinition: true, variable: i32* @printing)
!20 = !DIGlobalVariable(name: "findall", scope: !0, file: !5, line: 183, type: !8, isLocal: false, isDefinition: true, variable: i32* @findall)
!21 = !DIGlobalVariable(name: "solutions", scope: !0, file: !5, line: 185, type: !22, isLocal: false, isDefinition: true, variable: i64* @solutions)
!22 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!23 = !DIGlobalVariable(name: "progname", scope: !0, file: !5, line: 190, type: !10, isLocal: false, isDefinition: true, variable: i8** @progname)
!24 = !DIGlobalVariable(name: "queens", scope: !0, file: !5, line: 179, type: !8, isLocal: false, isDefinition: true, variable: i32* @queens)
!25 = !DIGlobalVariable(name: "ranks", scope: !0, file: !5, line: 180, type: !8, isLocal: false, isDefinition: true, variable: i32* @ranks)
!26 = !DIGlobalVariable(name: "files", scope: !0, file: !5, line: 181, type: !8, isLocal: false, isDefinition: true, variable: i32* @files)
!27 = !DIGlobalVariable(name: "queen", scope: !0, file: !5, line: 186, type: !28, isLocal: false, isDefinition: true, variable: [100 x i32]* @queen)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 3200, align: 32, elements: !29)
!29 = !{!30}
!30 = !DISubrange(count: 100)
!31 = !DIGlobalVariable(name: "file", scope: !0, file: !5, line: 187, type: !28, isLocal: false, isDefinition: true, variable: [100 x i32]* @file)
!32 = !DIGlobalVariable(name: "fordiag", scope: !0, file: !5, line: 188, type: !33, isLocal: false, isDefinition: true, variable: [199 x i32]* @fordiag)
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 6368, align: 32, elements: !34)
!34 = !{!35}
!35 = !DISubrange(count: 199)
!36 = !DIGlobalVariable(name: "bakdiag", scope: !0, file: !5, line: 189, type: !33, isLocal: false, isDefinition: true, variable: [199 x i32]* @bakdiag)
!37 = !{i32 2, !"Dwarf Version", i32 4}
!38 = !{i32 2, !"Debug Info Version", i32 3}
!39 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!40 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !4, file: !5, line: 202, type: !8)
!41 = !DIExpression()
!42 = !DILocation(line: 202, column: 14, scope: !4)
!43 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !4, file: !5, line: 202, type: !9)
!44 = !DILocation(line: 202, column: 27, scope: !4)
!45 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !4, file: !5, line: 203, type: !8)
!46 = !DILocation(line: 203, column: 16, scope: !4)
!47 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !4, file: !5, line: 204, type: !10)
!48 = !DILocation(line: 204, column: 18, scope: !4)
!49 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "usage", scope: !4, file: !5, line: 205, type: !10)
!50 = !DILocation(line: 205, column: 9, scope: !4)
!51 = !DILocation(line: 215, column: 14, scope: !4)
!52 = !DILocation(line: 215, column: 12, scope: !4)
!53 = !DILocation(line: 218, column: 12, scope: !4)
!54 = !DILocation(line: 222, column: 10, scope: !4)
!55 = !DILocation(line: 224, column: 11, scope: !4)
!56 = !DILocation(line: 226, column: 10, scope: !57)
!57 = distinct !DILexicalBlock(scope: !4, file: !5, line: 226, column: 3)
!58 = !DILocation(line: 226, column: 8, scope: !57)
!59 = !DILocation(line: 226, column: 15, scope: !60)
!60 = !DILexicalBlockFile(scope: !61, file: !5, discriminator: 2)
!61 = !DILexicalBlockFile(scope: !62, file: !5, discriminator: 1)
!62 = distinct !DILexicalBlock(scope: !57, file: !5, line: 226, column: 3)
!63 = !DILocation(line: 226, column: 19, scope: !62)
!64 = !DILocation(line: 226, column: 17, scope: !62)
!65 = !DILocation(line: 226, column: 3, scope: !57)
!66 = !DILocation(line: 227, column: 14, scope: !67)
!67 = distinct !DILexicalBlock(scope: !62, file: !5, line: 226, column: 30)
!68 = !DILocation(line: 227, column: 9, scope: !67)
!69 = !DILocation(line: 227, column: 7, scope: !67)
!70 = !DILocation(line: 228, column: 10, scope: !71)
!71 = distinct !DILexicalBlock(scope: !67, file: !5, line: 228, column: 9)
!72 = !DILocation(line: 228, column: 9, scope: !71)
!73 = !DILocation(line: 228, column: 12, scope: !71)
!74 = !DILocation(line: 228, column: 9, scope: !67)
!75 = !DILocation(line: 229, column: 7, scope: !76)
!76 = distinct !DILexicalBlock(scope: !71, file: !5, line: 228, column: 20)
!77 = !DILocation(line: 229, column: 15, scope: !78)
!78 = !DILexicalBlockFile(scope: !79, file: !5, discriminator: 2)
!79 = !DILexicalBlockFile(scope: !76, file: !5, discriminator: 1)
!80 = !DILocation(line: 229, column: 14, scope: !76)
!81 = !DILocation(line: 230, column: 18, scope: !82)
!82 = distinct !DILexicalBlock(scope: !76, file: !5, line: 229, column: 20)
!83 = !DILocation(line: 230, column: 17, scope: !82)
!84 = !DILocation(line: 230, column: 9, scope: !82)
!85 = !DILocation(line: 232, column: 20, scope: !86)
!86 = distinct !DILexicalBlock(scope: !82, file: !5, line: 230, column: 21)
!87 = !DILocation(line: 232, column: 11, scope: !86)
!88 = !DILocation(line: 234, column: 19, scope: !86)
!89 = !DILocation(line: 235, column: 11, scope: !86)
!90 = !DILocation(line: 237, column: 19, scope: !86)
!91 = !DILocation(line: 237, column: 56, scope: !86)
!92 = !DILocation(line: 237, column: 71, scope: !86)
!93 = !DILocation(line: 237, column: 66, scope: !86)
!94 = !DILocation(line: 237, column: 11, scope: !86)
!95 = !DILocation(line: 238, column: 19, scope: !86)
!96 = !DILocation(line: 238, column: 27, scope: !86)
!97 = !DILocation(line: 238, column: 34, scope: !86)
!98 = !DILocation(line: 238, column: 11, scope: !86)
!99 = !DILocation(line: 239, column: 11, scope: !86)
!100 = !DILocation(line: 242, column: 5, scope: !76)
!101 = !DILocation(line: 244, column: 18, scope: !102)
!102 = distinct !DILexicalBlock(scope: !103, file: !5, line: 244, column: 11)
!103 = distinct !DILexicalBlock(scope: !71, file: !5, line: 243, column: 10)
!104 = !DILocation(line: 244, column: 11, scope: !102)
!105 = !DILocation(line: 244, column: 36, scope: !102)
!106 = !DILocation(line: 244, column: 11, scope: !103)
!107 = !DILocation(line: 245, column: 17, scope: !108)
!108 = distinct !DILexicalBlock(scope: !102, file: !5, line: 244, column: 42)
!109 = !DILocation(line: 245, column: 60, scope: !108)
!110 = !DILocation(line: 245, column: 70, scope: !108)
!111 = !DILocation(line: 245, column: 9, scope: !108)
!112 = !DILocation(line: 246, column: 9, scope: !108)
!113 = !DILocation(line: 248, column: 11, scope: !114)
!114 = distinct !DILexicalBlock(scope: !103, file: !5, line: 248, column: 11)
!115 = !DILocation(line: 248, column: 18, scope: !114)
!116 = !DILocation(line: 248, column: 11, scope: !103)
!117 = !DILocation(line: 249, column: 17, scope: !118)
!118 = distinct !DILexicalBlock(scope: !114, file: !5, line: 248, column: 24)
!119 = !DILocation(line: 249, column: 61, scope: !118)
!120 = !DILocation(line: 249, column: 9, scope: !118)
!121 = !DILocation(line: 250, column: 9, scope: !118)
!122 = !DILocation(line: 252, column: 11, scope: !123)
!123 = distinct !DILexicalBlock(scope: !103, file: !5, line: 252, column: 11)
!124 = !DILocation(line: 252, column: 18, scope: !123)
!125 = !DILocation(line: 252, column: 11, scope: !103)
!126 = !DILocation(line: 253, column: 17, scope: !127)
!127 = distinct !DILexicalBlock(scope: !123, file: !5, line: 252, column: 31)
!128 = !DILocation(line: 254, column: 17, scope: !127)
!129 = !DILocation(line: 253, column: 9, scope: !127)
!130 = !DILocation(line: 255, column: 9, scope: !127)
!131 = !DILocation(line: 258, column: 3, scope: !67)
!132 = !DILocation(line: 226, column: 25, scope: !62)
!133 = !DILocation(line: 226, column: 3, scope: !62)
!134 = !DILocation(line: 259, column: 8, scope: !135)
!135 = distinct !DILexicalBlock(scope: !4, file: !5, line: 259, column: 7)
!136 = !DILocation(line: 259, column: 7, scope: !4)
!137 = !DILocation(line: 260, column: 13, scope: !138)
!138 = distinct !DILexicalBlock(scope: !135, file: !5, line: 259, column: 16)
!139 = !DILocation(line: 260, column: 49, scope: !138)
!140 = !DILocation(line: 260, column: 5, scope: !138)
!141 = !DILocation(line: 261, column: 13, scope: !138)
!142 = !DILocation(line: 261, column: 21, scope: !138)
!143 = !DILocation(line: 261, column: 28, scope: !138)
!144 = !DILocation(line: 261, column: 5, scope: !138)
!145 = !DILocation(line: 262, column: 5, scope: !138)
!146 = !DILocation(line: 265, column: 19, scope: !4)
!147 = !DILocation(line: 265, column: 17, scope: !4)
!148 = !DILocation(line: 265, column: 9, scope: !4)
!149 = !DILocation(line: 267, column: 10, scope: !4)
!150 = !DILocation(line: 267, column: 18, scope: !4)
!151 = !DILocation(line: 267, column: 25, scope: !4)
!152 = !DILocation(line: 267, column: 41, scope: !4)
!153 = !DILocation(line: 267, column: 48, scope: !4)
!154 = !DILocation(line: 266, column: 3, scope: !4)
!155 = !DILocation(line: 268, column: 10, scope: !4)
!156 = !DILocation(line: 268, column: 3, scope: !4)
!157 = !DILocation(line: 271, column: 13, scope: !4)
!158 = !DILocation(line: 272, column: 10, scope: !159)
!159 = distinct !DILexicalBlock(scope: !4, file: !5, line: 272, column: 3)
!160 = !DILocation(line: 272, column: 8, scope: !159)
!161 = !DILocation(line: 272, column: 15, scope: !162)
!162 = !DILexicalBlockFile(scope: !163, file: !5, discriminator: 2)
!163 = !DILexicalBlockFile(scope: !164, file: !5, discriminator: 1)
!164 = distinct !DILexicalBlock(scope: !159, file: !5, line: 272, column: 3)
!165 = !DILocation(line: 272, column: 17, scope: !164)
!166 = !DILocation(line: 272, column: 3, scope: !159)
!167 = !DILocation(line: 273, column: 10, scope: !164)
!168 = !DILocation(line: 273, column: 5, scope: !164)
!169 = !DILocation(line: 273, column: 13, scope: !164)
!170 = !DILocation(line: 272, column: 29, scope: !164)
!171 = !DILocation(line: 272, column: 3, scope: !164)
!172 = !DILocation(line: 274, column: 10, scope: !173)
!173 = distinct !DILexicalBlock(scope: !4, file: !5, line: 274, column: 3)
!174 = !DILocation(line: 274, column: 8, scope: !173)
!175 = !DILocation(line: 274, column: 15, scope: !176)
!176 = !DILexicalBlockFile(scope: !177, file: !5, discriminator: 2)
!177 = !DILexicalBlockFile(scope: !178, file: !5, discriminator: 1)
!178 = distinct !DILexicalBlock(scope: !173, file: !5, line: 274, column: 3)
!179 = !DILocation(line: 274, column: 17, scope: !178)
!180 = !DILocation(line: 274, column: 3, scope: !173)
!181 = !DILocation(line: 275, column: 26, scope: !178)
!182 = !DILocation(line: 275, column: 18, scope: !178)
!183 = !DILocation(line: 275, column: 29, scope: !178)
!184 = !DILocation(line: 275, column: 13, scope: !178)
!185 = !DILocation(line: 275, column: 5, scope: !178)
!186 = !DILocation(line: 275, column: 16, scope: !178)
!187 = !DILocation(line: 274, column: 29, scope: !178)
!188 = !DILocation(line: 274, column: 3, scope: !178)
!189 = !DILocation(line: 278, column: 3, scope: !4)
!190 = !DILocation(line: 279, column: 7, scope: !191)
!191 = distinct !DILexicalBlock(scope: !4, file: !5, line: 279, column: 7)
!192 = !DILocation(line: 279, column: 16, scope: !191)
!193 = !DILocation(line: 279, column: 19, scope: !194)
!194 = !DILexicalBlockFile(scope: !191, file: !5, discriminator: 1)
!195 = !DILocation(line: 279, column: 7, scope: !4)
!196 = !DILocation(line: 280, column: 5, scope: !191)
!197 = !DILocation(line: 283, column: 7, scope: !198)
!198 = distinct !DILexicalBlock(scope: !4, file: !5, line: 283, column: 7)
!199 = !DILocation(line: 283, column: 17, scope: !198)
!200 = !DILocation(line: 283, column: 7, scope: !4)
!201 = !DILocation(line: 284, column: 5, scope: !198)
!202 = !DILocation(line: 286, column: 44, scope: !198)
!203 = !DILocation(line: 286, column: 5, scope: !198)
!204 = !DILocation(line: 288, column: 3, scope: !4)
!205 = !DILocation(line: 289, column: 1, scope: !4)
!206 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "level", arg: 1, scope: !15, file: !5, line: 328, type: !8)
!207 = !DILocation(line: 328, column: 24, scope: !15)
!208 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "f", scope: !15, file: !5, line: 329, type: !8)
!209 = !DILocation(line: 329, column: 16, scope: !15)
!210 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fp", scope: !15, file: !5, line: 330, type: !211)
!211 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!212 = !DILocation(line: 330, column: 17, scope: !15)
!213 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fdp", scope: !15, file: !5, line: 330, type: !211)
!214 = !DILocation(line: 330, column: 22, scope: !15)
!215 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bdp", scope: !15, file: !5, line: 330, type: !211)
!216 = !DILocation(line: 330, column: 28, scope: !15)
!217 = !DILocation(line: 337, column: 7, scope: !218)
!218 = distinct !DILexicalBlock(scope: !15, file: !5, line: 337, column: 7)
!219 = !DILocation(line: 337, column: 16, scope: !218)
!220 = !DILocation(line: 337, column: 13, scope: !218)
!221 = !DILocation(line: 337, column: 7, scope: !15)
!222 = !DILocation(line: 338, column: 5, scope: !223)
!223 = distinct !DILexicalBlock(scope: !218, file: !5, line: 337, column: 24)
!224 = !DILocation(line: 339, column: 9, scope: !225)
!225 = distinct !DILexicalBlock(scope: !223, file: !5, line: 339, column: 9)
!226 = !DILocation(line: 339, column: 9, scope: !223)
!227 = !DILocation(line: 340, column: 7, scope: !225)
!228 = !DILocation(line: 341, column: 10, scope: !229)
!229 = distinct !DILexicalBlock(scope: !223, file: !5, line: 341, column: 9)
!230 = !DILocation(line: 341, column: 9, scope: !223)
!231 = !DILocation(line: 342, column: 7, scope: !229)
!232 = !DILocation(line: 346, column: 3, scope: !223)
!233 = !DILocation(line: 348, column: 12, scope: !234)
!234 = distinct !DILexicalBlock(scope: !235, file: !5, line: 347, column: 5)
!235 = distinct !DILexicalBlock(scope: !218, file: !5, line: 346, column: 10)
!236 = !DILocation(line: 349, column: 13, scope: !234)
!237 = !DILocation(line: 350, column: 25, scope: !234)
!238 = !DILocation(line: 350, column: 17, scope: !234)
!239 = !DILocation(line: 350, column: 14, scope: !234)
!240 = !DILocation(line: 351, column: 25, scope: !234)
!241 = !DILocation(line: 351, column: 33, scope: !234)
!242 = !DILocation(line: 351, column: 31, scope: !234)
!243 = !DILocation(line: 351, column: 39, scope: !234)
!244 = !DILocation(line: 351, column: 17, scope: !234)
!245 = !DILocation(line: 351, column: 14, scope: !234)
!246 = !DILocation(line: 348, column: 10, scope: !234)
!247 = !DILocation(line: 353, column: 10, scope: !248)
!248 = distinct !DILexicalBlock(scope: !234, file: !5, line: 347, column: 5)
!249 = !DILocation(line: 353, column: 14, scope: !248)
!250 = !DILocation(line: 353, column: 12, scope: !248)
!251 = !DILocation(line: 347, column: 5, scope: !234)
!252 = !DILocation(line: 358, column: 12, scope: !253)
!253 = distinct !DILexicalBlock(scope: !254, file: !5, line: 358, column: 11)
!254 = distinct !DILexicalBlock(scope: !248, file: !5, line: 357, column: 12)
!255 = !DILocation(line: 358, column: 11, scope: !253)
!256 = !DILocation(line: 358, column: 18, scope: !253)
!257 = !DILocation(line: 358, column: 15, scope: !253)
!258 = !DILocation(line: 358, column: 24, scope: !253)
!259 = !DILocation(line: 359, column: 12, scope: !253)
!260 = !DILocation(line: 359, column: 11, scope: !253)
!261 = !DILocation(line: 359, column: 19, scope: !253)
!262 = !DILocation(line: 359, column: 16, scope: !253)
!263 = !DILocation(line: 359, column: 25, scope: !253)
!264 = !DILocation(line: 359, column: 29, scope: !265)
!265 = !DILexicalBlockFile(scope: !253, file: !5, discriminator: 1)
!266 = !DILocation(line: 359, column: 28, scope: !253)
!267 = !DILocation(line: 359, column: 36, scope: !253)
!268 = !DILocation(line: 359, column: 33, scope: !253)
!269 = !DILocation(line: 358, column: 11, scope: !254)
!270 = !DILocation(line: 361, column: 24, scope: !271)
!271 = distinct !DILexicalBlock(scope: !253, file: !5, line: 360, column: 13)
!272 = !DILocation(line: 361, column: 15, scope: !271)
!273 = !DILocation(line: 361, column: 9, scope: !271)
!274 = !DILocation(line: 361, column: 22, scope: !271)
!275 = !DILocation(line: 362, column: 29, scope: !271)
!276 = !DILocation(line: 362, column: 23, scope: !271)
!277 = !DILocation(line: 362, column: 27, scope: !271)
!278 = !DILocation(line: 362, column: 16, scope: !271)
!279 = !DILocation(line: 362, column: 20, scope: !271)
!280 = !DILocation(line: 362, column: 10, scope: !271)
!281 = !DILocation(line: 362, column: 13, scope: !271)
!282 = !DILocation(line: 363, column: 14, scope: !271)
!283 = !DILocation(line: 363, column: 20, scope: !271)
!284 = !DILocation(line: 363, column: 9, scope: !271)
!285 = !DILocation(line: 364, column: 23, scope: !271)
!286 = !DILocation(line: 364, column: 27, scope: !271)
!287 = !DILocation(line: 364, column: 16, scope: !271)
!288 = !DILocation(line: 364, column: 20, scope: !271)
!289 = !DILocation(line: 364, column: 10, scope: !271)
!290 = !DILocation(line: 364, column: 13, scope: !271)
!291 = !DILocation(line: 365, column: 7, scope: !271)
!292 = !DILocation(line: 366, column: 5, scope: !254)
!293 = !DILocation(line: 355, column: 10, scope: !248)
!294 = !DILocation(line: 356, column: 10, scope: !248)
!295 = !DILocation(line: 356, column: 16, scope: !248)
!296 = !DILocation(line: 356, column: 23, scope: !248)
!297 = !DILocation(line: 347, column: 5, scope: !248)
!298 = !DILocation(line: 368, column: 1, scope: !15)
!299 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !12, file: !5, line: 300, type: !8)
!300 = !DILocation(line: 300, column: 16, scope: !12)
!301 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !12, file: !5, line: 300, type: !8)
!302 = !DILocation(line: 300, column: 19, scope: !12)
!303 = !DILocation(line: 302, column: 7, scope: !304)
!304 = distinct !DILexicalBlock(scope: !12, file: !5, line: 302, column: 7)
!305 = !DILocation(line: 302, column: 7, scope: !12)
!306 = !DILocation(line: 303, column: 34, scope: !304)
!307 = !DILocation(line: 303, column: 5, scope: !304)
!308 = !DILocation(line: 305, column: 10, scope: !309)
!309 = distinct !DILexicalBlock(scope: !12, file: !5, line: 305, column: 3)
!310 = !DILocation(line: 305, column: 8, scope: !309)
!311 = !DILocation(line: 305, column: 15, scope: !312)
!312 = !DILexicalBlockFile(scope: !313, file: !5, discriminator: 2)
!313 = !DILexicalBlockFile(scope: !314, file: !5, discriminator: 1)
!314 = distinct !DILexicalBlock(scope: !309, file: !5, line: 305, column: 3)
!315 = !DILocation(line: 305, column: 19, scope: !314)
!316 = !DILocation(line: 305, column: 17, scope: !314)
!317 = !DILocation(line: 305, column: 3, scope: !309)
!318 = !DILocation(line: 306, column: 12, scope: !319)
!319 = distinct !DILexicalBlock(scope: !320, file: !5, line: 306, column: 5)
!320 = distinct !DILexicalBlock(scope: !314, file: !5, line: 305, column: 31)
!321 = !DILocation(line: 306, column: 10, scope: !319)
!322 = !DILocation(line: 306, column: 17, scope: !323)
!323 = !DILexicalBlockFile(scope: !324, file: !5, discriminator: 2)
!324 = !DILexicalBlockFile(scope: !325, file: !5, discriminator: 1)
!325 = distinct !DILexicalBlock(scope: !319, file: !5, line: 306, column: 5)
!326 = !DILocation(line: 306, column: 21, scope: !325)
!327 = !DILocation(line: 306, column: 19, scope: !325)
!328 = !DILocation(line: 306, column: 5, scope: !319)
!329 = !DILocation(line: 307, column: 7, scope: !330)
!330 = distinct !DILexicalBlock(scope: !325, file: !5, line: 306, column: 33)
!331 = !DILocation(line: 308, column: 11, scope: !332)
!332 = distinct !DILexicalBlock(scope: !330, file: !5, line: 308, column: 11)
!333 = !DILocation(line: 308, column: 22, scope: !332)
!334 = !DILocation(line: 308, column: 16, scope: !332)
!335 = !DILocation(line: 308, column: 13, scope: !332)
!336 = !DILocation(line: 308, column: 11, scope: !330)
!337 = !DILocation(line: 309, column: 9, scope: !332)
!338 = !DILocation(line: 311, column: 9, scope: !332)
!339 = !DILocation(line: 312, column: 5, scope: !330)
!340 = !DILocation(line: 306, column: 28, scope: !325)
!341 = !DILocation(line: 306, column: 5, scope: !325)
!342 = !DILocation(line: 313, column: 5, scope: !320)
!343 = !DILocation(line: 314, column: 3, scope: !320)
!344 = !DILocation(line: 305, column: 26, scope: !314)
!345 = !DILocation(line: 305, column: 3, scope: !314)
!346 = !DILocation(line: 315, column: 10, scope: !12)
!347 = !DILocation(line: 315, column: 3, scope: !12)
!348 = !DILocation(line: 316, column: 1, scope: !12)
