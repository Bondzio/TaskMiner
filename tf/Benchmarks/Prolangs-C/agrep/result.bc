; ModuleID = '/home/gleison/tf/Benchmarks/Prolangs-C/agrep/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.snode = type { %struct.rnode*, i32, %struct.snode* }
%struct.rnode = type { i16, %union.anon, i16, %struct.pnode*, %struct.pnode* }
%union.anon = type { %struct.anon.2 }
%struct.anon.2 = type { %struct.rnode*, %struct.rnode* }
%struct.pnode = type { i32, %struct.pnode* }

; Function Attrs: nounwind uwtable
define %struct.snode* @Push(%struct.snode** %s, %struct.rnode* %v) #0 {
entry:
  %retval = alloca %struct.snode*, align 8
  %s.addr = alloca %struct.snode**, align 8
  %v.addr = alloca %struct.rnode*, align 8
  %node = alloca %struct.snode*, align 8
  store %struct.snode** %s, %struct.snode*** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.snode*** %s.addr, metadata !94, metadata !95), !dbg !96
  store %struct.rnode* %v, %struct.rnode** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rnode** %v.addr, metadata !97, metadata !95), !dbg !98
  call void @llvm.dbg.declare(metadata %struct.snode** %node, metadata !99, metadata !95), !dbg !100
  %call = call noalias i8* @malloc(i64 24) #3, !dbg !101
  %0 = bitcast i8* %call to %struct.snode*, !dbg !102
  store %struct.snode* %0, %struct.snode** %node, align 8, !dbg !103
  %1 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !104
  %cmp = icmp eq %struct.snode** %1, null, !dbg !106
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !107

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.snode*, %struct.snode** %node, align 8, !dbg !108
  %cmp1 = icmp eq %struct.snode* %2, null, !dbg !110
  br i1 %cmp1, label %if.then, label %if.end, !dbg !111

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.snode* null, %struct.snode** %retval, !dbg !112
  br label %return, !dbg !112

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !113
  %4 = load %struct.snode*, %struct.snode** %3, align 8, !dbg !114
  %5 = load %struct.snode*, %struct.snode** %node, align 8, !dbg !115
  %next = getelementptr inbounds %struct.snode, %struct.snode* %5, i32 0, i32 2, !dbg !116
  store %struct.snode* %4, %struct.snode** %next, align 8, !dbg !117
  %6 = load %struct.rnode*, %struct.rnode** %v.addr, align 8, !dbg !118
  %7 = load %struct.snode*, %struct.snode** %node, align 8, !dbg !119
  %val = getelementptr inbounds %struct.snode, %struct.snode* %7, i32 0, i32 0, !dbg !120
  store %struct.rnode* %6, %struct.rnode** %val, align 8, !dbg !121
  %8 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !122
  %9 = load %struct.snode*, %struct.snode** %8, align 8, !dbg !124
  %cmp2 = icmp eq %struct.snode* %9, null, !dbg !125
  br i1 %cmp2, label %if.then.3, label %if.else, !dbg !126

if.then.3:                                        ; preds = %if.end
  %10 = load %struct.snode*, %struct.snode** %node, align 8, !dbg !127
  %size = getelementptr inbounds %struct.snode, %struct.snode* %10, i32 0, i32 1, !dbg !128
  store i32 1, i32* %size, align 4, !dbg !129
  br label %if.end.6, !dbg !127

if.else:                                          ; preds = %if.end
  %11 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !130
  %12 = load %struct.snode*, %struct.snode** %11, align 8, !dbg !131
  %size4 = getelementptr inbounds %struct.snode, %struct.snode* %12, i32 0, i32 1, !dbg !132
  %13 = load i32, i32* %size4, align 4, !dbg !132
  %add = add nsw i32 %13, 1, !dbg !133
  %14 = load %struct.snode*, %struct.snode** %node, align 8, !dbg !134
  %size5 = getelementptr inbounds %struct.snode, %struct.snode* %14, i32 0, i32 1, !dbg !135
  store i32 %add, i32* %size5, align 4, !dbg !136
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.3
  %15 = load %struct.snode*, %struct.snode** %node, align 8, !dbg !137
  %16 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !138
  store %struct.snode* %15, %struct.snode** %16, align 8, !dbg !139
  %17 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !140
  %18 = load %struct.snode*, %struct.snode** %17, align 8, !dbg !141
  store %struct.snode* %18, %struct.snode** %retval, !dbg !142
  br label %return, !dbg !142

return:                                           ; preds = %if.end.6, %if.then
  %19 = load %struct.snode*, %struct.snode** %retval, !dbg !143
  ret %struct.snode* %19, !dbg !143
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind uwtable
define %struct.rnode* @Pop(%struct.snode** %s) #0 {
entry:
  %retval = alloca %struct.rnode*, align 8
  %s.addr = alloca %struct.snode**, align 8
  %node = alloca %struct.rnode*, align 8
  %temp = alloca %struct.snode*, align 8
  store %struct.snode** %s, %struct.snode*** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.snode*** %s.addr, metadata !144, metadata !95), !dbg !145
  call void @llvm.dbg.declare(metadata %struct.rnode** %node, metadata !146, metadata !95), !dbg !147
  call void @llvm.dbg.declare(metadata %struct.snode** %temp, metadata !148, metadata !95), !dbg !149
  %0 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !150
  %cmp = icmp eq %struct.snode** %0, null, !dbg !152
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !153

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !154
  %2 = load %struct.snode*, %struct.snode** %1, align 8, !dbg !156
  %cmp1 = icmp eq %struct.snode* %2, null, !dbg !157
  br i1 %cmp1, label %if.then, label %if.else, !dbg !158

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.rnode* null, %struct.rnode** %retval, !dbg !159
  br label %return, !dbg !159

if.else:                                          ; preds = %lor.lhs.false
  %3 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !160
  %4 = load %struct.snode*, %struct.snode** %3, align 8, !dbg !162
  store %struct.snode* %4, %struct.snode** %temp, align 8, !dbg !163
  %5 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !164
  %6 = load %struct.snode*, %struct.snode** %5, align 8, !dbg !165
  %val = getelementptr inbounds %struct.snode, %struct.snode* %6, i32 0, i32 0, !dbg !166
  %7 = load %struct.rnode*, %struct.rnode** %val, align 8, !dbg !166
  store %struct.rnode* %7, %struct.rnode** %node, align 8, !dbg !167
  %8 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !168
  %9 = load %struct.snode*, %struct.snode** %8, align 8, !dbg !169
  %next = getelementptr inbounds %struct.snode, %struct.snode* %9, i32 0, i32 2, !dbg !170
  %10 = load %struct.snode*, %struct.snode** %next, align 8, !dbg !170
  %11 = load %struct.snode**, %struct.snode*** %s.addr, align 8, !dbg !171
  store %struct.snode* %10, %struct.snode** %11, align 8, !dbg !172
  %12 = load %struct.snode*, %struct.snode** %temp, align 8, !dbg !173
  %13 = bitcast %struct.snode* %12 to i8*, !dbg !173
  call void @free(i8* %13) #3, !dbg !174
  %14 = load %struct.rnode*, %struct.rnode** %node, align 8, !dbg !175
  store %struct.rnode* %14, %struct.rnode** %retval, !dbg !176
  br label %return, !dbg !176

return:                                           ; preds = %if.else, %if.then
  %15 = load %struct.rnode*, %struct.rnode** %retval, !dbg !177
  ret %struct.rnode* %15, !dbg !177
}

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: nounwind uwtable
define %struct.rnode* @Top(%struct.snode* %s) #0 {
entry:
  %retval = alloca %struct.rnode*, align 8
  %s.addr = alloca %struct.snode*, align 8
  store %struct.snode* %s, %struct.snode** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.snode** %s.addr, metadata !178, metadata !95), !dbg !179
  %0 = load %struct.snode*, %struct.snode** %s.addr, align 8, !dbg !180
  %cmp = icmp eq %struct.snode* %0, null, !dbg !182
  br i1 %cmp, label %if.then, label %if.else, !dbg !183

if.then:                                          ; preds = %entry
  store %struct.rnode* null, %struct.rnode** %retval, !dbg !184
  br label %return, !dbg !184

if.else:                                          ; preds = %entry
  %1 = load %struct.snode*, %struct.snode** %s.addr, align 8, !dbg !185
  %val = getelementptr inbounds %struct.snode, %struct.snode* %1, i32 0, i32 0, !dbg !186
  %2 = load %struct.rnode*, %struct.rnode** %val, align 8, !dbg !186
  store %struct.rnode* %2, %struct.rnode** %retval, !dbg !187
  br label %return, !dbg !187

return:                                           ; preds = %if.else, %if.then
  %3 = load %struct.rnode*, %struct.rnode** %retval, !dbg !188
  ret %struct.rnode* %3, !dbg !188
}

; Function Attrs: nounwind uwtable
define i32 @Size(%struct.snode* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.snode*, align 8
  store %struct.snode* %s, %struct.snode** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.snode** %s.addr, metadata !189, metadata !95), !dbg !190
  %0 = load %struct.snode*, %struct.snode** %s.addr, align 8, !dbg !191
  %cmp = icmp eq %struct.snode* %0, null, !dbg !193
  br i1 %cmp, label %if.then, label %if.else, !dbg !194

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !195
  br label %return, !dbg !195

if.else:                                          ; preds = %entry
  %1 = load %struct.snode*, %struct.snode** %s.addr, align 8, !dbg !196
  %size = getelementptr inbounds %struct.snode, %struct.snode* %1, i32 0, i32 1, !dbg !197
  %2 = load i32, i32* %size, align 4, !dbg !197
  store i32 %2, i32* %retval, !dbg !198
  br label %return, !dbg !198

return:                                           ; preds = %if.else, %if.then
  %3 = load i32, i32* %retval, !dbg !199
  ret i32 %3, !dbg !199
}

; Function Attrs: nounwind uwtable
define i32 @occurs_in(i32 %n, %struct.pnode* %p) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %p.addr = alloca %struct.pnode*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !200, metadata !95), !dbg !201
  store %struct.pnode* %p, %struct.pnode** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pnode** %p.addr, metadata !202, metadata !95), !dbg !203
  br label %while.cond, !dbg !204

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.pnode*, %struct.pnode** %p.addr, align 8, !dbg !205
  %cmp = icmp ne %struct.pnode* %0, null, !dbg !208
  br i1 %cmp, label %while.body, label %while.end, !dbg !204

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4, !dbg !209
  %2 = load %struct.pnode*, %struct.pnode** %p.addr, align 8, !dbg !211
  %posnum = getelementptr inbounds %struct.pnode, %struct.pnode* %2, i32 0, i32 0, !dbg !212
  %3 = load i32, i32* %posnum, align 4, !dbg !212
  %cmp1 = icmp eq i32 %1, %3, !dbg !213
  br i1 %cmp1, label %if.then, label %if.else, !dbg !214

if.then:                                          ; preds = %while.body
  store i32 1, i32* %retval, !dbg !215
  br label %return, !dbg !215

if.else:                                          ; preds = %while.body
  %4 = load %struct.pnode*, %struct.pnode** %p.addr, align 8, !dbg !216
  %nextpos = getelementptr inbounds %struct.pnode, %struct.pnode* %4, i32 0, i32 1, !dbg !217
  %5 = load %struct.pnode*, %struct.pnode** %nextpos, align 8, !dbg !217
  store %struct.pnode* %5, %struct.pnode** %p.addr, align 8, !dbg !218
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %while.cond, !dbg !204

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, !dbg !219
  br label %return, !dbg !219

return:                                           ; preds = %while.end, %if.then
  %6 = load i32, i32* %retval, !dbg !220
  ret i32 %6, !dbg !220
}

; Function Attrs: nounwind uwtable
define %struct.pnode* @pset_union(%struct.pnode* %s1, %struct.pnode* %s2) #0 {
entry:
  %retval = alloca %struct.pnode*, align 8
  %s1.addr = alloca %struct.pnode*, align 8
  %s2.addr = alloca %struct.pnode*, align 8
  %hd = alloca %struct.pnode*, align 8
  %curr = alloca %struct.pnode*, align 8
  %new1 = alloca %struct.pnode*, align 8
  store %struct.pnode* %s1, %struct.pnode** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pnode** %s1.addr, metadata !221, metadata !95), !dbg !222
  store %struct.pnode* %s2, %struct.pnode** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pnode** %s2.addr, metadata !223, metadata !95), !dbg !224
  call void @llvm.dbg.declare(metadata %struct.pnode** %hd, metadata !225, metadata !95), !dbg !226
  call void @llvm.dbg.declare(metadata %struct.pnode** %curr, metadata !227, metadata !95), !dbg !228
  call void @llvm.dbg.declare(metadata %struct.pnode** %new1, metadata !229, metadata !95), !dbg !230
  store %struct.pnode* null, %struct.pnode** %hd, align 8, !dbg !231
  store %struct.pnode* null, %struct.pnode** %curr, align 8, !dbg !232
  br label %while.cond, !dbg !233

while.cond:                                       ; preds = %if.end.9, %entry
  %0 = load %struct.pnode*, %struct.pnode** %s1.addr, align 8, !dbg !234
  %cmp = icmp ne %struct.pnode* %0, null, !dbg !237
  br i1 %cmp, label %while.body, label %while.end, !dbg !233

while.body:                                       ; preds = %while.cond
  %1 = load %struct.pnode*, %struct.pnode** %s1.addr, align 8, !dbg !238
  %posnum = getelementptr inbounds %struct.pnode, %struct.pnode* %1, i32 0, i32 0, !dbg !241
  %2 = load i32, i32* %posnum, align 4, !dbg !241
  %3 = load %struct.pnode*, %struct.pnode** %s2.addr, align 8, !dbg !242
  %call = call i32 @occurs_in(i32 %2, %struct.pnode* %3), !dbg !243
  %tobool = icmp ne i32 %call, 0, !dbg !243
  br i1 %tobool, label %if.end.9, label %if.then, !dbg !244

if.then:                                          ; preds = %while.body
  %call1 = call noalias i8* @malloc(i64 16) #3, !dbg !245
  %4 = bitcast i8* %call1 to %struct.pnode*, !dbg !247
  store %struct.pnode* %4, %struct.pnode** %new1, align 8, !dbg !248
  %5 = load %struct.pnode*, %struct.pnode** %new1, align 8, !dbg !249
  %cmp2 = icmp eq %struct.pnode* %5, null, !dbg !251
  br i1 %cmp2, label %if.then.3, label %if.end, !dbg !252

if.then.3:                                        ; preds = %if.then
  store %struct.pnode* null, %struct.pnode** %retval, !dbg !253
  br label %return, !dbg !253

if.end:                                           ; preds = %if.then
  %6 = load %struct.pnode*, %struct.pnode** %s1.addr, align 8, !dbg !254
  %posnum4 = getelementptr inbounds %struct.pnode, %struct.pnode* %6, i32 0, i32 0, !dbg !255
  %7 = load i32, i32* %posnum4, align 4, !dbg !255
  %8 = load %struct.pnode*, %struct.pnode** %new1, align 8, !dbg !256
  %posnum5 = getelementptr inbounds %struct.pnode, %struct.pnode* %8, i32 0, i32 0, !dbg !257
  store i32 %7, i32* %posnum5, align 4, !dbg !258
  %9 = load %struct.pnode*, %struct.pnode** %hd, align 8, !dbg !259
  %cmp6 = icmp eq %struct.pnode* %9, null, !dbg !261
  br i1 %cmp6, label %if.then.7, label %if.else, !dbg !262

if.then.7:                                        ; preds = %if.end
  %10 = load %struct.pnode*, %struct.pnode** %new1, align 8, !dbg !263
  store %struct.pnode* %10, %struct.pnode** %hd, align 8, !dbg !264
  br label %if.end.8, !dbg !265

if.else:                                          ; preds = %if.end
  %11 = load %struct.pnode*, %struct.pnode** %new1, align 8, !dbg !266
  %12 = load %struct.pnode*, %struct.pnode** %curr, align 8, !dbg !267
  %nextpos = getelementptr inbounds %struct.pnode, %struct.pnode* %12, i32 0, i32 1, !dbg !268
  store %struct.pnode* %11, %struct.pnode** %nextpos, align 8, !dbg !269
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %if.end.9, !dbg !270

if.end.9:                                         ; preds = %if.end.8, %while.body
  %13 = load %struct.pnode*, %struct.pnode** %new1, align 8, !dbg !271
  store %struct.pnode* %13, %struct.pnode** %curr, align 8, !dbg !272
  %14 = load %struct.pnode*, %struct.pnode** %s1.addr, align 8, !dbg !273
  %nextpos10 = getelementptr inbounds %struct.pnode, %struct.pnode* %14, i32 0, i32 1, !dbg !274
  %15 = load %struct.pnode*, %struct.pnode** %nextpos10, align 8, !dbg !274
  store %struct.pnode* %15, %struct.pnode** %s1.addr, align 8, !dbg !275
  br label %while.cond, !dbg !233

while.end:                                        ; preds = %while.cond
  %16 = load %struct.pnode*, %struct.pnode** %hd, align 8, !dbg !276
  %cmp11 = icmp eq %struct.pnode* %16, null, !dbg !278
  br i1 %cmp11, label %if.then.12, label %if.else.13, !dbg !279

if.then.12:                                       ; preds = %while.end
  %17 = load %struct.pnode*, %struct.pnode** %s2.addr, align 8, !dbg !280
  store %struct.pnode* %17, %struct.pnode** %hd, align 8, !dbg !281
  br label %if.end.15, !dbg !282

if.else.13:                                       ; preds = %while.end
  %18 = load %struct.pnode*, %struct.pnode** %s2.addr, align 8, !dbg !283
  %19 = load %struct.pnode*, %struct.pnode** %curr, align 8, !dbg !284
  %nextpos14 = getelementptr inbounds %struct.pnode, %struct.pnode* %19, i32 0, i32 1, !dbg !285
  store %struct.pnode* %18, %struct.pnode** %nextpos14, align 8, !dbg !286
  br label %if.end.15

if.end.15:                                        ; preds = %if.else.13, %if.then.12
  %20 = load %struct.pnode*, %struct.pnode** %hd, align 8, !dbg !287
  store %struct.pnode* %20, %struct.pnode** %retval, !dbg !288
  br label %return, !dbg !288

return:                                           ; preds = %if.end.15, %if.then.3
  %21 = load %struct.pnode*, %struct.pnode** %retval, !dbg !289
  ret %struct.pnode* %21, !dbg !289
}

; Function Attrs: nounwind uwtable
define %struct.pnode* @create_pos(i32 %n) #0 {
entry:
  %retval = alloca %struct.pnode*, align 8
  %n.addr = alloca i32, align 4
  %x = alloca %struct.pnode*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !290, metadata !95), !dbg !291
  call void @llvm.dbg.declare(metadata %struct.pnode** %x, metadata !292, metadata !95), !dbg !293
  %call = call noalias i8* @malloc(i64 16) #3, !dbg !294
  %0 = bitcast i8* %call to %struct.pnode*, !dbg !295
  store %struct.pnode* %0, %struct.pnode** %x, align 8, !dbg !296
  %1 = load %struct.pnode*, %struct.pnode** %x, align 8, !dbg !297
  %cmp = icmp eq %struct.pnode* %1, null, !dbg !299
  br i1 %cmp, label %if.then, label %if.end, !dbg !300

if.then:                                          ; preds = %entry
  store %struct.pnode* null, %struct.pnode** %retval, !dbg !301
  br label %return, !dbg !301

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4, !dbg !302
  %3 = load %struct.pnode*, %struct.pnode** %x, align 8, !dbg !303
  %posnum = getelementptr inbounds %struct.pnode, %struct.pnode* %3, i32 0, i32 0, !dbg !304
  store i32 %2, i32* %posnum, align 4, !dbg !305
  %4 = load %struct.pnode*, %struct.pnode** %x, align 8, !dbg !306
  %nextpos = getelementptr inbounds %struct.pnode, %struct.pnode* %4, i32 0, i32 1, !dbg !307
  store %struct.pnode* null, %struct.pnode** %nextpos, align 8, !dbg !308
  %5 = load %struct.pnode*, %struct.pnode** %x, align 8, !dbg !309
  store %struct.pnode* %5, %struct.pnode** %retval, !dbg !310
  br label %return, !dbg !310

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.pnode*, %struct.pnode** %retval, !dbg !311
  ret %struct.pnode* %6, !dbg !311
}

; Function Attrs: nounwind uwtable
define i32 @subset_pset(%struct.pnode* %s1, %struct.pnode* %s2) #0 {
entry:
  %s1.addr = alloca %struct.pnode*, align 8
  %s2.addr = alloca %struct.pnode*, align 8
  %subs = alloca i32, align 4
  store %struct.pnode* %s1, %struct.pnode** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pnode** %s1.addr, metadata !312, metadata !95), !dbg !313
  store %struct.pnode* %s2, %struct.pnode** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pnode** %s2.addr, metadata !314, metadata !95), !dbg !315
  call void @llvm.dbg.declare(metadata i32* %subs, metadata !316, metadata !95), !dbg !317
  store i32 1, i32* %subs, align 4, !dbg !317
  br label %while.cond, !dbg !318

while.cond:                                       ; preds = %while.end, %entry
  %0 = load %struct.pnode*, %struct.pnode** %s1.addr, align 8, !dbg !319
  %cmp = icmp ne %struct.pnode* %0, null, !dbg !322
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !323

land.rhs:                                         ; preds = %while.cond
  %1 = load i32, i32* %subs, align 4, !dbg !324
  %cmp1 = icmp ne i32 %1, 0, !dbg !326
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %2 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %2, label %while.body, label %while.end.11, !dbg !327

while.body:                                       ; preds = %land.end
  store i32 0, i32* %subs, align 4, !dbg !329
  br label %while.cond.2, !dbg !331

while.cond.2:                                     ; preds = %if.end, %while.body
  %3 = load %struct.pnode*, %struct.pnode** %s2.addr, align 8, !dbg !332
  %cmp3 = icmp ne %struct.pnode* %3, null, !dbg !335
  br i1 %cmp3, label %land.rhs.4, label %land.end.6, !dbg !336

land.rhs.4:                                       ; preds = %while.cond.2
  %4 = load i32, i32* %subs, align 4, !dbg !337
  %cmp5 = icmp ne i32 %4, 1, !dbg !339
  br label %land.end.6

land.end.6:                                       ; preds = %land.rhs.4, %while.cond.2
  %5 = phi i1 [ false, %while.cond.2 ], [ %cmp5, %land.rhs.4 ]
  br i1 %5, label %while.body.7, label %while.end, !dbg !340

while.body.7:                                     ; preds = %land.end.6
  %6 = load %struct.pnode*, %struct.pnode** %s1.addr, align 8, !dbg !342
  %posnum = getelementptr inbounds %struct.pnode, %struct.pnode* %6, i32 0, i32 0, !dbg !344
  %7 = load i32, i32* %posnum, align 4, !dbg !344
  %8 = load %struct.pnode*, %struct.pnode** %s2.addr, align 8, !dbg !345
  %posnum8 = getelementptr inbounds %struct.pnode, %struct.pnode* %8, i32 0, i32 0, !dbg !346
  %9 = load i32, i32* %posnum8, align 4, !dbg !346
  %cmp9 = icmp eq i32 %7, %9, !dbg !347
  br i1 %cmp9, label %if.then, label %if.else, !dbg !348

if.then:                                          ; preds = %while.body.7
  store i32 1, i32* %subs, align 4, !dbg !349
  br label %if.end, !dbg !350

if.else:                                          ; preds = %while.body.7
  %10 = load %struct.pnode*, %struct.pnode** %s2.addr, align 8, !dbg !351
  %nextpos = getelementptr inbounds %struct.pnode, %struct.pnode* %10, i32 0, i32 1, !dbg !352
  %11 = load %struct.pnode*, %struct.pnode** %nextpos, align 8, !dbg !352
  store %struct.pnode* %11, %struct.pnode** %s2.addr, align 8, !dbg !353
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond.2, !dbg !331

while.end:                                        ; preds = %land.end.6
  %12 = load %struct.pnode*, %struct.pnode** %s1.addr, align 8, !dbg !354
  %nextpos10 = getelementptr inbounds %struct.pnode, %struct.pnode* %12, i32 0, i32 1, !dbg !355
  %13 = load %struct.pnode*, %struct.pnode** %nextpos10, align 8, !dbg !355
  store %struct.pnode* %13, %struct.pnode** %s1.addr, align 8, !dbg !356
  br label %while.cond, !dbg !318

while.end.11:                                     ; preds = %land.end
  %14 = load i32, i32* %subs, align 4, !dbg !357
  ret i32 %14, !dbg !358
}

; Function Attrs: nounwind uwtable
define i32 @eq_pset(%struct.pnode* %s1, %struct.pnode* %s2) #0 {
entry:
  %s1.addr = alloca %struct.pnode*, align 8
  %s2.addr = alloca %struct.pnode*, align 8
  store %struct.pnode* %s1, %struct.pnode** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pnode** %s1.addr, metadata !359, metadata !95), !dbg !360
  store %struct.pnode* %s2, %struct.pnode** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pnode** %s2.addr, metadata !361, metadata !95), !dbg !362
  %0 = load %struct.pnode*, %struct.pnode** %s1.addr, align 8, !dbg !363
  %1 = load %struct.pnode*, %struct.pnode** %s2.addr, align 8, !dbg !364
  %call = call i32 @subset_pset(%struct.pnode* %0, %struct.pnode* %1), !dbg !365
  %tobool = icmp ne i32 %call, 0, !dbg !365
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !366

land.rhs:                                         ; preds = %entry
  %2 = load %struct.pnode*, %struct.pnode** %s2.addr, align 8, !dbg !367
  %3 = load %struct.pnode*, %struct.pnode** %s1.addr, align 8, !dbg !369
  %call1 = call i32 @subset_pset(%struct.pnode* %2, %struct.pnode* %3), !dbg !370
  %tobool2 = icmp ne i32 %call1, 0, !dbg !366
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %4 to i32, !dbg !371
  ret i32 %land.ext, !dbg !373
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!91, !92}
!llvm.ident = !{!93}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !63)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Prolangs-C/agrep")
!2 = !{}
!3 = !{!4, !62, !53}
!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "Stack", file: !5, line: 116, baseType: !6)
!5 = !DIFile(filename: "./re.h", directory: "/home/gleison/tf/Benchmarks/Prolangs-C/agrep")
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "snode", file: !5, line: 112, size: 192, align: 64, elements: !8)
!8 = !{!9, !60, !61}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !7, file: !5, line: 113, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_typedef, name: "Re_node", file: !5, line: 104, baseType: !11)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!12 = !DICompositeType(tag: DW_TAG_structure_type, name: "rnode", file: !5, line: 92, size: 384, align: 64, elements: !13)
!13 = !{!14, !16, !51, !52, !59}
!14 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !12, file: !5, line: 93, baseType: !15, size: 16, align: 16)
!15 = !DIBasicType(name: "short", size: 16, align: 16, encoding: DW_ATE_signed)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "refs", scope: !12, file: !5, line: 101, baseType: !17, size: 128, align: 64, offset: 64)
!17 = !DICompositeType(tag: DW_TAG_union_type, scope: !12, file: !5, line: 94, size: 128, align: 64, elements: !18)
!18 = !{!19, !45, !46}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "lit", scope: !17, file: !5, line: 95, baseType: !20, size: 64, align: 64)
!20 = !DIDerivedType(tag: DW_TAG_typedef, name: "Re_Lit", file: !5, line: 85, baseType: !21)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64, align: 64)
!22 = !DICompositeType(tag: DW_TAG_structure_type, file: !5, line: 78, size: 128, align: 64, elements: !23)
!23 = !{!24, !26, !27}
!24 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !22, file: !5, line: 79, baseType: !25, size: 32, align: 32)
!25 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "l_type", scope: !22, file: !5, line: 80, baseType: !15, size: 16, align: 16, offset: 32)
!27 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !22, file: !5, line: 84, baseType: !28, size: 64, align: 64, offset: 64)
!28 = !DICompositeType(tag: DW_TAG_union_type, scope: !22, file: !5, line: 81, size: 64, align: 64, elements: !29)
!29 = !{!30, !32}
!30 = !DIDerivedType(tag: DW_TAG_member, name: "c", scope: !28, file: !5, line: 82, baseType: !31, size: 8, align: 8)
!31 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "cset", scope: !28, file: !5, line: 83, baseType: !33, size: 64, align: 64)
!33 = !DIDerivedType(tag: DW_TAG_typedef, name: "Ch_Set", file: !5, line: 76, baseType: !34)
!34 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !35, size: 64, align: 64)
!35 = !DICompositeType(tag: DW_TAG_structure_type, name: "ch_set", file: !5, line: 73, size: 128, align: 64, elements: !36)
!36 = !{!37, !44}
!37 = !DIDerivedType(tag: DW_TAG_member, name: "elt", scope: !35, file: !5, line: 74, baseType: !38, size: 64, align: 64)
!38 = !DIDerivedType(tag: DW_TAG_typedef, name: "Ch_Range", file: !5, line: 71, baseType: !39)
!39 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !40, size: 64, align: 64)
!40 = !DICompositeType(tag: DW_TAG_structure_type, file: !5, line: 69, size: 16, align: 8, elements: !41)
!41 = !{!42, !43}
!42 = !DIDerivedType(tag: DW_TAG_member, name: "low_bd", scope: !40, file: !5, line: 70, baseType: !31, size: 8, align: 8)
!43 = !DIDerivedType(tag: DW_TAG_member, name: "hi_bd", scope: !40, file: !5, line: 70, baseType: !31, size: 8, align: 8, offset: 8)
!44 = !DIDerivedType(tag: DW_TAG_member, name: "rest", scope: !35, file: !5, line: 75, baseType: !34, size: 64, align: 64, offset: 64)
!45 = !DIDerivedType(tag: DW_TAG_member, name: "child", scope: !17, file: !5, line: 96, baseType: !11, size: 64, align: 64)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "children", scope: !17, file: !5, line: 100, baseType: !47, size: 128, align: 64)
!47 = !DICompositeType(tag: DW_TAG_structure_type, scope: !17, file: !5, line: 97, size: 128, align: 64, elements: !48)
!48 = !{!49, !50}
!49 = !DIDerivedType(tag: DW_TAG_member, name: "l_child", scope: !47, file: !5, line: 98, baseType: !11, size: 64, align: 64)
!50 = !DIDerivedType(tag: DW_TAG_member, name: "r_child", scope: !47, file: !5, line: 99, baseType: !11, size: 64, align: 64, offset: 64)
!51 = !DIDerivedType(tag: DW_TAG_member, name: "nullable", scope: !12, file: !5, line: 102, baseType: !15, size: 16, align: 16, offset: 192)
!52 = !DIDerivedType(tag: DW_TAG_member, name: "firstposn", scope: !12, file: !5, line: 103, baseType: !53, size: 64, align: 64, offset: 256)
!53 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pset", file: !5, line: 90, baseType: !54)
!54 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !55, size: 64, align: 64)
!55 = !DICompositeType(tag: DW_TAG_structure_type, name: "pnode", file: !5, line: 87, size: 128, align: 64, elements: !56)
!56 = !{!57, !58}
!57 = !DIDerivedType(tag: DW_TAG_member, name: "posnum", scope: !55, file: !5, line: 88, baseType: !25, size: 32, align: 32)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "nextpos", scope: !55, file: !5, line: 89, baseType: !54, size: 64, align: 64, offset: 64)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "lastposn", scope: !12, file: !5, line: 103, baseType: !53, size: 64, align: 64, offset: 320)
!60 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !7, file: !5, line: 114, baseType: !25, size: 32, align: 32, offset: 64)
!61 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7, file: !5, line: 115, baseType: !6, size: 64, align: 64, offset: 128)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!63 = !{!64, !69, !72, !75, !78, !81, !84, !87, !90}
!64 = !DISubprogram(name: "Push", scope: !65, file: !65, line: 14, type: !66, isLocal: false, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: false, function: %struct.snode* (%struct.snode**, %struct.rnode*)* @Push, variables: !2)
!65 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Prolangs-C/agrep/tmp.c", directory: "/home/gleison/tf/Benchmarks/Prolangs-C/agrep")
!66 = !DISubroutineType(types: !67)
!67 = !{!4, !68, !10}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64, align: 64)
!69 = !DISubprogram(name: "Pop", scope: !65, file: !65, line: 30, type: !70, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagPrototyped, isOptimized: false, function: %struct.rnode* (%struct.snode**)* @Pop, variables: !2)
!70 = !DISubroutineType(types: !71)
!71 = !{!10, !68}
!72 = !DISubprogram(name: "Top", scope: !65, file: !65, line: 45, type: !73, isLocal: false, isDefinition: true, scopeLine: 45, flags: DIFlagPrototyped, isOptimized: false, function: %struct.rnode* (%struct.snode*)* @Top, variables: !2)
!73 = !DISubroutineType(types: !74)
!74 = !{!10, !4}
!75 = !DISubprogram(name: "Size", scope: !65, file: !65, line: 52, type: !76, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, function: i32 (%struct.snode*)* @Size, variables: !2)
!76 = !DISubroutineType(types: !77)
!77 = !{!25, !4}
!78 = !DISubprogram(name: "occurs_in", scope: !65, file: !65, line: 65, type: !79, isLocal: false, isDefinition: true, scopeLine: 65, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, %struct.pnode*)* @occurs_in, variables: !2)
!79 = !DISubroutineType(types: !80)
!80 = !{!25, !25, !53}
!81 = !DISubprogram(name: "pset_union", scope: !65, file: !65, line: 76, type: !82, isLocal: false, isDefinition: true, scopeLine: 76, flags: DIFlagPrototyped, isOptimized: false, function: %struct.pnode* (%struct.pnode*, %struct.pnode*)* @pset_union, variables: !2)
!82 = !DISubroutineType(types: !83)
!83 = !{!53, !53, !53}
!84 = !DISubprogram(name: "create_pos", scope: !65, file: !65, line: 105, type: !85, isLocal: false, isDefinition: true, scopeLine: 105, flags: DIFlagPrototyped, isOptimized: false, function: %struct.pnode* (i32)* @create_pos, variables: !2)
!85 = !DISubroutineType(types: !86)
!86 = !{!53, !25}
!87 = !DISubprogram(name: "subset_pset", scope: !65, file: !65, line: 119, type: !88, isLocal: false, isDefinition: true, scopeLine: 119, flags: DIFlagPrototyped, isOptimized: false, function: i32 (%struct.pnode*, %struct.pnode*)* @subset_pset, variables: !2)
!88 = !DISubroutineType(types: !89)
!89 = !{!25, !53, !53}
!90 = !DISubprogram(name: "eq_pset", scope: !65, file: !65, line: 134, type: !88, isLocal: false, isDefinition: true, scopeLine: 134, flags: DIFlagPrototyped, isOptimized: false, function: i32 (%struct.pnode*, %struct.pnode*)* @eq_pset, variables: !2)
!91 = !{i32 2, !"Dwarf Version", i32 4}
!92 = !{i32 2, !"Debug Info Version", i32 3}
!93 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!94 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !64, file: !65, line: 14, type: !68)
!95 = !DIExpression()
!96 = !DILocation(line: 14, column: 19, scope: !64)
!97 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 2, scope: !64, file: !65, line: 14, type: !10)
!98 = !DILocation(line: 14, column: 30, scope: !64)
!99 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "node", scope: !64, file: !65, line: 15, type: !4)
!100 = !DILocation(line: 15, column: 9, scope: !64)
!101 = !DILocation(line: 17, column: 17, scope: !64)
!102 = !DILocation(line: 17, column: 10, scope: !64)
!103 = !DILocation(line: 17, column: 8, scope: !64)
!104 = !DILocation(line: 18, column: 7, scope: !105)
!105 = distinct !DILexicalBlock(scope: !64, file: !65, line: 18, column: 7)
!106 = !DILocation(line: 18, column: 9, scope: !105)
!107 = !DILocation(line: 18, column: 17, scope: !105)
!108 = !DILocation(line: 18, column: 20, scope: !109)
!109 = !DILexicalBlockFile(scope: !105, file: !65, discriminator: 1)
!110 = !DILocation(line: 18, column: 25, scope: !105)
!111 = !DILocation(line: 18, column: 7, scope: !64)
!112 = !DILocation(line: 19, column: 5, scope: !105)
!113 = !DILocation(line: 20, column: 17, scope: !64)
!114 = !DILocation(line: 20, column: 16, scope: !64)
!115 = !DILocation(line: 20, column: 3, scope: !64)
!116 = !DILocation(line: 20, column: 9, scope: !64)
!117 = !DILocation(line: 20, column: 14, scope: !64)
!118 = !DILocation(line: 21, column: 15, scope: !64)
!119 = !DILocation(line: 21, column: 3, scope: !64)
!120 = !DILocation(line: 21, column: 9, scope: !64)
!121 = !DILocation(line: 21, column: 13, scope: !64)
!122 = !DILocation(line: 22, column: 8, scope: !123)
!123 = distinct !DILexicalBlock(scope: !64, file: !65, line: 22, column: 7)
!124 = !DILocation(line: 22, column: 7, scope: !123)
!125 = !DILocation(line: 22, column: 10, scope: !123)
!126 = !DILocation(line: 22, column: 7, scope: !64)
!127 = !DILocation(line: 23, column: 5, scope: !123)
!128 = !DILocation(line: 23, column: 11, scope: !123)
!129 = !DILocation(line: 23, column: 16, scope: !123)
!130 = !DILocation(line: 25, column: 20, scope: !123)
!131 = !DILocation(line: 25, column: 19, scope: !123)
!132 = !DILocation(line: 25, column: 24, scope: !123)
!133 = !DILocation(line: 25, column: 29, scope: !123)
!134 = !DILocation(line: 25, column: 5, scope: !123)
!135 = !DILocation(line: 25, column: 11, scope: !123)
!136 = !DILocation(line: 25, column: 16, scope: !123)
!137 = !DILocation(line: 26, column: 8, scope: !64)
!138 = !DILocation(line: 26, column: 4, scope: !64)
!139 = !DILocation(line: 26, column: 6, scope: !64)
!140 = !DILocation(line: 27, column: 11, scope: !64)
!141 = !DILocation(line: 27, column: 10, scope: !64)
!142 = !DILocation(line: 27, column: 3, scope: !64)
!143 = !DILocation(line: 28, column: 1, scope: !64)
!144 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !69, file: !65, line: 30, type: !68)
!145 = !DILocation(line: 30, column: 20, scope: !69)
!146 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "node", scope: !69, file: !65, line: 31, type: !10)
!147 = !DILocation(line: 31, column: 11, scope: !69)
!148 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "temp", scope: !69, file: !65, line: 32, type: !4)
!149 = !DILocation(line: 32, column: 9, scope: !69)
!150 = !DILocation(line: 34, column: 7, scope: !151)
!151 = distinct !DILexicalBlock(scope: !69, file: !65, line: 34, column: 7)
!152 = !DILocation(line: 34, column: 9, scope: !151)
!153 = !DILocation(line: 34, column: 17, scope: !151)
!154 = !DILocation(line: 34, column: 21, scope: !155)
!155 = !DILexicalBlockFile(scope: !151, file: !65, discriminator: 1)
!156 = !DILocation(line: 34, column: 20, scope: !151)
!157 = !DILocation(line: 34, column: 23, scope: !151)
!158 = !DILocation(line: 34, column: 7, scope: !69)
!159 = !DILocation(line: 35, column: 5, scope: !151)
!160 = !DILocation(line: 37, column: 13, scope: !161)
!161 = distinct !DILexicalBlock(scope: !151, file: !65, line: 36, column: 8)
!162 = !DILocation(line: 37, column: 12, scope: !161)
!163 = !DILocation(line: 37, column: 10, scope: !161)
!164 = !DILocation(line: 38, column: 14, scope: !161)
!165 = !DILocation(line: 38, column: 13, scope: !161)
!166 = !DILocation(line: 38, column: 18, scope: !161)
!167 = !DILocation(line: 38, column: 10, scope: !161)
!168 = !DILocation(line: 39, column: 12, scope: !161)
!169 = !DILocation(line: 39, column: 11, scope: !161)
!170 = !DILocation(line: 39, column: 16, scope: !161)
!171 = !DILocation(line: 39, column: 6, scope: !161)
!172 = !DILocation(line: 39, column: 8, scope: !161)
!173 = !DILocation(line: 40, column: 10, scope: !161)
!174 = !DILocation(line: 40, column: 5, scope: !161)
!175 = !DILocation(line: 41, column: 12, scope: !161)
!176 = !DILocation(line: 41, column: 5, scope: !161)
!177 = !DILocation(line: 43, column: 1, scope: !69)
!178 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !72, file: !65, line: 45, type: !4)
!179 = !DILocation(line: 45, column: 19, scope: !72)
!180 = !DILocation(line: 46, column: 7, scope: !181)
!181 = distinct !DILexicalBlock(scope: !72, file: !65, line: 46, column: 7)
!182 = !DILocation(line: 46, column: 9, scope: !181)
!183 = !DILocation(line: 46, column: 7, scope: !72)
!184 = !DILocation(line: 47, column: 5, scope: !181)
!185 = !DILocation(line: 49, column: 12, scope: !181)
!186 = !DILocation(line: 49, column: 15, scope: !181)
!187 = !DILocation(line: 49, column: 5, scope: !181)
!188 = !DILocation(line: 50, column: 1, scope: !72)
!189 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !75, file: !65, line: 52, type: !4)
!190 = !DILocation(line: 52, column: 16, scope: !75)
!191 = !DILocation(line: 53, column: 7, scope: !192)
!192 = distinct !DILexicalBlock(scope: !75, file: !65, line: 53, column: 7)
!193 = !DILocation(line: 53, column: 9, scope: !192)
!194 = !DILocation(line: 53, column: 7, scope: !75)
!195 = !DILocation(line: 54, column: 5, scope: !192)
!196 = !DILocation(line: 56, column: 12, scope: !192)
!197 = !DILocation(line: 56, column: 15, scope: !192)
!198 = !DILocation(line: 56, column: 5, scope: !192)
!199 = !DILocation(line: 57, column: 1, scope: !75)
!200 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !78, file: !65, line: 65, type: !25)
!201 = !DILocation(line: 65, column: 19, scope: !78)
!202 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 2, scope: !78, file: !65, line: 65, type: !53)
!203 = !DILocation(line: 65, column: 27, scope: !78)
!204 = !DILocation(line: 66, column: 3, scope: !78)
!205 = !DILocation(line: 66, column: 10, scope: !206)
!206 = !DILexicalBlockFile(scope: !207, file: !65, discriminator: 2)
!207 = !DILexicalBlockFile(scope: !78, file: !65, discriminator: 1)
!208 = !DILocation(line: 66, column: 12, scope: !78)
!209 = !DILocation(line: 67, column: 9, scope: !210)
!210 = distinct !DILexicalBlock(scope: !78, file: !65, line: 67, column: 9)
!211 = !DILocation(line: 67, column: 14, scope: !210)
!212 = !DILocation(line: 67, column: 17, scope: !210)
!213 = !DILocation(line: 67, column: 11, scope: !210)
!214 = !DILocation(line: 67, column: 9, scope: !78)
!215 = !DILocation(line: 68, column: 7, scope: !210)
!216 = !DILocation(line: 70, column: 11, scope: !210)
!217 = !DILocation(line: 70, column: 14, scope: !210)
!218 = !DILocation(line: 70, column: 9, scope: !210)
!219 = !DILocation(line: 71, column: 3, scope: !78)
!220 = !DILocation(line: 72, column: 1, scope: !78)
!221 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s1", arg: 1, scope: !81, file: !65, line: 76, type: !53)
!222 = !DILocation(line: 76, column: 22, scope: !81)
!223 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s2", arg: 2, scope: !81, file: !65, line: 76, type: !53)
!224 = !DILocation(line: 76, column: 31, scope: !81)
!225 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hd", scope: !81, file: !65, line: 77, type: !53)
!226 = !DILocation(line: 77, column: 8, scope: !81)
!227 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "curr", scope: !81, file: !65, line: 77, type: !53)
!228 = !DILocation(line: 77, column: 12, scope: !81)
!229 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "new1", scope: !81, file: !65, line: 77, type: !53)
!230 = !DILocation(line: 77, column: 18, scope: !81)
!231 = !DILocation(line: 79, column: 6, scope: !81)
!232 = !DILocation(line: 80, column: 8, scope: !81)
!233 = !DILocation(line: 81, column: 3, scope: !81)
!234 = !DILocation(line: 81, column: 10, scope: !235)
!235 = !DILexicalBlockFile(scope: !236, file: !65, discriminator: 2)
!236 = !DILexicalBlockFile(scope: !81, file: !65, discriminator: 1)
!237 = !DILocation(line: 81, column: 13, scope: !81)
!238 = !DILocation(line: 82, column: 20, scope: !239)
!239 = distinct !DILexicalBlock(scope: !240, file: !65, line: 82, column: 9)
!240 = distinct !DILexicalBlock(scope: !81, file: !65, line: 81, column: 22)
!241 = !DILocation(line: 82, column: 24, scope: !239)
!242 = !DILocation(line: 82, column: 32, scope: !239)
!243 = !DILocation(line: 82, column: 10, scope: !239)
!244 = !DILocation(line: 82, column: 9, scope: !240)
!245 = !DILocation(line: 83, column: 20, scope: !246)
!246 = distinct !DILexicalBlock(scope: !239, file: !65, line: 82, column: 37)
!247 = !DILocation(line: 83, column: 14, scope: !246)
!248 = !DILocation(line: 83, column: 12, scope: !246)
!249 = !DILocation(line: 84, column: 11, scope: !250)
!250 = distinct !DILexicalBlock(scope: !246, file: !65, line: 84, column: 11)
!251 = !DILocation(line: 84, column: 16, scope: !250)
!252 = !DILocation(line: 84, column: 11, scope: !246)
!253 = !DILocation(line: 85, column: 9, scope: !250)
!254 = !DILocation(line: 86, column: 22, scope: !246)
!255 = !DILocation(line: 86, column: 26, scope: !246)
!256 = !DILocation(line: 86, column: 7, scope: !246)
!257 = !DILocation(line: 86, column: 13, scope: !246)
!258 = !DILocation(line: 86, column: 20, scope: !246)
!259 = !DILocation(line: 87, column: 11, scope: !260)
!260 = distinct !DILexicalBlock(scope: !246, file: !65, line: 87, column: 11)
!261 = !DILocation(line: 87, column: 14, scope: !260)
!262 = !DILocation(line: 87, column: 11, scope: !246)
!263 = !DILocation(line: 88, column: 14, scope: !260)
!264 = !DILocation(line: 88, column: 12, scope: !260)
!265 = !DILocation(line: 88, column: 9, scope: !260)
!266 = !DILocation(line: 90, column: 25, scope: !260)
!267 = !DILocation(line: 90, column: 9, scope: !260)
!268 = !DILocation(line: 90, column: 15, scope: !260)
!269 = !DILocation(line: 90, column: 23, scope: !260)
!270 = !DILocation(line: 91, column: 5, scope: !246)
!271 = !DILocation(line: 92, column: 12, scope: !240)
!272 = !DILocation(line: 92, column: 10, scope: !240)
!273 = !DILocation(line: 93, column: 10, scope: !240)
!274 = !DILocation(line: 93, column: 14, scope: !240)
!275 = !DILocation(line: 93, column: 8, scope: !240)
!276 = !DILocation(line: 95, column: 7, scope: !277)
!277 = distinct !DILexicalBlock(scope: !81, file: !65, line: 95, column: 7)
!278 = !DILocation(line: 95, column: 10, scope: !277)
!279 = !DILocation(line: 95, column: 7, scope: !81)
!280 = !DILocation(line: 96, column: 10, scope: !277)
!281 = !DILocation(line: 96, column: 8, scope: !277)
!282 = !DILocation(line: 96, column: 5, scope: !277)
!283 = !DILocation(line: 98, column: 21, scope: !277)
!284 = !DILocation(line: 98, column: 5, scope: !277)
!285 = !DILocation(line: 98, column: 11, scope: !277)
!286 = !DILocation(line: 98, column: 19, scope: !277)
!287 = !DILocation(line: 99, column: 10, scope: !81)
!288 = !DILocation(line: 99, column: 3, scope: !81)
!289 = !DILocation(line: 100, column: 1, scope: !81)
!290 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !84, file: !65, line: 105, type: !25)
!291 = !DILocation(line: 105, column: 21, scope: !84)
!292 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !84, file: !65, line: 106, type: !53)
!293 = !DILocation(line: 106, column: 8, scope: !84)
!294 = !DILocation(line: 108, column: 13, scope: !84)
!295 = !DILocation(line: 108, column: 7, scope: !84)
!296 = !DILocation(line: 108, column: 5, scope: !84)
!297 = !DILocation(line: 109, column: 7, scope: !298)
!298 = distinct !DILexicalBlock(scope: !84, file: !65, line: 109, column: 7)
!299 = !DILocation(line: 109, column: 9, scope: !298)
!300 = !DILocation(line: 109, column: 7, scope: !84)
!301 = !DILocation(line: 110, column: 5, scope: !298)
!302 = !DILocation(line: 111, column: 15, scope: !84)
!303 = !DILocation(line: 111, column: 3, scope: !84)
!304 = !DILocation(line: 111, column: 6, scope: !84)
!305 = !DILocation(line: 111, column: 13, scope: !84)
!306 = !DILocation(line: 112, column: 3, scope: !84)
!307 = !DILocation(line: 112, column: 6, scope: !84)
!308 = !DILocation(line: 112, column: 14, scope: !84)
!309 = !DILocation(line: 113, column: 10, scope: !84)
!310 = !DILocation(line: 113, column: 3, scope: !84)
!311 = !DILocation(line: 114, column: 1, scope: !84)
!312 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s1", arg: 1, scope: !87, file: !65, line: 119, type: !53)
!313 = !DILocation(line: 119, column: 22, scope: !87)
!314 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s2", arg: 2, scope: !87, file: !65, line: 119, type: !53)
!315 = !DILocation(line: 119, column: 31, scope: !87)
!316 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "subs", scope: !87, file: !65, line: 120, type: !25)
!317 = !DILocation(line: 120, column: 7, scope: !87)
!318 = !DILocation(line: 122, column: 3, scope: !87)
!319 = !DILocation(line: 122, column: 10, scope: !320)
!320 = !DILexicalBlockFile(scope: !321, file: !65, discriminator: 4)
!321 = !DILexicalBlockFile(scope: !87, file: !65, discriminator: 1)
!322 = !DILocation(line: 122, column: 13, scope: !87)
!323 = !DILocation(line: 122, column: 21, scope: !87)
!324 = !DILocation(line: 122, column: 24, scope: !325)
!325 = !DILexicalBlockFile(scope: !87, file: !65, discriminator: 2)
!326 = !DILocation(line: 122, column: 29, scope: !87)
!327 = !DILocation(line: 122, column: 3, scope: !328)
!328 = !DILexicalBlockFile(scope: !87, file: !65, discriminator: 3)
!329 = !DILocation(line: 123, column: 10, scope: !330)
!330 = distinct !DILexicalBlock(scope: !87, file: !65, line: 122, column: 35)
!331 = !DILocation(line: 124, column: 5, scope: !330)
!332 = !DILocation(line: 124, column: 12, scope: !333)
!333 = !DILexicalBlockFile(scope: !334, file: !65, discriminator: 4)
!334 = !DILexicalBlockFile(scope: !330, file: !65, discriminator: 1)
!335 = !DILocation(line: 124, column: 15, scope: !330)
!336 = !DILocation(line: 124, column: 23, scope: !330)
!337 = !DILocation(line: 124, column: 26, scope: !338)
!338 = !DILexicalBlockFile(scope: !330, file: !65, discriminator: 2)
!339 = !DILocation(line: 124, column: 31, scope: !330)
!340 = !DILocation(line: 124, column: 5, scope: !341)
!341 = !DILexicalBlockFile(scope: !330, file: !65, discriminator: 3)
!342 = !DILocation(line: 125, column: 11, scope: !343)
!343 = distinct !DILexicalBlock(scope: !330, file: !65, line: 125, column: 11)
!344 = !DILocation(line: 125, column: 15, scope: !343)
!345 = !DILocation(line: 125, column: 25, scope: !343)
!346 = !DILocation(line: 125, column: 29, scope: !343)
!347 = !DILocation(line: 125, column: 22, scope: !343)
!348 = !DILocation(line: 125, column: 11, scope: !330)
!349 = !DILocation(line: 126, column: 14, scope: !343)
!350 = !DILocation(line: 126, column: 9, scope: !343)
!351 = !DILocation(line: 128, column: 14, scope: !343)
!352 = !DILocation(line: 128, column: 18, scope: !343)
!353 = !DILocation(line: 128, column: 12, scope: !343)
!354 = !DILocation(line: 129, column: 10, scope: !330)
!355 = !DILocation(line: 129, column: 14, scope: !330)
!356 = !DILocation(line: 129, column: 8, scope: !330)
!357 = !DILocation(line: 131, column: 10, scope: !87)
!358 = !DILocation(line: 131, column: 3, scope: !87)
!359 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s1", arg: 1, scope: !90, file: !65, line: 134, type: !53)
!360 = !DILocation(line: 134, column: 18, scope: !90)
!361 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s2", arg: 2, scope: !90, file: !65, line: 134, type: !53)
!362 = !DILocation(line: 134, column: 27, scope: !90)
!363 = !DILocation(line: 135, column: 22, scope: !90)
!364 = !DILocation(line: 135, column: 26, scope: !90)
!365 = !DILocation(line: 135, column: 10, scope: !90)
!366 = !DILocation(line: 135, column: 30, scope: !90)
!367 = !DILocation(line: 135, column: 45, scope: !368)
!368 = !DILexicalBlockFile(scope: !90, file: !65, discriminator: 1)
!369 = !DILocation(line: 135, column: 49, scope: !90)
!370 = !DILocation(line: 135, column: 33, scope: !90)
!371 = !DILocation(line: 135, column: 30, scope: !372)
!372 = !DILexicalBlockFile(scope: !90, file: !65, discriminator: 2)
!373 = !DILocation(line: 135, column: 3, scope: !90)
