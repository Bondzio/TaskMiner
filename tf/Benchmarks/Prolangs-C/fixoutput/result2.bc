; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@LEX_LEN = global i32 0, align 4
@LEXEME = common global i8* null, align 8
@BACK = common global i8* null, align 8
@FRONT = common global i8* null, align 8
@stdin = external global %struct._IO_FILE*, align 8
@CH = common global i8 0, align 1
@.str = private unnamed_addr constant [61 x i8] c"%D SCANNER ERROR: Tried to BACKUP past beginning of a Token\0A\00", align 1

; Function Attrs: nounwind uwtable
define void @FLUSH() #0 {
entry:
  %tmp = load i32, i32* @LEX_LEN, align 4, !dbg !22
  %cmp = icmp ugt i32 %tmp, 256, !dbg !24
  br i1 %cmp, label %if.then, label %if.end, !dbg !25

if.then:                                          ; preds = %entry
  %tmp1 = load i8*, i8** @LEXEME, align 8, !dbg !26
  call void @free(i8* %tmp1) #4, !dbg !28
  store i32 256, i32* @LEX_LEN, align 4, !dbg !29
  %tmp2 = load i32, i32* @LEX_LEN, align 4, !dbg !30
  %conv = zext i32 %tmp2 to i64, !dbg !30
  %call = call noalias i8* @calloc(i64 %conv, i64 1) #4, !dbg !31
  store i8* %call, i8** @LEXEME, align 8, !dbg !32
  br label %if.end, !dbg !33

if.end:                                           ; preds = %if.then, %entry
  %tmp3 = load i8*, i8** @LEXEME, align 8, !dbg !34
  store i8 0, i8* %tmp3, align 1, !dbg !35
  %tmp4 = load i8*, i8** @LEXEME, align 8, !dbg !36
  store i8* %tmp4, i8** @BACK, align 8, !dbg !37
  %tmp5 = load i8*, i8** @BACK, align 8, !dbg !38
  %add.ptr = getelementptr inbounds i8, i8* %tmp5, i64 -1, !dbg !39
  store i8* %add.ptr, i8** @FRONT, align 8, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: nounwind
declare void @free(i8*) #1

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @GETCHR() #0 {
entry:
  %tmp = load i8*, i8** @FRONT, align 8, !dbg !42
  %tmp1 = load i8*, i8** @BACK, align 8, !dbg !44
  %sub.ptr.lhs.cast = ptrtoint i8* %tmp to i64, !dbg !45
  %sub.ptr.rhs.cast = ptrtoint i8* %tmp1 to i64, !dbg !45
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !45
  %tmp2 = load i32, i32* @LEX_LEN, align 4, !dbg !46
  %sub = sub i32 %tmp2, 3, !dbg !47
  %conv = zext i32 %sub to i64, !dbg !46
  %cmp = icmp sge i64 %sub.ptr.sub, %conv, !dbg !48
  br i1 %cmp, label %if.then, label %if.end, !dbg !49

if.then:                                          ; preds = %entry
  %tmp3 = load i32, i32* @LEX_LEN, align 4, !dbg !50
  %add = add i32 %tmp3, 256, !dbg !52
  store i32 %add, i32* @LEX_LEN, align 4, !dbg !53
  %tmp4 = load i32, i32* @LEX_LEN, align 4, !dbg !54
  %conv2 = zext i32 %tmp4 to i64, !dbg !54
  %call = call noalias i8* @calloc(i64 %conv2, i64 1) #4, !dbg !55
  call void @llvm.dbg.value(metadata i8* %call, i64 0, metadata !56, metadata !57), !dbg !58
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !59, metadata !57), !dbg !61
  br label %for.cond, !dbg !62

for.cond:                                         ; preds = %for.inc, %if.then
  %I.0 = phi i32 [ 0, %if.then ], [ %inc, %for.inc ]
  %tmp6 = load i32, i32* @LEX_LEN, align 4, !dbg !64
  %sub3 = sub i32 %tmp6, 256, !dbg !66
  %cmp4 = icmp ult i32 %I.0, %sub3, !dbg !67
  br i1 %cmp4, label %for.body, label %for.end, !dbg !68

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %I.0 to i64, !dbg !69
  %tmp8 = load i8*, i8** @LEXEME, align 8, !dbg !69
  %arrayidx = getelementptr inbounds i8, i8* %tmp8, i64 %idxprom, !dbg !69
  %tmp9 = load i8, i8* %arrayidx, align 1, !dbg !69
  %idxprom6 = sext i32 %I.0 to i64, !dbg !70
  %arrayidx7 = getelementptr inbounds i8, i8* %call, i64 %idxprom6, !dbg !70
  store i8 %tmp9, i8* %arrayidx7, align 1, !dbg !71
  br label %for.inc, !dbg !70

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %I.0, 1, !dbg !72
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !59, metadata !57), !dbg !61
  br label %for.cond, !dbg !73

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !74

if.end:                                           ; preds = %for.end, %entry
  %tmp13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !75
  %call8 = call i32 @_IO_getc(%struct._IO_FILE* %tmp13), !dbg !75
  %conv9 = trunc i32 %call8 to i8, !dbg !75
  store i8 %conv9, i8* @CH, align 1, !dbg !76
  %tmp14 = load i8*, i8** @FRONT, align 8, !dbg !77
  %incdec.ptr = getelementptr inbounds i8, i8* %tmp14, i32 1, !dbg !77
  store i8* %incdec.ptr, i8** @FRONT, align 8, !dbg !77
  %tmp15 = load i8, i8* @CH, align 1, !dbg !78
  %tmp16 = load i8*, i8** @FRONT, align 8, !dbg !79
  store i8 %tmp15, i8* %tmp16, align 1, !dbg !80
  %tmp17 = load i8*, i8** @FRONT, align 8, !dbg !81
  %add.ptr = getelementptr inbounds i8, i8* %tmp17, i64 1, !dbg !82
  store i8 0, i8* %add.ptr, align 1, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

declare i32 @_IO_getc(%struct._IO_FILE*) #3

; Function Attrs: nounwind uwtable
define void @BACKUP() #0 {
entry:
  %tmp = load i8*, i8** @FRONT, align 8, !dbg !85
  %tmp1 = load i8*, i8** @BACK, align 8, !dbg !87
  %cmp = icmp ult i8* %tmp, %tmp1, !dbg !88
  br i1 %cmp, label %if.then, label %if.else, !dbg !89

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i32 0, i32 0), i32 0), !dbg !90
  br label %if.end, !dbg !91

if.else:                                          ; preds = %entry
  %tmp2 = load i8, i8* @CH, align 1, !dbg !92
  %conv = sext i8 %tmp2 to i32, !dbg !92
  %tmp3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !94
  %call1 = call i32 @ungetc(i32 %conv, %struct._IO_FILE* %tmp3), !dbg !95
  %tmp4 = load i8*, i8** @FRONT, align 8, !dbg !96
  store i8 0, i8* %tmp4, align 1, !dbg !97
  %tmp5 = load i8*, i8** @FRONT, align 8, !dbg !98
  %incdec.ptr = getelementptr inbounds i8, i8* %tmp5, i32 -1, !dbg !98
  store i8* %incdec.ptr, i8** @FRONT, align 8, !dbg !98
  %tmp6 = load i8*, i8** @FRONT, align 8, !dbg !99
  %tmp7 = load i8, i8* %tmp6, align 1, !dbg !100
  store i8 %tmp7, i8* @CH, align 1, !dbg !101
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !102
}

declare i32 @printf(i8*, ...) #3

declare i32 @ungetc(i32, %struct._IO_FILE*) #3

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!19, !20}
!llvm.ident = !{!21}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3, globals: !10)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Prolangs-C/fixoutput")
!2 = !{}
!3 = !{!4, !8, !9}
!4 = !DISubprogram(name: "FLUSH", scope: !5, file: !5, line: 21, type: !6, isLocal: false, isDefinition: true, scopeLine: 24, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @FLUSH, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Prolangs-C/fixoutput/tmp.c", directory: "/home/gleison/tf/Benchmarks/Prolangs-C/fixoutput")
!6 = !DISubroutineType(types: !7)
!7 = !{null}
!8 = !DISubprogram(name: "GETCHR", scope: !5, file: !5, line: 38, type: !6, isLocal: false, isDefinition: true, scopeLine: 40, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @GETCHR, variables: !2)
!9 = !DISubprogram(name: "BACKUP", scope: !5, file: !5, line: 60, type: !6, isLocal: false, isDefinition: true, scopeLine: 63, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @BACKUP, variables: !2)
!10 = !{!11, !13, !15, !17, !18}
!11 = !DIGlobalVariable(name: "LEX_LEN", scope: !0, file: !5, line: 16, type: !12, isLocal: false, isDefinition: true, variable: i32* @LEX_LEN)
!12 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!13 = !DIGlobalVariable(name: "CH", scope: !0, file: !5, line: 12, type: !14, isLocal: false, isDefinition: true, variable: i8* @CH)
!14 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!15 = !DIGlobalVariable(name: "LEXEME", scope: !0, file: !5, line: 13, type: !16, isLocal: false, isDefinition: true, variable: i8** @LEXEME)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!17 = !DIGlobalVariable(name: "FRONT", scope: !0, file: !5, line: 15, type: !16, isLocal: false, isDefinition: true, variable: i8** @FRONT)
!18 = !DIGlobalVariable(name: "BACK", scope: !0, file: !5, line: 15, type: !16, isLocal: false, isDefinition: true, variable: i8** @BACK)
!19 = !{i32 2, !"Dwarf Version", i32 4}
!20 = !{i32 2, !"Debug Info Version", i32 3}
!21 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!22 = !DILocation(line: 26, column: 7, scope: !23)
!23 = distinct !DILexicalBlock(scope: !4, file: !5, line: 26, column: 7)
!24 = !DILocation(line: 26, column: 15, scope: !23)
!25 = !DILocation(line: 26, column: 7, scope: !4)
!26 = !DILocation(line: 27, column: 10, scope: !27)
!27 = distinct !DILexicalBlock(scope: !23, file: !5, line: 26, column: 31)
!28 = !DILocation(line: 27, column: 5, scope: !27)
!29 = !DILocation(line: 28, column: 13, scope: !27)
!30 = !DILocation(line: 29, column: 21, scope: !27)
!31 = !DILocation(line: 29, column: 14, scope: !27)
!32 = !DILocation(line: 29, column: 12, scope: !27)
!33 = !DILocation(line: 30, column: 3, scope: !27)
!34 = !DILocation(line: 32, column: 4, scope: !4)
!35 = !DILocation(line: 32, column: 11, scope: !4)
!36 = !DILocation(line: 34, column: 10, scope: !4)
!37 = !DILocation(line: 34, column: 8, scope: !4)
!38 = !DILocation(line: 35, column: 11, scope: !4)
!39 = !DILocation(line: 35, column: 16, scope: !4)
!40 = !DILocation(line: 35, column: 9, scope: !4)
!41 = !DILocation(line: 36, column: 1, scope: !4)
!42 = !DILocation(line: 45, column: 7, scope: !43)
!43 = distinct !DILexicalBlock(scope: !8, file: !5, line: 45, column: 7)
!44 = !DILocation(line: 45, column: 15, scope: !43)
!45 = !DILocation(line: 45, column: 13, scope: !43)
!46 = !DILocation(line: 45, column: 23, scope: !43)
!47 = !DILocation(line: 45, column: 31, scope: !43)
!48 = !DILocation(line: 45, column: 20, scope: !43)
!49 = !DILocation(line: 45, column: 7, scope: !8)
!50 = !DILocation(line: 46, column: 15, scope: !51)
!51 = distinct !DILexicalBlock(scope: !43, file: !5, line: 45, column: 36)
!52 = !DILocation(line: 46, column: 23, scope: !51)
!53 = !DILocation(line: 46, column: 13, scope: !51)
!54 = !DILocation(line: 47, column: 19, scope: !51)
!55 = !DILocation(line: 47, column: 12, scope: !51)
!56 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "TEMP", scope: !8, file: !5, line: 41, type: !16)
!57 = !DIExpression()
!58 = !DILocation(line: 41, column: 9, scope: !8)
!59 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "I", scope: !8, file: !5, line: 42, type: !60)
!60 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!61 = !DILocation(line: 42, column: 7, scope: !8)
!62 = !DILocation(line: 48, column: 10, scope: !63)
!63 = distinct !DILexicalBlock(scope: !51, file: !5, line: 48, column: 5)
!64 = !DILocation(line: 48, column: 21, scope: !65)
!65 = distinct !DILexicalBlock(scope: !63, file: !5, line: 48, column: 5)
!66 = !DILocation(line: 48, column: 29, scope: !65)
!67 = !DILocation(line: 48, column: 19, scope: !65)
!68 = !DILocation(line: 48, column: 5, scope: !63)
!69 = !DILocation(line: 49, column: 17, scope: !65)
!70 = !DILocation(line: 49, column: 7, scope: !65)
!71 = !DILocation(line: 49, column: 15, scope: !65)
!72 = !DILocation(line: 48, column: 46, scope: !65)
!73 = !DILocation(line: 48, column: 5, scope: !65)
!74 = !DILocation(line: 50, column: 3, scope: !51)
!75 = !DILocation(line: 53, column: 8, scope: !8)
!76 = !DILocation(line: 53, column: 6, scope: !8)
!77 = !DILocation(line: 55, column: 8, scope: !8)
!78 = !DILocation(line: 56, column: 12, scope: !8)
!79 = !DILocation(line: 56, column: 4, scope: !8)
!80 = !DILocation(line: 56, column: 10, scope: !8)
!81 = !DILocation(line: 57, column: 5, scope: !8)
!82 = !DILocation(line: 57, column: 11, scope: !8)
!83 = !DILocation(line: 57, column: 16, scope: !8)
!84 = !DILocation(line: 58, column: 1, scope: !8)
!85 = !DILocation(line: 64, column: 7, scope: !86)
!86 = distinct !DILexicalBlock(scope: !9, file: !5, line: 64, column: 7)
!87 = !DILocation(line: 64, column: 15, scope: !86)
!88 = !DILocation(line: 64, column: 13, scope: !86)
!89 = !DILocation(line: 64, column: 7, scope: !9)
!90 = !DILocation(line: 65, column: 11, scope: !86)
!91 = !DILocation(line: 65, column: 5, scope: !86)
!92 = !DILocation(line: 70, column: 18, scope: !93)
!93 = distinct !DILexicalBlock(scope: !86, file: !5, line: 68, column: 8)
!94 = !DILocation(line: 70, column: 22, scope: !93)
!95 = !DILocation(line: 70, column: 11, scope: !93)
!96 = !DILocation(line: 72, column: 6, scope: !93)
!97 = !DILocation(line: 72, column: 12, scope: !93)
!98 = !DILocation(line: 73, column: 10, scope: !93)
!99 = !DILocation(line: 74, column: 11, scope: !93)
!100 = !DILocation(line: 74, column: 10, scope: !93)
!101 = !DILocation(line: 74, column: 8, scope: !93)
!102 = !DILocation(line: 76, column: 1, scope: !9)
