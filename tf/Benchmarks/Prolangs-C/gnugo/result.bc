; ModuleID = '/home/gleison/tf/Benchmarks/Prolangs-C/gnugo/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@lib = external global i32, align 4
@umove = external global i32, align 4
@p = external global [19 x [19 x i8]], align 16
@mymove = external global i32, align 4
@l = external global [19 x [19 x i8]], align 16
@uik = external global i32, align 4
@ujk = external global i32, align 4

; Function Attrs: nounwind uwtable
define i32 @suicide(i32 %i, i32 %j) #0 {
entry:
  %retval = alloca i32, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !12, metadata !13), !dbg !14
  store i32 %j, i32* %j.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %j.addr, metadata !15, metadata !13), !dbg !16
  call void @llvm.dbg.declare(metadata i32* %m, metadata !17, metadata !13), !dbg !18
  call void @llvm.dbg.declare(metadata i32* %n, metadata !19, metadata !13), !dbg !20
  call void @llvm.dbg.declare(metadata i32* %k, metadata !21, metadata !13), !dbg !22
  store i32 0, i32* @lib, align 4, !dbg !23
  %0 = load i32, i32* %i.addr, align 4, !dbg !24
  %1 = load i32, i32* %j.addr, align 4, !dbg !25
  %2 = load i32, i32* @umove, align 4, !dbg !26
  call void @countlib(i32 %0, i32 %1, i32 %2), !dbg !27
  %3 = load i32, i32* @lib, align 4, !dbg !28
  %cmp = icmp eq i32 %3, 0, !dbg !30
  br i1 %cmp, label %if.then, label %if.else.40, !dbg !31

if.then:                                          ; preds = %entry
  %4 = load i32, i32* @umove, align 4, !dbg !32
  %conv = trunc i32 %4 to i8, !dbg !32
  %5 = load i32, i32* %j.addr, align 4, !dbg !34
  %idxprom = sext i32 %5 to i64, !dbg !35
  %6 = load i32, i32* %i.addr, align 4, !dbg !36
  %idxprom1 = sext i32 %6 to i64, !dbg !35
  %arrayidx = getelementptr inbounds [19 x [19 x i8]], [19 x [19 x i8]]* @p, i32 0, i64 %idxprom1, !dbg !35
  %arrayidx2 = getelementptr inbounds [19 x i8], [19 x i8]* %arrayidx, i32 0, i64 %idxprom, !dbg !35
  store i8 %conv, i8* %arrayidx2, align 1, !dbg !37
  %7 = load i32, i32* @mymove, align 4, !dbg !38
  call void @eval(i32 %7), !dbg !39
  store i32 0, i32* %k, align 4, !dbg !40
  store i32 0, i32* %m, align 4, !dbg !41
  br label %for.cond, !dbg !43

for.cond:                                         ; preds = %for.inc.22, %if.then
  %8 = load i32, i32* %m, align 4, !dbg !44
  %cmp3 = icmp slt i32 %8, 19, !dbg !48
  br i1 %cmp3, label %for.body, label %for.end.24, !dbg !49

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %n, align 4, !dbg !50
  br label %for.cond.5, !dbg !52

for.cond.5:                                       ; preds = %for.inc, %for.body
  %9 = load i32, i32* %n, align 4, !dbg !53
  %cmp6 = icmp slt i32 %9, 19, !dbg !57
  br i1 %cmp6, label %for.body.8, label %for.end, !dbg !58

for.body.8:                                       ; preds = %for.cond.5
  %10 = load i32, i32* %n, align 4, !dbg !59
  %idxprom9 = sext i32 %10 to i64, !dbg !61
  %11 = load i32, i32* %m, align 4, !dbg !62
  %idxprom10 = sext i32 %11 to i64, !dbg !61
  %arrayidx11 = getelementptr inbounds [19 x [19 x i8]], [19 x [19 x i8]]* @p, i32 0, i64 %idxprom10, !dbg !61
  %arrayidx12 = getelementptr inbounds [19 x i8], [19 x i8]* %arrayidx11, i32 0, i64 %idxprom9, !dbg !61
  %12 = load i8, i8* %arrayidx12, align 1, !dbg !61
  %conv13 = zext i8 %12 to i32, !dbg !61
  %13 = load i32, i32* @mymove, align 4, !dbg !63
  %cmp14 = icmp eq i32 %conv13, %13, !dbg !64
  br i1 %cmp14, label %land.lhs.true, label %if.end, !dbg !65

land.lhs.true:                                    ; preds = %for.body.8
  %14 = load i32, i32* %n, align 4, !dbg !66
  %idxprom16 = sext i32 %14 to i64, !dbg !68
  %15 = load i32, i32* %m, align 4, !dbg !69
  %idxprom17 = sext i32 %15 to i64, !dbg !68
  %arrayidx18 = getelementptr inbounds [19 x [19 x i8]], [19 x [19 x i8]]* @l, i32 0, i64 %idxprom17, !dbg !68
  %arrayidx19 = getelementptr inbounds [19 x i8], [19 x i8]* %arrayidx18, i32 0, i64 %idxprom16, !dbg !68
  %16 = load i8, i8* %arrayidx19, align 1, !dbg !68
  %tobool = icmp ne i8 %16, 0, !dbg !68
  br i1 %tobool, label %if.end, label %if.then.20, !dbg !70

if.then.20:                                       ; preds = %land.lhs.true
  %17 = load i32, i32* %k, align 4, !dbg !71
  %inc = add nsw i32 %17, 1, !dbg !71
  store i32 %inc, i32* %k, align 4, !dbg !71
  br label %if.end, !dbg !71

if.end:                                           ; preds = %if.then.20, %land.lhs.true, %for.body.8
  br label %for.inc, !dbg !72

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %n, align 4, !dbg !75
  %inc21 = add nsw i32 %18, 1, !dbg !75
  store i32 %inc21, i32* %n, align 4, !dbg !75
  br label %for.cond.5, !dbg !76

for.end:                                          ; preds = %for.cond.5
  br label %for.inc.22, !dbg !77

for.inc.22:                                       ; preds = %for.end
  %19 = load i32, i32* %m, align 4, !dbg !78
  %inc23 = add nsw i32 %19, 1, !dbg !78
  store i32 %inc23, i32* %m, align 4, !dbg !78
  br label %for.cond, !dbg !79

for.end.24:                                       ; preds = %for.cond
  %20 = load i32, i32* %k, align 4, !dbg !80
  %cmp25 = icmp eq i32 %20, 0, !dbg !82
  br i1 %cmp25, label %if.then.35, label %lor.lhs.false, !dbg !83

lor.lhs.false:                                    ; preds = %for.end.24
  %21 = load i32, i32* %k, align 4, !dbg !84
  %cmp27 = icmp eq i32 %21, 1, !dbg !86
  br i1 %cmp27, label %land.lhs.true.29, label %if.else, !dbg !87

land.lhs.true.29:                                 ; preds = %lor.lhs.false
  %22 = load i32, i32* %i.addr, align 4, !dbg !88
  %23 = load i32, i32* @uik, align 4, !dbg !90
  %cmp30 = icmp eq i32 %22, %23, !dbg !91
  br i1 %cmp30, label %land.lhs.true.32, label %if.else, !dbg !92

land.lhs.true.32:                                 ; preds = %land.lhs.true.29
  %24 = load i32, i32* %j.addr, align 4, !dbg !93
  %25 = load i32, i32* @ujk, align 4, !dbg !95
  %cmp33 = icmp eq i32 %24, %25, !dbg !96
  br i1 %cmp33, label %if.then.35, label %if.else, !dbg !97

if.then.35:                                       ; preds = %land.lhs.true.32, %for.end.24
  %26 = load i32, i32* %j.addr, align 4, !dbg !98
  %idxprom36 = sext i32 %26 to i64, !dbg !100
  %27 = load i32, i32* %i.addr, align 4, !dbg !101
  %idxprom37 = sext i32 %27 to i64, !dbg !100
  %arrayidx38 = getelementptr inbounds [19 x [19 x i8]], [19 x [19 x i8]]* @p, i32 0, i64 %idxprom37, !dbg !100
  %arrayidx39 = getelementptr inbounds [19 x i8], [19 x i8]* %arrayidx38, i32 0, i64 %idxprom36, !dbg !100
  store i8 0, i8* %arrayidx39, align 1, !dbg !102
  store i32 1, i32* %retval, !dbg !103
  br label %return, !dbg !103

if.else:                                          ; preds = %land.lhs.true.32, %land.lhs.true.29, %lor.lhs.false
  store i32 0, i32* %retval, !dbg !104
  br label %return, !dbg !104

if.else.40:                                       ; preds = %entry
  store i32 0, i32* %retval, !dbg !105
  br label %return, !dbg !105

return:                                           ; preds = %if.else.40, %if.else, %if.then.35
  %28 = load i32, i32* %retval, !dbg !106
  ret i32 %28, !dbg !106
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @countlib(i32, i32, i32) #2

declare void @eval(i32) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!9, !10}
!llvm.ident = !{!11}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Prolangs-C/gnugo")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "suicide", scope: !5, file: !5, line: 48, type: !6, isLocal: false, isDefinition: true, scopeLine: 50, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i32)* @suicide, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Prolangs-C/gnugo/tmp.c", directory: "/home/gleison/tf/Benchmarks/Prolangs-C/gnugo")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8, !8}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !{i32 2, !"Dwarf Version", i32 4}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!12 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 1, scope: !4, file: !5, line: 48, type: !8)
!13 = !DIExpression()
!14 = !DILocation(line: 48, column: 17, scope: !4)
!15 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "j", arg: 2, scope: !4, file: !5, line: 48, type: !8)
!16 = !DILocation(line: 48, column: 24, scope: !4)
!17 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !4, file: !5, line: 51, type: !8)
!18 = !DILocation(line: 51, column: 7, scope: !4)
!19 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !4, file: !5, line: 51, type: !8)
!20 = !DILocation(line: 51, column: 10, scope: !4)
!21 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !4, file: !5, line: 51, type: !8)
!22 = !DILocation(line: 51, column: 13, scope: !4)
!23 = !DILocation(line: 54, column: 7, scope: !4)
!24 = !DILocation(line: 55, column: 12, scope: !4)
!25 = !DILocation(line: 55, column: 15, scope: !4)
!26 = !DILocation(line: 55, column: 18, scope: !4)
!27 = !DILocation(line: 55, column: 3, scope: !4)
!28 = !DILocation(line: 56, column: 7, scope: !29)
!29 = distinct !DILexicalBlock(scope: !4, file: !5, line: 56, column: 7)
!30 = !DILocation(line: 56, column: 11, scope: !29)
!31 = !DILocation(line: 56, column: 7, scope: !4)
!32 = !DILocation(line: 60, column: 15, scope: !33)
!33 = distinct !DILexicalBlock(scope: !29, file: !5, line: 58, column: 3)
!34 = !DILocation(line: 60, column: 10, scope: !33)
!35 = !DILocation(line: 60, column: 5, scope: !33)
!36 = !DILocation(line: 60, column: 7, scope: !33)
!37 = !DILocation(line: 60, column: 13, scope: !33)
!38 = !DILocation(line: 63, column: 10, scope: !33)
!39 = !DILocation(line: 63, column: 5, scope: !33)
!40 = !DILocation(line: 64, column: 7, scope: !33)
!41 = !DILocation(line: 66, column: 12, scope: !42)
!42 = distinct !DILexicalBlock(scope: !33, file: !5, line: 66, column: 5)
!43 = !DILocation(line: 66, column: 10, scope: !42)
!44 = !DILocation(line: 66, column: 17, scope: !45)
!45 = !DILexicalBlockFile(scope: !46, file: !5, discriminator: 2)
!46 = !DILexicalBlockFile(scope: !47, file: !5, discriminator: 1)
!47 = distinct !DILexicalBlock(scope: !42, file: !5, line: 66, column: 5)
!48 = !DILocation(line: 66, column: 19, scope: !47)
!49 = !DILocation(line: 66, column: 5, scope: !42)
!50 = !DILocation(line: 67, column: 14, scope: !51)
!51 = distinct !DILexicalBlock(scope: !47, file: !5, line: 67, column: 7)
!52 = !DILocation(line: 67, column: 12, scope: !51)
!53 = !DILocation(line: 67, column: 19, scope: !54)
!54 = !DILexicalBlockFile(scope: !55, file: !5, discriminator: 2)
!55 = !DILexicalBlockFile(scope: !56, file: !5, discriminator: 1)
!56 = distinct !DILexicalBlock(scope: !51, file: !5, line: 67, column: 7)
!57 = !DILocation(line: 67, column: 21, scope: !56)
!58 = !DILocation(line: 67, column: 7, scope: !51)
!59 = !DILocation(line: 69, column: 19, scope: !60)
!60 = distinct !DILexicalBlock(scope: !56, file: !5, line: 69, column: 13)
!61 = !DILocation(line: 69, column: 14, scope: !60)
!62 = !DILocation(line: 69, column: 16, scope: !60)
!63 = !DILocation(line: 69, column: 25, scope: !60)
!64 = !DILocation(line: 69, column: 22, scope: !60)
!65 = !DILocation(line: 69, column: 33, scope: !60)
!66 = !DILocation(line: 69, column: 42, scope: !67)
!67 = !DILexicalBlockFile(scope: !60, file: !5, discriminator: 1)
!68 = !DILocation(line: 69, column: 37, scope: !60)
!69 = !DILocation(line: 69, column: 39, scope: !60)
!70 = !DILocation(line: 69, column: 13, scope: !56)
!71 = !DILocation(line: 70, column: 11, scope: !60)
!72 = !DILocation(line: 69, column: 43, scope: !73)
!73 = !DILexicalBlockFile(scope: !74, file: !5, discriminator: 3)
!74 = !DILexicalBlockFile(scope: !60, file: !5, discriminator: 2)
!75 = !DILocation(line: 67, column: 28, scope: !56)
!76 = !DILocation(line: 67, column: 7, scope: !56)
!77 = !DILocation(line: 70, column: 13, scope: !51)
!78 = !DILocation(line: 66, column: 26, scope: !47)
!79 = !DILocation(line: 66, column: 5, scope: !47)
!80 = !DILocation(line: 72, column: 10, scope: !81)
!81 = distinct !DILexicalBlock(scope: !33, file: !5, line: 72, column: 9)
!82 = !DILocation(line: 72, column: 12, scope: !81)
!83 = !DILocation(line: 72, column: 18, scope: !81)
!84 = !DILocation(line: 72, column: 22, scope: !85)
!85 = !DILexicalBlockFile(scope: !81, file: !5, discriminator: 1)
!86 = !DILocation(line: 72, column: 24, scope: !81)
!87 = !DILocation(line: 72, column: 29, scope: !81)
!88 = !DILocation(line: 72, column: 34, scope: !89)
!89 = !DILexicalBlockFile(scope: !81, file: !5, discriminator: 2)
!90 = !DILocation(line: 72, column: 39, scope: !81)
!91 = !DILocation(line: 72, column: 36, scope: !81)
!92 = !DILocation(line: 72, column: 44, scope: !81)
!93 = !DILocation(line: 72, column: 48, scope: !94)
!94 = !DILexicalBlockFile(scope: !81, file: !5, discriminator: 3)
!95 = !DILocation(line: 72, column: 53, scope: !81)
!96 = !DILocation(line: 72, column: 50, scope: !81)
!97 = !DILocation(line: 72, column: 9, scope: !33)
!98 = !DILocation(line: 75, column: 12, scope: !99)
!99 = distinct !DILexicalBlock(scope: !81, file: !5, line: 74, column: 5)
!100 = !DILocation(line: 75, column: 7, scope: !99)
!101 = !DILocation(line: 75, column: 9, scope: !99)
!102 = !DILocation(line: 75, column: 15, scope: !99)
!103 = !DILocation(line: 76, column: 7, scope: !99)
!104 = !DILocation(line: 79, column: 7, scope: !81)
!105 = !DILocation(line: 82, column: 5, scope: !29)
!106 = !DILocation(line: 83, column: 1, scope: !4)
