; ModuleID = '/home/gleison/tf/Benchmarks/MallocBench/make/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.child = type { %struct.child*, %struct.file*, i8**, i8**, i32, i8*, i32, i8 }
%struct.file = type { %struct.file*, i8*, %struct.dep*, %struct.commands*, i8*, %struct.dep*, i64, %struct.file*, %struct.file*, %struct.variable_set_list*, %struct.file*, i16, i16 }
%struct.commands = type { i8*, i32, i8*, i32, i8**, i8*, i8 }
%struct.dep = type opaque
%struct.variable_set_list = type { %struct.variable_set_list*, %struct.variable_set* }
%struct.variable_set = type { %struct.variable**, i32 }
%struct.variable = type { %struct.variable*, i8*, i8*, i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%union.__WAIT_STATUS = type { %union.wait* }
%union.wait = type { i32 }
%union.anon.14 = type { i32 }
%union.anon.15 = type { i32 }
%union.anon.16 = type { i32 }
%union.anon.17 = type { i32 }
%struct.rusage = type { %struct.timeval, %struct.timeval, %union.anon, %union.anon.1, %union.anon.2, %union.anon.3, %union.anon.4, %union.anon.5, %union.anon.6, %union.anon.7, %union.anon.8, %union.anon.9, %union.anon.10, %union.anon.11, %union.anon.12, %union.anon.13 }
%struct.timeval = type { i64, i64 }
%union.anon = type { i64 }
%union.anon.1 = type { i64 }
%union.anon.2 = type { i64 }
%union.anon.3 = type { i64 }
%union.anon.4 = type { i64 }
%union.anon.5 = type { i64 }
%union.anon.6 = type { i64 }
%union.anon.7 = type { i64 }
%union.anon.8 = type { i64 }
%union.anon.9 = type { i64 }
%union.anon.10 = type { i64 }
%union.anon.11 = type { i64 }
%union.anon.12 = type { i64 }
%union.anon.13 = type { i64 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }

@default_shell = global [8 x i8] c"/bin/sh\00", align 1
@children = global %struct.child* null, align 8
@job_slots_used = global i32 0, align 4
@signals_blocked_p_stack = internal global i8* null, align 8
@signals_blocked_p_max = internal global i32 0, align 4
@signals_blocked_p_depth = internal global i32 0, align 4
@shell_function_pid = external global i32, align 4
@shell_function_completed = external global i32, align 4
@.str = private unnamed_addr constant [17 x i8] c"Unknown%s job %d\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c" remote\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@ignore_errors_flag = external global i32, align 4
@.str.3 = private unnamed_addr constant [13 x i8] c"%s finished.\00", align 1
@good_stdin_used = internal global i32 0, align 4
@.str.4 = private unnamed_addr constant [55 x i8] c"internal error: `%s' command_state %d in child_handler\00", align 1
@keep_going_flag = external global i32, align 4
@stdout = external global %struct._IO_FILE*, align 8
@.str.5 = private unnamed_addr constant [36 x i8] c"*** Waiting for unfinished jobs....\00", align 1
@job_slots = external global i32, align 4
@.str.6 = private unnamed_addr constant [52 x i8] c"internal error: `%s' command_state == %d in new_job\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"SHELL=\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"PATH=\00", align 1
@.str.9 = private unnamed_addr constant [22 x i8] c"%s: Command not found\00", align 1
@.str.10 = private unnamed_addr constant [28 x i8] c"%s: Shell program not found\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"execve: \00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"$(SHELL)\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"$(IFS)\00", align 1
@fatal_signal_mask = external global i32, align 4
@.str.14 = private unnamed_addr constant [11 x i8] c" (ignored)\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"*** [%s] Error %d%s\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c" (core dumped)\00", align 1
@.str.17 = private unnamed_addr constant [14 x i8] c"*** [%s] %s%s\00", align 1
@sys_siglist = external constant [65 x i8*], align 16
@.str.18 = private unnamed_addr constant [21 x i8] c"*** [%s] Signal %d%s\00", align 1
@start_job.bad_stdin = internal global i32 -1, align 4
@question_flag = external global i32, align 4
@just_print_flag = external global i32, align 4
@silent_flag = external global i32, align 4
@stderr = external global %struct._IO_FILE*, align 8
@.str.19 = private unnamed_addr constant [6 x i8] c"vfork\00", align 1
@default_path = internal global [15 x i8] c":/bin:/usr/bin\00", align 1
@search_path.ngroups = internal global i32 -1, align 4
@search_path.groups = internal global [65536 x i32] zeroinitializer, align 16
@construct_command_argv_internal.sh_chars = internal global [19 x i8] c"#;\22*?[]&|<>(){}=$`\00", align 16
@construct_command_argv_internal.sh_cmds = internal global [25 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i32 0, i32 0), i8* null], align 16
@.str.20 = private unnamed_addr constant [3 x i8] c"cd\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"eval\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"exec\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"exit\00", align 1
@.str.24 = private unnamed_addr constant [6 x i8] c"login\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"logout\00", align 1
@.str.26 = private unnamed_addr constant [4 x i8] c"set\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"umask\00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"wait\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"while\00", align 1
@.str.30 = private unnamed_addr constant [4 x i8] c"for\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c"case\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"if\00", align 1
@.str.33 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"break\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"continue\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"export\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"read\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"readonly\00", align 1
@.str.40 = private unnamed_addr constant [6 x i8] c"shift\00", align 1
@.str.41 = private unnamed_addr constant [6 x i8] c"times\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c"trap\00", align 1
@.str.43 = private unnamed_addr constant [7 x i8] c"switch\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"-c\00", align 1
@construct_command_argv_internal.minus_c = internal global [5 x i8] c" -c \00", align 1

; Function Attrs: nounwind uwtable
define void @push_signals_blocked_p(i32 %flag) #0 {
entry:
  %flag.addr = alloca i32, align 4
  %blocked = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flag.addr, metadata !307, metadata !308), !dbg !309
  call void @llvm.dbg.declare(metadata i32* %blocked, metadata !310, metadata !308), !dbg !311
  %0 = load i8*, i8** @signals_blocked_p_stack, align 8, !dbg !312
  %cmp = icmp eq i8* %0, null, !dbg !314
  br i1 %cmp, label %if.then, label %if.else, !dbg !315

if.then:                                          ; preds = %entry
  store i32 8, i32* @signals_blocked_p_max, align 4, !dbg !316
  %call = call i8* (i32, ...) bitcast (i8* (...)* @xmalloc to i8* (i32, ...)*)(i32 8), !dbg !318
  store i8* %call, i8** @signals_blocked_p_stack, align 8, !dbg !319
  store i32 1, i32* @signals_blocked_p_depth, align 4, !dbg !320
  %1 = load i32, i32* %flag.addr, align 4, !dbg !321
  %conv = trunc i32 %1 to i8, !dbg !321
  %2 = load i8*, i8** @signals_blocked_p_stack, align 8, !dbg !322
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0, !dbg !322
  store i8 %conv, i8* %arrayidx, align 1, !dbg !323
  store i32 0, i32* %blocked, align 4, !dbg !324
  br label %if.end.13, !dbg !325

if.else:                                          ; preds = %entry
  %3 = load i32, i32* @signals_blocked_p_depth, align 4, !dbg !326
  %4 = load i32, i32* @signals_blocked_p_max, align 4, !dbg !329
  %cmp1 = icmp eq i32 %3, %4, !dbg !330
  br i1 %cmp1, label %if.then.3, label %if.end, !dbg !331

if.then.3:                                        ; preds = %if.else
  %5 = load i32, i32* @signals_blocked_p_max, align 4, !dbg !332
  %add = add i32 %5, 8, !dbg !332
  store i32 %add, i32* @signals_blocked_p_max, align 4, !dbg !332
  %6 = load i8*, i8** @signals_blocked_p_stack, align 8, !dbg !334
  %7 = load i32, i32* @signals_blocked_p_max, align 4, !dbg !335
  %call4 = call i8* (i8*, i32, ...) bitcast (i8* (...)* @xrealloc to i8* (i8*, i32, ...)*)(i8* %6, i32 %7), !dbg !336
  store i8* %call4, i8** @signals_blocked_p_stack, align 8, !dbg !337
  br label %if.end, !dbg !338

if.end:                                           ; preds = %if.then.3, %if.else
  %8 = load i32, i32* @signals_blocked_p_depth, align 4, !dbg !339
  %cmp5 = icmp ugt i32 %8, 0, !dbg !340
  br i1 %cmp5, label %land.rhs, label %land.end, !dbg !341

land.rhs:                                         ; preds = %if.end
  %9 = load i32, i32* @signals_blocked_p_depth, align 4, !dbg !342
  %sub = sub i32 %9, 1, !dbg !344
  %idxprom = zext i32 %sub to i64, !dbg !345
  %10 = load i8*, i8** @signals_blocked_p_stack, align 8, !dbg !345
  %arrayidx7 = getelementptr inbounds i8, i8* %10, i64 %idxprom, !dbg !345
  %11 = load i8, i8* %arrayidx7, align 1, !dbg !345
  %conv8 = sext i8 %11 to i32, !dbg !345
  %tobool = icmp ne i32 %conv8, 0, !dbg !341
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %12 = phi i1 [ false, %if.end ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %12 to i32, !dbg !346
  store i32 %land.ext, i32* %blocked, align 4, !dbg !348
  %13 = load i32, i32* %flag.addr, align 4, !dbg !349
  %conv9 = trunc i32 %13 to i8, !dbg !349
  %14 = load i32, i32* @signals_blocked_p_depth, align 4, !dbg !350
  %inc = add i32 %14, 1, !dbg !350
  store i32 %inc, i32* @signals_blocked_p_depth, align 4, !dbg !350
  %sub10 = sub i32 %inc, 1, !dbg !351
  %idxprom11 = zext i32 %sub10 to i64, !dbg !352
  %15 = load i8*, i8** @signals_blocked_p_stack, align 8, !dbg !352
  %arrayidx12 = getelementptr inbounds i8, i8* %15, i64 %idxprom11, !dbg !352
  store i8 %conv9, i8* %arrayidx12, align 1, !dbg !353
  br label %if.end.13

if.end.13:                                        ; preds = %land.end, %if.then
  %16 = load i32, i32* %blocked, align 4, !dbg !354
  %tobool14 = icmp ne i32 %16, 0, !dbg !354
  br i1 %tobool14, label %land.lhs.true, label %if.else.17, !dbg !356

land.lhs.true:                                    ; preds = %if.end.13
  %17 = load i32, i32* %flag.addr, align 4, !dbg !357
  %tobool15 = icmp ne i32 %17, 0, !dbg !357
  br i1 %tobool15, label %if.else.17, label %if.then.16, !dbg !359

if.then.16:                                       ; preds = %land.lhs.true
  call void @unblock_signals(), !dbg !360
  br label %if.end.23, !dbg !360

if.else.17:                                       ; preds = %land.lhs.true, %if.end.13
  %18 = load i32, i32* %flag.addr, align 4, !dbg !361
  %tobool18 = icmp ne i32 %18, 0, !dbg !361
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.22, !dbg !363

land.lhs.true.19:                                 ; preds = %if.else.17
  %19 = load i32, i32* %blocked, align 4, !dbg !364
  %tobool20 = icmp ne i32 %19, 0, !dbg !364
  br i1 %tobool20, label %if.end.22, label %if.then.21, !dbg !366

if.then.21:                                       ; preds = %land.lhs.true.19
  call void @block_signals(), !dbg !367
  br label %if.end.22, !dbg !367

if.end.22:                                        ; preds = %if.then.21, %land.lhs.true.19, %if.else.17
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.then.16
  ret void, !dbg !368
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i8* @xmalloc(...) #2

declare i8* @xrealloc(...) #2

; Function Attrs: nounwind uwtable
define void @pop_signals_blocked_p() #0 {
entry:
  %blocked = alloca i32, align 4
  %block = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %blocked, metadata !369, metadata !308), !dbg !370
  call void @llvm.dbg.declare(metadata i32* %block, metadata !371, metadata !308), !dbg !372
  %0 = load i32, i32* @signals_blocked_p_depth, align 4, !dbg !373
  %cmp = icmp ugt i32 %0, 0, !dbg !374
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !375

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* @signals_blocked_p_depth, align 4, !dbg !376
  %dec = add i32 %1, -1, !dbg !376
  store i32 %dec, i32* @signals_blocked_p_depth, align 4, !dbg !376
  %sub = sub i32 %1, 1, !dbg !378
  %idxprom = zext i32 %sub to i64, !dbg !379
  %2 = load i8*, i8** @signals_blocked_p_stack, align 8, !dbg !379
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom, !dbg !379
  %3 = load i8, i8* %arrayidx, align 1, !dbg !379
  %conv = sext i8 %3 to i32, !dbg !379
  %tobool = icmp ne i32 %conv, 0, !dbg !375
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %4 to i32, !dbg !380
  store i32 %land.ext, i32* %blocked, align 4, !dbg !382
  %5 = load i32, i32* @signals_blocked_p_depth, align 4, !dbg !383
  %cmp1 = icmp ugt i32 %5, 0, !dbg !384
  br i1 %cmp1, label %land.rhs.3, label %land.end.9, !dbg !385

land.rhs.3:                                       ; preds = %land.end
  %6 = load i32, i32* @signals_blocked_p_depth, align 4, !dbg !386
  %sub4 = sub i32 %6, 1, !dbg !387
  %idxprom5 = zext i32 %sub4 to i64, !dbg !388
  %7 = load i8*, i8** @signals_blocked_p_stack, align 8, !dbg !388
  %arrayidx6 = getelementptr inbounds i8, i8* %7, i64 %idxprom5, !dbg !388
  %8 = load i8, i8* %arrayidx6, align 1, !dbg !388
  %conv7 = sext i8 %8 to i32, !dbg !388
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !385
  br label %land.end.9

land.end.9:                                       ; preds = %land.rhs.3, %land.end
  %9 = phi i1 [ false, %land.end ], [ %tobool8, %land.rhs.3 ]
  %land.ext10 = zext i1 %9 to i32, !dbg !389
  store i32 %land.ext10, i32* %block, align 4, !dbg !390
  %10 = load i32, i32* %block, align 4, !dbg !391
  %tobool11 = icmp ne i32 %10, 0, !dbg !391
  br i1 %tobool11, label %land.lhs.true, label %if.else, !dbg !393

land.lhs.true:                                    ; preds = %land.end.9
  %11 = load i32, i32* %blocked, align 4, !dbg !394
  %tobool12 = icmp ne i32 %11, 0, !dbg !394
  br i1 %tobool12, label %if.else, label %if.then, !dbg !396

if.then:                                          ; preds = %land.lhs.true
  call void @block_signals(), !dbg !397
  br label %if.end.17, !dbg !397

if.else:                                          ; preds = %land.lhs.true, %land.end.9
  %12 = load i32, i32* %blocked, align 4, !dbg !398
  %tobool13 = icmp ne i32 %12, 0, !dbg !398
  br i1 %tobool13, label %land.lhs.true.14, label %if.end, !dbg !400

land.lhs.true.14:                                 ; preds = %if.else
  %13 = load i32, i32* %block, align 4, !dbg !401
  %tobool15 = icmp ne i32 %13, 0, !dbg !401
  br i1 %tobool15, label %if.end, label %if.then.16, !dbg !403

if.then.16:                                       ; preds = %land.lhs.true.14
  call void @unblock_signals(), !dbg !404
  br label %if.end, !dbg !404

if.end:                                           ; preds = %if.then.16, %land.lhs.true.14, %if.else
  br label %if.end.17

if.end.17:                                        ; preds = %if.end, %if.then
  ret void, !dbg !405
}

; Function Attrs: nounwind uwtable
define i32 @child_handler(i32 %sig) #0 {
entry:
  %sig.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %dead_children = alloca i32, align 4
  %remote = alloca i32, align 4
  %pid = alloca i32, align 4
  %exit_code = alloca i32, align 4
  %exit_sig = alloca i32, align 4
  %coredump = alloca i32, align 4
  %lastc = alloca %struct.child*, align 8
  %c = alloca %struct.child*, align 8
  %child_failed = alloca i32, align 4
  %agg.tmp = alloca %union.__WAIT_STATUS, align 8
  %agg.tmp6 = alloca %union.__WAIT_STATUS, align 8
  %.compoundliteral = alloca %union.anon.14, align 4
  %.compoundliteral13 = alloca %union.anon.15, align 4
  %.compoundliteral21 = alloca %union.anon.16, align 4
  %.compoundliteral25 = alloca %union.anon.17, align 4
  %buf = alloca [100 x i8], align 16
  store i32 %sig, i32* %sig.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sig.addr, metadata !406, metadata !308), !dbg !407
  call void @llvm.dbg.declare(metadata i32* %status, metadata !408, metadata !308), !dbg !409
  call void @llvm.dbg.declare(metadata i32* %dead_children, metadata !410, metadata !308), !dbg !411
  store i32 0, i32* %dead_children, align 4, !dbg !411
  %0 = load i32, i32* %sig.addr, align 4, !dbg !412
  %cmp = icmp sgt i32 %0, 0, !dbg !414
  br i1 %cmp, label %if.then, label %if.end, !dbg !415

if.then:                                          ; preds = %entry
  call void @block_signals(), !dbg !416
  br label %if.end, !dbg !416

if.end:                                           ; preds = %if.then, %entry
  br label %while.body, !dbg !417

while.body:                                       ; preds = %if.end, %if.else.49, %sw.bb, %if.end.144
  call void @llvm.dbg.declare(metadata i32* %remote, metadata !418, metadata !308), !dbg !420
  store i32 0, i32* %remote, align 4, !dbg !420
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !421, metadata !308), !dbg !422
  call void @llvm.dbg.declare(metadata i32* %exit_code, metadata !423, metadata !308), !dbg !424
  call void @llvm.dbg.declare(metadata i32* %exit_sig, metadata !425, metadata !308), !dbg !426
  call void @llvm.dbg.declare(metadata i32* %coredump, metadata !427, metadata !308), !dbg !428
  call void @llvm.dbg.declare(metadata %struct.child** %lastc, metadata !429, metadata !308), !dbg !430
  call void @llvm.dbg.declare(metadata %struct.child** %c, metadata !431, metadata !308), !dbg !432
  call void @llvm.dbg.declare(metadata i32* %child_failed, metadata !433, metadata !308), !dbg !434
  %call = call i32 (i32*, i32*, i32*, i32, ...) bitcast (i32 (...)* @remote_status to i32 (i32*, i32*, i32*, i32, ...)*)(i32* %exit_code, i32* %exit_sig, i32* %coredump, i32 0), !dbg !435
  store i32 %call, i32* %pid, align 4, !dbg !436
  %1 = load i32, i32* %pid, align 4, !dbg !437
  %cmp1 = icmp slt i32 %1, 0, !dbg !439
  br i1 %cmp1, label %if.then.2, label %if.else.30, !dbg !440

if.then.2:                                        ; preds = %while.body
  %2 = load i32, i32* %sig.addr, align 4, !dbg !441
  %cmp3 = icmp sgt i32 %2, 0, !dbg !444
  br i1 %cmp3, label %if.then.4, label %if.else, !dbg !445

if.then.4:                                        ; preds = %if.then.2
  %__uptr = bitcast %union.__WAIT_STATUS* %agg.tmp to %union.wait**, !dbg !446
  %3 = bitcast i32* %status to %union.wait*, !dbg !446
  store %union.wait* %3, %union.wait** %__uptr, align 8, !dbg !446
  %coerce.dive = getelementptr %union.__WAIT_STATUS, %union.__WAIT_STATUS* %agg.tmp, i32 0, i32 0, !dbg !446
  %4 = load %union.wait*, %union.wait** %coerce.dive, align 8, !dbg !446
  %call5 = call i32 @wait3(%union.wait* %4, i32 1, %struct.rusage* null) #9, !dbg !446
  store i32 %call5, i32* %pid, align 4, !dbg !447
  br label %if.end.9, !dbg !448

if.else:                                          ; preds = %if.then.2
  %__iptr = bitcast %union.__WAIT_STATUS* %agg.tmp6 to i32**, !dbg !449
  store i32* %status, i32** %__iptr, align 8, !dbg !449
  %coerce.dive7 = getelementptr %union.__WAIT_STATUS, %union.__WAIT_STATUS* %agg.tmp6, i32 0, i32 0, !dbg !450
  %5 = load %union.wait*, %union.wait** %coerce.dive7, align 8, !dbg !450
  %call8 = call i32 @wait(%union.wait* %5), !dbg !450
  store i32 %call8, i32* %pid, align 4, !dbg !451
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.4
  %6 = load i32, i32* %pid, align 4, !dbg !452
  %cmp10 = icmp sle i32 %6, 0, !dbg !454
  br i1 %cmp10, label %if.then.11, label %if.else.12, !dbg !455

if.then.11:                                       ; preds = %if.end.9
  br label %while.end, !dbg !456

if.else.12:                                       ; preds = %if.end.9
  %__in = bitcast %union.anon.14* %.compoundliteral to i32*, !dbg !457
  %7 = load i32, i32* %status, align 4, !dbg !457
  store i32 %7, i32* %__in, align 4, !dbg !457
  %__i = bitcast %union.anon.14* %.compoundliteral to i32*, !dbg !457
  %8 = load i32, i32* %__i, align 4, !dbg !457
  %and = and i32 %8, 65280, !dbg !457
  %shr = ashr i32 %and, 8, !dbg !457
  store i32 %shr, i32* %exit_code, align 4, !dbg !459
  %__in14 = bitcast %union.anon.15* %.compoundliteral13 to i32*, !dbg !460
  %9 = load i32, i32* %status, align 4, !dbg !460
  store i32 %9, i32* %__in14, align 4, !dbg !460
  %__i15 = bitcast %union.anon.15* %.compoundliteral13 to i32*, !dbg !460
  %10 = load i32, i32* %__i15, align 4, !dbg !460
  %and16 = and i32 %10, 127, !dbg !460
  %add = add nsw i32 %and16, 1, !dbg !460
  %conv = trunc i32 %add to i8, !dbg !460
  %conv17 = sext i8 %conv to i32, !dbg !460
  %shr18 = ashr i32 %conv17, 1, !dbg !460
  %cmp19 = icmp sgt i32 %shr18, 0, !dbg !460
  br i1 %cmp19, label %cond.true, label %cond.false, !dbg !460

cond.true:                                        ; preds = %if.else.12
  %__in22 = bitcast %union.anon.16* %.compoundliteral21 to i32*, !dbg !461
  %11 = load i32, i32* %status, align 4, !dbg !461
  store i32 %11, i32* %__in22, align 4, !dbg !461
  %__i23 = bitcast %union.anon.16* %.compoundliteral21 to i32*, !dbg !461
  %12 = load i32, i32* %__i23, align 4, !dbg !461
  %and24 = and i32 %12, 127, !dbg !461
  br label %cond.end, !dbg !460

cond.false:                                       ; preds = %if.else.12
  br label %cond.end, !dbg !463

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and24, %cond.true ], [ 0, %cond.false ], !dbg !460
  store i32 %cond, i32* %exit_sig, align 4, !dbg !465
  %__in26 = bitcast %union.anon.17* %.compoundliteral25 to i32*, !dbg !468
  %13 = load i32, i32* %status, align 4, !dbg !468
  store i32 %13, i32* %__in26, align 4, !dbg !468
  %__i27 = bitcast %union.anon.17* %.compoundliteral25 to i32*, !dbg !468
  %14 = load i32, i32* %__i27, align 4, !dbg !468
  %and28 = and i32 %14, 128, !dbg !468
  store i32 %and28, i32* %coredump, align 4, !dbg !469
  br label %if.end.29

if.end.29:                                        ; preds = %cond.end
  br label %if.end.31, !dbg !470

if.else.30:                                       ; preds = %while.body
  store i32 1, i32* %remote, align 4, !dbg !471
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.30, %if.end.29
  %15 = load i32, i32* %remote, align 4, !dbg !472
  %tobool = icmp ne i32 %15, 0, !dbg !472
  br i1 %tobool, label %if.end.50, label %land.lhs.true, !dbg !474

land.lhs.true:                                    ; preds = %if.end.31
  %16 = load i32, i32* %pid, align 4, !dbg !475
  %17 = load i32, i32* @shell_function_pid, align 4, !dbg !477
  %cmp32 = icmp eq i32 %16, %17, !dbg !478
  br i1 %cmp32, label %if.then.34, label %if.end.50, !dbg !479

if.then.34:                                       ; preds = %land.lhs.true
  %18 = load i32, i32* %exit_sig, align 4, !dbg !480
  %cmp35 = icmp eq i32 %18, 0, !dbg !483
  br i1 %cmp35, label %land.lhs.true.37, label %if.else.41, !dbg !484

land.lhs.true.37:                                 ; preds = %if.then.34
  %19 = load i32, i32* %exit_code, align 4, !dbg !485
  %cmp38 = icmp eq i32 %19, 127, !dbg !487
  br i1 %cmp38, label %if.then.40, label %if.else.41, !dbg !488

if.then.40:                                       ; preds = %land.lhs.true.37
  store i32 -1, i32* @shell_function_completed, align 4, !dbg !489
  br label %if.end.42, !dbg !490

if.else.41:                                       ; preds = %land.lhs.true.37, %if.then.34
  store i32 1, i32* @shell_function_completed, align 4, !dbg !491
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.41, %if.then.40
  %20 = load i32, i32* %dead_children, align 4, !dbg !492
  %inc = add i32 %20, 1, !dbg !492
  store i32 %inc, i32* %dead_children, align 4, !dbg !492
  %21 = load i32, i32* %sig.addr, align 4, !dbg !493
  %cmp43 = icmp slt i32 %21, 0, !dbg !495
  br i1 %cmp43, label %land.lhs.true.45, label %if.else.49, !dbg !496

land.lhs.true.45:                                 ; preds = %if.end.42
  %22 = load i32, i32* %dead_children, align 4, !dbg !497
  %23 = load i32, i32* %sig.addr, align 4, !dbg !499
  %sub = sub nsw i32 0, %23, !dbg !500
  %cmp46 = icmp eq i32 %22, %sub, !dbg !501
  br i1 %cmp46, label %if.then.48, label %if.else.49, !dbg !502

if.then.48:                                       ; preds = %land.lhs.true.45
  br label %while.end, !dbg !503

if.else.49:                                       ; preds = %land.lhs.true.45, %if.end.42
  br label %while.body, !dbg !504

if.end.50:                                        ; preds = %land.lhs.true, %if.end.31
  %24 = load i32, i32* %exit_sig, align 4, !dbg !505
  %cmp51 = icmp ne i32 %24, 0, !dbg !506
  br i1 %cmp51, label %lor.end, label %lor.rhs, !dbg !507

lor.rhs:                                          ; preds = %if.end.50
  %25 = load i32, i32* %exit_code, align 4, !dbg !508
  %cmp53 = icmp ne i32 %25, 0, !dbg !510
  br label %lor.end, !dbg !507

lor.end:                                          ; preds = %lor.rhs, %if.end.50
  %26 = phi i1 [ true, %if.end.50 ], [ %cmp53, %lor.rhs ]
  %lor.ext = zext i1 %26 to i32, !dbg !511
  store i32 %lor.ext, i32* %child_failed, align 4, !dbg !514
  store %struct.child* null, %struct.child** %lastc, align 8, !dbg !515
  %27 = load %struct.child*, %struct.child** @children, align 8, !dbg !516
  store %struct.child* %27, %struct.child** %c, align 8, !dbg !518
  br label %for.cond, !dbg !519

for.cond:                                         ; preds = %for.inc, %lor.end
  %28 = load %struct.child*, %struct.child** %c, align 8, !dbg !520
  %cmp55 = icmp ne %struct.child* %28, null, !dbg !524
  br i1 %cmp55, label %for.body, label %for.end, !dbg !525

for.body:                                         ; preds = %for.cond
  %29 = load %struct.child*, %struct.child** %c, align 8, !dbg !526
  %remote57 = getelementptr inbounds %struct.child, %struct.child* %29, i32 0, i32 7, !dbg !528
  %bf.load = load i8, i8* %remote57, align 4, !dbg !528
  %bf.clear = and i8 %bf.load, 1, !dbg !528
  %bf.cast = zext i8 %bf.clear to i32, !dbg !528
  %30 = load i32, i32* %remote, align 4, !dbg !529
  %cmp58 = icmp eq i32 %bf.cast, %30, !dbg !530
  br i1 %cmp58, label %land.lhs.true.60, label %if.end.65, !dbg !531

land.lhs.true.60:                                 ; preds = %for.body
  %31 = load %struct.child*, %struct.child** %c, align 8, !dbg !532
  %pid61 = getelementptr inbounds %struct.child, %struct.child* %31, i32 0, i32 6, !dbg !534
  %32 = load i32, i32* %pid61, align 4, !dbg !534
  %33 = load i32, i32* %pid, align 4, !dbg !535
  %cmp62 = icmp eq i32 %32, %33, !dbg !536
  br i1 %cmp62, label %if.then.64, label %if.end.65, !dbg !537

if.then.64:                                       ; preds = %land.lhs.true.60
  br label %for.end, !dbg !538

if.end.65:                                        ; preds = %land.lhs.true.60, %for.body
  br label %for.inc, !dbg !539

for.inc:                                          ; preds = %if.end.65
  %34 = load %struct.child*, %struct.child** %c, align 8, !dbg !542
  store %struct.child* %34, %struct.child** %lastc, align 8, !dbg !543
  %35 = load %struct.child*, %struct.child** %c, align 8, !dbg !544
  %next = getelementptr inbounds %struct.child, %struct.child* %35, i32 0, i32 0, !dbg !545
  %36 = load %struct.child*, %struct.child** %next, align 8, !dbg !545
  store %struct.child* %36, %struct.child** %c, align 8, !dbg !546
  br label %for.cond, !dbg !547

for.end:                                          ; preds = %if.then.64, %for.cond
  %37 = load %struct.child*, %struct.child** %c, align 8, !dbg !548
  %cmp66 = icmp eq %struct.child* %37, null, !dbg !550
  br i1 %cmp66, label %if.then.68, label %if.else.78, !dbg !551

if.then.68:                                       ; preds = %for.end
  call void @llvm.dbg.declare(metadata [100 x i8]* %buf, metadata !552, metadata !308), !dbg !557
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0, !dbg !558
  %38 = load i32, i32* %remote, align 4, !dbg !559
  %tobool69 = icmp ne i32 %38, 0, !dbg !559
  %cond70 = select i1 %tobool69, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0), !dbg !559
  %39 = load i32, i32* %pid, align 4, !dbg !560
  %call71 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), i8* %cond70, i32 %39) #9, !dbg !561
  %40 = load i32, i32* %child_failed, align 4, !dbg !562
  %tobool72 = icmp ne i32 %40, 0, !dbg !562
  br i1 %tobool72, label %if.then.73, label %if.else.75, !dbg !564

if.then.73:                                       ; preds = %if.then.68
  %arraydecay74 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0, !dbg !565
  %41 = load i32, i32* %exit_code, align 4, !dbg !566
  %42 = load i32, i32* %exit_sig, align 4, !dbg !567
  %43 = load i32, i32* %coredump, align 4, !dbg !568
  %44 = load i32, i32* @ignore_errors_flag, align 4, !dbg !569
  call void @child_error(i8* %arraydecay74, i32 %41, i32 %42, i32 %43, i32 %44), !dbg !570
  br label %if.end.77, !dbg !570

if.else.75:                                       ; preds = %if.then.68
  %arraydecay76 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0, !dbg !571
  call void (i8*, i8*, ...) bitcast (void (...)* @error to void (i8*, i8*, ...)*)(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay76), !dbg !572
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.75, %if.then.73
  br label %if.end.144, !dbg !573

if.else.78:                                       ; preds = %for.end
  %45 = load %struct.child*, %struct.child** %c, align 8, !dbg !574
  %good_stdin = getelementptr inbounds %struct.child, %struct.child* %45, i32 0, i32 7, !dbg !577
  %bf.load79 = load i8, i8* %good_stdin, align 4, !dbg !577
  %bf.lshr = lshr i8 %bf.load79, 2, !dbg !577
  %bf.clear80 = and i8 %bf.lshr, 1, !dbg !577
  %bf.cast81 = zext i8 %bf.clear80 to i32, !dbg !577
  %tobool82 = icmp ne i32 %bf.cast81, 0, !dbg !574
  br i1 %tobool82, label %if.then.83, label %if.end.84, !dbg !578

if.then.83:                                       ; preds = %if.else.78
  store i32 0, i32* @good_stdin_used, align 4, !dbg !579
  br label %if.end.84, !dbg !580

if.end.84:                                        ; preds = %if.then.83, %if.else.78
  %46 = load i32, i32* %child_failed, align 4, !dbg !581
  %tobool85 = icmp ne i32 %46, 0, !dbg !581
  br i1 %tobool85, label %land.lhs.true.86, label %if.else.100, !dbg !583

land.lhs.true.86:                                 ; preds = %if.end.84
  %47 = load %struct.child*, %struct.child** %c, align 8, !dbg !584
  %noerror = getelementptr inbounds %struct.child, %struct.child* %47, i32 0, i32 7, !dbg !586
  %bf.load87 = load i8, i8* %noerror, align 4, !dbg !586
  %bf.lshr88 = lshr i8 %bf.load87, 1, !dbg !586
  %bf.clear89 = and i8 %bf.lshr88, 1, !dbg !586
  %bf.cast90 = zext i8 %bf.clear89 to i32, !dbg !586
  %tobool91 = icmp ne i32 %bf.cast90, 0, !dbg !587
  br i1 %tobool91, label %if.else.100, label %land.lhs.true.92, !dbg !588

land.lhs.true.92:                                 ; preds = %land.lhs.true.86
  %48 = load i32, i32* @ignore_errors_flag, align 4, !dbg !589
  %tobool93 = icmp ne i32 %48, 0, !dbg !589
  br i1 %tobool93, label %if.else.100, label %if.then.94, !dbg !591

if.then.94:                                       ; preds = %land.lhs.true.92
  %49 = load %struct.child*, %struct.child** %c, align 8, !dbg !592
  %file = getelementptr inbounds %struct.child, %struct.child* %49, i32 0, i32 1, !dbg !594
  %50 = load %struct.file*, %struct.file** %file, align 8, !dbg !594
  %name = getelementptr inbounds %struct.file, %struct.file* %50, i32 0, i32 1, !dbg !595
  %51 = load i8*, i8** %name, align 8, !dbg !595
  %52 = load i32, i32* %exit_code, align 4, !dbg !596
  %53 = load i32, i32* %exit_sig, align 4, !dbg !597
  %54 = load i32, i32* %coredump, align 4, !dbg !598
  call void @child_error(i8* %51, i32 %52, i32 %53, i32 %54, i32 0), !dbg !599
  %55 = load %struct.child*, %struct.child** %c, align 8, !dbg !600
  %file95 = getelementptr inbounds %struct.child, %struct.child* %55, i32 0, i32 1, !dbg !601
  %56 = load %struct.file*, %struct.file** %file95, align 8, !dbg !601
  %update_status = getelementptr inbounds %struct.file, %struct.file* %56, i32 0, i32 11, !dbg !602
  store i16 1, i16* %update_status, align 2, !dbg !603
  %57 = load i32, i32* %exit_sig, align 4, !dbg !604
  %cmp96 = icmp ne i32 %57, 0, !dbg !606
  br i1 %cmp96, label %if.then.98, label %if.end.99, !dbg !607

if.then.98:                                       ; preds = %if.then.94
  %58 = load %struct.child*, %struct.child** %c, align 8, !dbg !608
  call void (%struct.child*, ...) bitcast (void (...)* @delete_child_targets to void (%struct.child*, ...)*)(%struct.child* %58), !dbg !609
  br label %if.end.99, !dbg !609

if.end.99:                                        ; preds = %if.then.98, %if.then.94
  br label %if.end.120, !dbg !610

if.else.100:                                      ; preds = %land.lhs.true.92, %land.lhs.true.86, %if.end.84
  %59 = load i32, i32* %child_failed, align 4, !dbg !611
  %tobool101 = icmp ne i32 %59, 0, !dbg !611
  br i1 %tobool101, label %if.then.102, label %if.end.105, !dbg !614

if.then.102:                                      ; preds = %if.else.100
  %60 = load %struct.child*, %struct.child** %c, align 8, !dbg !615
  %file103 = getelementptr inbounds %struct.child, %struct.child* %60, i32 0, i32 1, !dbg !617
  %61 = load %struct.file*, %struct.file** %file103, align 8, !dbg !617
  %name104 = getelementptr inbounds %struct.file, %struct.file* %61, i32 0, i32 1, !dbg !618
  %62 = load i8*, i8** %name104, align 8, !dbg !618
  %63 = load i32, i32* %exit_code, align 4, !dbg !619
  %64 = load i32, i32* %exit_sig, align 4, !dbg !620
  %65 = load i32, i32* %coredump, align 4, !dbg !621
  call void @child_error(i8* %62, i32 %63, i32 %64, i32 %65, i32 1), !dbg !622
  store i32 0, i32* %child_failed, align 4, !dbg !623
  br label %if.end.105, !dbg !624

if.end.105:                                       ; preds = %if.then.102, %if.else.100
  %66 = load %struct.child*, %struct.child** %c, align 8, !dbg !625
  call void @start_job(%struct.child* %66), !dbg !626
  %67 = load %struct.child*, %struct.child** %c, align 8, !dbg !627
  %file106 = getelementptr inbounds %struct.child, %struct.child* %67, i32 0, i32 1, !dbg !628
  %68 = load %struct.file*, %struct.file** %file106, align 8, !dbg !628
  %command_state = getelementptr inbounds %struct.file, %struct.file* %68, i32 0, i32 12, !dbg !629
  %bf.load107 = load i16, i16* %command_state, align 2, !dbg !629
  %bf.clear108 = and i16 %bf.load107, 3, !dbg !629
  %bf.cast109 = zext i16 %bf.clear108 to i32, !dbg !629
  switch i32 %bf.cast109, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.110
  ], !dbg !630

sw.bb:                                            ; preds = %if.end.105
  br label %while.body, !dbg !631

sw.bb.110:                                        ; preds = %if.end.105
  %69 = load %struct.child*, %struct.child** %c, align 8, !dbg !633
  %file111 = getelementptr inbounds %struct.child, %struct.child* %69, i32 0, i32 1, !dbg !635
  %70 = load %struct.file*, %struct.file** %file111, align 8, !dbg !635
  %update_status112 = getelementptr inbounds %struct.file, %struct.file* %70, i32 0, i32 11, !dbg !636
  %71 = load i16, i16* %update_status112, align 2, !dbg !636
  %conv113 = sext i16 %71 to i32, !dbg !633
  %cmp114 = icmp ne i32 %conv113, 0, !dbg !637
  br i1 %cmp114, label %if.then.116, label %if.end.117, !dbg !638

if.then.116:                                      ; preds = %sw.bb.110
  %72 = load %struct.child*, %struct.child** %c, align 8, !dbg !639
  call void (%struct.child*, ...) bitcast (void (...)* @delete_child_targets to void (%struct.child*, ...)*)(%struct.child* %72), !dbg !641
  br label %if.end.117, !dbg !642

if.end.117:                                       ; preds = %if.then.116, %sw.bb.110
  br label %sw.epilog, !dbg !643

sw.default:                                       ; preds = %if.end.105
  %73 = load %struct.child*, %struct.child** %c, align 8, !dbg !644
  %file118 = getelementptr inbounds %struct.child, %struct.child* %73, i32 0, i32 1, !dbg !645
  %74 = load %struct.file*, %struct.file** %file118, align 8, !dbg !645
  %name119 = getelementptr inbounds %struct.file, %struct.file* %74, i32 0, i32 1, !dbg !646
  %75 = load i8*, i8** %name119, align 8, !dbg !646
  call void (i8*, i8*, ...) bitcast (void (...)* @error to void (i8*, i8*, ...)*)(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i32 0, i32 0), i8* %75), !dbg !647
  call void @abort() #10, !dbg !648
  unreachable, !dbg !648

sw.epilog:                                        ; preds = %if.end.117
  br label %if.end.120

if.end.120:                                       ; preds = %sw.epilog, %if.end.99
  %76 = load %struct.child*, %struct.child** %c, align 8, !dbg !649
  %file121 = getelementptr inbounds %struct.child, %struct.child* %76, i32 0, i32 1, !dbg !650
  %77 = load %struct.file*, %struct.file** %file121, align 8, !dbg !650
  call void (%struct.file*, ...) bitcast (void (...)* @notice_finished_file to void (%struct.file*, ...)*)(%struct.file* %77), !dbg !651
  %78 = load %struct.child*, %struct.child** %lastc, align 8, !dbg !652
  %cmp122 = icmp eq %struct.child* %78, null, !dbg !654
  br i1 %cmp122, label %if.then.124, label %if.else.126, !dbg !655

if.then.124:                                      ; preds = %if.end.120
  %79 = load %struct.child*, %struct.child** %c, align 8, !dbg !656
  %next125 = getelementptr inbounds %struct.child, %struct.child* %79, i32 0, i32 0, !dbg !657
  %80 = load %struct.child*, %struct.child** %next125, align 8, !dbg !657
  store %struct.child* %80, %struct.child** @children, align 8, !dbg !658
  br label %if.end.129, !dbg !659

if.else.126:                                      ; preds = %if.end.120
  %81 = load %struct.child*, %struct.child** %c, align 8, !dbg !660
  %next127 = getelementptr inbounds %struct.child, %struct.child* %81, i32 0, i32 0, !dbg !661
  %82 = load %struct.child*, %struct.child** %next127, align 8, !dbg !661
  %83 = load %struct.child*, %struct.child** %lastc, align 8, !dbg !662
  %next128 = getelementptr inbounds %struct.child, %struct.child* %83, i32 0, i32 0, !dbg !663
  store %struct.child* %82, %struct.child** %next128, align 8, !dbg !664
  br label %if.end.129

if.end.129:                                       ; preds = %if.else.126, %if.then.124
  %84 = load %struct.child*, %struct.child** %c, align 8, !dbg !665
  call void @free_child(%struct.child* %84), !dbg !666
  %85 = load i32, i32* @job_slots_used, align 4, !dbg !667
  %dec = add i32 %85, -1, !dbg !667
  store i32 %dec, i32* @job_slots_used, align 4, !dbg !667
  %86 = load i32, i32* %child_failed, align 4, !dbg !668
  %tobool130 = icmp ne i32 %86, 0, !dbg !668
  br i1 %tobool130, label %land.lhs.true.131, label %if.end.134, !dbg !670

land.lhs.true.131:                                ; preds = %if.end.129
  %87 = load i32, i32* @keep_going_flag, align 4, !dbg !671
  %tobool132 = icmp ne i32 %87, 0, !dbg !671
  br i1 %tobool132, label %if.end.134, label %if.then.133, !dbg !673

if.then.133:                                      ; preds = %land.lhs.true.131
  call void (i32, ...) bitcast (void (...)* @die to void (i32, ...)*)(i32 1), !dbg !674
  br label %if.end.134, !dbg !674

if.end.134:                                       ; preds = %if.then.133, %land.lhs.true.131, %if.end.129
  %88 = load i32, i32* %dead_children, align 4, !dbg !675
  %inc135 = add i32 %88, 1, !dbg !675
  store i32 %inc135, i32* %dead_children, align 4, !dbg !675
  %89 = load i32, i32* %sig.addr, align 4, !dbg !676
  %cmp136 = icmp slt i32 %89, 0, !dbg !678
  br i1 %cmp136, label %land.lhs.true.138, label %if.end.143, !dbg !679

land.lhs.true.138:                                ; preds = %if.end.134
  %90 = load i32, i32* %dead_children, align 4, !dbg !680
  %91 = load i32, i32* %sig.addr, align 4, !dbg !682
  %sub139 = sub nsw i32 0, %91, !dbg !683
  %cmp140 = icmp eq i32 %90, %sub139, !dbg !684
  br i1 %cmp140, label %if.then.142, label %if.end.143, !dbg !685

if.then.142:                                      ; preds = %land.lhs.true.138
  br label %while.end, !dbg !686

if.end.143:                                       ; preds = %land.lhs.true.138, %if.end.134
  br label %if.end.144

if.end.144:                                       ; preds = %if.end.143, %if.end.77
  br label %while.body, !dbg !417

while.end:                                        ; preds = %if.then.142, %if.then.48, %if.then.11
  %92 = load i32, i32* %sig.addr, align 4, !dbg !687
  %cmp145 = icmp sgt i32 %92, 0, !dbg !689
  br i1 %cmp145, label %if.then.147, label %if.end.148, !dbg !690

if.then.147:                                      ; preds = %while.end
  call void @unblock_signals(), !dbg !691
  br label %if.end.148, !dbg !691

if.end.148:                                       ; preds = %if.then.147, %while.end
  ret i32 0, !dbg !692
}

declare i32 @remote_status(...) #2

; Function Attrs: nounwind
declare i32 @wait3(%union.wait*, i32, %struct.rusage*) #3

declare i32 @wait(%union.wait*) #2

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #3

; Function Attrs: nounwind uwtable
define internal void @child_error(i8* %target_name, i32 %exit_code, i32 %exit_sig, i32 %coredump, i32 %ignored) #0 {
entry:
  %target_name.addr = alloca i8*, align 8
  %exit_code.addr = alloca i32, align 4
  %exit_sig.addr = alloca i32, align 4
  %coredump.addr = alloca i32, align 4
  %ignored.addr = alloca i32, align 4
  %ignore_string = alloca i8*, align 8
  %coredump_string = alloca i8*, align 8
  store i8* %target_name, i8** %target_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %target_name.addr, metadata !693, metadata !308), !dbg !694
  store i32 %exit_code, i32* %exit_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exit_code.addr, metadata !695, metadata !308), !dbg !696
  store i32 %exit_sig, i32* %exit_sig.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exit_sig.addr, metadata !697, metadata !308), !dbg !698
  store i32 %coredump, i32* %coredump.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %coredump.addr, metadata !699, metadata !308), !dbg !700
  store i32 %ignored, i32* %ignored.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ignored.addr, metadata !701, metadata !308), !dbg !702
  call void @llvm.dbg.declare(metadata i8** %ignore_string, metadata !703, metadata !308), !dbg !704
  %0 = load i32, i32* %ignored.addr, align 4, !dbg !705
  %tobool = icmp ne i32 %0, 0, !dbg !705
  %cond = select i1 %tobool, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0), !dbg !705
  store i8* %cond, i8** %ignore_string, align 8, !dbg !704
  %1 = load i32, i32* %exit_sig.addr, align 4, !dbg !706
  %cmp = icmp eq i32 %1, 0, !dbg !708
  br i1 %cmp, label %if.then, label %if.else, !dbg !709

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %target_name.addr, align 8, !dbg !710
  %3 = load i32, i32* %exit_code.addr, align 4, !dbg !711
  %4 = load i8*, i8** %ignore_string, align 8, !dbg !712
  call void (i8*, i8*, i32, i8*, ...) bitcast (void (...)* @error to void (i8*, i8*, i32, i8*, ...)*)(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i32 0, i32 0), i8* %2, i32 %3, i8* %4), !dbg !713
  br label %if.end.7, !dbg !713

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %coredump_string, metadata !714, metadata !308), !dbg !716
  %5 = load i32, i32* %coredump.addr, align 4, !dbg !717
  %tobool1 = icmp ne i32 %5, 0, !dbg !717
  %cond2 = select i1 %tobool1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0), !dbg !717
  store i8* %cond2, i8** %coredump_string, align 8, !dbg !716
  %6 = load i32, i32* %exit_sig.addr, align 4, !dbg !718
  %cmp3 = icmp sgt i32 %6, 0, !dbg !720
  br i1 %cmp3, label %land.lhs.true, label %if.else.6, !dbg !721

land.lhs.true:                                    ; preds = %if.else
  %7 = load i32, i32* %exit_sig.addr, align 4, !dbg !722
  %cmp4 = icmp slt i32 %7, 65, !dbg !724
  br i1 %cmp4, label %if.then.5, label %if.else.6, !dbg !725

if.then.5:                                        ; preds = %land.lhs.true
  %8 = load i8*, i8** %target_name.addr, align 8, !dbg !726
  %9 = load i32, i32* %exit_sig.addr, align 4, !dbg !727
  %idxprom = sext i32 %9 to i64, !dbg !728
  %arrayidx = getelementptr inbounds [65 x i8*], [65 x i8*]* @sys_siglist, i32 0, i64 %idxprom, !dbg !728
  %10 = load i8*, i8** %arrayidx, align 8, !dbg !728
  %11 = load i8*, i8** %coredump_string, align 8, !dbg !729
  call void (i8*, i8*, i8*, i8*, ...) bitcast (void (...)* @error to void (i8*, i8*, i8*, i8*, ...)*)(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i32 0, i32 0), i8* %8, i8* %10, i8* %11), !dbg !730
  br label %if.end, !dbg !730

if.else.6:                                        ; preds = %land.lhs.true, %if.else
  %12 = load i8*, i8** %target_name.addr, align 8, !dbg !731
  %13 = load i32, i32* %exit_sig.addr, align 4, !dbg !732
  %14 = load i8*, i8** %coredump_string, align 8, !dbg !733
  call void (i8*, i8*, i32, i8*, ...) bitcast (void (...)* @error to void (i8*, i8*, i32, i8*, ...)*)(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i32 0, i32 0), i8* %12, i32 %13, i8* %14), !dbg !734
  br label %if.end

if.end:                                           ; preds = %if.else.6, %if.then.5
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %if.then
  ret void, !dbg !735
}

declare void @error(...) #2

declare void @delete_child_targets(...) #2

; Function Attrs: noreturn nounwind
declare void @abort() #4

declare void @notice_finished_file(...) #2

declare void @die(...) #2

; Function Attrs: nounwind uwtable
define void @wait_for_children(i32 %n, i32 %err) #0 {
entry:
  %n.addr = alloca i32, align 4
  %err.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !736, metadata !308), !dbg !737
  store i32 %err, i32* %err.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %err.addr, metadata !738, metadata !308), !dbg !739
  call void @push_signals_blocked_p(i32 1), !dbg !740
  %0 = load i32, i32* %err.addr, align 4, !dbg !741
  %tobool = icmp ne i32 %0, 0, !dbg !741
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !743

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.child*, %struct.child** @children, align 8, !dbg !744
  %cmp = icmp ne %struct.child* %1, null, !dbg !746
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !747

lor.lhs.false:                                    ; preds = %land.lhs.true
  %2 = load i32, i32* @shell_function_pid, align 4, !dbg !748
  %cmp1 = icmp ne i32 %2, 0, !dbg !750
  br i1 %cmp1, label %if.then, label %if.end, !dbg !751

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !752
  %call = call i32 @fflush(%struct._IO_FILE* %3), !dbg !754
  call void (i8*, ...) bitcast (void (...)* @error to void (i8*, ...)*)(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i32 0, i32 0)), !dbg !755
  br label %if.end, !dbg !756

if.end:                                           ; preds = %if.then, %lor.lhs.false, %entry
  %4 = load i32, i32* %n.addr, align 4, !dbg !757
  %sub = sub nsw i32 0, %4, !dbg !758
  %call2 = call i32 @child_handler(i32 %sub), !dbg !759
  call void @pop_signals_blocked_p(), !dbg !760
  ret void, !dbg !761
}

declare i32 @fflush(%struct._IO_FILE*) #2

; Function Attrs: nounwind uwtable
define void @new_job(%struct.file* %file) #0 {
entry:
  %file.addr = alloca %struct.file*, align 8
  %cmds = alloca %struct.commands*, align 8
  %c = alloca %struct.child*, align 8
  %lines = alloca i8**, align 8
  %i = alloca i32, align 4
  store %struct.file* %file, %struct.file** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.file** %file.addr, metadata !762, metadata !308), !dbg !763
  call void @llvm.dbg.declare(metadata %struct.commands** %cmds, metadata !764, metadata !308), !dbg !765
  %0 = load %struct.file*, %struct.file** %file.addr, align 8, !dbg !766
  %cmds1 = getelementptr inbounds %struct.file, %struct.file* %0, i32 0, i32 3, !dbg !767
  %1 = load %struct.commands*, %struct.commands** %cmds1, align 8, !dbg !767
  store %struct.commands* %1, %struct.commands** %cmds, align 8, !dbg !765
  call void @llvm.dbg.declare(metadata %struct.child** %c, metadata !768, metadata !308), !dbg !769
  call void @llvm.dbg.declare(metadata i8*** %lines, metadata !770, metadata !308), !dbg !771
  call void @llvm.dbg.declare(metadata i32* %i, metadata !772, metadata !308), !dbg !773
  %2 = load %struct.commands*, %struct.commands** %cmds, align 8, !dbg !774
  call void (%struct.commands*, ...) bitcast (void (...)* @chop_commands to void (%struct.commands*, ...)*)(%struct.commands* %2), !dbg !775
  %3 = load i32, i32* @job_slots, align 4, !dbg !776
  %cmp = icmp ugt i32 %3, 0, !dbg !778
  br i1 %cmp, label %if.then, label %if.end, !dbg !779

if.then:                                          ; preds = %entry
  br label %while.cond, !dbg !780

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load i32, i32* @job_slots_used, align 4, !dbg !781
  %5 = load i32, i32* @job_slots, align 4, !dbg !784
  %cmp2 = icmp eq i32 %4, %5, !dbg !785
  br i1 %cmp2, label %while.body, label %while.end, !dbg !780

while.body:                                       ; preds = %while.cond
  call void @wait_for_children(i32 1, i32 0), !dbg !786
  br label %while.cond, !dbg !780

while.end:                                        ; preds = %while.cond
  br label %if.end, !dbg !787

if.end:                                           ; preds = %while.end, %entry
  %6 = load %struct.commands*, %struct.commands** %cmds, align 8, !dbg !789
  %ncommand_lines = getelementptr inbounds %struct.commands, %struct.commands* %6, i32 0, i32 3, !dbg !790
  %7 = load i32, i32* %ncommand_lines, align 4, !dbg !790
  %conv = zext i32 %7 to i64, !dbg !789
  %mul = mul i64 %conv, 8, !dbg !791
  %call = call i8* (i64, ...) bitcast (i8* (...)* @xmalloc to i8* (i64, ...)*)(i64 %mul), !dbg !792
  %8 = bitcast i8* %call to i8**, !dbg !793
  store i8** %8, i8*** %lines, align 8, !dbg !794
  store i32 0, i32* %i, align 4, !dbg !795
  br label %for.cond, !dbg !797

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4, !dbg !798
  %10 = load %struct.commands*, %struct.commands** %cmds, align 8, !dbg !802
  %ncommand_lines3 = getelementptr inbounds %struct.commands, %struct.commands* %10, i32 0, i32 3, !dbg !803
  %11 = load i32, i32* %ncommand_lines3, align 4, !dbg !803
  %cmp4 = icmp ult i32 %9, %11, !dbg !804
  br i1 %cmp4, label %for.body, label %for.end, !dbg !805

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4, !dbg !806
  %idxprom = zext i32 %12 to i64, !dbg !807
  %13 = load %struct.commands*, %struct.commands** %cmds, align 8, !dbg !807
  %command_lines = getelementptr inbounds %struct.commands, %struct.commands* %13, i32 0, i32 4, !dbg !808
  %14 = load i8**, i8*** %command_lines, align 8, !dbg !808
  %arrayidx = getelementptr inbounds i8*, i8** %14, i64 %idxprom, !dbg !807
  %15 = load i8*, i8** %arrayidx, align 8, !dbg !807
  %16 = load %struct.file*, %struct.file** %file.addr, align 8, !dbg !809
  %call6 = call i8* (i8*, %struct.file*, ...) bitcast (i8* (...)* @allocated_variable_expand_for_file to i8* (i8*, %struct.file*, ...)*)(i8* %15, %struct.file* %16), !dbg !810
  %17 = load i32, i32* %i, align 4, !dbg !811
  %idxprom7 = zext i32 %17 to i64, !dbg !812
  %18 = load i8**, i8*** %lines, align 8, !dbg !812
  %arrayidx8 = getelementptr inbounds i8*, i8** %18, i64 %idxprom7, !dbg !812
  store i8* %call6, i8** %arrayidx8, align 8, !dbg !813
  br label %for.inc, !dbg !812

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4, !dbg !814
  %inc = add i32 %19, 1, !dbg !814
  store i32 %inc, i32* %i, align 4, !dbg !814
  br label %for.cond, !dbg !815

for.end:                                          ; preds = %for.cond
  call void @push_signals_blocked_p(i32 1), !dbg !816
  %call9 = call i8* (i64, ...) bitcast (i8* (...)* @xmalloc to i8* (i64, ...)*)(i64 56), !dbg !817
  %20 = bitcast i8* %call9 to %struct.child*, !dbg !818
  store %struct.child* %20, %struct.child** %c, align 8, !dbg !819
  %21 = load %struct.file*, %struct.file** %file.addr, align 8, !dbg !820
  %22 = load %struct.child*, %struct.child** %c, align 8, !dbg !821
  %file10 = getelementptr inbounds %struct.child, %struct.child* %22, i32 0, i32 1, !dbg !822
  store %struct.file* %21, %struct.file** %file10, align 8, !dbg !823
  %23 = load i8**, i8*** %lines, align 8, !dbg !824
  %24 = load %struct.child*, %struct.child** %c, align 8, !dbg !825
  %command_lines11 = getelementptr inbounds %struct.child, %struct.child* %24, i32 0, i32 3, !dbg !826
  store i8** %23, i8*** %command_lines11, align 8, !dbg !827
  %25 = load %struct.child*, %struct.child** %c, align 8, !dbg !828
  %command_line = getelementptr inbounds %struct.child, %struct.child* %25, i32 0, i32 4, !dbg !829
  store i32 0, i32* %command_line, align 4, !dbg !830
  %26 = load %struct.child*, %struct.child** %c, align 8, !dbg !831
  %command_ptr = getelementptr inbounds %struct.child, %struct.child* %26, i32 0, i32 5, !dbg !832
  store i8* null, i8** %command_ptr, align 8, !dbg !833
  %27 = load %struct.child*, %struct.child** %c, align 8, !dbg !834
  %environment = getelementptr inbounds %struct.child, %struct.child* %27, i32 0, i32 2, !dbg !835
  store i8** null, i8*** %environment, align 8, !dbg !836
  %28 = load %struct.child*, %struct.child** %c, align 8, !dbg !837
  call void @start_job(%struct.child* %28), !dbg !838
  %29 = load %struct.file*, %struct.file** %file.addr, align 8, !dbg !839
  %command_state = getelementptr inbounds %struct.file, %struct.file* %29, i32 0, i32 12, !dbg !840
  %bf.load = load i16, i16* %command_state, align 2, !dbg !840
  %bf.clear = and i16 %bf.load, 3, !dbg !840
  %bf.cast = zext i16 %bf.clear to i32, !dbg !840
  switch i32 %bf.cast, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.13
  ], !dbg !841

sw.bb:                                            ; preds = %for.end
  %30 = load %struct.child*, %struct.child** @children, align 8, !dbg !842
  %31 = load %struct.child*, %struct.child** %c, align 8, !dbg !844
  %next = getelementptr inbounds %struct.child, %struct.child* %31, i32 0, i32 0, !dbg !845
  store %struct.child* %30, %struct.child** %next, align 8, !dbg !846
  %32 = load %struct.child*, %struct.child** %c, align 8, !dbg !847
  store %struct.child* %32, %struct.child** @children, align 8, !dbg !848
  %33 = load i32, i32* @job_slots_used, align 4, !dbg !849
  %inc12 = add i32 %33, 1, !dbg !849
  store i32 %inc12, i32* @job_slots_used, align 4, !dbg !849
  br label %sw.epilog, !dbg !850

sw.bb.13:                                         ; preds = %for.end
  %34 = load %struct.child*, %struct.child** %c, align 8, !dbg !851
  call void @free_child(%struct.child* %34), !dbg !852
  %35 = load %struct.file*, %struct.file** %file.addr, align 8, !dbg !853
  call void (%struct.file*, ...) bitcast (void (...)* @notice_finished_file to void (%struct.file*, ...)*)(%struct.file* %35), !dbg !854
  br label %sw.epilog, !dbg !855

sw.default:                                       ; preds = %for.end
  %36 = load %struct.file*, %struct.file** %file.addr, align 8, !dbg !856
  %name = getelementptr inbounds %struct.file, %struct.file* %36, i32 0, i32 1, !dbg !857
  %37 = load i8*, i8** %name, align 8, !dbg !857
  %38 = load %struct.file*, %struct.file** %file.addr, align 8, !dbg !858
  %command_state14 = getelementptr inbounds %struct.file, %struct.file* %38, i32 0, i32 12, !dbg !859
  %bf.load15 = load i16, i16* %command_state14, align 2, !dbg !859
  %bf.clear16 = and i16 %bf.load15, 3, !dbg !859
  %bf.cast17 = zext i16 %bf.clear16 to i32, !dbg !859
  call void (i8*, i8*, i32, ...) bitcast (void (...)* @error to void (i8*, i8*, i32, ...)*)(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.6, i32 0, i32 0), i8* %37, i32 %bf.cast17), !dbg !860
  call void @abort() #10, !dbg !861
  unreachable, !dbg !861

sw.epilog:                                        ; preds = %sw.bb.13, %sw.bb
  call void @pop_signals_blocked_p(), !dbg !862
  %39 = load i32, i32* @job_slots, align 4, !dbg !863
  %cmp18 = icmp eq i32 %39, 1, !dbg !865
  br i1 %cmp18, label %land.lhs.true, label %if.end.36, !dbg !866

land.lhs.true:                                    ; preds = %sw.epilog
  %40 = load %struct.file*, %struct.file** %file.addr, align 8, !dbg !867
  %command_state20 = getelementptr inbounds %struct.file, %struct.file* %40, i32 0, i32 12, !dbg !869
  %bf.load21 = load i16, i16* %command_state20, align 2, !dbg !869
  %bf.clear22 = and i16 %bf.load21, 3, !dbg !869
  %bf.cast23 = zext i16 %bf.clear22 to i32, !dbg !869
  %cmp24 = icmp eq i32 %bf.cast23, 2, !dbg !870
  br i1 %cmp24, label %if.then.26, label %if.end.36, !dbg !871

if.then.26:                                       ; preds = %land.lhs.true
  br label %while.cond.27, !dbg !872

while.cond.27:                                    ; preds = %while.body.34, %if.then.26
  %41 = load %struct.file*, %struct.file** %file.addr, align 8, !dbg !874
  %command_state28 = getelementptr inbounds %struct.file, %struct.file* %41, i32 0, i32 12, !dbg !877
  %bf.load29 = load i16, i16* %command_state28, align 2, !dbg !877
  %bf.clear30 = and i16 %bf.load29, 3, !dbg !877
  %bf.cast31 = zext i16 %bf.clear30 to i32, !dbg !877
  %cmp32 = icmp ne i32 %bf.cast31, 3, !dbg !878
  br i1 %cmp32, label %while.body.34, label %while.end.35, !dbg !872

while.body.34:                                    ; preds = %while.cond.27
  call void @wait_for_children(i32 1, i32 0), !dbg !879
  br label %while.cond.27, !dbg !872

while.end.35:                                     ; preds = %while.cond.27
  br label %if.end.36, !dbg !880

if.end.36:                                        ; preds = %while.end.35, %land.lhs.true, %sw.epilog
  ret void, !dbg !881
}

declare void @chop_commands(...) #2

declare i8* @allocated_variable_expand_for_file(...) #2

; Function Attrs: nounwind uwtable
define void @child_execute_job(i32 %stdin_fd, i32 %stdout_fd, i8** %argv, i8** %envp) #0 {
entry:
  %stdin_fd.addr = alloca i32, align 4
  %stdout_fd.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %envp.addr = alloca i8**, align 8
  %d = alloca i32, align 4
  %max = alloca i32, align 4
  store i32 %stdin_fd, i32* %stdin_fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stdin_fd.addr, metadata !882, metadata !308), !dbg !883
  store i32 %stdout_fd, i32* %stdout_fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stdout_fd.addr, metadata !884, metadata !308), !dbg !885
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !886, metadata !308), !dbg !887
  store i8** %envp, i8*** %envp.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %envp.addr, metadata !888, metadata !308), !dbg !889
  %0 = load i32, i32* %stdin_fd.addr, align 4, !dbg !890
  %cmp = icmp ne i32 %0, 0, !dbg !892
  br i1 %cmp, label %if.then, label %if.end, !dbg !893

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %stdin_fd.addr, align 4, !dbg !894
  %call = call i32 @dup2(i32 %1, i32 0) #9, !dbg !895
  br label %if.end, !dbg !896

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %stdout_fd.addr, align 4, !dbg !897
  %cmp1 = icmp ne i32 %2, 1, !dbg !899
  br i1 %cmp1, label %if.then.2, label %if.end.4, !dbg !900

if.then.2:                                        ; preds = %if.end
  %3 = load i32, i32* %stdout_fd.addr, align 4, !dbg !901
  %call3 = call i32 @dup2(i32 %3, i32 1) #9, !dbg !902
  br label %if.end.4, !dbg !903

if.end.4:                                         ; preds = %if.then.2, %if.end
  call void @llvm.dbg.declare(metadata i32* %d, metadata !904, metadata !308), !dbg !906
  call void @llvm.dbg.declare(metadata i32* %max, metadata !907, metadata !308), !dbg !908
  %call5 = call i32 @getdtablesize() #9, !dbg !909
  store i32 %call5, i32* %max, align 4, !dbg !908
  store i32 3, i32* %d, align 4, !dbg !910
  br label %for.cond, !dbg !912

for.cond:                                         ; preds = %for.inc, %if.end.4
  %4 = load i32, i32* %d, align 4, !dbg !913
  %5 = load i32, i32* %max, align 4, !dbg !917
  %cmp6 = icmp slt i32 %4, %5, !dbg !918
  br i1 %cmp6, label %for.body, label %for.end, !dbg !919

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %d, align 4, !dbg !920
  %call7 = call i32 @close(i32 %6), !dbg !921
  br label %for.inc, !dbg !922

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %d, align 4, !dbg !923
  %inc = add nsw i32 %7, 1, !dbg !923
  store i32 %inc, i32* %d, align 4, !dbg !923
  br label %for.cond, !dbg !924

for.end:                                          ; preds = %for.cond
  call void @unblock_signals(), !dbg !925
  %8 = load i8**, i8*** %argv.addr, align 8, !dbg !926
  %9 = load i8**, i8*** %envp.addr, align 8, !dbg !927
  call void @exec_command(i8** %8, i8** %9), !dbg !928
  ret void, !dbg !929
}

; Function Attrs: nounwind
declare i32 @dup2(i32, i32) #3

; Function Attrs: nounwind
declare i32 @getdtablesize() #3

declare i32 @close(i32) #2

; Function Attrs: nounwind uwtable
define void @exec_command(i8** %argv, i8** %envp) #0 {
entry:
  %argv.addr = alloca i8**, align 8
  %envp.addr = alloca i8**, align 8
  %shell = alloca i8*, align 8
  %path = alloca i8*, align 8
  %program = alloca [4096 x i8], align 16
  %ep = alloca i8**, align 8
  %shell_program = alloca [4096 x i8], align 16
  %shell_path = alloca i8*, align 8
  %new_argv = alloca i8**, align 8
  %argc = alloca i32, align 4
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !930, metadata !308), !dbg !931
  store i8** %envp, i8*** %envp.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %envp.addr, metadata !932, metadata !308), !dbg !933
  call void @llvm.dbg.declare(metadata i8** %shell, metadata !934, metadata !308), !dbg !935
  call void @llvm.dbg.declare(metadata i8** %path, metadata !936, metadata !308), !dbg !937
  call void @llvm.dbg.declare(metadata [4096 x i8]* %program, metadata !938, metadata !308), !dbg !942
  call void @llvm.dbg.declare(metadata i8*** %ep, metadata !943, metadata !308), !dbg !944
  store i8* null, i8** %path, align 8, !dbg !945
  store i8* null, i8** %shell, align 8, !dbg !946
  %0 = load i8**, i8*** %envp.addr, align 8, !dbg !947
  store i8** %0, i8*** %ep, align 8, !dbg !949
  br label %for.cond, !dbg !950

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8**, i8*** %ep, align 8, !dbg !951
  %2 = load i8*, i8** %1, align 8, !dbg !955
  %cmp = icmp ne i8* %2, null, !dbg !956
  br i1 %cmp, label %for.body, label %for.end, !dbg !957

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %shell, align 8, !dbg !958
  %cmp1 = icmp eq i8* %3, null, !dbg !961
  br i1 %cmp1, label %land.lhs.true, label %if.else, !dbg !962

land.lhs.true:                                    ; preds = %for.body
  %4 = load i8**, i8*** %ep, align 8, !dbg !963
  %5 = load i8*, i8** %4, align 8, !dbg !965
  %call = call i32 @strncmp(i8* %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i64 6) #11, !dbg !966
  %tobool = icmp ne i32 %call, 0, !dbg !966
  br i1 %tobool, label %if.else, label %if.then, !dbg !967

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8**, i8*** %ep, align 8, !dbg !968
  %7 = load i8*, i8** %6, align 8, !dbg !969
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 6, !dbg !970
  store i8* %arrayidx, i8** %shell, align 8, !dbg !971
  br label %if.end.14, !dbg !972

if.else:                                          ; preds = %land.lhs.true, %for.body
  %8 = load i8*, i8** %path, align 8, !dbg !973
  %cmp2 = icmp eq i8* %8, null, !dbg !975
  br i1 %cmp2, label %land.lhs.true.3, label %if.else.8, !dbg !976

land.lhs.true.3:                                  ; preds = %if.else
  %9 = load i8**, i8*** %ep, align 8, !dbg !977
  %10 = load i8*, i8** %9, align 8, !dbg !979
  %call4 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i64 5) #11, !dbg !980
  %tobool5 = icmp ne i32 %call4, 0, !dbg !980
  br i1 %tobool5, label %if.else.8, label %if.then.6, !dbg !981

if.then.6:                                        ; preds = %land.lhs.true.3
  %11 = load i8**, i8*** %ep, align 8, !dbg !982
  %12 = load i8*, i8** %11, align 8, !dbg !983
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i64 5, !dbg !984
  store i8* %arrayidx7, i8** %path, align 8, !dbg !985
  br label %if.end.13, !dbg !986

if.else.8:                                        ; preds = %land.lhs.true.3, %if.else
  %13 = load i8*, i8** %path, align 8, !dbg !987
  %cmp9 = icmp ne i8* %13, null, !dbg !989
  br i1 %cmp9, label %land.lhs.true.10, label %if.end, !dbg !990

land.lhs.true.10:                                 ; preds = %if.else.8
  %14 = load i8*, i8** %shell, align 8, !dbg !991
  %cmp11 = icmp ne i8* %14, null, !dbg !993
  br i1 %cmp11, label %if.then.12, label %if.end, !dbg !994

if.then.12:                                       ; preds = %land.lhs.true.10
  br label %for.end, !dbg !995

if.end:                                           ; preds = %land.lhs.true.10, %if.else.8
  br label %if.end.13

if.end.13:                                        ; preds = %if.end, %if.then.6
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.then
  br label %for.inc, !dbg !996

for.inc:                                          ; preds = %if.end.14
  %15 = load i8**, i8*** %ep, align 8, !dbg !997
  %incdec.ptr = getelementptr inbounds i8*, i8** %15, i32 1, !dbg !997
  store i8** %incdec.ptr, i8*** %ep, align 8, !dbg !997
  br label %for.cond, !dbg !998

for.end:                                          ; preds = %if.then.12, %for.cond
  call void (...) @child_access(), !dbg !999
  %16 = load i8**, i8*** %argv.addr, align 8, !dbg !1000
  %arrayidx15 = getelementptr inbounds i8*, i8** %16, i64 0, !dbg !1000
  %17 = load i8*, i8** %arrayidx15, align 8, !dbg !1000
  %18 = load i8*, i8** %path, align 8, !dbg !1002
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %program, i32 0, i32 0, !dbg !1003
  %call16 = call i32 @search_path(i8* %17, i8* %18, i8* %arraydecay), !dbg !1004
  %tobool17 = icmp ne i32 %call16, 0, !dbg !1004
  br i1 %tobool17, label %if.else.20, label %if.then.18, !dbg !1005

if.then.18:                                       ; preds = %for.end
  %19 = load i8**, i8*** %argv.addr, align 8, !dbg !1006
  %arrayidx19 = getelementptr inbounds i8*, i8** %19, i64 0, !dbg !1006
  %20 = load i8*, i8** %arrayidx19, align 8, !dbg !1006
  call void (i8*, i8*, ...) bitcast (void (...)* @error to void (i8*, i8*, ...)*)(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i8* %20), !dbg !1007
  br label %if.end.60, !dbg !1007

if.else.20:                                       ; preds = %for.end
  %arraydecay21 = getelementptr inbounds [4096 x i8], [4096 x i8]* %program, i32 0, i32 0, !dbg !1008
  %21 = load i8**, i8*** %argv.addr, align 8, !dbg !1010
  %22 = load i8**, i8*** %envp.addr, align 8, !dbg !1011
  %call22 = call i32 @execve(i8* %arraydecay21, i8** %21, i8** %22) #9, !dbg !1012
  %call23 = call i32* @__errno_location() #1, !dbg !1013
  %23 = load i32, i32* %call23, align 4, !dbg !1013
  %cmp24 = icmp eq i32 %23, 8, !dbg !1015
  br i1 %cmp24, label %if.then.25, label %if.else.57, !dbg !1016

if.then.25:                                       ; preds = %if.else.20
  call void @llvm.dbg.declare(metadata [4096 x i8]* %shell_program, metadata !1017, metadata !308), !dbg !1019
  call void @llvm.dbg.declare(metadata i8** %shell_path, metadata !1020, metadata !308), !dbg !1021
  %24 = load i8*, i8** %shell, align 8, !dbg !1022
  %cmp26 = icmp eq i8* %24, null, !dbg !1024
  br i1 %cmp26, label %if.then.27, label %if.else.28, !dbg !1025

if.then.27:                                       ; preds = %if.then.25
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @default_shell, i32 0, i32 0), i8** %shell_path, align 8, !dbg !1026
  br label %if.end.36, !dbg !1027

if.else.28:                                       ; preds = %if.then.25
  %25 = load i8*, i8** %shell, align 8, !dbg !1028
  %26 = load i8*, i8** %path, align 8, !dbg !1031
  %arraydecay29 = getelementptr inbounds [4096 x i8], [4096 x i8]* %shell_program, i32 0, i32 0, !dbg !1032
  %call30 = call i32 @search_path(i8* %25, i8* %26, i8* %arraydecay29), !dbg !1033
  %tobool31 = icmp ne i32 %call30, 0, !dbg !1033
  br i1 %tobool31, label %if.then.32, label %if.else.34, !dbg !1034

if.then.32:                                       ; preds = %if.else.28
  %arraydecay33 = getelementptr inbounds [4096 x i8], [4096 x i8]* %shell_program, i32 0, i32 0, !dbg !1035
  store i8* %arraydecay33, i8** %shell_path, align 8, !dbg !1036
  br label %if.end.35, !dbg !1037

if.else.34:                                       ; preds = %if.else.28
  store i8* null, i8** %shell_path, align 8, !dbg !1038
  %27 = load i8*, i8** %shell, align 8, !dbg !1040
  call void (i8*, i8*, ...) bitcast (void (...)* @error to void (i8*, i8*, ...)*)(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i32 0, i32 0), i8* %27), !dbg !1041
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.34, %if.then.32
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.then.27
  %28 = load i8*, i8** %shell_path, align 8, !dbg !1042
  %cmp37 = icmp ne i8* %28, null, !dbg !1044
  br i1 %cmp37, label %if.then.38, label %if.end.56, !dbg !1045

if.then.38:                                       ; preds = %if.end.36
  call void @llvm.dbg.declare(metadata i8*** %new_argv, metadata !1046, metadata !308), !dbg !1048
  call void @llvm.dbg.declare(metadata i32* %argc, metadata !1049, metadata !308), !dbg !1050
  store i32 1, i32* %argc, align 4, !dbg !1051
  br label %while.cond, !dbg !1052

while.cond:                                       ; preds = %while.body, %if.then.38
  %29 = load i32, i32* %argc, align 4, !dbg !1053
  %idxprom = sext i32 %29 to i64, !dbg !1056
  %30 = load i8**, i8*** %argv.addr, align 8, !dbg !1056
  %arrayidx39 = getelementptr inbounds i8*, i8** %30, i64 %idxprom, !dbg !1056
  %31 = load i8*, i8** %arrayidx39, align 8, !dbg !1056
  %cmp40 = icmp ne i8* %31, null, !dbg !1057
  br i1 %cmp40, label %while.body, label %while.end, !dbg !1052

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %argc, align 4, !dbg !1058
  %inc = add nsw i32 %32, 1, !dbg !1058
  store i32 %inc, i32* %argc, align 4, !dbg !1058
  br label %while.cond, !dbg !1052

while.end:                                        ; preds = %while.cond
  %33 = load i32, i32* %argc, align 4, !dbg !1059
  %add = add nsw i32 1, %33, !dbg !1059
  %add41 = add nsw i32 %add, 1, !dbg !1059
  %conv = sext i32 %add41 to i64, !dbg !1059
  %mul = mul i64 %conv, 8, !dbg !1059
  %34 = alloca i8, i64 %mul, !dbg !1059
  %35 = bitcast i8* %34 to i8**, !dbg !1060
  store i8** %35, i8*** %new_argv, align 8, !dbg !1061
  %36 = load i8*, i8** %shell_path, align 8, !dbg !1062
  %37 = load i8**, i8*** %new_argv, align 8, !dbg !1063
  %arrayidx42 = getelementptr inbounds i8*, i8** %37, i64 0, !dbg !1063
  store i8* %36, i8** %arrayidx42, align 8, !dbg !1064
  %arraydecay43 = getelementptr inbounds [4096 x i8], [4096 x i8]* %program, i32 0, i32 0, !dbg !1065
  %38 = load i8**, i8*** %new_argv, align 8, !dbg !1066
  %arrayidx44 = getelementptr inbounds i8*, i8** %38, i64 1, !dbg !1066
  store i8* %arraydecay43, i8** %arrayidx44, align 8, !dbg !1067
  br label %while.cond.45, !dbg !1068

while.cond.45:                                    ; preds = %while.body.48, %while.end
  %39 = load i32, i32* %argc, align 4, !dbg !1069
  %cmp46 = icmp sgt i32 %39, 0, !dbg !1070
  br i1 %cmp46, label %while.body.48, label %while.end.54, !dbg !1068

while.body.48:                                    ; preds = %while.cond.45
  %40 = load i32, i32* %argc, align 4, !dbg !1071
  %idxprom49 = sext i32 %40 to i64, !dbg !1073
  %41 = load i8**, i8*** %argv.addr, align 8, !dbg !1073
  %arrayidx50 = getelementptr inbounds i8*, i8** %41, i64 %idxprom49, !dbg !1073
  %42 = load i8*, i8** %arrayidx50, align 8, !dbg !1073
  %43 = load i32, i32* %argc, align 4, !dbg !1074
  %add51 = add nsw i32 1, %43, !dbg !1075
  %idxprom52 = sext i32 %add51 to i64, !dbg !1076
  %44 = load i8**, i8*** %new_argv, align 8, !dbg !1076
  %arrayidx53 = getelementptr inbounds i8*, i8** %44, i64 %idxprom52, !dbg !1076
  store i8* %42, i8** %arrayidx53, align 8, !dbg !1077
  %45 = load i32, i32* %argc, align 4, !dbg !1078
  %dec = add nsw i32 %45, -1, !dbg !1078
  store i32 %dec, i32* %argc, align 4, !dbg !1078
  br label %while.cond.45, !dbg !1068

while.end.54:                                     ; preds = %while.cond.45
  %46 = load i8*, i8** %shell_path, align 8, !dbg !1079
  %47 = load i8**, i8*** %new_argv, align 8, !dbg !1080
  %48 = load i8**, i8*** %envp.addr, align 8, !dbg !1081
  %call55 = call i32 @execve(i8* %46, i8** %47, i8** %48) #9, !dbg !1082
  %49 = load i8*, i8** %shell_path, align 8, !dbg !1083
  call void (i8*, i8*, ...) bitcast (void (...)* @perror_with_name to void (i8*, i8*, ...)*)(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i8* %49), !dbg !1084
  br label %if.end.56, !dbg !1085

if.end.56:                                        ; preds = %while.end.54, %if.end.36
  br label %if.end.59, !dbg !1086

if.else.57:                                       ; preds = %if.else.20
  %arraydecay58 = getelementptr inbounds [4096 x i8], [4096 x i8]* %program, i32 0, i32 0, !dbg !1087
  call void (i8*, i8*, ...) bitcast (void (...)* @perror_with_name to void (i8*, i8*, ...)*)(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i8* %arraydecay58), !dbg !1088
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.57, %if.end.56
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %if.then.18
  call void @_exit(i32 127) #12, !dbg !1089
  unreachable, !dbg !1089

return:                                           ; No predecessors!
  ret void, !dbg !1090
}

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #5

declare void @child_access(...) #2

; Function Attrs: nounwind uwtable
define internal i32 @search_path(i8* %file, i8* %path, i8* %program) #0 {
entry:
  %retval = alloca i32, align 4
  %file.addr = alloca i8*, align 8
  %path.addr = alloca i8*, align 8
  %program.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  %st = alloca %struct.stat, align 8
  %perm = alloca i32, align 4
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !1091, metadata !308), !dbg !1092
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !1093, metadata !308), !dbg !1094
  store i8* %program, i8** %program.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %program.addr, metadata !1095, metadata !308), !dbg !1096
  %0 = load i8*, i8** %path.addr, align 8, !dbg !1097
  %cmp = icmp eq i8* %0, null, !dbg !1099
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !1100

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %path.addr, align 8, !dbg !1101
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !1101
  %2 = load i8, i8* %arrayidx, align 1, !dbg !1101
  %conv = sext i8 %2 to i32, !dbg !1101
  %cmp1 = icmp eq i32 %conv, 0, !dbg !1103
  br i1 %cmp1, label %if.then, label %if.end, !dbg !1104

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @default_path, i32 0, i32 0), i8** %path.addr, align 8, !dbg !1105
  br label %if.end, !dbg !1106

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i8*, i8** %file.addr, align 8, !dbg !1107
  %call = call i8* @strchr(i8* %3, i32 47) #11, !dbg !1107
  %cmp3 = icmp ne i8* %call, null, !dbg !1109
  br i1 %cmp3, label %if.then.5, label %if.else, !dbg !1110

if.then.5:                                        ; preds = %if.end
  %4 = load i8*, i8** %program.addr, align 8, !dbg !1111
  %5 = load i8*, i8** %file.addr, align 8, !dbg !1113
  %call6 = call i8* @strcpy(i8* %4, i8* %5) #9, !dbg !1114
  store i32 1, i32* %retval, !dbg !1115
  br label %return, !dbg !1115

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %len, metadata !1116, metadata !308), !dbg !1118
  %6 = load i32, i32* @search_path.ngroups, align 4, !dbg !1119
  %cmp7 = icmp eq i32 %6, -1, !dbg !1121
  br i1 %cmp7, label %if.then.9, label %if.end.11, !dbg !1122

if.then.9:                                        ; preds = %if.else
  %call10 = call i32 @getgroups(i32 65536, i32* getelementptr inbounds ([65536 x i32], [65536 x i32]* @search_path.groups, i32 0, i32 0)) #9, !dbg !1123
  store i32 %call10, i32* @search_path.ngroups, align 4, !dbg !1124
  br label %if.end.11, !dbg !1125

if.end.11:                                        ; preds = %if.then.9, %if.else
  %7 = load i8*, i8** %file.addr, align 8, !dbg !1126
  %call12 = call i64 @strlen(i8* %7) #11, !dbg !1127
  %add = add i64 %call12, 1, !dbg !1128
  %conv13 = trunc i64 %add to i32, !dbg !1127
  store i32 %conv13, i32* %len, align 4, !dbg !1129
  br label %do.body, !dbg !1130

do.body:                                          ; preds = %do.cond, %if.end.11
  call void @llvm.dbg.declare(metadata %struct.stat* %st, metadata !1131, metadata !308), !dbg !1166
  call void @llvm.dbg.declare(metadata i32* %perm, metadata !1167, metadata !308), !dbg !1168
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1169, metadata !308), !dbg !1170
  %8 = load i8*, i8** %path.addr, align 8, !dbg !1171
  %call14 = call i8* @strchr(i8* %8, i32 58) #11, !dbg !1171
  store i8* %call14, i8** %p, align 8, !dbg !1172
  %9 = load i8*, i8** %p, align 8, !dbg !1173
  %cmp15 = icmp eq i8* %9, null, !dbg !1175
  br i1 %cmp15, label %if.then.17, label %if.end.19, !dbg !1176

if.then.17:                                       ; preds = %do.body
  %10 = load i8*, i8** %path.addr, align 8, !dbg !1177
  %11 = load i8*, i8** %path.addr, align 8, !dbg !1178
  %call18 = call i64 @strlen(i8* %11) #11, !dbg !1179
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %call18, !dbg !1180
  store i8* %add.ptr, i8** %p, align 8, !dbg !1181
  br label %if.end.19, !dbg !1182

if.end.19:                                        ; preds = %if.then.17, %do.body
  %12 = load i8*, i8** %p, align 8, !dbg !1183
  %13 = load i8*, i8** %path.addr, align 8, !dbg !1185
  %cmp20 = icmp eq i8* %12, %13, !dbg !1186
  br i1 %cmp20, label %if.then.22, label %if.else.24, !dbg !1187

if.then.22:                                       ; preds = %if.end.19
  %14 = load i8*, i8** %program.addr, align 8, !dbg !1188
  %15 = load i8*, i8** %file.addr, align 8, !dbg !1188
  %16 = load i32, i32* %len, align 4, !dbg !1188
  %conv23 = zext i32 %16 to i64, !dbg !1188
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 %conv23, i32 1, i1 false), !dbg !1188
  br label %if.end.35, !dbg !1188

if.else.24:                                       ; preds = %if.end.19
  %17 = load i8*, i8** %program.addr, align 8, !dbg !1189
  %18 = load i8*, i8** %path.addr, align 8, !dbg !1189
  %19 = load i8*, i8** %p, align 8, !dbg !1189
  %20 = load i8*, i8** %path.addr, align 8, !dbg !1189
  %sub.ptr.lhs.cast = ptrtoint i8* %19 to i64, !dbg !1189
  %sub.ptr.rhs.cast = ptrtoint i8* %20 to i64, !dbg !1189
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !1189
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 %sub.ptr.sub, i32 1, i1 false), !dbg !1189
  %21 = load i8*, i8** %p, align 8, !dbg !1191
  %22 = load i8*, i8** %path.addr, align 8, !dbg !1192
  %sub.ptr.lhs.cast25 = ptrtoint i8* %21 to i64, !dbg !1193
  %sub.ptr.rhs.cast26 = ptrtoint i8* %22 to i64, !dbg !1193
  %sub.ptr.sub27 = sub i64 %sub.ptr.lhs.cast25, %sub.ptr.rhs.cast26, !dbg !1193
  %23 = load i8*, i8** %program.addr, align 8, !dbg !1194
  %arrayidx28 = getelementptr inbounds i8, i8* %23, i64 %sub.ptr.sub27, !dbg !1194
  store i8 47, i8* %arrayidx28, align 1, !dbg !1195
  %24 = load i8*, i8** %program.addr, align 8, !dbg !1196
  %25 = load i8*, i8** %p, align 8, !dbg !1196
  %26 = load i8*, i8** %path.addr, align 8, !dbg !1196
  %sub.ptr.lhs.cast29 = ptrtoint i8* %25 to i64, !dbg !1196
  %sub.ptr.rhs.cast30 = ptrtoint i8* %26 to i64, !dbg !1196
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30, !dbg !1196
  %add.ptr32 = getelementptr inbounds i8, i8* %24, i64 %sub.ptr.sub31, !dbg !1196
  %add.ptr33 = getelementptr inbounds i8, i8* %add.ptr32, i64 1, !dbg !1196
  %27 = load i8*, i8** %file.addr, align 8, !dbg !1196
  %28 = load i32, i32* %len, align 4, !dbg !1196
  %conv34 = zext i32 %28 to i64, !dbg !1196
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr33, i8* %27, i64 %conv34, i32 1, i1 false), !dbg !1196
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.24, %if.then.22
  %29 = load i8*, i8** %program.addr, align 8, !dbg !1197
  %call36 = call i32 @stat(i8* %29, %struct.stat* %st) #9, !dbg !1199
  %cmp37 = icmp eq i32 %call36, 0, !dbg !1200
  br i1 %cmp37, label %land.lhs.true, label %if.end.79, !dbg !1201

land.lhs.true:                                    ; preds = %if.end.35
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3, !dbg !1202
  %30 = load i32, i32* %st_mode, align 4, !dbg !1202
  %and = and i32 %30, 61440, !dbg !1202
  %cmp39 = icmp eq i32 %and, 32768, !dbg !1202
  br i1 %cmp39, label %if.then.41, label %if.end.79, !dbg !1204

if.then.41:                                       ; preds = %land.lhs.true
  %st_uid = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 4, !dbg !1205
  %31 = load i32, i32* %st_uid, align 4, !dbg !1205
  %call42 = call i32 @geteuid() #9, !dbg !1208
  %cmp43 = icmp eq i32 %31, %call42, !dbg !1209
  br i1 %cmp43, label %if.then.45, label %if.else.48, !dbg !1210

if.then.45:                                       ; preds = %if.then.41
  %st_mode46 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3, !dbg !1211
  %32 = load i32, i32* %st_mode46, align 4, !dbg !1211
  %and47 = and i32 %32, 64, !dbg !1212
  store i32 %and47, i32* %perm, align 4, !dbg !1213
  br label %if.end.74, !dbg !1214

if.else.48:                                       ; preds = %if.then.41
  %st_gid = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 5, !dbg !1215
  %33 = load i32, i32* %st_gid, align 4, !dbg !1215
  %call49 = call i32 @getegid() #9, !dbg !1217
  %cmp50 = icmp eq i32 %33, %call49, !dbg !1218
  br i1 %cmp50, label %if.then.52, label %if.else.55, !dbg !1219

if.then.52:                                       ; preds = %if.else.48
  %st_mode53 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3, !dbg !1220
  %34 = load i32, i32* %st_mode53, align 4, !dbg !1220
  %and54 = and i32 %34, 8, !dbg !1221
  store i32 %and54, i32* %perm, align 4, !dbg !1222
  br label %if.end.73, !dbg !1223

if.else.55:                                       ; preds = %if.else.48
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1224, metadata !308), !dbg !1226
  store i32 0, i32* %i, align 4, !dbg !1227
  br label %for.cond, !dbg !1229

for.cond:                                         ; preds = %for.inc, %if.else.55
  %35 = load i32, i32* %i, align 4, !dbg !1230
  %36 = load i32, i32* @search_path.ngroups, align 4, !dbg !1234
  %cmp56 = icmp slt i32 %35, %36, !dbg !1235
  br i1 %cmp56, label %for.body, label %for.end, !dbg !1236

for.body:                                         ; preds = %for.cond
  %37 = load i32, i32* %i, align 4, !dbg !1237
  %idxprom = sext i32 %37 to i64, !dbg !1239
  %arrayidx58 = getelementptr inbounds [65536 x i32], [65536 x i32]* @search_path.groups, i32 0, i64 %idxprom, !dbg !1239
  %38 = load i32, i32* %arrayidx58, align 4, !dbg !1239
  %st_gid59 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 5, !dbg !1240
  %39 = load i32, i32* %st_gid59, align 4, !dbg !1240
  %cmp60 = icmp eq i32 %38, %39, !dbg !1241
  br i1 %cmp60, label %if.then.62, label %if.end.63, !dbg !1242

if.then.62:                                       ; preds = %for.body
  br label %for.end, !dbg !1243

if.end.63:                                        ; preds = %for.body
  br label %for.inc, !dbg !1244

for.inc:                                          ; preds = %if.end.63
  %40 = load i32, i32* %i, align 4, !dbg !1246
  %inc = add nsw i32 %40, 1, !dbg !1246
  store i32 %inc, i32* %i, align 4, !dbg !1246
  br label %for.cond, !dbg !1247

for.end:                                          ; preds = %if.then.62, %for.cond
  %41 = load i32, i32* %i, align 4, !dbg !1248
  %42 = load i32, i32* @search_path.ngroups, align 4, !dbg !1250
  %cmp64 = icmp slt i32 %41, %42, !dbg !1251
  br i1 %cmp64, label %if.then.66, label %if.else.69, !dbg !1252

if.then.66:                                       ; preds = %for.end
  %st_mode67 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3, !dbg !1253
  %43 = load i32, i32* %st_mode67, align 4, !dbg !1253
  %and68 = and i32 %43, 8, !dbg !1254
  store i32 %and68, i32* %perm, align 4, !dbg !1255
  br label %if.end.72, !dbg !1256

if.else.69:                                       ; preds = %for.end
  %st_mode70 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3, !dbg !1257
  %44 = load i32, i32* %st_mode70, align 4, !dbg !1257
  %and71 = and i32 %44, 1, !dbg !1258
  store i32 %and71, i32* %perm, align 4, !dbg !1259
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.69, %if.then.66
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.then.52
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %if.then.45
  %45 = load i32, i32* %perm, align 4, !dbg !1260
  %cmp75 = icmp ne i32 %45, 0, !dbg !1262
  br i1 %cmp75, label %if.then.77, label %if.end.78, !dbg !1263

if.then.77:                                       ; preds = %if.end.74
  store i32 1, i32* %retval, !dbg !1264
  br label %return, !dbg !1264

if.end.78:                                        ; preds = %if.end.74
  br label %if.end.79, !dbg !1265

if.end.79:                                        ; preds = %if.end.78, %land.lhs.true, %if.end.35
  %46 = load i8*, i8** %p, align 8, !dbg !1266
  %add.ptr80 = getelementptr inbounds i8, i8* %46, i64 1, !dbg !1267
  store i8* %add.ptr80, i8** %path.addr, align 8, !dbg !1268
  br label %do.cond, !dbg !1269

do.cond:                                          ; preds = %if.end.79
  %47 = load i8*, i8** %path.addr, align 8, !dbg !1270
  %48 = load i8, i8* %47, align 1, !dbg !1272
  %conv81 = sext i8 %48 to i32, !dbg !1272
  %cmp82 = icmp ne i32 %conv81, 0, !dbg !1273
  br i1 %cmp82, label %do.body, label %do.end, !dbg !1269

do.end:                                           ; preds = %do.cond
  br label %if.end.84

if.end.84:                                        ; preds = %do.end
  store i32 0, i32* %retval, !dbg !1274
  br label %return, !dbg !1274

return:                                           ; preds = %if.end.84, %if.then.77, %if.then.5
  %49 = load i32, i32* %retval, !dbg !1275
  ret i32 %49, !dbg !1275
}

; Function Attrs: nounwind
declare i32 @execve(i8*, i8**, i8**) #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #6

declare void @perror_with_name(...) #2

; Function Attrs: noreturn
declare void @_exit(i32) #7

; Function Attrs: nounwind uwtable
define i8** @construct_command_argv(i8* %line, i8** %restp, %struct.file* %file) #0 {
entry:
  %line.addr = alloca i8*, align 8
  %restp.addr = alloca i8**, align 8
  %file.addr = alloca %struct.file*, align 8
  %shell = alloca i8*, align 8
  %ifs = alloca i8*, align 8
  %argv = alloca i8**, align 8
  store i8* %line, i8** %line.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %line.addr, metadata !1276, metadata !308), !dbg !1277
  store i8** %restp, i8*** %restp.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %restp.addr, metadata !1278, metadata !308), !dbg !1279
  store %struct.file* %file, %struct.file** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.file** %file.addr, metadata !1280, metadata !308), !dbg !1281
  call void @llvm.dbg.declare(metadata i8** %shell, metadata !1282, metadata !308), !dbg !1283
  %0 = load %struct.file*, %struct.file** %file.addr, align 8, !dbg !1284
  %call = call i8* (i8*, %struct.file*, ...) bitcast (i8* (...)* @allocated_variable_expand_for_file to i8* (i8*, %struct.file*, ...)*)(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0), %struct.file* %0), !dbg !1285
  store i8* %call, i8** %shell, align 8, !dbg !1283
  call void @llvm.dbg.declare(metadata i8** %ifs, metadata !1286, metadata !308), !dbg !1287
  %1 = load %struct.file*, %struct.file** %file.addr, align 8, !dbg !1288
  %call1 = call i8* (i8*, %struct.file*, ...) bitcast (i8* (...)* @allocated_variable_expand_for_file to i8* (i8*, %struct.file*, ...)*)(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i32 0, i32 0), %struct.file* %1), !dbg !1289
  store i8* %call1, i8** %ifs, align 8, !dbg !1287
  call void @llvm.dbg.declare(metadata i8*** %argv, metadata !1290, metadata !308), !dbg !1291
  %2 = load i8*, i8** %line.addr, align 8, !dbg !1292
  %3 = load i8**, i8*** %restp.addr, align 8, !dbg !1293
  %4 = load i8*, i8** %shell, align 8, !dbg !1294
  %5 = load i8*, i8** %ifs, align 8, !dbg !1295
  %call2 = call i8** @construct_command_argv_internal(i8* %2, i8** %3, i8* %4, i8* %5), !dbg !1296
  store i8** %call2, i8*** %argv, align 8, !dbg !1297
  %6 = load i8*, i8** %shell, align 8, !dbg !1298
  call void @free(i8* %6) #9, !dbg !1299
  %7 = load i8*, i8** %ifs, align 8, !dbg !1300
  call void @free(i8* %7) #9, !dbg !1301
  %8 = load i8**, i8*** %argv, align 8, !dbg !1302
  ret i8** %8, !dbg !1303
}

; Function Attrs: nounwind uwtable
define internal i8** @construct_command_argv_internal(i8* %line, i8** %restp, i8* %shell, i8* %ifs) #0 {
entry:
  %retval = alloca i8**, align 8
  %line.addr = alloca i8*, align 8
  %restp.addr = alloca i8**, align 8
  %shell.addr = alloca i8*, align 8
  %ifs.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %ap = alloca i8*, align 8
  %end = alloca i8*, align 8
  %instring = alloca i32, align 4
  %new_argv = alloca i8**, align 8
  %j = alloca i32, align 4
  %shell_len = alloca i32, align 4
  %line_len = alloca i32, align 4
  %new_line = alloca i8*, align 8
  store i8* %line, i8** %line.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %line.addr, metadata !1304, metadata !308), !dbg !1305
  store i8** %restp, i8*** %restp.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %restp.addr, metadata !1306, metadata !308), !dbg !1307
  store i8* %shell, i8** %shell.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %shell.addr, metadata !1308, metadata !308), !dbg !1309
  store i8* %ifs, i8** %ifs.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ifs.addr, metadata !1310, metadata !308), !dbg !1311
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1312, metadata !308), !dbg !1313
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1314, metadata !308), !dbg !1315
  call void @llvm.dbg.declare(metadata i8** %ap, metadata !1316, metadata !308), !dbg !1317
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1318, metadata !308), !dbg !1319
  call void @llvm.dbg.declare(metadata i32* %instring, metadata !1320, metadata !308), !dbg !1321
  call void @llvm.dbg.declare(metadata i8*** %new_argv, metadata !1322, metadata !308), !dbg !1323
  store i8** null, i8*** %new_argv, align 8, !dbg !1323
  %0 = load i8*, i8** %shell.addr, align 8, !dbg !1324
  %cmp = icmp ne i8* %0, null, !dbg !1326
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !1327

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %shell.addr, align 8, !dbg !1328
  %call = call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @default_shell, i32 0, i32 0)) #11, !dbg !1330
  %tobool = icmp ne i32 %call, 0, !dbg !1330
  br i1 %tobool, label %if.then, label %if.end, !dbg !1331

if.then:                                          ; preds = %land.lhs.true
  br label %slow, !dbg !1332

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load i8*, i8** %ifs.addr, align 8, !dbg !1333
  %cmp1 = icmp ne i8* %2, null, !dbg !1335
  br i1 %cmp1, label %if.then.2, label %if.end.18, !dbg !1336

if.then.2:                                        ; preds = %if.end
  %3 = load i8*, i8** %ifs.addr, align 8, !dbg !1337
  store i8* %3, i8** %ap, align 8, !dbg !1339
  br label %for.cond, !dbg !1340

for.cond:                                         ; preds = %for.inc, %if.then.2
  %4 = load i8*, i8** %ap, align 8, !dbg !1341
  %5 = load i8, i8* %4, align 1, !dbg !1345
  %conv = sext i8 %5 to i32, !dbg !1345
  %cmp3 = icmp ne i32 %conv, 0, !dbg !1346
  br i1 %cmp3, label %for.body, label %for.end, !dbg !1347

for.body:                                         ; preds = %for.cond
  %6 = load i8*, i8** %ap, align 8, !dbg !1348
  %7 = load i8, i8* %6, align 1, !dbg !1350
  %conv5 = sext i8 %7 to i32, !dbg !1350
  %cmp6 = icmp ne i32 %conv5, 32, !dbg !1351
  br i1 %cmp6, label %land.lhs.true.8, label %if.end.17, !dbg !1352

land.lhs.true.8:                                  ; preds = %for.body
  %8 = load i8*, i8** %ap, align 8, !dbg !1353
  %9 = load i8, i8* %8, align 1, !dbg !1355
  %conv9 = sext i8 %9 to i32, !dbg !1355
  %cmp10 = icmp ne i32 %conv9, 9, !dbg !1356
  br i1 %cmp10, label %land.lhs.true.12, label %if.end.17, !dbg !1357

land.lhs.true.12:                                 ; preds = %land.lhs.true.8
  %10 = load i8*, i8** %ap, align 8, !dbg !1358
  %11 = load i8, i8* %10, align 1, !dbg !1360
  %conv13 = sext i8 %11 to i32, !dbg !1360
  %cmp14 = icmp ne i32 %conv13, 10, !dbg !1361
  br i1 %cmp14, label %if.then.16, label %if.end.17, !dbg !1362

if.then.16:                                       ; preds = %land.lhs.true.12
  br label %slow, !dbg !1363

if.end.17:                                        ; preds = %land.lhs.true.12, %land.lhs.true.8, %for.body
  br label %for.inc, !dbg !1364

for.inc:                                          ; preds = %if.end.17
  %12 = load i8*, i8** %ap, align 8, !dbg !1368
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1, !dbg !1368
  store i8* %incdec.ptr, i8** %ap, align 8, !dbg !1368
  br label %for.cond, !dbg !1369

for.end:                                          ; preds = %for.cond
  br label %if.end.18, !dbg !1370

if.end.18:                                        ; preds = %for.end, %if.end
  %13 = load i8*, i8** %line.addr, align 8, !dbg !1371
  %call19 = call i64 @strlen(i8* %13) #11, !dbg !1372
  %add = add i64 %call19, 1, !dbg !1373
  %conv20 = trunc i64 %add to i32, !dbg !1372
  store i32 %conv20, i32* %i, align 4, !dbg !1374
  %14 = load i32, i32* %i, align 4, !dbg !1375
  %conv21 = sext i32 %14 to i64, !dbg !1375
  %mul = mul i64 %conv21, 8, !dbg !1376
  %call22 = call i8* (i64, ...) bitcast (i8* (...)* @xmalloc to i8* (i64, ...)*)(i64 %mul), !dbg !1377
  %15 = bitcast i8* %call22 to i8**, !dbg !1378
  store i8** %15, i8*** %new_argv, align 8, !dbg !1379
  %16 = load i32, i32* %i, align 4, !dbg !1380
  %call23 = call i8* (i32, ...) bitcast (i8* (...)* @xmalloc to i8* (i32, ...)*)(i32 %16), !dbg !1381
  %17 = load i8**, i8*** %new_argv, align 8, !dbg !1382
  %arrayidx = getelementptr inbounds i8*, i8** %17, i64 0, !dbg !1382
  store i8* %call23, i8** %arrayidx, align 8, !dbg !1383
  store i8* %call23, i8** %ap, align 8, !dbg !1384
  %18 = load i8*, i8** %ap, align 8, !dbg !1385
  %19 = load i32, i32* %i, align 4, !dbg !1386
  %idx.ext = sext i32 %19 to i64, !dbg !1387
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %idx.ext, !dbg !1387
  store i8* %add.ptr, i8** %end, align 8, !dbg !1388
  %20 = load i8**, i8*** %restp.addr, align 8, !dbg !1389
  %cmp24 = icmp ne i8** %20, null, !dbg !1391
  br i1 %cmp24, label %if.then.26, label %if.end.27, !dbg !1392

if.then.26:                                       ; preds = %if.end.18
  %21 = load i8**, i8*** %restp.addr, align 8, !dbg !1393
  store i8* null, i8** %21, align 8, !dbg !1394
  br label %if.end.27, !dbg !1395

if.end.27:                                        ; preds = %if.then.26, %if.end.18
  store i32 0, i32* %i, align 4, !dbg !1396
  store i32 0, i32* %instring, align 4, !dbg !1397
  %22 = load i8*, i8** %line.addr, align 8, !dbg !1398
  store i8* %22, i8** %p, align 8, !dbg !1400
  br label %for.cond.28, !dbg !1401

for.cond.28:                                      ; preds = %for.inc.123, %if.end.27
  %23 = load i8*, i8** %p, align 8, !dbg !1402
  %24 = load i8, i8* %23, align 1, !dbg !1406
  %conv29 = sext i8 %24 to i32, !dbg !1406
  %cmp30 = icmp ne i32 %conv29, 0, !dbg !1407
  br i1 %cmp30, label %for.body.32, label %for.end.125, !dbg !1408

for.body.32:                                      ; preds = %for.cond.28
  %25 = load i8*, i8** %ap, align 8, !dbg !1409
  %26 = load i8*, i8** %end, align 8, !dbg !1412
  %cmp33 = icmp ugt i8* %25, %26, !dbg !1413
  br i1 %cmp33, label %if.then.35, label %if.end.36, !dbg !1414

if.then.35:                                       ; preds = %for.body.32
  call void @abort() #10, !dbg !1415
  unreachable, !dbg !1415

if.end.36:                                        ; preds = %for.body.32
  %27 = load i32, i32* %instring, align 4, !dbg !1416
  %tobool37 = icmp ne i32 %27, 0, !dbg !1416
  br i1 %tobool37, label %if.then.38, label %if.else.45, !dbg !1418

if.then.38:                                       ; preds = %if.end.36
  %28 = load i8*, i8** %p, align 8, !dbg !1419
  %29 = load i8, i8* %28, align 1, !dbg !1422
  %conv39 = sext i8 %29 to i32, !dbg !1422
  %cmp40 = icmp eq i32 %conv39, 39, !dbg !1423
  br i1 %cmp40, label %if.then.42, label %if.else, !dbg !1424

if.then.42:                                       ; preds = %if.then.38
  store i32 0, i32* %instring, align 4, !dbg !1425
  br label %if.end.44, !dbg !1426

if.else:                                          ; preds = %if.then.38
  %30 = load i8*, i8** %p, align 8, !dbg !1427
  %31 = load i8, i8* %30, align 1, !dbg !1428
  %32 = load i8*, i8** %ap, align 8, !dbg !1429
  %incdec.ptr43 = getelementptr inbounds i8, i8* %32, i32 1, !dbg !1429
  store i8* %incdec.ptr43, i8** %ap, align 8, !dbg !1429
  store i8 %31, i8* %32, align 1, !dbg !1430
  br label %if.end.44

if.end.44:                                        ; preds = %if.else, %if.then.42
  br label %if.end.122, !dbg !1431

if.else.45:                                       ; preds = %if.end.36
  %33 = load i8*, i8** %p, align 8, !dbg !1432
  %34 = load i8, i8* %33, align 1, !dbg !1432
  %conv46 = sext i8 %34 to i32, !dbg !1432
  %call47 = call i8* @strchr(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @construct_command_argv_internal.sh_chars, i32 0, i32 0), i32 %conv46) #11, !dbg !1432
  %cmp48 = icmp ne i8* %call47, null, !dbg !1434
  br i1 %cmp48, label %if.then.50, label %if.else.51, !dbg !1435

if.then.50:                                       ; preds = %if.else.45
  br label %slow, !dbg !1436

if.else.51:                                       ; preds = %if.else.45
  %35 = load i8*, i8** %p, align 8, !dbg !1437
  %36 = load i8, i8* %35, align 1, !dbg !1438
  %conv52 = sext i8 %36 to i32, !dbg !1438
  switch i32 %conv52, label %sw.default [
    i32 92, label %sw.bb
    i32 39, label %sw.bb.66
    i32 10, label %sw.bb.67
    i32 32, label %sw.bb.74
    i32 9, label %sw.bb.74
  ], !dbg !1439

sw.bb:                                            ; preds = %if.else.51
  %37 = load i8*, i8** %p, align 8, !dbg !1440
  %arrayidx53 = getelementptr inbounds i8, i8* %37, i64 1, !dbg !1440
  %38 = load i8, i8* %arrayidx53, align 1, !dbg !1440
  %conv54 = sext i8 %38 to i32, !dbg !1440
  %cmp55 = icmp ne i32 %conv54, 0, !dbg !1443
  br i1 %cmp55, label %land.lhs.true.57, label %if.end.65, !dbg !1444

land.lhs.true.57:                                 ; preds = %sw.bb
  %39 = load i8*, i8** %p, align 8, !dbg !1445
  %arrayidx58 = getelementptr inbounds i8, i8* %39, i64 1, !dbg !1445
  %40 = load i8, i8* %arrayidx58, align 1, !dbg !1445
  %conv59 = sext i8 %40 to i32, !dbg !1445
  %cmp60 = icmp ne i32 %conv59, 10, !dbg !1447
  br i1 %cmp60, label %if.then.62, label %if.end.65, !dbg !1448

if.then.62:                                       ; preds = %land.lhs.true.57
  %41 = load i8*, i8** %p, align 8, !dbg !1449
  %incdec.ptr63 = getelementptr inbounds i8, i8* %41, i32 1, !dbg !1449
  store i8* %incdec.ptr63, i8** %p, align 8, !dbg !1449
  %42 = load i8, i8* %incdec.ptr63, align 1, !dbg !1450
  %43 = load i8*, i8** %ap, align 8, !dbg !1451
  %incdec.ptr64 = getelementptr inbounds i8, i8* %43, i32 1, !dbg !1451
  store i8* %incdec.ptr64, i8** %ap, align 8, !dbg !1451
  store i8 %42, i8* %43, align 1, !dbg !1452
  br label %if.end.65, !dbg !1453

if.end.65:                                        ; preds = %if.then.62, %land.lhs.true.57, %sw.bb
  br label %sw.epilog, !dbg !1454

sw.bb.66:                                         ; preds = %if.else.51
  store i32 1, i32* %instring, align 4, !dbg !1455
  br label %sw.epilog, !dbg !1456

sw.bb.67:                                         ; preds = %if.else.51
  %44 = load i8**, i8*** %restp.addr, align 8, !dbg !1457
  %cmp68 = icmp ne i8** %44, null, !dbg !1459
  br i1 %cmp68, label %if.then.70, label %if.else.71, !dbg !1460

if.then.70:                                       ; preds = %sw.bb.67
  %45 = load i8*, i8** %p, align 8, !dbg !1461
  %46 = load i8**, i8*** %restp.addr, align 8, !dbg !1463
  store i8* %45, i8** %46, align 8, !dbg !1464
  br label %end_of_line, !dbg !1465

if.else.71:                                       ; preds = %sw.bb.67
  %47 = load i8*, i8** %ap, align 8, !dbg !1466
  %incdec.ptr72 = getelementptr inbounds i8, i8* %47, i32 1, !dbg !1466
  store i8* %incdec.ptr72, i8** %ap, align 8, !dbg !1466
  store i8 10, i8* %47, align 1, !dbg !1467
  br label %if.end.73

if.end.73:                                        ; preds = %if.else.71
  br label %sw.epilog, !dbg !1468

sw.bb.74:                                         ; preds = %if.else.51, %if.else.51
  %48 = load i8*, i8** %ap, align 8, !dbg !1469
  %incdec.ptr75 = getelementptr inbounds i8, i8* %48, i32 1, !dbg !1469
  store i8* %incdec.ptr75, i8** %ap, align 8, !dbg !1469
  store i8 0, i8* %48, align 1, !dbg !1470
  %49 = load i8*, i8** %ap, align 8, !dbg !1471
  %50 = load i32, i32* %i, align 4, !dbg !1472
  %inc = add nsw i32 %50, 1, !dbg !1472
  store i32 %inc, i32* %i, align 4, !dbg !1472
  %idxprom = sext i32 %inc to i64, !dbg !1473
  %51 = load i8**, i8*** %new_argv, align 8, !dbg !1473
  %arrayidx76 = getelementptr inbounds i8*, i8** %51, i64 %idxprom, !dbg !1473
  store i8* %49, i8** %arrayidx76, align 8, !dbg !1474
  %52 = load i32, i32* %i, align 4, !dbg !1475
  %cmp77 = icmp eq i32 %52, 1, !dbg !1477
  br i1 %cmp77, label %if.then.79, label %if.end.117, !dbg !1478

if.then.79:                                       ; preds = %sw.bb.74
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1479, metadata !308), !dbg !1481
  store i32 0, i32* %j, align 4, !dbg !1482
  br label %for.cond.80, !dbg !1484

for.cond.80:                                      ; preds = %for.inc.114, %if.then.79
  %53 = load i32, i32* %j, align 4, !dbg !1485
  %idxprom81 = sext i32 %53 to i64, !dbg !1489
  %arrayidx82 = getelementptr inbounds [25 x i8*], [25 x i8*]* @construct_command_argv_internal.sh_cmds, i32 0, i64 %idxprom81, !dbg !1489
  %54 = load i8*, i8** %arrayidx82, align 8, !dbg !1489
  %cmp83 = icmp ne i8* %54, null, !dbg !1490
  br i1 %cmp83, label %for.body.85, label %for.end.116, !dbg !1491

for.body.85:                                      ; preds = %for.cond.80
  %55 = load i32, i32* %j, align 4, !dbg !1492
  %idxprom86 = sext i32 %55 to i64, !dbg !1492
  %arrayidx87 = getelementptr inbounds [25 x i8*], [25 x i8*]* @construct_command_argv_internal.sh_cmds, i32 0, i64 %idxprom86, !dbg !1492
  %56 = load i8*, i8** %arrayidx87, align 8, !dbg !1492
  %57 = load i8**, i8*** %new_argv, align 8, !dbg !1492
  %arrayidx88 = getelementptr inbounds i8*, i8** %57, i64 0, !dbg !1492
  %58 = load i8*, i8** %arrayidx88, align 8, !dbg !1492
  %cmp89 = icmp eq i8* %56, %58, !dbg !1492
  br i1 %cmp89, label %if.then.112, label %lor.lhs.false, !dbg !1492

lor.lhs.false:                                    ; preds = %for.body.85
  %59 = load i32, i32* %j, align 4, !dbg !1494
  %idxprom91 = sext i32 %59 to i64, !dbg !1494
  %arrayidx92 = getelementptr inbounds [25 x i8*], [25 x i8*]* @construct_command_argv_internal.sh_cmds, i32 0, i64 %idxprom91, !dbg !1494
  %60 = load i8*, i8** %arrayidx92, align 8, !dbg !1494
  %61 = load i8, i8* %60, align 1, !dbg !1494
  %conv93 = sext i8 %61 to i32, !dbg !1494
  %62 = load i8**, i8*** %new_argv, align 8, !dbg !1494
  %arrayidx94 = getelementptr inbounds i8*, i8** %62, i64 0, !dbg !1494
  %63 = load i8*, i8** %arrayidx94, align 8, !dbg !1494
  %64 = load i8, i8* %63, align 1, !dbg !1494
  %conv95 = sext i8 %64 to i32, !dbg !1494
  %cmp96 = icmp eq i32 %conv93, %conv95, !dbg !1494
  br i1 %cmp96, label %land.lhs.true.98, label %if.end.113, !dbg !1494

land.lhs.true.98:                                 ; preds = %lor.lhs.false
  %65 = load i32, i32* %j, align 4, !dbg !1496
  %idxprom99 = sext i32 %65 to i64, !dbg !1496
  %arrayidx100 = getelementptr inbounds [25 x i8*], [25 x i8*]* @construct_command_argv_internal.sh_cmds, i32 0, i64 %idxprom99, !dbg !1496
  %66 = load i8*, i8** %arrayidx100, align 8, !dbg !1496
  %67 = load i8, i8* %66, align 1, !dbg !1496
  %conv101 = sext i8 %67 to i32, !dbg !1496
  %cmp102 = icmp eq i32 %conv101, 0, !dbg !1496
  br i1 %cmp102, label %if.then.112, label %lor.lhs.false.104, !dbg !1496

lor.lhs.false.104:                                ; preds = %land.lhs.true.98
  %68 = load i32, i32* %j, align 4, !dbg !1498
  %idxprom105 = sext i32 %68 to i64, !dbg !1498
  %arrayidx106 = getelementptr inbounds [25 x i8*], [25 x i8*]* @construct_command_argv_internal.sh_cmds, i32 0, i64 %idxprom105, !dbg !1498
  %69 = load i8*, i8** %arrayidx106, align 8, !dbg !1498
  %add.ptr107 = getelementptr inbounds i8, i8* %69, i64 1, !dbg !1498
  %70 = load i8**, i8*** %new_argv, align 8, !dbg !1498
  %arrayidx108 = getelementptr inbounds i8*, i8** %70, i64 0, !dbg !1498
  %71 = load i8*, i8** %arrayidx108, align 8, !dbg !1498
  %add.ptr109 = getelementptr inbounds i8, i8* %71, i64 1, !dbg !1498
  %call110 = call i32 @strcmp(i8* %add.ptr107, i8* %add.ptr109) #11, !dbg !1498
  %tobool111 = icmp ne i32 %call110, 0, !dbg !1498
  br i1 %tobool111, label %if.end.113, label %if.then.112, !dbg !1500

if.then.112:                                      ; preds = %lor.lhs.false.104, %land.lhs.true.98, %for.body.85
  br label %slow, !dbg !1501

if.end.113:                                       ; preds = %lor.lhs.false.104, %lor.lhs.false
  br label %for.inc.114, !dbg !1502

for.inc.114:                                      ; preds = %if.end.113
  %72 = load i32, i32* %j, align 4, !dbg !1505
  %inc115 = add nsw i32 %72, 1, !dbg !1505
  store i32 %inc115, i32* %j, align 4, !dbg !1505
  br label %for.cond.80, !dbg !1506

for.end.116:                                      ; preds = %for.cond.80
  br label %if.end.117, !dbg !1507

if.end.117:                                       ; preds = %for.end.116, %sw.bb.74
  %73 = load i8*, i8** %p, align 8, !dbg !1508
  %call118 = call i8* (i8*, ...) bitcast (i8* (...)* @next_token to i8* (i8*, ...)*)(i8* %73), !dbg !1509
  store i8* %call118, i8** %p, align 8, !dbg !1510
  %74 = load i8*, i8** %p, align 8, !dbg !1511
  %incdec.ptr119 = getelementptr inbounds i8, i8* %74, i32 -1, !dbg !1511
  store i8* %incdec.ptr119, i8** %p, align 8, !dbg !1511
  br label %sw.epilog, !dbg !1512

sw.default:                                       ; preds = %if.else.51
  %75 = load i8*, i8** %p, align 8, !dbg !1513
  %76 = load i8, i8* %75, align 1, !dbg !1514
  %77 = load i8*, i8** %ap, align 8, !dbg !1515
  %incdec.ptr120 = getelementptr inbounds i8, i8* %77, i32 1, !dbg !1515
  store i8* %incdec.ptr120, i8** %ap, align 8, !dbg !1515
  store i8 %76, i8* %77, align 1, !dbg !1516
  br label %sw.epilog, !dbg !1517

sw.epilog:                                        ; preds = %sw.default, %if.end.117, %if.end.73, %sw.bb.66, %if.end.65
  br label %if.end.121

if.end.121:                                       ; preds = %sw.epilog
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %if.end.44
  br label %for.inc.123, !dbg !1518

for.inc.123:                                      ; preds = %if.end.122
  %78 = load i8*, i8** %p, align 8, !dbg !1519
  %incdec.ptr124 = getelementptr inbounds i8, i8* %78, i32 1, !dbg !1519
  store i8* %incdec.ptr124, i8** %p, align 8, !dbg !1519
  br label %for.cond.28, !dbg !1520

for.end.125:                                      ; preds = %for.cond.28
  br label %end_of_line, !dbg !1521

end_of_line:                                      ; preds = %for.end.125, %if.then.70
  %79 = load i32, i32* %instring, align 4, !dbg !1522
  %tobool126 = icmp ne i32 %79, 0, !dbg !1522
  br i1 %tobool126, label %if.then.127, label %if.end.128, !dbg !1524

if.then.127:                                      ; preds = %end_of_line
  br label %slow, !dbg !1525

if.end.128:                                       ; preds = %end_of_line
  %80 = load i8*, i8** %ap, align 8, !dbg !1526
  store i8 0, i8* %80, align 1, !dbg !1527
  %81 = load i32, i32* %i, align 4, !dbg !1528
  %idxprom129 = sext i32 %81 to i64, !dbg !1530
  %82 = load i8**, i8*** %new_argv, align 8, !dbg !1530
  %arrayidx130 = getelementptr inbounds i8*, i8** %82, i64 %idxprom129, !dbg !1530
  %83 = load i8*, i8** %arrayidx130, align 8, !dbg !1530
  %arrayidx131 = getelementptr inbounds i8, i8* %83, i64 0, !dbg !1530
  %84 = load i8, i8* %arrayidx131, align 1, !dbg !1530
  %conv132 = sext i8 %84 to i32, !dbg !1530
  %cmp133 = icmp ne i32 %conv132, 0, !dbg !1531
  br i1 %cmp133, label %if.then.135, label %if.end.137, !dbg !1532

if.then.135:                                      ; preds = %if.end.128
  %85 = load i32, i32* %i, align 4, !dbg !1533
  %inc136 = add nsw i32 %85, 1, !dbg !1533
  store i32 %inc136, i32* %i, align 4, !dbg !1533
  br label %if.end.137, !dbg !1533

if.end.137:                                       ; preds = %if.then.135, %if.end.128
  %86 = load i32, i32* %i, align 4, !dbg !1534
  %idxprom138 = sext i32 %86 to i64, !dbg !1535
  %87 = load i8**, i8*** %new_argv, align 8, !dbg !1535
  %arrayidx139 = getelementptr inbounds i8*, i8** %87, i64 %idxprom138, !dbg !1535
  store i8* null, i8** %arrayidx139, align 8, !dbg !1536
  %88 = load i8**, i8*** %new_argv, align 8, !dbg !1537
  %arrayidx140 = getelementptr inbounds i8*, i8** %88, i64 0, !dbg !1537
  %89 = load i8*, i8** %arrayidx140, align 8, !dbg !1537
  %cmp141 = icmp eq i8* %89, null, !dbg !1539
  br i1 %cmp141, label %if.then.143, label %if.else.144, !dbg !1540

if.then.143:                                      ; preds = %if.end.137
  store i8** null, i8*** %retval, !dbg !1541
  br label %return, !dbg !1541

if.else.144:                                      ; preds = %if.end.137
  %90 = load i8**, i8*** %new_argv, align 8, !dbg !1542
  store i8** %90, i8*** %retval, !dbg !1543
  br label %return, !dbg !1543

slow:                                             ; preds = %if.then.127, %if.then.112, %if.then.50, %if.then.16, %if.then
  %91 = load i8**, i8*** %new_argv, align 8, !dbg !1544
  %cmp145 = icmp ne i8** %91, null, !dbg !1546
  br i1 %cmp145, label %if.then.147, label %if.end.149, !dbg !1547

if.then.147:                                      ; preds = %slow
  %92 = load i8**, i8*** %new_argv, align 8, !dbg !1548
  %arrayidx148 = getelementptr inbounds i8*, i8** %92, i64 0, !dbg !1548
  %93 = load i8*, i8** %arrayidx148, align 8, !dbg !1548
  call void @free(i8* %93) #9, !dbg !1550
  %94 = load i8**, i8*** %new_argv, align 8, !dbg !1551
  %95 = bitcast i8** %94 to i8*, !dbg !1551
  call void @free(i8* %95) #9, !dbg !1552
  br label %if.end.149, !dbg !1553

if.end.149:                                       ; preds = %if.then.147, %slow
  %96 = load i8*, i8** %shell.addr, align 8, !dbg !1554
  %cmp150 = icmp eq i8* %96, null, !dbg !1556
  br i1 %cmp150, label %if.then.155, label %lor.lhs.false.152, !dbg !1557

lor.lhs.false.152:                                ; preds = %if.end.149
  %97 = load i8*, i8** %shell.addr, align 8, !dbg !1558
  %call153 = call i32 @strcmp(i8* %97, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @default_shell, i32 0, i32 0)) #11, !dbg !1560
  %tobool154 = icmp ne i32 %call153, 0, !dbg !1560
  br i1 %tobool154, label %if.else.164, label %if.then.155, !dbg !1561

if.then.155:                                      ; preds = %lor.lhs.false.152, %if.end.149
  %call156 = call i8* (i64, ...) bitcast (i8* (...)* @xmalloc to i8* (i64, ...)*)(i64 32), !dbg !1562
  %98 = bitcast i8* %call156 to i8**, !dbg !1564
  store i8** %98, i8*** %new_argv, align 8, !dbg !1565
  %call157 = call i8* (i8*, i64, ...) bitcast (i8* (...)* @savestring to i8* (i8*, i64, ...)*)(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @default_shell, i32 0, i32 0), i64 7), !dbg !1566
  %99 = load i8**, i8*** %new_argv, align 8, !dbg !1567
  %arrayidx158 = getelementptr inbounds i8*, i8** %99, i64 0, !dbg !1567
  store i8* %call157, i8** %arrayidx158, align 8, !dbg !1568
  %100 = load i8**, i8*** %new_argv, align 8, !dbg !1569
  %arrayidx159 = getelementptr inbounds i8*, i8** %100, i64 1, !dbg !1569
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i8** %arrayidx159, align 8, !dbg !1570
  %101 = load i8*, i8** %line.addr, align 8, !dbg !1571
  %102 = load i8*, i8** %line.addr, align 8, !dbg !1572
  %call160 = call i64 @strlen(i8* %102) #11, !dbg !1573
  %call161 = call i8* (i8*, i64, ...) bitcast (i8* (...)* @savestring to i8* (i8*, i64, ...)*)(i8* %101, i64 %call160), !dbg !1574
  %103 = load i8**, i8*** %new_argv, align 8, !dbg !1575
  %arrayidx162 = getelementptr inbounds i8*, i8** %103, i64 2, !dbg !1575
  store i8* %call161, i8** %arrayidx162, align 8, !dbg !1576
  %104 = load i8**, i8*** %new_argv, align 8, !dbg !1577
  %arrayidx163 = getelementptr inbounds i8*, i8** %104, i64 3, !dbg !1577
  store i8* null, i8** %arrayidx163, align 8, !dbg !1578
  br label %if.end.211, !dbg !1579

if.else.164:                                      ; preds = %lor.lhs.false.152
  call void @llvm.dbg.declare(metadata i32* %shell_len, metadata !1580, metadata !308), !dbg !1582
  %105 = load i8*, i8** %shell.addr, align 8, !dbg !1583
  %call165 = call i64 @strlen(i8* %105) #11, !dbg !1584
  %conv166 = trunc i64 %call165 to i32, !dbg !1584
  store i32 %conv166, i32* %shell_len, align 4, !dbg !1582
  call void @llvm.dbg.declare(metadata i32* %line_len, metadata !1585, metadata !308), !dbg !1586
  %106 = load i8*, i8** %line.addr, align 8, !dbg !1587
  %call167 = call i64 @strlen(i8* %106) #11, !dbg !1588
  %conv168 = trunc i64 %call167 to i32, !dbg !1588
  store i32 %conv168, i32* %line_len, align 4, !dbg !1586
  call void @llvm.dbg.declare(metadata i8** %new_line, metadata !1589, metadata !308), !dbg !1590
  %107 = load i32, i32* %shell_len, align 4, !dbg !1591
  %conv169 = zext i32 %107 to i64, !dbg !1591
  %add170 = add i64 %conv169, 4, !dbg !1591
  %108 = load i32, i32* %line_len, align 4, !dbg !1591
  %mul171 = mul i32 %108, 2, !dbg !1591
  %conv172 = zext i32 %mul171 to i64, !dbg !1591
  %add173 = add i64 %add170, %conv172, !dbg !1591
  %add174 = add i64 %add173, 1, !dbg !1591
  %109 = alloca i8, i64 %add174, !dbg !1591
  store i8* %109, i8** %new_line, align 8, !dbg !1590
  %110 = load i8*, i8** %new_line, align 8, !dbg !1592
  store i8* %110, i8** %ap, align 8, !dbg !1593
  %111 = load i8*, i8** %ap, align 8, !dbg !1594
  %112 = load i8*, i8** %shell.addr, align 8, !dbg !1594
  %113 = load i32, i32* %shell_len, align 4, !dbg !1594
  %conv175 = zext i32 %113 to i64, !dbg !1594
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %111, i8* %112, i64 %conv175, i32 1, i1 false), !dbg !1594
  %114 = load i32, i32* %shell_len, align 4, !dbg !1595
  %115 = load i8*, i8** %ap, align 8, !dbg !1596
  %idx.ext176 = zext i32 %114 to i64, !dbg !1596
  %add.ptr177 = getelementptr inbounds i8, i8* %115, i64 %idx.ext176, !dbg !1596
  store i8* %add.ptr177, i8** %ap, align 8, !dbg !1596
  %116 = load i8*, i8** %ap, align 8, !dbg !1597
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %116, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @construct_command_argv_internal.minus_c, i32 0, i32 0), i64 4, i32 1, i1 false), !dbg !1597
  %117 = load i8*, i8** %ap, align 8, !dbg !1598
  %add.ptr178 = getelementptr inbounds i8, i8* %117, i64 4, !dbg !1598
  store i8* %add.ptr178, i8** %ap, align 8, !dbg !1598
  %118 = load i8*, i8** %line.addr, align 8, !dbg !1599
  store i8* %118, i8** %p, align 8, !dbg !1601
  br label %for.cond.179, !dbg !1602

for.cond.179:                                     ; preds = %for.inc.207, %if.else.164
  %119 = load i8*, i8** %p, align 8, !dbg !1603
  %120 = load i8, i8* %119, align 1, !dbg !1607
  %conv180 = sext i8 %120 to i32, !dbg !1607
  %cmp181 = icmp ne i32 %conv180, 0, !dbg !1608
  br i1 %cmp181, label %for.body.183, label %for.end.209, !dbg !1609

for.body.183:                                     ; preds = %for.cond.179
  %121 = load i8*, i8** %p, align 8, !dbg !1610
  %122 = load i8, i8* %121, align 1, !dbg !1613
  %conv184 = sext i8 %122 to i32, !dbg !1613
  %cmp185 = icmp eq i32 %conv184, 92, !dbg !1614
  br i1 %cmp185, label %if.then.203, label %lor.lhs.false.187, !dbg !1615

lor.lhs.false.187:                                ; preds = %for.body.183
  %123 = load i8*, i8** %p, align 8, !dbg !1616
  %124 = load i8, i8* %123, align 1, !dbg !1618
  %conv188 = sext i8 %124 to i32, !dbg !1618
  %cmp189 = icmp eq i32 %conv188, 39, !dbg !1619
  br i1 %cmp189, label %if.then.203, label %lor.lhs.false.191, !dbg !1620

lor.lhs.false.191:                                ; preds = %lor.lhs.false.187
  %125 = load i8*, i8** %p, align 8, !dbg !1621
  %126 = load i8, i8* %125, align 1, !dbg !1621
  %conv192 = sext i8 %126 to i32, !dbg !1621
  %idxprom193 = sext i32 %conv192 to i64, !dbg !1621
  %call194 = call i16** @__ctype_b_loc() #1, !dbg !1621
  %127 = load i16*, i16** %call194, align 8, !dbg !1621
  %arrayidx195 = getelementptr inbounds i16, i16* %127, i64 %idxprom193, !dbg !1621
  %128 = load i16, i16* %arrayidx195, align 2, !dbg !1621
  %conv196 = zext i16 %128 to i32, !dbg !1621
  %and = and i32 %conv196, 8192, !dbg !1621
  %tobool197 = icmp ne i32 %and, 0, !dbg !1621
  br i1 %tobool197, label %if.then.203, label %lor.lhs.false.198, !dbg !1623

lor.lhs.false.198:                                ; preds = %lor.lhs.false.191
  %129 = load i8*, i8** %p, align 8, !dbg !1624
  %130 = load i8, i8* %129, align 1, !dbg !1624
  %conv199 = sext i8 %130 to i32, !dbg !1624
  %call200 = call i8* @strchr(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @construct_command_argv_internal.sh_chars, i32 0, i32 0), i32 %conv199) #11, !dbg !1624
  %cmp201 = icmp ne i8* %call200, null, !dbg !1626
  br i1 %cmp201, label %if.then.203, label %if.end.205, !dbg !1627

if.then.203:                                      ; preds = %lor.lhs.false.198, %lor.lhs.false.191, %lor.lhs.false.187, %for.body.183
  %131 = load i8*, i8** %ap, align 8, !dbg !1628
  %incdec.ptr204 = getelementptr inbounds i8, i8* %131, i32 1, !dbg !1628
  store i8* %incdec.ptr204, i8** %ap, align 8, !dbg !1628
  store i8 92, i8* %131, align 1, !dbg !1629
  br label %if.end.205, !dbg !1630

if.end.205:                                       ; preds = %if.then.203, %lor.lhs.false.198
  %132 = load i8*, i8** %p, align 8, !dbg !1631
  %133 = load i8, i8* %132, align 1, !dbg !1632
  %134 = load i8*, i8** %ap, align 8, !dbg !1633
  %incdec.ptr206 = getelementptr inbounds i8, i8* %134, i32 1, !dbg !1633
  store i8* %incdec.ptr206, i8** %ap, align 8, !dbg !1633
  store i8 %133, i8* %134, align 1, !dbg !1634
  br label %for.inc.207, !dbg !1635

for.inc.207:                                      ; preds = %if.end.205
  %135 = load i8*, i8** %p, align 8, !dbg !1636
  %incdec.ptr208 = getelementptr inbounds i8, i8* %135, i32 1, !dbg !1636
  store i8* %incdec.ptr208, i8** %p, align 8, !dbg !1636
  br label %for.cond.179, !dbg !1637

for.end.209:                                      ; preds = %for.cond.179
  %136 = load i8*, i8** %ap, align 8, !dbg !1638
  store i8 0, i8* %136, align 1, !dbg !1639
  %137 = load i8*, i8** %new_line, align 8, !dbg !1640
  %138 = load i8**, i8*** %restp.addr, align 8, !dbg !1641
  %call210 = call i8** @construct_command_argv_internal(i8* %137, i8** %138, i8* null, i8* null), !dbg !1642
  store i8** %call210, i8*** %new_argv, align 8, !dbg !1643
  br label %if.end.211

if.end.211:                                       ; preds = %for.end.209, %if.then.155
  %139 = load i8**, i8*** %new_argv, align 8, !dbg !1644
  store i8** %139, i8*** %retval, !dbg !1645
  br label %return, !dbg !1645

return:                                           ; preds = %if.end.211, %if.else.144, %if.then.143
  %140 = load i8**, i8*** %retval, !dbg !1646
  ret i8** %140, !dbg !1646
}

; Function Attrs: nounwind
declare void @free(i8*) #3

; Function Attrs: nounwind uwtable
define internal void @unblock_signals() #0 {
entry:
  %call = call i32 @sigblock(i32 0) #9, !dbg !1647
  %conv = sext i32 %call to i64, !dbg !1647
  %0 = load i32, i32* @fatal_signal_mask, align 4, !dbg !1648
  %conv1 = sext i32 %0 to i64, !dbg !1648
  %or = or i64 %conv1, 65536, !dbg !1649
  %neg = xor i64 %or, -1, !dbg !1650
  %and = and i64 %conv, %neg, !dbg !1651
  %conv2 = trunc i64 %and to i32, !dbg !1647
  %call3 = call i32 @sigsetmask(i32 %conv2) #9, !dbg !1652
  call void (...) @unblock_remote_children(), !dbg !1653
  ret void, !dbg !1654
}

; Function Attrs: nounwind
declare i32 @sigsetmask(i32) #3

; Function Attrs: nounwind
declare i32 @sigblock(i32) #3

declare void @unblock_remote_children(...) #2

; Function Attrs: nounwind uwtable
define internal void @block_signals() #0 {
entry:
  %0 = load i32, i32* @fatal_signal_mask, align 4, !dbg !1655
  %conv = sext i32 %0 to i64, !dbg !1655
  %or = or i64 %conv, 65536, !dbg !1656
  %conv1 = trunc i64 %or to i32, !dbg !1655
  %call = call i32 @sigblock(i32 %conv1) #9, !dbg !1657
  call void (...) @block_remote_children(), !dbg !1658
  ret void, !dbg !1659
}

declare void @block_remote_children(...) #2

; Function Attrs: nounwind uwtable
define internal void @free_child(%struct.child* %child) #0 {
entry:
  %child.addr = alloca %struct.child*, align 8
  %i = alloca i32, align 4
  %ep = alloca i8**, align 8
  store %struct.child* %child, %struct.child** %child.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.child** %child.addr, metadata !1660, metadata !308), !dbg !1661
  %0 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1662
  %command_lines = getelementptr inbounds %struct.child, %struct.child* %0, i32 0, i32 3, !dbg !1664
  %1 = load i8**, i8*** %command_lines, align 8, !dbg !1664
  %cmp = icmp ne i8** %1, null, !dbg !1665
  br i1 %cmp, label %if.then, label %if.end, !dbg !1666

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1667, metadata !308), !dbg !1669
  store i32 0, i32* %i, align 4, !dbg !1670
  br label %for.cond, !dbg !1672

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !1673
  %3 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1677
  %file = getelementptr inbounds %struct.child, %struct.child* %3, i32 0, i32 1, !dbg !1678
  %4 = load %struct.file*, %struct.file** %file, align 8, !dbg !1678
  %cmds = getelementptr inbounds %struct.file, %struct.file* %4, i32 0, i32 3, !dbg !1679
  %5 = load %struct.commands*, %struct.commands** %cmds, align 8, !dbg !1679
  %ncommand_lines = getelementptr inbounds %struct.commands, %struct.commands* %5, i32 0, i32 3, !dbg !1680
  %6 = load i32, i32* %ncommand_lines, align 4, !dbg !1680
  %cmp1 = icmp ult i32 %2, %6, !dbg !1681
  br i1 %cmp1, label %for.body, label %for.end, !dbg !1682

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4, !dbg !1683
  %idxprom = zext i32 %7 to i64, !dbg !1684
  %8 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1684
  %command_lines2 = getelementptr inbounds %struct.child, %struct.child* %8, i32 0, i32 3, !dbg !1685
  %9 = load i8**, i8*** %command_lines2, align 8, !dbg !1685
  %arrayidx = getelementptr inbounds i8*, i8** %9, i64 %idxprom, !dbg !1684
  %10 = load i8*, i8** %arrayidx, align 8, !dbg !1684
  call void @free(i8* %10) #9, !dbg !1686
  br label %for.inc, !dbg !1686

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !1687
  %inc = add i32 %11, 1, !dbg !1687
  store i32 %inc, i32* %i, align 4, !dbg !1687
  br label %for.cond, !dbg !1688

for.end:                                          ; preds = %for.cond
  %12 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1689
  %command_lines3 = getelementptr inbounds %struct.child, %struct.child* %12, i32 0, i32 3, !dbg !1690
  %13 = load i8**, i8*** %command_lines3, align 8, !dbg !1690
  %14 = bitcast i8** %13 to i8*, !dbg !1691
  call void @free(i8* %14) #9, !dbg !1692
  br label %if.end, !dbg !1693

if.end:                                           ; preds = %for.end, %entry
  %15 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1694
  %environment = getelementptr inbounds %struct.child, %struct.child* %15, i32 0, i32 2, !dbg !1696
  %16 = load i8**, i8*** %environment, align 8, !dbg !1696
  %cmp4 = icmp ne i8** %16, null, !dbg !1697
  br i1 %cmp4, label %if.then.5, label %if.end.9, !dbg !1698

if.then.5:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8*** %ep, metadata !1699, metadata !308), !dbg !1701
  %17 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1702
  %environment6 = getelementptr inbounds %struct.child, %struct.child* %17, i32 0, i32 2, !dbg !1703
  %18 = load i8**, i8*** %environment6, align 8, !dbg !1703
  store i8** %18, i8*** %ep, align 8, !dbg !1701
  br label %while.cond, !dbg !1704

while.cond:                                       ; preds = %while.body, %if.then.5
  %19 = load i8**, i8*** %ep, align 8, !dbg !1705
  %20 = load i8*, i8** %19, align 8, !dbg !1708
  %cmp7 = icmp ne i8* %20, null, !dbg !1709
  br i1 %cmp7, label %while.body, label %while.end, !dbg !1704

while.body:                                       ; preds = %while.cond
  %21 = load i8**, i8*** %ep, align 8, !dbg !1710
  %incdec.ptr = getelementptr inbounds i8*, i8** %21, i32 1, !dbg !1710
  store i8** %incdec.ptr, i8*** %ep, align 8, !dbg !1710
  %22 = load i8*, i8** %21, align 8, !dbg !1711
  call void @free(i8* %22) #9, !dbg !1712
  br label %while.cond, !dbg !1704

while.end:                                        ; preds = %while.cond
  %23 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1713
  %environment8 = getelementptr inbounds %struct.child, %struct.child* %23, i32 0, i32 2, !dbg !1714
  %24 = load i8**, i8*** %environment8, align 8, !dbg !1714
  %25 = bitcast i8** %24 to i8*, !dbg !1715
  call void @free(i8* %25) #9, !dbg !1716
  br label %if.end.9, !dbg !1717

if.end.9:                                         ; preds = %while.end, %if.end
  %26 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1718
  %27 = bitcast %struct.child* %26 to i8*, !dbg !1719
  call void @free(i8* %27) #9, !dbg !1720
  ret void, !dbg !1721
}

; Function Attrs: nounwind uwtable
define internal void @start_job(%struct.child* %child) #0 {
entry:
  %child.addr = alloca %struct.child*, align 8
  %p = alloca i8*, align 8
  %noprint = alloca i8, align 1
  %recursive = alloca i8, align 1
  %argv = alloca i8**, align 8
  %end = alloca i8*, align 8
  %pd = alloca [2 x i32], align 4
  %is_remote = alloca i32, align 4
  %id = alloca i32, align 4
  %used_stdin = alloca i32, align 4
  store %struct.child* %child, %struct.child** %child.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.child** %child.addr, metadata !1722, metadata !308), !dbg !1723
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1724, metadata !308), !dbg !1725
  call void @llvm.dbg.declare(metadata i8* %noprint, metadata !1726, metadata !308), !dbg !1727
  store i8 0, i8* %noprint, align 1, !dbg !1727
  call void @llvm.dbg.declare(metadata i8* %recursive, metadata !1728, metadata !308), !dbg !1729
  call void @llvm.dbg.declare(metadata i8*** %argv, metadata !1730, metadata !308), !dbg !1731
  %0 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1732
  %command_ptr = getelementptr inbounds %struct.child, %struct.child* %0, i32 0, i32 5, !dbg !1734
  %1 = load i8*, i8** %command_ptr, align 8, !dbg !1734
  %cmp = icmp eq i8* %1, null, !dbg !1735
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !1736

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1737
  %command_ptr1 = getelementptr inbounds %struct.child, %struct.child* %2, i32 0, i32 5, !dbg !1739
  %3 = load i8*, i8** %command_ptr1, align 8, !dbg !1739
  %4 = load i8, i8* %3, align 1, !dbg !1740
  %conv = sext i8 %4 to i32, !dbg !1740
  %cmp2 = icmp eq i32 %conv, 0, !dbg !1741
  br i1 %cmp2, label %if.then, label %if.else.18, !dbg !1742

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1743
  %command_line = getelementptr inbounds %struct.child, %struct.child* %5, i32 0, i32 4, !dbg !1746
  %6 = load i32, i32* %command_line, align 4, !dbg !1746
  %7 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1747
  %file = getelementptr inbounds %struct.child, %struct.child* %7, i32 0, i32 1, !dbg !1748
  %8 = load %struct.file*, %struct.file** %file, align 8, !dbg !1748
  %cmds = getelementptr inbounds %struct.file, %struct.file* %8, i32 0, i32 3, !dbg !1749
  %9 = load %struct.commands*, %struct.commands** %cmds, align 8, !dbg !1749
  %ncommand_lines = getelementptr inbounds %struct.commands, %struct.commands* %9, i32 0, i32 3, !dbg !1750
  %10 = load i32, i32* %ncommand_lines, align 4, !dbg !1750
  %cmp4 = icmp eq i32 %6, %10, !dbg !1751
  br i1 %cmp4, label %if.then.6, label %if.else, !dbg !1752

if.then.6:                                        ; preds = %if.then
  %11 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1753
  %command_ptr7 = getelementptr inbounds %struct.child, %struct.child* %11, i32 0, i32 5, !dbg !1755
  store i8* null, i8** %command_ptr7, align 8, !dbg !1756
  %12 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1757
  %file8 = getelementptr inbounds %struct.child, %struct.child* %12, i32 0, i32 1, !dbg !1758
  %13 = load %struct.file*, %struct.file** %file8, align 8, !dbg !1758
  %command_state = getelementptr inbounds %struct.file, %struct.file* %13, i32 0, i32 12, !dbg !1759
  %bf.load = load i16, i16* %command_state, align 2, !dbg !1760
  %bf.clear = and i16 %bf.load, -4, !dbg !1760
  %bf.set = or i16 %bf.clear, 3, !dbg !1760
  store i16 %bf.set, i16* %command_state, align 2, !dbg !1760
  %14 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1761
  %file9 = getelementptr inbounds %struct.child, %struct.child* %14, i32 0, i32 1, !dbg !1762
  %15 = load %struct.file*, %struct.file** %file9, align 8, !dbg !1762
  %update_status = getelementptr inbounds %struct.file, %struct.file* %15, i32 0, i32 11, !dbg !1763
  store i16 0, i16* %update_status, align 2, !dbg !1764
  br label %return, !dbg !1765

if.else:                                          ; preds = %if.then
  %16 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1766
  %command_line10 = getelementptr inbounds %struct.child, %struct.child* %16, i32 0, i32 4, !dbg !1768
  %17 = load i32, i32* %command_line10, align 4, !dbg !1768
  %idxprom = zext i32 %17 to i64, !dbg !1769
  %18 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1769
  %command_lines = getelementptr inbounds %struct.child, %struct.child* %18, i32 0, i32 3, !dbg !1770
  %19 = load i8**, i8*** %command_lines, align 8, !dbg !1770
  %arrayidx = getelementptr inbounds i8*, i8** %19, i64 %idxprom, !dbg !1769
  %20 = load i8*, i8** %arrayidx, align 8, !dbg !1769
  %21 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1771
  %command_ptr11 = getelementptr inbounds %struct.child, %struct.child* %21, i32 0, i32 5, !dbg !1772
  store i8* %20, i8** %command_ptr11, align 8, !dbg !1773
  %22 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1774
  %command_line12 = getelementptr inbounds %struct.child, %struct.child* %22, i32 0, i32 4, !dbg !1775
  %23 = load i32, i32* %command_line12, align 4, !dbg !1775
  %idxprom13 = zext i32 %23 to i64, !dbg !1776
  %24 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1776
  %file14 = getelementptr inbounds %struct.child, %struct.child* %24, i32 0, i32 1, !dbg !1777
  %25 = load %struct.file*, %struct.file** %file14, align 8, !dbg !1777
  %cmds15 = getelementptr inbounds %struct.file, %struct.file* %25, i32 0, i32 3, !dbg !1778
  %26 = load %struct.commands*, %struct.commands** %cmds15, align 8, !dbg !1778
  %lines_recurse = getelementptr inbounds %struct.commands, %struct.commands* %26, i32 0, i32 5, !dbg !1779
  %27 = load i8*, i8** %lines_recurse, align 8, !dbg !1779
  %arrayidx16 = getelementptr inbounds i8, i8* %27, i64 %idxprom13, !dbg !1776
  %28 = load i8, i8* %arrayidx16, align 1, !dbg !1776
  store i8 %28, i8* %recursive, align 1, !dbg !1780
  %29 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1781
  %command_line17 = getelementptr inbounds %struct.child, %struct.child* %29, i32 0, i32 4, !dbg !1782
  %30 = load i32, i32* %command_line17, align 4, !dbg !1783
  %inc = add i32 %30, 1, !dbg !1783
  store i32 %inc, i32* %command_line17, align 4, !dbg !1783
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end.25, !dbg !1784

if.else.18:                                       ; preds = %lor.lhs.false
  %31 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1785
  %command_line19 = getelementptr inbounds %struct.child, %struct.child* %31, i32 0, i32 4, !dbg !1786
  %32 = load i32, i32* %command_line19, align 4, !dbg !1786
  %sub = sub i32 %32, 1, !dbg !1787
  %idxprom20 = zext i32 %sub to i64, !dbg !1788
  %33 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1788
  %file21 = getelementptr inbounds %struct.child, %struct.child* %33, i32 0, i32 1, !dbg !1789
  %34 = load %struct.file*, %struct.file** %file21, align 8, !dbg !1789
  %cmds22 = getelementptr inbounds %struct.file, %struct.file* %34, i32 0, i32 3, !dbg !1790
  %35 = load %struct.commands*, %struct.commands** %cmds22, align 8, !dbg !1790
  %lines_recurse23 = getelementptr inbounds %struct.commands, %struct.commands* %35, i32 0, i32 5, !dbg !1791
  %36 = load i8*, i8** %lines_recurse23, align 8, !dbg !1791
  %arrayidx24 = getelementptr inbounds i8, i8* %36, i64 %idxprom20, !dbg !1788
  %37 = load i8, i8* %arrayidx24, align 1, !dbg !1788
  store i8 %37, i8* %recursive, align 1, !dbg !1792
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.18, %if.end
  %38 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1793
  %command_ptr26 = getelementptr inbounds %struct.child, %struct.child* %38, i32 0, i32 5, !dbg !1794
  %39 = load i8*, i8** %command_ptr26, align 8, !dbg !1794
  store i8* %39, i8** %p, align 8, !dbg !1795
  %40 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1796
  %noerror = getelementptr inbounds %struct.child, %struct.child* %40, i32 0, i32 7, !dbg !1797
  %bf.load27 = load i8, i8* %noerror, align 4, !dbg !1798
  %bf.clear28 = and i8 %bf.load27, -3, !dbg !1798
  store i8 %bf.clear28, i8* %noerror, align 4, !dbg !1798
  br label %while.cond, !dbg !1799

while.cond:                                       ; preds = %if.end.59, %if.end.25
  %41 = load i8*, i8** %p, align 8, !dbg !1800
  %42 = load i8, i8* %41, align 1, !dbg !1803
  %conv29 = sext i8 %42 to i32, !dbg !1803
  %cmp30 = icmp ne i32 %conv29, 0, !dbg !1804
  br i1 %cmp30, label %while.body, label %while.end, !dbg !1799

while.body:                                       ; preds = %while.cond
  %43 = load i8*, i8** %p, align 8, !dbg !1805
  %44 = load i8, i8* %43, align 1, !dbg !1808
  %conv32 = sext i8 %44 to i32, !dbg !1808
  %cmp33 = icmp eq i32 %conv32, 64, !dbg !1809
  br i1 %cmp33, label %if.then.35, label %if.else.36, !dbg !1810

if.then.35:                                       ; preds = %while.body
  store i8 1, i8* %noprint, align 1, !dbg !1811
  br label %if.end.59, !dbg !1812

if.else.36:                                       ; preds = %while.body
  %45 = load i8*, i8** %p, align 8, !dbg !1813
  %46 = load i8, i8* %45, align 1, !dbg !1815
  %conv37 = sext i8 %46 to i32, !dbg !1815
  %cmp38 = icmp eq i32 %conv37, 45, !dbg !1816
  br i1 %cmp38, label %if.then.40, label %if.else.45, !dbg !1817

if.then.40:                                       ; preds = %if.else.36
  %47 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1818
  %noerror41 = getelementptr inbounds %struct.child, %struct.child* %47, i32 0, i32 7, !dbg !1819
  %bf.load42 = load i8, i8* %noerror41, align 4, !dbg !1820
  %bf.clear43 = and i8 %bf.load42, -3, !dbg !1820
  %bf.set44 = or i8 %bf.clear43, 2, !dbg !1820
  store i8 %bf.set44, i8* %noerror41, align 4, !dbg !1820
  br label %if.end.58, !dbg !1818

if.else.45:                                       ; preds = %if.else.36
  %48 = load i8*, i8** %p, align 8, !dbg !1821
  %49 = load i8, i8* %48, align 1, !dbg !1823
  %conv46 = sext i8 %49 to i32, !dbg !1823
  %cmp47 = icmp eq i32 %conv46, 43, !dbg !1824
  br i1 %cmp47, label %if.then.49, label %if.else.50, !dbg !1825

if.then.49:                                       ; preds = %if.else.45
  store i8 1, i8* %recursive, align 1, !dbg !1826
  br label %if.end.57, !dbg !1827

if.else.50:                                       ; preds = %if.else.45
  %50 = load i8*, i8** %p, align 8, !dbg !1828
  %51 = load i8, i8* %50, align 1, !dbg !1828
  %conv51 = sext i8 %51 to i32, !dbg !1828
  %idxprom52 = sext i32 %conv51 to i64, !dbg !1828
  %call = call i16** @__ctype_b_loc() #1, !dbg !1828
  %52 = load i16*, i16** %call, align 8, !dbg !1828
  %arrayidx53 = getelementptr inbounds i16, i16* %52, i64 %idxprom52, !dbg !1828
  %53 = load i16, i16* %arrayidx53, align 2, !dbg !1828
  %conv54 = zext i16 %53 to i32, !dbg !1828
  %and = and i32 %conv54, 1, !dbg !1828
  %tobool = icmp ne i32 %and, 0, !dbg !1828
  br i1 %tobool, label %if.end.56, label %if.then.55, !dbg !1830

if.then.55:                                       ; preds = %if.else.50
  br label %while.end, !dbg !1831

if.end.56:                                        ; preds = %if.else.50
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %if.then.49
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %if.then.40
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %if.then.35
  %54 = load i8*, i8** %p, align 8, !dbg !1832
  %incdec.ptr = getelementptr inbounds i8, i8* %54, i32 1, !dbg !1832
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !1832
  br label %while.cond, !dbg !1799

while.end:                                        ; preds = %if.then.55, %while.cond
  %55 = load i32, i32* @question_flag, align 4, !dbg !1833
  %tobool60 = icmp ne i32 %55, 0, !dbg !1833
  br i1 %tobool60, label %land.lhs.true, label %if.end.63, !dbg !1835

land.lhs.true:                                    ; preds = %while.end
  %56 = load i8, i8* %recursive, align 1, !dbg !1836
  %tobool61 = icmp ne i8 %56, 0, !dbg !1836
  br i1 %tobool61, label %if.end.63, label %if.then.62, !dbg !1838

if.then.62:                                       ; preds = %land.lhs.true
  br label %error, !dbg !1839

if.end.63:                                        ; preds = %land.lhs.true, %while.end
  %57 = load i8*, i8** %p, align 8, !dbg !1840
  %call64 = call i8* (i8*, ...) bitcast (i8* (...)* @next_token to i8* (i8*, ...)*)(i8* %57), !dbg !1841
  store i8* %call64, i8** %p, align 8, !dbg !1842
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1843, metadata !308), !dbg !1845
  %58 = load i8*, i8** %p, align 8, !dbg !1846
  %59 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1847
  %file65 = getelementptr inbounds %struct.child, %struct.child* %59, i32 0, i32 1, !dbg !1848
  %60 = load %struct.file*, %struct.file** %file65, align 8, !dbg !1848
  %call66 = call i8** @construct_command_argv(i8* %58, i8** %end, %struct.file* %60), !dbg !1849
  store i8** %call66, i8*** %argv, align 8, !dbg !1850
  %61 = load i8*, i8** %end, align 8, !dbg !1851
  %cmp67 = icmp eq i8* %61, null, !dbg !1853
  br i1 %cmp67, label %if.then.69, label %if.else.71, !dbg !1854

if.then.69:                                       ; preds = %if.end.63
  %62 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1855
  %command_ptr70 = getelementptr inbounds %struct.child, %struct.child* %62, i32 0, i32 5, !dbg !1856
  store i8* null, i8** %command_ptr70, align 8, !dbg !1857
  br label %if.end.74, !dbg !1855

if.else.71:                                       ; preds = %if.end.63
  %63 = load i8*, i8** %end, align 8, !dbg !1858
  %incdec.ptr72 = getelementptr inbounds i8, i8* %63, i32 1, !dbg !1858
  store i8* %incdec.ptr72, i8** %end, align 8, !dbg !1858
  store i8 0, i8* %63, align 1, !dbg !1860
  %64 = load i8*, i8** %end, align 8, !dbg !1861
  %65 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1862
  %command_ptr73 = getelementptr inbounds %struct.child, %struct.child* %65, i32 0, i32 5, !dbg !1863
  store i8* %64, i8** %command_ptr73, align 8, !dbg !1864
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.69
  %66 = load i32, i32* @just_print_flag, align 4, !dbg !1865
  %tobool75 = icmp ne i32 %66, 0, !dbg !1865
  br i1 %tobool75, label %if.then.80, label %lor.lhs.false.76, !dbg !1867

lor.lhs.false.76:                                 ; preds = %if.end.74
  %67 = load i8, i8* %noprint, align 1, !dbg !1868
  %tobool77 = icmp ne i8 %67, 0, !dbg !1868
  br i1 %tobool77, label %if.end.82, label %land.lhs.true.78, !dbg !1870

land.lhs.true.78:                                 ; preds = %lor.lhs.false.76
  %68 = load i32, i32* @silent_flag, align 4, !dbg !1871
  %tobool79 = icmp ne i32 %68, 0, !dbg !1871
  br i1 %tobool79, label %if.end.82, label %if.then.80, !dbg !1873

if.then.80:                                       ; preds = %land.lhs.true.78, %if.end.74
  %69 = load i8*, i8** %p, align 8, !dbg !1874
  %call81 = call i32 @puts(i8* %69), !dbg !1875
  br label %if.end.82, !dbg !1875

if.end.82:                                        ; preds = %if.then.80, %land.lhs.true.78, %lor.lhs.false.76
  %70 = load i8**, i8*** %argv, align 8, !dbg !1876
  %cmp83 = icmp eq i8** %70, null, !dbg !1878
  br i1 %cmp83, label %if.then.85, label %if.end.86, !dbg !1879

if.then.85:                                       ; preds = %if.end.82
  %71 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1880
  call void @start_job(%struct.child* %71), !dbg !1882
  br label %return, !dbg !1883

if.end.86:                                        ; preds = %if.end.82
  %72 = load i32, i32* @just_print_flag, align 4, !dbg !1884
  %tobool87 = icmp ne i32 %72, 0, !dbg !1884
  br i1 %tobool87, label %land.lhs.true.88, label %if.end.92, !dbg !1886

land.lhs.true.88:                                 ; preds = %if.end.86
  %73 = load i8, i8* %recursive, align 1, !dbg !1887
  %tobool89 = icmp ne i8 %73, 0, !dbg !1887
  br i1 %tobool89, label %if.end.92, label %if.then.90, !dbg !1889

if.then.90:                                       ; preds = %land.lhs.true.88
  %74 = load i8**, i8*** %argv, align 8, !dbg !1890
  %arrayidx91 = getelementptr inbounds i8*, i8** %74, i64 0, !dbg !1890
  %75 = load i8*, i8** %arrayidx91, align 8, !dbg !1890
  call void @free(i8* %75) #9, !dbg !1892
  %76 = load i8**, i8*** %argv, align 8, !dbg !1893
  %77 = bitcast i8** %76 to i8*, !dbg !1894
  call void @free(i8* %77) #9, !dbg !1895
  %78 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1896
  call void @start_job(%struct.child* %78), !dbg !1897
  br label %return, !dbg !1898

if.end.92:                                        ; preds = %land.lhs.true.88, %if.end.86
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1899
  %call93 = call i32 @fflush(%struct._IO_FILE* %79), !dbg !1900
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1901
  %call94 = call i32 @fflush(%struct._IO_FILE* %80), !dbg !1902
  %81 = load i32, i32* @start_job.bad_stdin, align 4, !dbg !1903
  %cmp95 = icmp eq i32 %81, -1, !dbg !1905
  br i1 %cmp95, label %if.then.97, label %if.end.106, !dbg !1906

if.then.97:                                       ; preds = %if.end.92
  call void @llvm.dbg.declare(metadata [2 x i32]* %pd, metadata !1907, metadata !308), !dbg !1912
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %pd, i32 0, i32 0, !dbg !1913
  %call98 = call i32 @pipe(i32* %arraydecay) #9, !dbg !1915
  %cmp99 = icmp eq i32 %call98, 0, !dbg !1916
  br i1 %cmp99, label %if.then.101, label %if.end.105, !dbg !1917

if.then.101:                                      ; preds = %if.then.97
  %arrayidx102 = getelementptr inbounds [2 x i32], [2 x i32]* %pd, i32 0, i64 1, !dbg !1918
  %82 = load i32, i32* %arrayidx102, align 4, !dbg !1918
  %call103 = call i32 @close(i32 %82), !dbg !1920
  %arrayidx104 = getelementptr inbounds [2 x i32], [2 x i32]* %pd, i32 0, i64 0, !dbg !1921
  %83 = load i32, i32* %arrayidx104, align 4, !dbg !1921
  store i32 %83, i32* @start_job.bad_stdin, align 4, !dbg !1922
  br label %if.end.105, !dbg !1923

if.end.105:                                       ; preds = %if.then.101, %if.then.97
  br label %if.end.106, !dbg !1924

if.end.106:                                       ; preds = %if.end.105, %if.end.92
  %84 = load i32, i32* @good_stdin_used, align 4, !dbg !1925
  %tobool107 = icmp ne i32 %84, 0, !dbg !1926
  %lnot = xor i1 %tobool107, true, !dbg !1926
  %lnot.ext = zext i1 %lnot to i32, !dbg !1926
  %85 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1927
  %good_stdin = getelementptr inbounds %struct.child, %struct.child* %85, i32 0, i32 7, !dbg !1928
  %86 = trunc i32 %lnot.ext to i8, !dbg !1929
  %bf.load108 = load i8, i8* %good_stdin, align 4, !dbg !1929
  %bf.value = and i8 %86, 1, !dbg !1929
  %bf.shl = shl i8 %bf.value, 2, !dbg !1929
  %bf.clear109 = and i8 %bf.load108, -5, !dbg !1929
  %bf.set110 = or i8 %bf.clear109, %bf.shl, !dbg !1929
  store i8 %bf.set110, i8* %good_stdin, align 4, !dbg !1929
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !1929
  %87 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1930
  %good_stdin111 = getelementptr inbounds %struct.child, %struct.child* %87, i32 0, i32 7, !dbg !1932
  %bf.load112 = load i8, i8* %good_stdin111, align 4, !dbg !1932
  %bf.lshr = lshr i8 %bf.load112, 2, !dbg !1932
  %bf.clear113 = and i8 %bf.lshr, 1, !dbg !1932
  %bf.cast = zext i8 %bf.clear113 to i32, !dbg !1932
  %tobool114 = icmp ne i32 %bf.cast, 0, !dbg !1930
  br i1 %tobool114, label %if.then.115, label %if.end.116, !dbg !1933

if.then.115:                                      ; preds = %if.end.106
  store i32 1, i32* @good_stdin_used, align 4, !dbg !1934
  br label %if.end.116, !dbg !1935

if.end.116:                                       ; preds = %if.then.115, %if.end.106
  %88 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1936
  %deleted = getelementptr inbounds %struct.child, %struct.child* %88, i32 0, i32 7, !dbg !1937
  %bf.load117 = load i8, i8* %deleted, align 4, !dbg !1938
  %bf.clear118 = and i8 %bf.load117, -9, !dbg !1938
  store i8 %bf.clear118, i8* %deleted, align 4, !dbg !1938
  %89 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1939
  %environment = getelementptr inbounds %struct.child, %struct.child* %89, i32 0, i32 2, !dbg !1941
  %90 = load i8**, i8*** %environment, align 8, !dbg !1941
  %cmp119 = icmp eq i8** %90, null, !dbg !1942
  br i1 %cmp119, label %if.then.121, label %if.end.125, !dbg !1943

if.then.121:                                      ; preds = %if.end.116
  %91 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1944
  %file122 = getelementptr inbounds %struct.child, %struct.child* %91, i32 0, i32 1, !dbg !1945
  %92 = load %struct.file*, %struct.file** %file122, align 8, !dbg !1945
  %call123 = call i8** (%struct.file*, ...) bitcast (i8** (...)* @target_environment to i8** (%struct.file*, ...)*)(%struct.file* %92), !dbg !1946
  %93 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1947
  %environment124 = getelementptr inbounds %struct.child, %struct.child* %93, i32 0, i32 2, !dbg !1948
  store i8** %call123, i8*** %environment124, align 8, !dbg !1949
  br label %if.end.125, !dbg !1947

if.end.125:                                       ; preds = %if.then.121, %if.end.116
  %call126 = call i32 (...) @start_remote_job_p(), !dbg !1950
  %tobool127 = icmp ne i32 %call126, 0, !dbg !1950
  br i1 %tobool127, label %if.then.128, label %if.else.158, !dbg !1952

if.then.128:                                      ; preds = %if.end.125
  call void @llvm.dbg.declare(metadata i32* %is_remote, metadata !1953, metadata !308), !dbg !1955
  call void @llvm.dbg.declare(metadata i32* %id, metadata !1956, metadata !308), !dbg !1957
  call void @llvm.dbg.declare(metadata i32* %used_stdin, metadata !1958, metadata !308), !dbg !1959
  %94 = load i8**, i8*** %argv, align 8, !dbg !1960
  %95 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1962
  %good_stdin129 = getelementptr inbounds %struct.child, %struct.child* %95, i32 0, i32 7, !dbg !1963
  %bf.load130 = load i8, i8* %good_stdin129, align 4, !dbg !1963
  %bf.lshr131 = lshr i8 %bf.load130, 2, !dbg !1963
  %bf.clear132 = and i8 %bf.lshr131, 1, !dbg !1963
  %bf.cast133 = zext i8 %bf.clear132 to i32, !dbg !1963
  %tobool134 = icmp ne i32 %bf.cast133, 0, !dbg !1962
  br i1 %tobool134, label %cond.true, label %cond.false, !dbg !1962

cond.true:                                        ; preds = %if.then.128
  br label %cond.end, !dbg !1964

cond.false:                                       ; preds = %if.then.128
  %96 = load i32, i32* @start_job.bad_stdin, align 4, !dbg !1966
  br label %cond.end, !dbg !1962

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %96, %cond.false ], !dbg !1962
  %call135 = call i32 (i8**, i32, i32*, i32*, i32*, ...) bitcast (i32 (...)* @start_remote_job to i32 (i8**, i32, i32*, i32*, i32*, ...)*)(i8** %94, i32 %cond, i32* %is_remote, i32* %id, i32* %used_stdin), !dbg !1968
  %tobool136 = icmp ne i32 %call135, 0, !dbg !1968
  br i1 %tobool136, label %if.then.137, label %if.else.138, !dbg !1971

if.then.137:                                      ; preds = %cond.end
  br label %error, !dbg !1972

if.else.138:                                      ; preds = %cond.end
  %97 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1973
  %good_stdin139 = getelementptr inbounds %struct.child, %struct.child* %97, i32 0, i32 7, !dbg !1976
  %bf.load140 = load i8, i8* %good_stdin139, align 4, !dbg !1976
  %bf.lshr141 = lshr i8 %bf.load140, 2, !dbg !1976
  %bf.clear142 = and i8 %bf.lshr141, 1, !dbg !1976
  %bf.cast143 = zext i8 %bf.clear142 to i32, !dbg !1976
  %tobool144 = icmp ne i32 %bf.cast143, 0, !dbg !1973
  br i1 %tobool144, label %land.lhs.true.145, label %if.end.151, !dbg !1977

land.lhs.true.145:                                ; preds = %if.else.138
  %98 = load i32, i32* %used_stdin, align 4, !dbg !1978
  %tobool146 = icmp ne i32 %98, 0, !dbg !1978
  br i1 %tobool146, label %if.end.151, label %if.then.147, !dbg !1980

if.then.147:                                      ; preds = %land.lhs.true.145
  %99 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1981
  %good_stdin148 = getelementptr inbounds %struct.child, %struct.child* %99, i32 0, i32 7, !dbg !1983
  %bf.load149 = load i8, i8* %good_stdin148, align 4, !dbg !1984
  %bf.clear150 = and i8 %bf.load149, -5, !dbg !1984
  store i8 %bf.clear150, i8* %good_stdin148, align 4, !dbg !1984
  store i32 0, i32* @good_stdin_used, align 4, !dbg !1985
  br label %if.end.151, !dbg !1986

if.end.151:                                       ; preds = %if.then.147, %land.lhs.true.145, %if.else.138
  %100 = load i32, i32* %is_remote, align 4, !dbg !1987
  %101 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1988
  %remote = getelementptr inbounds %struct.child, %struct.child* %101, i32 0, i32 7, !dbg !1989
  %102 = trunc i32 %100 to i8, !dbg !1990
  %bf.load152 = load i8, i8* %remote, align 4, !dbg !1990
  %bf.value153 = and i8 %102, 1, !dbg !1990
  %bf.clear154 = and i8 %bf.load152, -2, !dbg !1990
  %bf.set155 = or i8 %bf.clear154, %bf.value153, !dbg !1990
  store i8 %bf.set155, i8* %remote, align 4, !dbg !1990
  %bf.result.cast156 = zext i8 %bf.value153 to i32, !dbg !1990
  %103 = load i32, i32* %id, align 4, !dbg !1991
  %104 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1992
  %pid = getelementptr inbounds %struct.child, %struct.child* %104, i32 0, i32 6, !dbg !1993
  store i32 %103, i32* %pid, align 4, !dbg !1994
  br label %if.end.157

if.end.157:                                       ; preds = %if.end.151
  br label %if.end.192, !dbg !1995

if.else.158:                                      ; preds = %if.end.125
  %105 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !1996
  %command_line159 = getelementptr inbounds %struct.child, %struct.child* %105, i32 0, i32 4, !dbg !1999
  %106 = load i32, i32* %command_line159, align 4, !dbg !1999
  %sub160 = sub i32 %106, 1, !dbg !2000
  %cmp161 = icmp eq i32 %sub160, 0, !dbg !2001
  br i1 %cmp161, label %if.then.163, label %if.end.164, !dbg !2002

if.then.163:                                      ; preds = %if.else.158
  call void (...) @make_access(), !dbg !2003
  call void (...) @wait_to_start_job(), !dbg !2005
  call void (...) @user_access(), !dbg !2006
  br label %if.end.164, !dbg !2007

if.end.164:                                       ; preds = %if.then.163, %if.else.158
  %107 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !2008
  %remote165 = getelementptr inbounds %struct.child, %struct.child* %107, i32 0, i32 7, !dbg !2009
  %bf.load166 = load i8, i8* %remote165, align 4, !dbg !2010
  %bf.clear167 = and i8 %bf.load166, -2, !dbg !2010
  store i8 %bf.clear167, i8* %remote165, align 4, !dbg !2010
  %call168 = call i32 @vfork() #13, !dbg !2011
  %108 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !2012
  %pid169 = getelementptr inbounds %struct.child, %struct.child* %108, i32 0, i32 6, !dbg !2013
  store i32 %call168, i32* %pid169, align 4, !dbg !2014
  %109 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !2015
  %pid170 = getelementptr inbounds %struct.child, %struct.child* %109, i32 0, i32 6, !dbg !2017
  %110 = load i32, i32* %pid170, align 4, !dbg !2017
  %cmp171 = icmp eq i32 %110, 0, !dbg !2018
  br i1 %cmp171, label %if.then.173, label %if.else.185, !dbg !2019

if.then.173:                                      ; preds = %if.end.164
  %111 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !2020
  %good_stdin174 = getelementptr inbounds %struct.child, %struct.child* %111, i32 0, i32 7, !dbg !2021
  %bf.load175 = load i8, i8* %good_stdin174, align 4, !dbg !2021
  %bf.lshr176 = lshr i8 %bf.load175, 2, !dbg !2021
  %bf.clear177 = and i8 %bf.lshr176, 1, !dbg !2021
  %bf.cast178 = zext i8 %bf.clear177 to i32, !dbg !2021
  %tobool179 = icmp ne i32 %bf.cast178, 0, !dbg !2020
  br i1 %tobool179, label %cond.true.180, label %cond.false.181, !dbg !2020

cond.true.180:                                    ; preds = %if.then.173
  br label %cond.end.182, !dbg !2022

cond.false.181:                                   ; preds = %if.then.173
  %112 = load i32, i32* @start_job.bad_stdin, align 4, !dbg !2024
  br label %cond.end.182, !dbg !2020

cond.end.182:                                     ; preds = %cond.false.181, %cond.true.180
  %cond183 = phi i32 [ 0, %cond.true.180 ], [ %112, %cond.false.181 ], !dbg !2020
  %113 = load i8**, i8*** %argv, align 8, !dbg !2026
  %114 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !2027
  %environment184 = getelementptr inbounds %struct.child, %struct.child* %114, i32 0, i32 2, !dbg !2028
  %115 = load i8**, i8*** %environment184, align 8, !dbg !2028
  call void @child_execute_job(i32 %cond183, i32 1, i8** %113, i8** %115), !dbg !2029
  br label %if.end.191, !dbg !2029

if.else.185:                                      ; preds = %if.end.164
  %116 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !2030
  %pid186 = getelementptr inbounds %struct.child, %struct.child* %116, i32 0, i32 6, !dbg !2032
  %117 = load i32, i32* %pid186, align 4, !dbg !2032
  %cmp187 = icmp slt i32 %117, 0, !dbg !2033
  br i1 %cmp187, label %if.then.189, label %if.end.190, !dbg !2034

if.then.189:                                      ; preds = %if.else.185
  call void (i8*, i8*, ...) bitcast (void (...)* @perror_with_name to void (i8*, i8*, ...)*)(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)), !dbg !2035
  br label %error, !dbg !2037

if.end.190:                                       ; preds = %if.else.185
  br label %if.end.191

if.end.191:                                       ; preds = %if.end.190, %cond.end.182
  br label %if.end.192

if.end.192:                                       ; preds = %if.end.191, %if.end.157
  %118 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !2038
  %file193 = getelementptr inbounds %struct.child, %struct.child* %118, i32 0, i32 1, !dbg !2039
  %119 = load %struct.file*, %struct.file** %file193, align 8, !dbg !2039
  %command_state194 = getelementptr inbounds %struct.file, %struct.file* %119, i32 0, i32 12, !dbg !2040
  %bf.load195 = load i16, i16* %command_state194, align 2, !dbg !2041
  %bf.clear196 = and i16 %bf.load195, -4, !dbg !2041
  %bf.set197 = or i16 %bf.clear196, 2, !dbg !2041
  store i16 %bf.set197, i16* %command_state194, align 2, !dbg !2041
  %120 = load i8**, i8*** %argv, align 8, !dbg !2042
  %arrayidx198 = getelementptr inbounds i8*, i8** %120, i64 0, !dbg !2042
  %121 = load i8*, i8** %arrayidx198, align 8, !dbg !2042
  call void @free(i8* %121) #9, !dbg !2043
  %122 = load i8**, i8*** %argv, align 8, !dbg !2044
  %123 = bitcast i8** %122 to i8*, !dbg !2045
  call void @free(i8* %123) #9, !dbg !2046
  br label %return, !dbg !2047

error:                                            ; preds = %if.then.189, %if.then.137, %if.then.62
  %124 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !2048
  %file199 = getelementptr inbounds %struct.child, %struct.child* %124, i32 0, i32 1, !dbg !2049
  %125 = load %struct.file*, %struct.file** %file199, align 8, !dbg !2049
  %update_status200 = getelementptr inbounds %struct.file, %struct.file* %125, i32 0, i32 11, !dbg !2050
  store i16 1, i16* %update_status200, align 2, !dbg !2051
  %126 = load %struct.child*, %struct.child** %child.addr, align 8, !dbg !2052
  %file201 = getelementptr inbounds %struct.child, %struct.child* %126, i32 0, i32 1, !dbg !2053
  %127 = load %struct.file*, %struct.file** %file201, align 8, !dbg !2053
  %command_state202 = getelementptr inbounds %struct.file, %struct.file* %127, i32 0, i32 12, !dbg !2054
  %bf.load203 = load i16, i16* %command_state202, align 2, !dbg !2055
  %bf.clear204 = and i16 %bf.load203, -4, !dbg !2055
  %bf.set205 = or i16 %bf.clear204, 3, !dbg !2055
  store i16 %bf.set205, i16* %command_state202, align 2, !dbg !2055
  br label %return, !dbg !2056

return:                                           ; preds = %error, %if.end.192, %if.then.90, %if.then.85, %if.then.6
  ret void, !dbg !2057
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #6

declare i8* @next_token(...) #2

declare i32 @puts(i8*) #2

; Function Attrs: nounwind
declare i32 @pipe(i32*) #3

declare i8** @target_environment(...) #2

declare i32 @start_remote_job_p(...) #2

declare i32 @start_remote_job(...) #2

declare void @make_access(...) #2

declare void @wait_to_start_job(...) #2

declare void @user_access(...) #2

; Function Attrs: nounwind returns_twice
declare i32 @vfork() #8

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #5

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #3

; Function Attrs: nounwind
declare i32 @getgroups(i32, i32*) #3

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #5

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #9

; Function Attrs: nounwind
declare i32 @stat(i8*, %struct.stat*) #3

; Function Attrs: nounwind
declare i32 @geteuid() #3

; Function Attrs: nounwind
declare i32 @getegid() #3

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #5

declare i8* @savestring(...) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind returns_twice "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { noreturn }
attributes #13 = { nounwind returns_twice }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!304, !305}
!llvm.ident = !{!306}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !106, subprograms: !226, globals: !268)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!2 = !{!3, !14, !91}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "variable_origin", file: !4, line: 20, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "./variable.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!5 = !{!6, !7, !8, !9, !10, !11, !12, !13}
!6 = !DIEnumerator(name: "o_default", value: 0)
!7 = !DIEnumerator(name: "o_env", value: 1)
!8 = !DIEnumerator(name: "o_file", value: 2)
!9 = !DIEnumerator(name: "o_env_override", value: 3)
!10 = !DIEnumerator(name: "o_command", value: 4)
!11 = !DIEnumerator(name: "o_override", value: 5)
!12 = !DIEnumerator(name: "o_automatic", value: 6)
!13 = !DIEnumerator(name: "o_invalid", value: 7)
!14 = !DICompositeType(tag: DW_TAG_enumeration_type, scope: !16, file: !15, line: 50, size: 32, align: 32, elements: !86)
!15 = !DIFile(filename: "./file.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!16 = !DICompositeType(tag: DW_TAG_structure_type, name: "file", file: !15, line: 22, size: 768, align: 64, elements: !17)
!17 = !{!18, !20, !23, !27, !41, !42, !43, !49, !50, !51, !72, !73, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85}
!18 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !16, file: !15, line: 24, baseType: !19, size: 64, align: 64)
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64, align: 64)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !16, file: !15, line: 25, baseType: !21, size: 64, align: 64, offset: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64, align: 64)
!22 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!23 = !DIDerivedType(tag: DW_TAG_member, name: "deps", scope: !16, file: !15, line: 26, baseType: !24, size: 64, align: 64, offset: 128)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64, align: 64)
!25 = !DICompositeType(tag: DW_TAG_structure_type, name: "dep", file: !26, line: 180, flags: DIFlagFwdDecl)
!26 = !DIFile(filename: "./make.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!27 = !DIDerivedType(tag: DW_TAG_member, name: "cmds", scope: !16, file: !15, line: 27, baseType: !28, size: 64, align: 64, offset: 192)
!28 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64, align: 64)
!29 = !DICompositeType(tag: DW_TAG_structure_type, name: "commands", file: !30, line: 21, size: 448, align: 64, elements: !31)
!30 = !DIFile(filename: "./commands.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!31 = !{!32, !33, !35, !36, !37, !39, !40}
!32 = !DIDerivedType(tag: DW_TAG_member, name: "filename", scope: !29, file: !30, line: 23, baseType: !21, size: 64, align: 64)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "lineno", scope: !29, file: !30, line: 24, baseType: !34, size: 32, align: 32, offset: 64)
!34 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!35 = !DIDerivedType(tag: DW_TAG_member, name: "commands", scope: !29, file: !30, line: 25, baseType: !21, size: 64, align: 64, offset: 128)
!36 = !DIDerivedType(tag: DW_TAG_member, name: "ncommand_lines", scope: !29, file: !30, line: 26, baseType: !34, size: 32, align: 32, offset: 192)
!37 = !DIDerivedType(tag: DW_TAG_member, name: "command_lines", scope: !29, file: !30, line: 27, baseType: !38, size: 64, align: 64, offset: 256)
!38 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64, align: 64)
!39 = !DIDerivedType(tag: DW_TAG_member, name: "lines_recurse", scope: !29, file: !30, line: 28, baseType: !21, size: 64, align: 64, offset: 320)
!40 = !DIDerivedType(tag: DW_TAG_member, name: "any_recurse", scope: !29, file: !30, line: 29, baseType: !22, size: 8, align: 8, offset: 384)
!41 = !DIDerivedType(tag: DW_TAG_member, name: "stem", scope: !16, file: !15, line: 28, baseType: !21, size: 64, align: 64, offset: 256)
!42 = !DIDerivedType(tag: DW_TAG_member, name: "also_make", scope: !16, file: !15, line: 30, baseType: !24, size: 64, align: 64, offset: 320)
!43 = !DIDerivedType(tag: DW_TAG_member, name: "last_mtime", scope: !16, file: !15, line: 31, baseType: !44, size: 64, align: 64, offset: 384)
!44 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !45, line: 75, baseType: !46)
!45 = !DIFile(filename: "/usr/include/time.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!46 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !47, line: 139, baseType: !48)
!47 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!48 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !16, file: !15, line: 32, baseType: !19, size: 64, align: 64, offset: 448)
!50 = !DIDerivedType(tag: DW_TAG_member, name: "renamed", scope: !16, file: !15, line: 38, baseType: !19, size: 64, align: 64, offset: 512)
!51 = !DIDerivedType(tag: DW_TAG_member, name: "variables", scope: !16, file: !15, line: 41, baseType: !52, size: 64, align: 64, offset: 576)
!52 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64, align: 64)
!53 = !DICompositeType(tag: DW_TAG_structure_type, name: "variable_set_list", file: !4, line: 57, size: 128, align: 64, elements: !54)
!54 = !{!55, !56}
!55 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !53, file: !4, line: 59, baseType: !52, size: 64, align: 64)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !53, file: !4, line: 60, baseType: !57, size: 64, align: 64, offset: 64)
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64, align: 64)
!58 = !DICompositeType(tag: DW_TAG_structure_type, name: "variable_set", file: !4, line: 49, size: 128, align: 64, elements: !59)
!59 = !{!60, !71}
!60 = !DIDerivedType(tag: DW_TAG_member, name: "table", scope: !58, file: !4, line: 51, baseType: !61, size: 64, align: 64)
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !62, size: 64, align: 64)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !63, size: 64, align: 64)
!63 = !DICompositeType(tag: DW_TAG_structure_type, name: "variable", file: !4, line: 36, size: 256, align: 64, elements: !64)
!64 = !{!65, !66, !67, !68, !69, !70}
!65 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !63, file: !4, line: 38, baseType: !62, size: 64, align: 64)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !63, file: !4, line: 39, baseType: !21, size: 64, align: 64, offset: 64)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !63, file: !4, line: 40, baseType: !21, size: 64, align: 64, offset: 128)
!68 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !63, file: !4, line: 42, baseType: !3, size: 3, align: 32, offset: 192)
!69 = !DIDerivedType(tag: DW_TAG_member, name: "recursive", scope: !63, file: !4, line: 43, baseType: !34, size: 1, align: 32, offset: 195)
!70 = !DIDerivedType(tag: DW_TAG_member, name: "expanding", scope: !63, file: !4, line: 44, baseType: !34, size: 1, align: 32, offset: 196)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "buckets", scope: !58, file: !4, line: 52, baseType: !34, size: 32, align: 32, offset: 64)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !16, file: !15, line: 45, baseType: !19, size: 64, align: 64, offset: 640)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "update_status", scope: !16, file: !15, line: 47, baseType: !74, size: 16, align: 16, offset: 704)
!74 = !DIBasicType(name: "short", size: 16, align: 16, encoding: DW_ATE_signed)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "command_state", scope: !16, file: !15, line: 56, baseType: !14, size: 2, align: 32, offset: 720)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "double_colon", scope: !16, file: !15, line: 58, baseType: !34, size: 1, align: 32, offset: 722)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "precious", scope: !16, file: !15, line: 59, baseType: !34, size: 1, align: 32, offset: 723)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "tried_implicit", scope: !16, file: !15, line: 60, baseType: !34, size: 1, align: 32, offset: 724)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "updating", scope: !16, file: !15, line: 63, baseType: !34, size: 1, align: 32, offset: 725)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "updated", scope: !16, file: !15, line: 64, baseType: !34, size: 1, align: 32, offset: 726)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "is_target", scope: !16, file: !15, line: 65, baseType: !34, size: 1, align: 32, offset: 727)
!82 = !DIDerivedType(tag: DW_TAG_member, name: "cmd_target", scope: !16, file: !15, line: 66, baseType: !34, size: 1, align: 32, offset: 728)
!83 = !DIDerivedType(tag: DW_TAG_member, name: "phony", scope: !16, file: !15, line: 67, baseType: !34, size: 1, align: 32, offset: 729)
!84 = !DIDerivedType(tag: DW_TAG_member, name: "intermediate", scope: !16, file: !15, line: 69, baseType: !34, size: 1, align: 32, offset: 730)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "dontcare", scope: !16, file: !15, line: 70, baseType: !34, size: 1, align: 32, offset: 731)
!86 = !{!87, !88, !89, !90}
!87 = !DIEnumerator(name: "cs_not_started", value: 0)
!88 = !DIEnumerator(name: "cs_deps_running", value: 1)
!89 = !DIEnumerator(name: "cs_running", value: 2)
!90 = !DIEnumerator(name: "cs_finished", value: 3)
!91 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !92, line: 46, size: 32, align: 32, elements: !93)
!92 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!93 = !{!94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105}
!94 = !DIEnumerator(name: "_ISupper", value: 256)
!95 = !DIEnumerator(name: "_ISlower", value: 512)
!96 = !DIEnumerator(name: "_ISalpha", value: 1024)
!97 = !DIEnumerator(name: "_ISdigit", value: 2048)
!98 = !DIEnumerator(name: "_ISxdigit", value: 4096)
!99 = !DIEnumerator(name: "_ISspace", value: 8192)
!100 = !DIEnumerator(name: "_ISprint", value: 16384)
!101 = !DIEnumerator(name: "_ISgraph", value: 32768)
!102 = !DIEnumerator(name: "_ISblank", value: 1)
!103 = !DIEnumerator(name: "_IScntrl", value: 2)
!104 = !DIEnumerator(name: "_ISpunct", value: 4)
!105 = !DIEnumerator(name: "_ISalnum", value: 8)
!106 = !{!21, !107, !124, !207, !112, !38, !208, !223, !224, !225}
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64, align: 64)
!108 = !DICompositeType(tag: DW_TAG_union_type, name: "wait", file: !109, line: 66, size: 32, align: 32, elements: !110)
!109 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/waitstatus.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!110 = !{!111, !113, !119}
!111 = !DIDerivedType(tag: DW_TAG_member, name: "w_status", scope: !108, file: !109, line: 68, baseType: !112, size: 32, align: 32)
!112 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "__wait_terminated", scope: !108, file: !109, line: 83, baseType: !114, size: 32, align: 32)
!114 = !DICompositeType(tag: DW_TAG_structure_type, scope: !108, file: !109, line: 69, size: 32, align: 32, elements: !115)
!115 = !{!116, !117, !118}
!116 = !DIDerivedType(tag: DW_TAG_member, name: "__w_termsig", scope: !114, file: !109, line: 72, baseType: !34, size: 7, align: 32)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "__w_coredump", scope: !114, file: !109, line: 73, baseType: !34, size: 1, align: 32, offset: 7)
!118 = !DIDerivedType(tag: DW_TAG_member, name: "__w_retcode", scope: !114, file: !109, line: 74, baseType: !34, size: 8, align: 32, offset: 8)
!119 = !DIDerivedType(tag: DW_TAG_member, name: "__wait_stopped", scope: !108, file: !109, line: 96, baseType: !120, size: 32, align: 32)
!120 = !DICompositeType(tag: DW_TAG_structure_type, scope: !108, file: !109, line: 84, size: 32, align: 32, elements: !121)
!121 = !{!122, !123}
!122 = !DIDerivedType(tag: DW_TAG_member, name: "__w_stopval", scope: !120, file: !109, line: 87, baseType: !34, size: 8, align: 32)
!123 = !DIDerivedType(tag: DW_TAG_member, name: "__w_stopsig", scope: !120, file: !109, line: 88, baseType: !34, size: 8, align: 32, offset: 8)
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64, align: 64)
!125 = !DICompositeType(tag: DW_TAG_structure_type, name: "rusage", file: !126, line: 187, size: 1152, align: 64, elements: !127)
!126 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/resource.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!127 = !{!128, !135, !136, !142, !147, !152, !157, !162, !167, !172, !177, !182, !187, !192, !197, !202}
!128 = !DIDerivedType(tag: DW_TAG_member, name: "ru_utime", scope: !125, file: !126, line: 190, baseType: !129, size: 128, align: 64)
!129 = !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !130, line: 30, size: 128, align: 64, elements: !131)
!130 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/time.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!131 = !{!132, !133}
!132 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !129, file: !130, line: 32, baseType: !46, size: 64, align: 64)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !129, file: !130, line: 33, baseType: !134, size: 64, align: 64, offset: 64)
!134 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !47, line: 141, baseType: !48)
!135 = !DIDerivedType(tag: DW_TAG_member, name: "ru_stime", scope: !125, file: !126, line: 192, baseType: !129, size: 128, align: 64, offset: 128)
!136 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 194, baseType: !137, size: 64, align: 64, offset: 256)
!137 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 194, size: 64, align: 64, elements: !138)
!138 = !{!139, !140}
!139 = !DIDerivedType(tag: DW_TAG_member, name: "ru_maxrss", scope: !137, file: !126, line: 196, baseType: !48, size: 64, align: 64)
!140 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_maxrss_word", scope: !137, file: !126, line: 197, baseType: !141, size: 64, align: 64)
!141 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !47, line: 175, baseType: !48)
!142 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 202, baseType: !143, size: 64, align: 64, offset: 320)
!143 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 202, size: 64, align: 64, elements: !144)
!144 = !{!145, !146}
!145 = !DIDerivedType(tag: DW_TAG_member, name: "ru_ixrss", scope: !143, file: !126, line: 204, baseType: !48, size: 64, align: 64)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_ixrss_word", scope: !143, file: !126, line: 205, baseType: !141, size: 64, align: 64)
!147 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 208, baseType: !148, size: 64, align: 64, offset: 384)
!148 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 208, size: 64, align: 64, elements: !149)
!149 = !{!150, !151}
!150 = !DIDerivedType(tag: DW_TAG_member, name: "ru_idrss", scope: !148, file: !126, line: 210, baseType: !48, size: 64, align: 64)
!151 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_idrss_word", scope: !148, file: !126, line: 211, baseType: !141, size: 64, align: 64)
!152 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 214, baseType: !153, size: 64, align: 64, offset: 448)
!153 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 214, size: 64, align: 64, elements: !154)
!154 = !{!155, !156}
!155 = !DIDerivedType(tag: DW_TAG_member, name: "ru_isrss", scope: !153, file: !126, line: 216, baseType: !48, size: 64, align: 64)
!156 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_isrss_word", scope: !153, file: !126, line: 217, baseType: !141, size: 64, align: 64)
!157 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 221, baseType: !158, size: 64, align: 64, offset: 512)
!158 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 221, size: 64, align: 64, elements: !159)
!159 = !{!160, !161}
!160 = !DIDerivedType(tag: DW_TAG_member, name: "ru_minflt", scope: !158, file: !126, line: 223, baseType: !48, size: 64, align: 64)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_minflt_word", scope: !158, file: !126, line: 224, baseType: !141, size: 64, align: 64)
!162 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 227, baseType: !163, size: 64, align: 64, offset: 576)
!163 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 227, size: 64, align: 64, elements: !164)
!164 = !{!165, !166}
!165 = !DIDerivedType(tag: DW_TAG_member, name: "ru_majflt", scope: !163, file: !126, line: 229, baseType: !48, size: 64, align: 64)
!166 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_majflt_word", scope: !163, file: !126, line: 230, baseType: !141, size: 64, align: 64)
!167 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 233, baseType: !168, size: 64, align: 64, offset: 640)
!168 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 233, size: 64, align: 64, elements: !169)
!169 = !{!170, !171}
!170 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nswap", scope: !168, file: !126, line: 235, baseType: !48, size: 64, align: 64)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nswap_word", scope: !168, file: !126, line: 236, baseType: !141, size: 64, align: 64)
!172 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 240, baseType: !173, size: 64, align: 64, offset: 704)
!173 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 240, size: 64, align: 64, elements: !174)
!174 = !{!175, !176}
!175 = !DIDerivedType(tag: DW_TAG_member, name: "ru_inblock", scope: !173, file: !126, line: 242, baseType: !48, size: 64, align: 64)
!176 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_inblock_word", scope: !173, file: !126, line: 243, baseType: !141, size: 64, align: 64)
!177 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 246, baseType: !178, size: 64, align: 64, offset: 768)
!178 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 246, size: 64, align: 64, elements: !179)
!179 = !{!180, !181}
!180 = !DIDerivedType(tag: DW_TAG_member, name: "ru_oublock", scope: !178, file: !126, line: 248, baseType: !48, size: 64, align: 64)
!181 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_oublock_word", scope: !178, file: !126, line: 249, baseType: !141, size: 64, align: 64)
!182 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 252, baseType: !183, size: 64, align: 64, offset: 832)
!183 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 252, size: 64, align: 64, elements: !184)
!184 = !{!185, !186}
!185 = !DIDerivedType(tag: DW_TAG_member, name: "ru_msgsnd", scope: !183, file: !126, line: 254, baseType: !48, size: 64, align: 64)
!186 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_msgsnd_word", scope: !183, file: !126, line: 255, baseType: !141, size: 64, align: 64)
!187 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 258, baseType: !188, size: 64, align: 64, offset: 896)
!188 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 258, size: 64, align: 64, elements: !189)
!189 = !{!190, !191}
!190 = !DIDerivedType(tag: DW_TAG_member, name: "ru_msgrcv", scope: !188, file: !126, line: 260, baseType: !48, size: 64, align: 64)
!191 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_msgrcv_word", scope: !188, file: !126, line: 261, baseType: !141, size: 64, align: 64)
!192 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 264, baseType: !193, size: 64, align: 64, offset: 960)
!193 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 264, size: 64, align: 64, elements: !194)
!194 = !{!195, !196}
!195 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nsignals", scope: !193, file: !126, line: 266, baseType: !48, size: 64, align: 64)
!196 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nsignals_word", scope: !193, file: !126, line: 267, baseType: !141, size: 64, align: 64)
!197 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 272, baseType: !198, size: 64, align: 64, offset: 1024)
!198 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 272, size: 64, align: 64, elements: !199)
!199 = !{!200, !201}
!200 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nvcsw", scope: !198, file: !126, line: 274, baseType: !48, size: 64, align: 64)
!201 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nvcsw_word", scope: !198, file: !126, line: 275, baseType: !141, size: 64, align: 64)
!202 = !DIDerivedType(tag: DW_TAG_member, scope: !125, file: !126, line: 279, baseType: !203, size: 64, align: 64, offset: 1088)
!203 = !DICompositeType(tag: DW_TAG_union_type, scope: !125, file: !126, line: 279, size: 64, align: 64, elements: !204)
!204 = !{!205, !206}
!205 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nivcsw", scope: !203, file: !126, line: 281, baseType: !48, size: 64, align: 64)
!206 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nivcsw_word", scope: !203, file: !126, line: 282, baseType: !141, size: 64, align: 64)
!207 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !209, size: 64, align: 64)
!209 = !DICompositeType(tag: DW_TAG_structure_type, name: "child", file: !210, line: 3, size: 448, align: 64, elements: !211)
!210 = !DIFile(filename: "./job.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!211 = !{!212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222}
!212 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !209, file: !210, line: 5, baseType: !208, size: 64, align: 64)
!213 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !209, file: !210, line: 7, baseType: !19, size: 64, align: 64, offset: 64)
!214 = !DIDerivedType(tag: DW_TAG_member, name: "environment", scope: !209, file: !210, line: 9, baseType: !38, size: 64, align: 64, offset: 128)
!215 = !DIDerivedType(tag: DW_TAG_member, name: "command_lines", scope: !209, file: !210, line: 11, baseType: !38, size: 64, align: 64, offset: 192)
!216 = !DIDerivedType(tag: DW_TAG_member, name: "command_line", scope: !209, file: !210, line: 12, baseType: !34, size: 32, align: 32, offset: 256)
!217 = !DIDerivedType(tag: DW_TAG_member, name: "command_ptr", scope: !209, file: !210, line: 13, baseType: !21, size: 64, align: 64, offset: 320)
!218 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !209, file: !210, line: 15, baseType: !112, size: 32, align: 32, offset: 384)
!219 = !DIDerivedType(tag: DW_TAG_member, name: "remote", scope: !209, file: !210, line: 16, baseType: !34, size: 1, align: 32, offset: 416)
!220 = !DIDerivedType(tag: DW_TAG_member, name: "noerror", scope: !209, file: !210, line: 18, baseType: !34, size: 1, align: 32, offset: 417)
!221 = !DIDerivedType(tag: DW_TAG_member, name: "good_stdin", scope: !209, file: !210, line: 20, baseType: !34, size: 1, align: 32, offset: 418)
!222 = !DIDerivedType(tag: DW_TAG_member, name: "deleted", scope: !209, file: !210, line: 21, baseType: !34, size: 1, align: 32, offset: 419)
!223 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!224 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!226 = !{!227, !232, !235, !238, !241, !244, !247, !250, !253, !254, !255, !258, !261, !262, !265}
!227 = !DISubprogram(name: "push_signals_blocked_p", scope: !228, file: !228, line: 241, type: !229, isLocal: false, isDefinition: true, scopeLine: 242, isOptimized: false, function: void (i32)* @push_signals_blocked_p, variables: !231)
!228 = !DIFile(filename: "/home/gleison/tf/Benchmarks/MallocBench/make/tmp.c", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!229 = !DISubroutineType(types: !230)
!230 = !{null, !112}
!231 = !{}
!232 = !DISubprogram(name: "pop_signals_blocked_p", scope: !228, file: !228, line: 273, type: !233, isLocal: false, isDefinition: true, scopeLine: 273, isOptimized: false, function: void ()* @pop_signals_blocked_p, variables: !231)
!233 = !DISubroutineType(types: !234)
!234 = !{null}
!235 = !DISubprogram(name: "child_handler", scope: !228, file: !228, line: 300, type: !236, isLocal: false, isDefinition: true, scopeLine: 301, isOptimized: false, function: i32 (i32)* @child_handler, variables: !231)
!236 = !DISubroutineType(types: !237)
!237 = !{!112, !112}
!238 = !DISubprogram(name: "wait_for_children", scope: !228, file: !228, line: 479, type: !239, isLocal: false, isDefinition: true, scopeLine: 481, isOptimized: false, function: void (i32, i32)* @wait_for_children, variables: !231)
!239 = !DISubroutineType(types: !240)
!240 = !{null, !34, !112}
!241 = !DISubprogram(name: "new_job", scope: !228, file: !228, line: 694, type: !242, isLocal: false, isDefinition: true, scopeLine: 695, isOptimized: false, function: void (%struct.file*)* @new_job, variables: !231)
!242 = !DISubroutineType(types: !243)
!243 = !{null, !19}
!244 = !DISubprogram(name: "child_execute_job", scope: !228, file: !228, line: 762, type: !245, isLocal: false, isDefinition: true, scopeLine: 765, isOptimized: false, function: void (i32, i32, i8**, i8**)* @child_execute_job, variables: !231)
!245 = !DISubroutineType(types: !246)
!246 = !{null, !112, !112, !38, !38}
!247 = !DISubprogram(name: "exec_command", scope: !228, file: !228, line: 874, type: !248, isLocal: false, isDefinition: true, scopeLine: 876, isOptimized: false, function: void (i8**, i8**)* @exec_command, variables: !231)
!248 = !DISubroutineType(types: !249)
!249 = !{null, !38, !38}
!250 = !DISubprogram(name: "construct_command_argv", scope: !228, file: !228, line: 1139, type: !251, isLocal: false, isDefinition: true, scopeLine: 1142, isOptimized: false, function: i8** (i8*, i8**, %struct.file*)* @construct_command_argv, variables: !231)
!251 = !DISubroutineType(types: !252)
!252 = !{!38, !21, !38, !19}
!253 = !DISubprogram(name: "unblock_signals", scope: !228, file: !228, line: 214, type: !233, isLocal: true, isDefinition: true, scopeLine: 214, isOptimized: false, function: void ()* @unblock_signals, variables: !231)
!254 = !DISubprogram(name: "block_signals", scope: !228, file: !228, line: 191, type: !233, isLocal: true, isDefinition: true, scopeLine: 191, isOptimized: false, function: void ()* @block_signals, variables: !231)
!255 = !DISubprogram(name: "child_error", scope: !228, file: !228, line: 158, type: !256, isLocal: true, isDefinition: true, scopeLine: 161, isOptimized: false, function: void (i8*, i32, i32, i32, i32)* @child_error, variables: !231)
!256 = !DISubroutineType(types: !257)
!257 = !{null, !21, !112, !112, !112, !112}
!258 = !DISubprogram(name: "free_child", scope: !228, file: !228, line: 498, type: !259, isLocal: true, isDefinition: true, scopeLine: 499, isOptimized: false, function: void (%struct.child*)* @free_child, variables: !231)
!259 = !DISubroutineType(types: !260)
!260 = !{null, !208}
!261 = !DISubprogram(name: "start_job", scope: !228, file: !228, line: 521, type: !259, isLocal: true, isDefinition: true, scopeLine: 522, isOptimized: false, function: void (%struct.child*)* @start_job, variables: !231)
!262 = !DISubprogram(name: "search_path", scope: !228, file: !228, line: 791, type: !263, isLocal: true, isDefinition: true, scopeLine: 793, isOptimized: false, function: i32 (i8*, i8*, i8*)* @search_path, variables: !231)
!263 = !DISubroutineType(types: !264)
!264 = !{!112, !21, !21, !21}
!265 = !DISubprogram(name: "construct_command_argv_internal", scope: !228, file: !228, line: 953, type: !266, isLocal: true, isDefinition: true, scopeLine: 956, isOptimized: false, function: i8** (i8*, i8**, i8*, i8*)* @construct_command_argv_internal, variables: !231)
!266 = !DISubroutineType(types: !267)
!267 = !{!38, !21, !38, !21, !21}
!268 = !{!269, !273, !274, !275, !276, !277, !278, !279, !280, !281, !288, !292, !296, !300}
!269 = !DIGlobalVariable(name: "default_shell", scope: !0, file: !228, line: 31, type: !270, isLocal: false, isDefinition: true, variable: [8 x i8]* @default_shell)
!270 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 64, align: 8, elements: !271)
!271 = !{!272}
!272 = !DISubrange(count: 8)
!273 = !DIGlobalVariable(name: "children", scope: !0, file: !228, line: 143, type: !208, isLocal: false, isDefinition: true, variable: %struct.child** @children)
!274 = !DIGlobalVariable(name: "job_slots_used", scope: !0, file: !228, line: 147, type: !34, isLocal: false, isDefinition: true, variable: i32* @job_slots_used)
!275 = !DIGlobalVariable(name: "signals_blocked_p_max", scope: !0, file: !228, line: 233, type: !34, isLocal: true, isDefinition: true, variable: i32* @signals_blocked_p_max)
!276 = !DIGlobalVariable(name: "signals_blocked_p_depth", scope: !0, file: !228, line: 234, type: !34, isLocal: true, isDefinition: true, variable: i32* @signals_blocked_p_depth)
!277 = !DIGlobalVariable(name: "signals_blocked_p_stack", scope: !0, file: !228, line: 232, type: !21, isLocal: true, isDefinition: true, variable: i8** @signals_blocked_p_stack)
!278 = !DIGlobalVariable(name: "good_stdin_used", scope: !0, file: !228, line: 151, type: !112, isLocal: true, isDefinition: true, variable: i32* @good_stdin_used)
!279 = !DIGlobalVariable(name: "bad_stdin", scope: !261, file: !228, line: 523, type: !112, isLocal: true, isDefinition: true, variable: i32* @start_job.bad_stdin)
!280 = !DIGlobalVariable(name: "ngroups", scope: !262, file: !228, line: 807, type: !112, isLocal: true, isDefinition: true, variable: i32* @search_path.ngroups)
!281 = !DIGlobalVariable(name: "groups", scope: !262, file: !228, line: 809, type: !282, isLocal: true, isDefinition: true, variable: [65536 x i32]* @search_path.groups)
!282 = !DICompositeType(tag: DW_TAG_array_type, baseType: !283, size: 2097152, align: 32, elements: !286)
!283 = !DIDerivedType(tag: DW_TAG_typedef, name: "gid_t", file: !284, line: 65, baseType: !285)
!284 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!285 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !47, line: 126, baseType: !34)
!286 = !{!287}
!287 = !DISubrange(count: 65536)
!288 = !DIGlobalVariable(name: "default_path", scope: !0, file: !228, line: 28, type: !289, isLocal: true, isDefinition: true, variable: [15 x i8]* @default_path)
!289 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 120, align: 8, elements: !290)
!290 = !{!291}
!291 = !DISubrange(count: 15)
!292 = !DIGlobalVariable(name: "sh_chars", scope: !265, file: !228, line: 957, type: !293, isLocal: true, isDefinition: true, variable: [19 x i8]* @construct_command_argv_internal.sh_chars)
!293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 152, align: 8, elements: !294)
!294 = !{!295}
!295 = !DISubrange(count: 19)
!296 = !DIGlobalVariable(name: "sh_cmds", scope: !265, file: !228, line: 958, type: !297, isLocal: true, isDefinition: true, variable: [25 x i8*]* @construct_command_argv_internal.sh_cmds)
!297 = !DICompositeType(tag: DW_TAG_array_type, baseType: !21, size: 1600, align: 64, elements: !298)
!298 = !{!299}
!299 = !DISubrange(count: 25)
!300 = !DIGlobalVariable(name: "minus_c", scope: !265, file: !228, line: 1102, type: !301, isLocal: true, isDefinition: true, variable: [5 x i8]* @construct_command_argv_internal.minus_c)
!301 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 40, align: 8, elements: !302)
!302 = !{!303}
!303 = !DISubrange(count: 5)
!304 = !{i32 2, !"Dwarf Version", i32 4}
!305 = !{i32 2, !"Debug Info Version", i32 3}
!306 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!307 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "flag", arg: 1, scope: !227, file: !228, line: 241, type: !112)
!308 = !DIExpression()
!309 = !DILocation(line: 241, column: 38, scope: !227)
!310 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "blocked", scope: !227, file: !228, line: 243, type: !112)
!311 = !DILocation(line: 243, column: 7, scope: !227)
!312 = !DILocation(line: 245, column: 7, scope: !313)
!313 = distinct !DILexicalBlock(scope: !227, file: !228, line: 245, column: 7)
!314 = !DILocation(line: 245, column: 31, scope: !313)
!315 = !DILocation(line: 245, column: 7, scope: !227)
!316 = !DILocation(line: 246, column: 27, scope: !317)
!317 = distinct !DILexicalBlock(scope: !313, file: !228, line: 245, column: 37)
!318 = !DILocation(line: 247, column: 39, scope: !317)
!319 = !DILocation(line: 247, column: 29, scope: !317)
!320 = !DILocation(line: 248, column: 29, scope: !317)
!321 = !DILocation(line: 249, column: 34, scope: !317)
!322 = !DILocation(line: 249, column: 5, scope: !317)
!323 = !DILocation(line: 249, column: 32, scope: !317)
!324 = !DILocation(line: 251, column: 13, scope: !317)
!325 = !DILocation(line: 252, column: 3, scope: !317)
!326 = !DILocation(line: 253, column: 9, scope: !327)
!327 = distinct !DILexicalBlock(scope: !328, file: !228, line: 253, column: 9)
!328 = distinct !DILexicalBlock(scope: !313, file: !228, line: 252, column: 10)
!329 = !DILocation(line: 253, column: 36, scope: !327)
!330 = !DILocation(line: 253, column: 33, scope: !327)
!331 = !DILocation(line: 253, column: 9, scope: !328)
!332 = !DILocation(line: 254, column: 29, scope: !333)
!333 = distinct !DILexicalBlock(scope: !327, file: !228, line: 253, column: 59)
!334 = !DILocation(line: 255, column: 50, scope: !333)
!335 = !DILocation(line: 256, column: 50, scope: !333)
!336 = !DILocation(line: 255, column: 41, scope: !333)
!337 = !DILocation(line: 255, column: 31, scope: !333)
!338 = !DILocation(line: 257, column: 5, scope: !333)
!339 = !DILocation(line: 259, column: 16, scope: !328)
!340 = !DILocation(line: 259, column: 40, scope: !328)
!341 = !DILocation(line: 259, column: 44, scope: !328)
!342 = !DILocation(line: 259, column: 71, scope: !343)
!343 = !DILexicalBlockFile(scope: !328, file: !228, discriminator: 1)
!344 = !DILocation(line: 259, column: 95, scope: !328)
!345 = !DILocation(line: 259, column: 47, scope: !328)
!346 = !DILocation(line: 259, column: 44, scope: !347)
!347 = !DILexicalBlockFile(scope: !328, file: !228, discriminator: 2)
!348 = !DILocation(line: 259, column: 13, scope: !328)
!349 = !DILocation(line: 261, column: 62, scope: !328)
!350 = !DILocation(line: 261, column: 29, scope: !328)
!351 = !DILocation(line: 261, column: 55, scope: !328)
!352 = !DILocation(line: 261, column: 5, scope: !328)
!353 = !DILocation(line: 261, column: 60, scope: !328)
!354 = !DILocation(line: 264, column: 7, scope: !355)
!355 = distinct !DILexicalBlock(scope: !227, file: !228, line: 264, column: 7)
!356 = !DILocation(line: 264, column: 15, scope: !355)
!357 = !DILocation(line: 264, column: 19, scope: !358)
!358 = !DILexicalBlockFile(scope: !355, file: !228, discriminator: 1)
!359 = !DILocation(line: 264, column: 7, scope: !227)
!360 = !DILocation(line: 265, column: 5, scope: !355)
!361 = !DILocation(line: 266, column: 12, scope: !362)
!362 = distinct !DILexicalBlock(scope: !355, file: !228, line: 266, column: 12)
!363 = !DILocation(line: 266, column: 17, scope: !362)
!364 = !DILocation(line: 266, column: 21, scope: !365)
!365 = !DILexicalBlockFile(scope: !362, file: !228, discriminator: 1)
!366 = !DILocation(line: 266, column: 12, scope: !355)
!367 = !DILocation(line: 267, column: 5, scope: !362)
!368 = !DILocation(line: 268, column: 1, scope: !227)
!369 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "blocked", scope: !232, file: !228, line: 274, type: !112)
!370 = !DILocation(line: 274, column: 7, scope: !232)
!371 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "block", scope: !232, file: !228, line: 274, type: !112)
!372 = !DILocation(line: 274, column: 16, scope: !232)
!373 = !DILocation(line: 276, column: 14, scope: !232)
!374 = !DILocation(line: 276, column: 38, scope: !232)
!375 = !DILocation(line: 276, column: 42, scope: !232)
!376 = !DILocation(line: 276, column: 92, scope: !377)
!377 = !DILexicalBlockFile(scope: !232, file: !228, discriminator: 1)
!378 = !DILocation(line: 276, column: 95, scope: !232)
!379 = !DILocation(line: 276, column: 45, scope: !232)
!380 = !DILocation(line: 276, column: 42, scope: !381)
!381 = !DILexicalBlockFile(scope: !232, file: !228, discriminator: 2)
!382 = !DILocation(line: 276, column: 11, scope: !232)
!383 = !DILocation(line: 278, column: 12, scope: !232)
!384 = !DILocation(line: 278, column: 36, scope: !232)
!385 = !DILocation(line: 278, column: 40, scope: !232)
!386 = !DILocation(line: 278, column: 67, scope: !377)
!387 = !DILocation(line: 278, column: 91, scope: !232)
!388 = !DILocation(line: 278, column: 43, scope: !232)
!389 = !DILocation(line: 278, column: 40, scope: !381)
!390 = !DILocation(line: 278, column: 9, scope: !232)
!391 = !DILocation(line: 280, column: 7, scope: !392)
!392 = distinct !DILexicalBlock(scope: !232, file: !228, line: 280, column: 7)
!393 = !DILocation(line: 280, column: 13, scope: !392)
!394 = !DILocation(line: 280, column: 17, scope: !395)
!395 = !DILexicalBlockFile(scope: !392, file: !228, discriminator: 1)
!396 = !DILocation(line: 280, column: 7, scope: !232)
!397 = !DILocation(line: 281, column: 5, scope: !392)
!398 = !DILocation(line: 282, column: 12, scope: !399)
!399 = distinct !DILexicalBlock(scope: !392, file: !228, line: 282, column: 12)
!400 = !DILocation(line: 282, column: 20, scope: !399)
!401 = !DILocation(line: 282, column: 24, scope: !402)
!402 = !DILexicalBlockFile(scope: !399, file: !228, discriminator: 1)
!403 = !DILocation(line: 282, column: 12, scope: !392)
!404 = !DILocation(line: 283, column: 5, scope: !399)
!405 = !DILocation(line: 284, column: 1, scope: !232)
!406 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sig", arg: 1, scope: !235, file: !228, line: 300, type: !112)
!407 = !DILocation(line: 300, column: 28, scope: !235)
!408 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !235, file: !228, line: 302, type: !112)
!409 = !DILocation(line: 302, column: 10, scope: !235)
!410 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dead_children", scope: !235, file: !228, line: 303, type: !34)
!411 = !DILocation(line: 303, column: 16, scope: !235)
!412 = !DILocation(line: 305, column: 7, scope: !413)
!413 = distinct !DILexicalBlock(scope: !235, file: !228, line: 305, column: 7)
!414 = !DILocation(line: 305, column: 11, scope: !413)
!415 = !DILocation(line: 305, column: 7, scope: !235)
!416 = !DILocation(line: 306, column: 5, scope: !413)
!417 = !DILocation(line: 308, column: 3, scope: !235)
!418 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "remote", scope: !419, file: !228, line: 309, type: !112)
!419 = distinct !DILexicalBlock(scope: !235, file: !228, line: 308, column: 13)
!420 = !DILocation(line: 309, column: 9, scope: !419)
!421 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !419, file: !228, line: 310, type: !112)
!422 = !DILocation(line: 310, column: 18, scope: !419)
!423 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "exit_code", scope: !419, file: !228, line: 311, type: !112)
!424 = !DILocation(line: 311, column: 9, scope: !419)
!425 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "exit_sig", scope: !419, file: !228, line: 311, type: !112)
!426 = !DILocation(line: 311, column: 20, scope: !419)
!427 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "coredump", scope: !419, file: !228, line: 311, type: !112)
!428 = !DILocation(line: 311, column: 30, scope: !419)
!429 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "lastc", scope: !419, file: !228, line: 312, type: !208)
!430 = !DILocation(line: 312, column: 28, scope: !419)
!431 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !419, file: !228, line: 312, type: !208)
!432 = !DILocation(line: 312, column: 36, scope: !419)
!433 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "child_failed", scope: !419, file: !228, line: 313, type: !112)
!434 = !DILocation(line: 313, column: 9, scope: !419)
!435 = !DILocation(line: 316, column: 11, scope: !419)
!436 = !DILocation(line: 316, column: 9, scope: !419)
!437 = !DILocation(line: 317, column: 9, scope: !438)
!438 = distinct !DILexicalBlock(scope: !419, file: !228, line: 317, column: 9)
!439 = !DILocation(line: 317, column: 13, scope: !438)
!440 = !DILocation(line: 317, column: 9, scope: !419)
!441 = !DILocation(line: 321, column: 11, scope: !442)
!442 = distinct !DILexicalBlock(scope: !443, file: !228, line: 321, column: 11)
!443 = distinct !DILexicalBlock(scope: !438, file: !228, line: 317, column: 18)
!444 = !DILocation(line: 321, column: 15, scope: !442)
!445 = !DILocation(line: 321, column: 11, scope: !443)
!446 = !DILocation(line: 322, column: 15, scope: !442)
!447 = !DILocation(line: 322, column: 13, scope: !442)
!448 = !DILocation(line: 322, column: 9, scope: !442)
!449 = !DILocation(line: 324, column: 20, scope: !442)
!450 = !DILocation(line: 324, column: 15, scope: !442)
!451 = !DILocation(line: 324, column: 13, scope: !442)
!452 = !DILocation(line: 334, column: 11, scope: !453)
!453 = distinct !DILexicalBlock(scope: !443, file: !228, line: 334, column: 11)
!454 = !DILocation(line: 334, column: 15, scope: !453)
!455 = !DILocation(line: 334, column: 11, scope: !443)
!456 = !DILocation(line: 336, column: 9, scope: !453)
!457 = !DILocation(line: 339, column: 21, scope: !458)
!458 = distinct !DILexicalBlock(scope: !453, file: !228, line: 337, column: 12)
!459 = !DILocation(line: 339, column: 19, scope: !458)
!460 = !DILocation(line: 340, column: 20, scope: !458)
!461 = !DILocation(line: 340, column: 42, scope: !462)
!462 = !DILexicalBlockFile(scope: !458, file: !228, discriminator: 1)
!463 = !DILocation(line: 340, column: 20, scope: !464)
!464 = !DILexicalBlockFile(scope: !458, file: !228, discriminator: 2)
!465 = !DILocation(line: 340, column: 18, scope: !466)
!466 = !DILexicalBlockFile(scope: !467, file: !228, discriminator: 4)
!467 = !DILexicalBlockFile(scope: !458, file: !228, discriminator: 3)
!468 = !DILocation(line: 341, column: 20, scope: !458)
!469 = !DILocation(line: 341, column: 18, scope: !458)
!470 = !DILocation(line: 343, column: 5, scope: !443)
!471 = !DILocation(line: 345, column: 14, scope: !438)
!472 = !DILocation(line: 348, column: 10, scope: !473)
!473 = distinct !DILexicalBlock(scope: !419, file: !228, line: 348, column: 9)
!474 = !DILocation(line: 348, column: 17, scope: !473)
!475 = !DILocation(line: 348, column: 20, scope: !476)
!476 = !DILexicalBlockFile(scope: !473, file: !228, discriminator: 1)
!477 = !DILocation(line: 348, column: 27, scope: !473)
!478 = !DILocation(line: 348, column: 24, scope: !473)
!479 = !DILocation(line: 348, column: 9, scope: !419)
!480 = !DILocation(line: 350, column: 11, scope: !481)
!481 = distinct !DILexicalBlock(scope: !482, file: !228, line: 350, column: 11)
!482 = distinct !DILexicalBlock(scope: !473, file: !228, line: 348, column: 47)
!483 = !DILocation(line: 350, column: 20, scope: !481)
!484 = !DILocation(line: 350, column: 25, scope: !481)
!485 = !DILocation(line: 350, column: 28, scope: !486)
!486 = !DILexicalBlockFile(scope: !481, file: !228, discriminator: 1)
!487 = !DILocation(line: 350, column: 38, scope: !481)
!488 = !DILocation(line: 350, column: 11, scope: !482)
!489 = !DILocation(line: 351, column: 34, scope: !481)
!490 = !DILocation(line: 351, column: 9, scope: !481)
!491 = !DILocation(line: 353, column: 34, scope: !481)
!492 = !DILocation(line: 356, column: 7, scope: !482)
!493 = !DILocation(line: 357, column: 11, scope: !494)
!494 = distinct !DILexicalBlock(scope: !482, file: !228, line: 357, column: 11)
!495 = !DILocation(line: 357, column: 15, scope: !494)
!496 = !DILocation(line: 357, column: 19, scope: !494)
!497 = !DILocation(line: 357, column: 22, scope: !498)
!498 = !DILexicalBlockFile(scope: !494, file: !228, discriminator: 1)
!499 = !DILocation(line: 357, column: 40, scope: !494)
!500 = !DILocation(line: 357, column: 39, scope: !494)
!501 = !DILocation(line: 357, column: 36, scope: !494)
!502 = !DILocation(line: 357, column: 11, scope: !482)
!503 = !DILocation(line: 358, column: 9, scope: !494)
!504 = !DILocation(line: 364, column: 9, scope: !494)
!505 = !DILocation(line: 367, column: 20, scope: !419)
!506 = !DILocation(line: 367, column: 29, scope: !419)
!507 = !DILocation(line: 367, column: 34, scope: !419)
!508 = !DILocation(line: 367, column: 37, scope: !509)
!509 = !DILexicalBlockFile(scope: !419, file: !228, discriminator: 2)
!510 = !DILocation(line: 367, column: 47, scope: !419)
!511 = !DILocation(line: 367, column: 34, scope: !512)
!512 = !DILexicalBlockFile(scope: !513, file: !228, discriminator: 3)
!513 = !DILexicalBlockFile(scope: !419, file: !228, discriminator: 1)
!514 = !DILocation(line: 367, column: 18, scope: !419)
!515 = !DILocation(line: 370, column: 11, scope: !419)
!516 = !DILocation(line: 371, column: 14, scope: !517)
!517 = distinct !DILexicalBlock(scope: !419, file: !228, line: 371, column: 5)
!518 = !DILocation(line: 371, column: 12, scope: !517)
!519 = !DILocation(line: 371, column: 10, scope: !517)
!520 = !DILocation(line: 371, column: 24, scope: !521)
!521 = !DILexicalBlockFile(scope: !522, file: !228, discriminator: 2)
!522 = !DILexicalBlockFile(scope: !523, file: !228, discriminator: 1)
!523 = distinct !DILexicalBlock(scope: !517, file: !228, line: 371, column: 5)
!524 = !DILocation(line: 371, column: 26, scope: !523)
!525 = !DILocation(line: 371, column: 5, scope: !517)
!526 = !DILocation(line: 372, column: 11, scope: !527)
!527 = distinct !DILexicalBlock(scope: !523, file: !228, line: 372, column: 11)
!528 = !DILocation(line: 372, column: 14, scope: !527)
!529 = !DILocation(line: 372, column: 24, scope: !527)
!530 = !DILocation(line: 372, column: 21, scope: !527)
!531 = !DILocation(line: 372, column: 31, scope: !527)
!532 = !DILocation(line: 372, column: 34, scope: !533)
!533 = !DILexicalBlockFile(scope: !527, file: !228, discriminator: 1)
!534 = !DILocation(line: 372, column: 37, scope: !527)
!535 = !DILocation(line: 372, column: 44, scope: !527)
!536 = !DILocation(line: 372, column: 41, scope: !527)
!537 = !DILocation(line: 372, column: 11, scope: !523)
!538 = !DILocation(line: 373, column: 9, scope: !527)
!539 = !DILocation(line: 372, column: 44, scope: !540)
!540 = !DILexicalBlockFile(scope: !541, file: !228, discriminator: 3)
!541 = !DILexicalBlockFile(scope: !527, file: !228, discriminator: 2)
!542 = !DILocation(line: 371, column: 40, scope: !523)
!543 = !DILocation(line: 371, column: 38, scope: !523)
!544 = !DILocation(line: 371, column: 47, scope: !523)
!545 = !DILocation(line: 371, column: 50, scope: !523)
!546 = !DILocation(line: 371, column: 45, scope: !523)
!547 = !DILocation(line: 371, column: 5, scope: !523)
!548 = !DILocation(line: 375, column: 9, scope: !549)
!549 = distinct !DILexicalBlock(scope: !419, file: !228, line: 375, column: 9)
!550 = !DILocation(line: 375, column: 11, scope: !549)
!551 = !DILocation(line: 375, column: 9, scope: !419)
!552 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !553, file: !228, line: 380, type: !554)
!553 = distinct !DILexicalBlock(scope: !549, file: !228, line: 375, column: 17)
!554 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 800, align: 8, elements: !555)
!555 = !{!556}
!556 = !DISubrange(count: 100)
!557 = !DILocation(line: 380, column: 14, scope: !553)
!558 = !DILocation(line: 381, column: 17, scope: !553)
!559 = !DILocation(line: 381, column: 42, scope: !553)
!560 = !DILocation(line: 381, column: 67, scope: !553)
!561 = !DILocation(line: 381, column: 9, scope: !553)
!562 = !DILocation(line: 382, column: 13, scope: !563)
!563 = distinct !DILexicalBlock(scope: !553, file: !228, line: 382, column: 13)
!564 = !DILocation(line: 382, column: 13, scope: !553)
!565 = !DILocation(line: 383, column: 23, scope: !563)
!566 = !DILocation(line: 383, column: 28, scope: !563)
!567 = !DILocation(line: 383, column: 39, scope: !563)
!568 = !DILocation(line: 383, column: 49, scope: !563)
!569 = !DILocation(line: 384, column: 23, scope: !563)
!570 = !DILocation(line: 383, column: 11, scope: !563)
!571 = !DILocation(line: 386, column: 33, scope: !563)
!572 = !DILocation(line: 386, column: 11, scope: !563)
!573 = !DILocation(line: 390, column: 5, scope: !553)
!574 = !DILocation(line: 392, column: 11, scope: !575)
!575 = distinct !DILexicalBlock(scope: !576, file: !228, line: 392, column: 11)
!576 = distinct !DILexicalBlock(scope: !549, file: !228, line: 390, column: 12)
!577 = !DILocation(line: 392, column: 14, scope: !575)
!578 = !DILocation(line: 392, column: 11, scope: !576)
!579 = !DILocation(line: 393, column: 25, scope: !575)
!580 = !DILocation(line: 393, column: 9, scope: !575)
!581 = !DILocation(line: 395, column: 11, scope: !582)
!582 = distinct !DILexicalBlock(scope: !576, file: !228, line: 395, column: 11)
!583 = !DILocation(line: 395, column: 24, scope: !582)
!584 = !DILocation(line: 395, column: 28, scope: !585)
!585 = !DILexicalBlockFile(scope: !582, file: !228, discriminator: 1)
!586 = !DILocation(line: 395, column: 31, scope: !582)
!587 = !DILocation(line: 395, column: 28, scope: !582)
!588 = !DILocation(line: 395, column: 39, scope: !582)
!589 = !DILocation(line: 395, column: 43, scope: !590)
!590 = !DILexicalBlockFile(scope: !582, file: !228, discriminator: 2)
!591 = !DILocation(line: 395, column: 11, scope: !576)
!592 = !DILocation(line: 398, column: 21, scope: !593)
!593 = distinct !DILexicalBlock(scope: !582, file: !228, line: 395, column: 63)
!594 = !DILocation(line: 398, column: 24, scope: !593)
!595 = !DILocation(line: 398, column: 30, scope: !593)
!596 = !DILocation(line: 398, column: 36, scope: !593)
!597 = !DILocation(line: 398, column: 47, scope: !593)
!598 = !DILocation(line: 398, column: 57, scope: !593)
!599 = !DILocation(line: 398, column: 9, scope: !593)
!600 = !DILocation(line: 399, column: 9, scope: !593)
!601 = !DILocation(line: 399, column: 12, scope: !593)
!602 = !DILocation(line: 399, column: 18, scope: !593)
!603 = !DILocation(line: 399, column: 32, scope: !593)
!604 = !DILocation(line: 400, column: 13, scope: !605)
!605 = distinct !DILexicalBlock(scope: !593, file: !228, line: 400, column: 13)
!606 = !DILocation(line: 400, column: 22, scope: !605)
!607 = !DILocation(line: 400, column: 13, scope: !593)
!608 = !DILocation(line: 401, column: 32, scope: !605)
!609 = !DILocation(line: 401, column: 11, scope: !605)
!610 = !DILocation(line: 402, column: 7, scope: !593)
!611 = !DILocation(line: 403, column: 13, scope: !612)
!612 = distinct !DILexicalBlock(scope: !613, file: !228, line: 403, column: 13)
!613 = distinct !DILexicalBlock(scope: !582, file: !228, line: 402, column: 14)
!614 = !DILocation(line: 403, column: 13, scope: !613)
!615 = !DILocation(line: 405, column: 23, scope: !616)
!616 = distinct !DILexicalBlock(scope: !612, file: !228, line: 403, column: 27)
!617 = !DILocation(line: 405, column: 26, scope: !616)
!618 = !DILocation(line: 405, column: 32, scope: !616)
!619 = !DILocation(line: 406, column: 23, scope: !616)
!620 = !DILocation(line: 406, column: 34, scope: !616)
!621 = !DILocation(line: 406, column: 44, scope: !616)
!622 = !DILocation(line: 405, column: 11, scope: !616)
!623 = !DILocation(line: 407, column: 24, scope: !616)
!624 = !DILocation(line: 408, column: 9, scope: !616)
!625 = !DILocation(line: 411, column: 19, scope: !613)
!626 = !DILocation(line: 411, column: 9, scope: !613)
!627 = !DILocation(line: 413, column: 17, scope: !613)
!628 = !DILocation(line: 413, column: 20, scope: !613)
!629 = !DILocation(line: 413, column: 26, scope: !613)
!630 = !DILocation(line: 413, column: 9, scope: !613)
!631 = !DILocation(line: 416, column: 11, scope: !632)
!632 = distinct !DILexicalBlock(scope: !613, file: !228, line: 413, column: 41)
!633 = !DILocation(line: 419, column: 15, scope: !634)
!634 = distinct !DILexicalBlock(scope: !632, file: !228, line: 419, column: 15)
!635 = !DILocation(line: 419, column: 18, scope: !634)
!636 = !DILocation(line: 419, column: 24, scope: !634)
!637 = !DILocation(line: 419, column: 38, scope: !634)
!638 = !DILocation(line: 419, column: 15, scope: !632)
!639 = !DILocation(line: 421, column: 34, scope: !640)
!640 = distinct !DILexicalBlock(scope: !634, file: !228, line: 419, column: 44)
!641 = !DILocation(line: 421, column: 13, scope: !640)
!642 = !DILocation(line: 422, column: 11, scope: !640)
!643 = !DILocation(line: 423, column: 11, scope: !632)
!644 = !DILocation(line: 428, column: 17, scope: !632)
!645 = !DILocation(line: 428, column: 20, scope: !632)
!646 = !DILocation(line: 428, column: 26, scope: !632)
!647 = !DILocation(line: 426, column: 11, scope: !632)
!648 = !DILocation(line: 429, column: 11, scope: !632)
!649 = !DILocation(line: 435, column: 28, scope: !576)
!650 = !DILocation(line: 435, column: 31, scope: !576)
!651 = !DILocation(line: 435, column: 7, scope: !576)
!652 = !DILocation(line: 438, column: 11, scope: !653)
!653 = distinct !DILexicalBlock(scope: !576, file: !228, line: 438, column: 11)
!654 = !DILocation(line: 438, column: 17, scope: !653)
!655 = !DILocation(line: 438, column: 11, scope: !576)
!656 = !DILocation(line: 439, column: 20, scope: !653)
!657 = !DILocation(line: 439, column: 23, scope: !653)
!658 = !DILocation(line: 439, column: 18, scope: !653)
!659 = !DILocation(line: 439, column: 9, scope: !653)
!660 = !DILocation(line: 441, column: 23, scope: !653)
!661 = !DILocation(line: 441, column: 26, scope: !653)
!662 = !DILocation(line: 441, column: 9, scope: !653)
!663 = !DILocation(line: 441, column: 16, scope: !653)
!664 = !DILocation(line: 441, column: 21, scope: !653)
!665 = !DILocation(line: 442, column: 18, scope: !576)
!666 = !DILocation(line: 442, column: 7, scope: !576)
!667 = !DILocation(line: 445, column: 7, scope: !576)
!668 = !DILocation(line: 448, column: 11, scope: !669)
!669 = distinct !DILexicalBlock(scope: !576, file: !228, line: 448, column: 11)
!670 = !DILocation(line: 448, column: 24, scope: !669)
!671 = !DILocation(line: 448, column: 28, scope: !672)
!672 = !DILexicalBlockFile(scope: !669, file: !228, discriminator: 1)
!673 = !DILocation(line: 448, column: 11, scope: !576)
!674 = !DILocation(line: 449, column: 9, scope: !669)
!675 = !DILocation(line: 452, column: 7, scope: !576)
!676 = !DILocation(line: 453, column: 11, scope: !677)
!677 = distinct !DILexicalBlock(scope: !576, file: !228, line: 453, column: 11)
!678 = !DILocation(line: 453, column: 15, scope: !677)
!679 = !DILocation(line: 453, column: 19, scope: !677)
!680 = !DILocation(line: 453, column: 22, scope: !681)
!681 = !DILexicalBlockFile(scope: !677, file: !228, discriminator: 1)
!682 = !DILocation(line: 453, column: 40, scope: !677)
!683 = !DILocation(line: 453, column: 39, scope: !677)
!684 = !DILocation(line: 453, column: 36, scope: !677)
!685 = !DILocation(line: 453, column: 11, scope: !576)
!686 = !DILocation(line: 454, column: 9, scope: !677)
!687 = !DILocation(line: 467, column: 7, scope: !688)
!688 = distinct !DILexicalBlock(scope: !235, file: !228, line: 467, column: 7)
!689 = !DILocation(line: 467, column: 11, scope: !688)
!690 = !DILocation(line: 467, column: 7, scope: !235)
!691 = !DILocation(line: 468, column: 5, scope: !688)
!692 = !DILocation(line: 470, column: 3, scope: !235)
!693 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "target_name", arg: 1, scope: !255, file: !228, line: 158, type: !21)
!694 = !DILocation(line: 158, column: 76, scope: !255)
!695 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "exit_code", arg: 2, scope: !255, file: !228, line: 159, type: !112)
!696 = !DILocation(line: 159, column: 5, scope: !255)
!697 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "exit_sig", arg: 3, scope: !255, file: !228, line: 159, type: !112)
!698 = !DILocation(line: 159, column: 16, scope: !255)
!699 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "coredump", arg: 4, scope: !255, file: !228, line: 159, type: !112)
!700 = !DILocation(line: 159, column: 26, scope: !255)
!701 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "ignored", arg: 5, scope: !255, file: !228, line: 160, type: !112)
!702 = !DILocation(line: 160, column: 5, scope: !255)
!703 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ignore_string", scope: !255, file: !228, line: 162, type: !21)
!704 = !DILocation(line: 162, column: 9, scope: !255)
!705 = !DILocation(line: 162, column: 25, scope: !255)
!706 = !DILocation(line: 164, column: 7, scope: !707)
!707 = distinct !DILexicalBlock(scope: !255, file: !228, line: 164, column: 7)
!708 = !DILocation(line: 164, column: 16, scope: !707)
!709 = !DILocation(line: 164, column: 7, scope: !255)
!710 = !DILocation(line: 165, column: 34, scope: !707)
!711 = !DILocation(line: 165, column: 47, scope: !707)
!712 = !DILocation(line: 165, column: 58, scope: !707)
!713 = !DILocation(line: 165, column: 5, scope: !707)
!714 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "coredump_string", scope: !715, file: !228, line: 167, type: !21)
!715 = distinct !DILexicalBlock(scope: !707, file: !228, line: 166, column: 8)
!716 = !DILocation(line: 167, column: 11, scope: !715)
!717 = !DILocation(line: 167, column: 29, scope: !715)
!718 = !DILocation(line: 168, column: 9, scope: !719)
!719 = distinct !DILexicalBlock(scope: !715, file: !228, line: 168, column: 9)
!720 = !DILocation(line: 168, column: 18, scope: !719)
!721 = !DILocation(line: 168, column: 22, scope: !719)
!722 = !DILocation(line: 168, column: 25, scope: !723)
!723 = !DILexicalBlockFile(scope: !719, file: !228, discriminator: 1)
!724 = !DILocation(line: 168, column: 34, scope: !719)
!725 = !DILocation(line: 168, column: 9, scope: !715)
!726 = !DILocation(line: 170, column: 13, scope: !719)
!727 = !DILocation(line: 170, column: 38, scope: !719)
!728 = !DILocation(line: 170, column: 26, scope: !719)
!729 = !DILocation(line: 170, column: 49, scope: !719)
!730 = !DILocation(line: 169, column: 7, scope: !719)
!731 = !DILocation(line: 172, column: 37, scope: !719)
!732 = !DILocation(line: 172, column: 50, scope: !719)
!733 = !DILocation(line: 172, column: 60, scope: !719)
!734 = !DILocation(line: 172, column: 7, scope: !719)
!735 = !DILocation(line: 174, column: 1, scope: !255)
!736 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !238, file: !228, line: 479, type: !34)
!737 = !DILocation(line: 479, column: 44, scope: !238)
!738 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "err", arg: 2, scope: !238, file: !228, line: 480, type: !112)
!739 = !DILocation(line: 480, column: 5, scope: !238)
!740 = !DILocation(line: 482, column: 3, scope: !238)
!741 = !DILocation(line: 484, column: 7, scope: !742)
!742 = distinct !DILexicalBlock(scope: !238, file: !228, line: 484, column: 7)
!743 = !DILocation(line: 484, column: 11, scope: !742)
!744 = !DILocation(line: 484, column: 15, scope: !745)
!745 = !DILexicalBlockFile(scope: !742, file: !228, discriminator: 1)
!746 = !DILocation(line: 484, column: 24, scope: !742)
!747 = !DILocation(line: 484, column: 29, scope: !742)
!748 = !DILocation(line: 484, column: 32, scope: !749)
!749 = !DILexicalBlockFile(scope: !742, file: !228, discriminator: 2)
!750 = !DILocation(line: 484, column: 51, scope: !742)
!751 = !DILocation(line: 484, column: 7, scope: !238)
!752 = !DILocation(line: 485, column: 12, scope: !753)
!753 = distinct !DILexicalBlock(scope: !742, file: !228, line: 484, column: 58)
!754 = !DILocation(line: 485, column: 5, scope: !753)
!755 = !DILocation(line: 486, column: 5, scope: !753)
!756 = !DILocation(line: 487, column: 3, scope: !753)
!757 = !DILocation(line: 490, column: 29, scope: !238)
!758 = !DILocation(line: 490, column: 23, scope: !238)
!759 = !DILocation(line: 490, column: 9, scope: !238)
!760 = !DILocation(line: 492, column: 3, scope: !238)
!761 = !DILocation(line: 493, column: 1, scope: !238)
!762 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "file", arg: 1, scope: !241, file: !228, line: 694, type: !19)
!763 = !DILocation(line: 694, column: 41, scope: !241)
!764 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmds", scope: !241, file: !228, line: 696, type: !28)
!765 = !DILocation(line: 696, column: 29, scope: !241)
!766 = !DILocation(line: 696, column: 36, scope: !241)
!767 = !DILocation(line: 696, column: 42, scope: !241)
!768 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !241, file: !228, line: 697, type: !208)
!769 = !DILocation(line: 697, column: 26, scope: !241)
!770 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "lines", scope: !241, file: !228, line: 698, type: !38)
!771 = !DILocation(line: 698, column: 10, scope: !241)
!772 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !241, file: !228, line: 699, type: !34)
!773 = !DILocation(line: 699, column: 25, scope: !241)
!774 = !DILocation(line: 702, column: 17, scope: !241)
!775 = !DILocation(line: 702, column: 3, scope: !241)
!776 = !DILocation(line: 704, column: 7, scope: !777)
!777 = distinct !DILexicalBlock(scope: !241, file: !228, line: 704, column: 7)
!778 = !DILocation(line: 704, column: 17, scope: !777)
!779 = !DILocation(line: 704, column: 7, scope: !241)
!780 = !DILocation(line: 706, column: 5, scope: !777)
!781 = !DILocation(line: 706, column: 12, scope: !782)
!782 = !DILexicalBlockFile(scope: !783, file: !228, discriminator: 3)
!783 = !DILexicalBlockFile(scope: !777, file: !228, discriminator: 1)
!784 = !DILocation(line: 706, column: 30, scope: !777)
!785 = !DILocation(line: 706, column: 27, scope: !777)
!786 = !DILocation(line: 707, column: 7, scope: !777)
!787 = !DILocation(line: 706, column: 5, scope: !788)
!788 = !DILexicalBlockFile(scope: !777, file: !228, discriminator: 2)
!789 = !DILocation(line: 710, column: 28, scope: !241)
!790 = !DILocation(line: 710, column: 34, scope: !241)
!791 = !DILocation(line: 710, column: 49, scope: !241)
!792 = !DILocation(line: 710, column: 20, scope: !241)
!793 = !DILocation(line: 710, column: 11, scope: !241)
!794 = !DILocation(line: 710, column: 9, scope: !241)
!795 = !DILocation(line: 711, column: 10, scope: !796)
!796 = distinct !DILexicalBlock(scope: !241, file: !228, line: 711, column: 3)
!797 = !DILocation(line: 711, column: 8, scope: !796)
!798 = !DILocation(line: 711, column: 15, scope: !799)
!799 = !DILexicalBlockFile(scope: !800, file: !228, discriminator: 2)
!800 = !DILexicalBlockFile(scope: !801, file: !228, discriminator: 1)
!801 = distinct !DILexicalBlock(scope: !796, file: !228, line: 711, column: 3)
!802 = !DILocation(line: 711, column: 19, scope: !801)
!803 = !DILocation(line: 711, column: 25, scope: !801)
!804 = !DILocation(line: 711, column: 17, scope: !801)
!805 = !DILocation(line: 711, column: 3, scope: !796)
!806 = !DILocation(line: 712, column: 71, scope: !801)
!807 = !DILocation(line: 712, column: 51, scope: !801)
!808 = !DILocation(line: 712, column: 57, scope: !801)
!809 = !DILocation(line: 713, column: 51, scope: !801)
!810 = !DILocation(line: 712, column: 16, scope: !801)
!811 = !DILocation(line: 712, column: 11, scope: !801)
!812 = !DILocation(line: 712, column: 5, scope: !801)
!813 = !DILocation(line: 712, column: 14, scope: !801)
!814 = !DILocation(line: 711, column: 41, scope: !801)
!815 = !DILocation(line: 711, column: 3, scope: !801)
!816 = !DILocation(line: 718, column: 3, scope: !241)
!817 = !DILocation(line: 720, column: 23, scope: !241)
!818 = !DILocation(line: 720, column: 7, scope: !241)
!819 = !DILocation(line: 720, column: 5, scope: !241)
!820 = !DILocation(line: 721, column: 13, scope: !241)
!821 = !DILocation(line: 721, column: 3, scope: !241)
!822 = !DILocation(line: 721, column: 6, scope: !241)
!823 = !DILocation(line: 721, column: 11, scope: !241)
!824 = !DILocation(line: 722, column: 22, scope: !241)
!825 = !DILocation(line: 722, column: 3, scope: !241)
!826 = !DILocation(line: 722, column: 6, scope: !241)
!827 = !DILocation(line: 722, column: 20, scope: !241)
!828 = !DILocation(line: 723, column: 3, scope: !241)
!829 = !DILocation(line: 723, column: 6, scope: !241)
!830 = !DILocation(line: 723, column: 19, scope: !241)
!831 = !DILocation(line: 724, column: 3, scope: !241)
!832 = !DILocation(line: 724, column: 6, scope: !241)
!833 = !DILocation(line: 724, column: 18, scope: !241)
!834 = !DILocation(line: 725, column: 3, scope: !241)
!835 = !DILocation(line: 725, column: 6, scope: !241)
!836 = !DILocation(line: 725, column: 18, scope: !241)
!837 = !DILocation(line: 726, column: 13, scope: !241)
!838 = !DILocation(line: 726, column: 3, scope: !241)
!839 = !DILocation(line: 727, column: 11, scope: !241)
!840 = !DILocation(line: 727, column: 17, scope: !241)
!841 = !DILocation(line: 727, column: 3, scope: !241)
!842 = !DILocation(line: 729, column: 15, scope: !843)
!843 = distinct !DILexicalBlock(scope: !241, file: !228, line: 727, column: 32)
!844 = !DILocation(line: 729, column: 5, scope: !843)
!845 = !DILocation(line: 729, column: 8, scope: !843)
!846 = !DILocation(line: 729, column: 13, scope: !843)
!847 = !DILocation(line: 730, column: 16, scope: !843)
!848 = !DILocation(line: 730, column: 14, scope: !843)
!849 = !DILocation(line: 732, column: 5, scope: !843)
!850 = !DILocation(line: 733, column: 5, scope: !843)
!851 = !DILocation(line: 736, column: 16, scope: !843)
!852 = !DILocation(line: 736, column: 5, scope: !843)
!853 = !DILocation(line: 737, column: 26, scope: !843)
!854 = !DILocation(line: 737, column: 5, scope: !843)
!855 = !DILocation(line: 738, column: 5, scope: !843)
!856 = !DILocation(line: 742, column: 11, scope: !843)
!857 = !DILocation(line: 742, column: 17, scope: !843)
!858 = !DILocation(line: 742, column: 28, scope: !843)
!859 = !DILocation(line: 742, column: 34, scope: !843)
!860 = !DILocation(line: 741, column: 5, scope: !843)
!861 = !DILocation(line: 743, column: 5, scope: !843)
!862 = !DILocation(line: 747, column: 3, scope: !241)
!863 = !DILocation(line: 749, column: 7, scope: !864)
!864 = distinct !DILexicalBlock(scope: !241, file: !228, line: 749, column: 7)
!865 = !DILocation(line: 749, column: 17, scope: !864)
!866 = !DILocation(line: 749, column: 22, scope: !864)
!867 = !DILocation(line: 749, column: 25, scope: !868)
!868 = !DILexicalBlockFile(scope: !864, file: !228, discriminator: 1)
!869 = !DILocation(line: 749, column: 31, scope: !864)
!870 = !DILocation(line: 749, column: 45, scope: !864)
!871 = !DILocation(line: 749, column: 7, scope: !241)
!872 = !DILocation(line: 752, column: 5, scope: !873)
!873 = distinct !DILexicalBlock(scope: !864, file: !228, line: 749, column: 60)
!874 = !DILocation(line: 752, column: 12, scope: !875)
!875 = !DILexicalBlockFile(scope: !876, file: !228, discriminator: 2)
!876 = !DILexicalBlockFile(scope: !873, file: !228, discriminator: 1)
!877 = !DILocation(line: 752, column: 18, scope: !873)
!878 = !DILocation(line: 752, column: 32, scope: !873)
!879 = !DILocation(line: 753, column: 7, scope: !873)
!880 = !DILocation(line: 754, column: 3, scope: !873)
!881 = !DILocation(line: 755, column: 1, scope: !241)
!882 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "stdin_fd", arg: 1, scope: !244, file: !228, line: 762, type: !112)
!883 = !DILocation(line: 762, column: 60, scope: !244)
!884 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "stdout_fd", arg: 2, scope: !244, file: !228, line: 763, type: !112)
!885 = !DILocation(line: 763, column: 5, scope: !244)
!886 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 3, scope: !244, file: !228, line: 764, type: !38)
!887 = !DILocation(line: 764, column: 8, scope: !244)
!888 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "envp", arg: 4, scope: !244, file: !228, line: 764, type: !38)
!889 = !DILocation(line: 764, column: 16, scope: !244)
!890 = !DILocation(line: 766, column: 7, scope: !891)
!891 = distinct !DILexicalBlock(scope: !244, file: !228, line: 766, column: 7)
!892 = !DILocation(line: 766, column: 16, scope: !891)
!893 = !DILocation(line: 766, column: 7, scope: !244)
!894 = !DILocation(line: 767, column: 16, scope: !891)
!895 = !DILocation(line: 767, column: 11, scope: !891)
!896 = !DILocation(line: 767, column: 5, scope: !891)
!897 = !DILocation(line: 768, column: 7, scope: !898)
!898 = distinct !DILexicalBlock(scope: !244, file: !228, line: 768, column: 7)
!899 = !DILocation(line: 768, column: 17, scope: !898)
!900 = !DILocation(line: 768, column: 7, scope: !244)
!901 = !DILocation(line: 769, column: 16, scope: !898)
!902 = !DILocation(line: 769, column: 11, scope: !898)
!903 = !DILocation(line: 769, column: 5, scope: !898)
!904 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "d", scope: !905, file: !228, line: 773, type: !112)
!905 = distinct !DILexicalBlock(scope: !244, file: !228, line: 772, column: 3)
!906 = !DILocation(line: 773, column: 18, scope: !905)
!907 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "max", scope: !905, file: !228, line: 774, type: !112)
!908 = !DILocation(line: 774, column: 9, scope: !905)
!909 = !DILocation(line: 774, column: 15, scope: !905)
!910 = !DILocation(line: 775, column: 12, scope: !911)
!911 = distinct !DILexicalBlock(scope: !905, file: !228, line: 775, column: 5)
!912 = !DILocation(line: 775, column: 10, scope: !911)
!913 = !DILocation(line: 775, column: 17, scope: !914)
!914 = !DILexicalBlockFile(scope: !915, file: !228, discriminator: 2)
!915 = !DILexicalBlockFile(scope: !916, file: !228, discriminator: 1)
!916 = distinct !DILexicalBlock(scope: !911, file: !228, line: 775, column: 5)
!917 = !DILocation(line: 775, column: 21, scope: !916)
!918 = !DILocation(line: 775, column: 19, scope: !916)
!919 = !DILocation(line: 775, column: 5, scope: !911)
!920 = !DILocation(line: 776, column: 19, scope: !916)
!921 = !DILocation(line: 776, column: 13, scope: !916)
!922 = !DILocation(line: 776, column: 7, scope: !916)
!923 = !DILocation(line: 775, column: 26, scope: !916)
!924 = !DILocation(line: 775, column: 5, scope: !916)
!925 = !DILocation(line: 780, column: 3, scope: !244)
!926 = !DILocation(line: 783, column: 16, scope: !244)
!927 = !DILocation(line: 783, column: 22, scope: !244)
!928 = !DILocation(line: 783, column: 3, scope: !244)
!929 = !DILocation(line: 784, column: 1, scope: !244)
!930 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 1, scope: !247, file: !228, line: 874, type: !38)
!931 = !DILocation(line: 874, column: 37, scope: !247)
!932 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "envp", arg: 2, scope: !247, file: !228, line: 875, type: !38)
!933 = !DILocation(line: 875, column: 7, scope: !247)
!934 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "shell", scope: !247, file: !228, line: 877, type: !21)
!935 = !DILocation(line: 877, column: 9, scope: !247)
!936 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !247, file: !228, line: 877, type: !21)
!937 = !DILocation(line: 877, column: 17, scope: !247)
!938 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "program", scope: !247, file: !228, line: 878, type: !939)
!939 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 32768, align: 8, elements: !940)
!940 = !{!941}
!941 = !DISubrange(count: 4096)
!942 = !DILocation(line: 878, column: 3, scope: !247)
!943 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ep", scope: !247, file: !228, line: 879, type: !38)
!944 = !DILocation(line: 879, column: 19, scope: !247)
!945 = !DILocation(line: 881, column: 16, scope: !247)
!946 = !DILocation(line: 881, column: 9, scope: !247)
!947 = !DILocation(line: 882, column: 13, scope: !948)
!948 = distinct !DILexicalBlock(scope: !247, file: !228, line: 882, column: 3)
!949 = !DILocation(line: 882, column: 11, scope: !948)
!950 = !DILocation(line: 882, column: 8, scope: !948)
!951 = !DILocation(line: 882, column: 20, scope: !952)
!952 = !DILexicalBlockFile(scope: !953, file: !228, discriminator: 2)
!953 = !DILexicalBlockFile(scope: !954, file: !228, discriminator: 1)
!954 = distinct !DILexicalBlock(scope: !948, file: !228, line: 882, column: 3)
!955 = !DILocation(line: 882, column: 19, scope: !954)
!956 = !DILocation(line: 882, column: 23, scope: !954)
!957 = !DILocation(line: 882, column: 3, scope: !948)
!958 = !DILocation(line: 883, column: 9, scope: !959)
!959 = distinct !DILexicalBlock(scope: !960, file: !228, line: 883, column: 9)
!960 = distinct !DILexicalBlock(scope: !954, file: !228, line: 882, column: 35)
!961 = !DILocation(line: 883, column: 15, scope: !959)
!962 = !DILocation(line: 883, column: 20, scope: !959)
!963 = !DILocation(line: 883, column: 33, scope: !964)
!964 = !DILexicalBlockFile(scope: !959, file: !228, discriminator: 1)
!965 = !DILocation(line: 883, column: 32, scope: !959)
!966 = !DILocation(line: 883, column: 24, scope: !959)
!967 = !DILocation(line: 883, column: 9, scope: !960)
!968 = !DILocation(line: 884, column: 18, scope: !959)
!969 = !DILocation(line: 884, column: 17, scope: !959)
!970 = !DILocation(line: 884, column: 16, scope: !959)
!971 = !DILocation(line: 884, column: 13, scope: !959)
!972 = !DILocation(line: 884, column: 7, scope: !959)
!973 = !DILocation(line: 885, column: 14, scope: !974)
!974 = distinct !DILexicalBlock(scope: !959, file: !228, line: 885, column: 14)
!975 = !DILocation(line: 885, column: 19, scope: !974)
!976 = !DILocation(line: 885, column: 24, scope: !974)
!977 = !DILocation(line: 885, column: 37, scope: !978)
!978 = !DILexicalBlockFile(scope: !974, file: !228, discriminator: 1)
!979 = !DILocation(line: 885, column: 36, scope: !974)
!980 = !DILocation(line: 885, column: 28, scope: !974)
!981 = !DILocation(line: 885, column: 14, scope: !959)
!982 = !DILocation(line: 886, column: 17, scope: !974)
!983 = !DILocation(line: 886, column: 16, scope: !974)
!984 = !DILocation(line: 886, column: 15, scope: !974)
!985 = !DILocation(line: 886, column: 12, scope: !974)
!986 = !DILocation(line: 886, column: 7, scope: !974)
!987 = !DILocation(line: 887, column: 14, scope: !988)
!988 = distinct !DILexicalBlock(scope: !974, file: !228, line: 887, column: 14)
!989 = !DILocation(line: 887, column: 19, scope: !988)
!990 = !DILocation(line: 887, column: 24, scope: !988)
!991 = !DILocation(line: 887, column: 27, scope: !992)
!992 = !DILexicalBlockFile(scope: !988, file: !228, discriminator: 1)
!993 = !DILocation(line: 887, column: 33, scope: !988)
!994 = !DILocation(line: 887, column: 14, scope: !974)
!995 = !DILocation(line: 888, column: 7, scope: !988)
!996 = !DILocation(line: 889, column: 3, scope: !960)
!997 = !DILocation(line: 882, column: 29, scope: !954)
!998 = !DILocation(line: 882, column: 3, scope: !954)
!999 = !DILocation(line: 892, column: 3, scope: !247)
!1000 = !DILocation(line: 894, column: 20, scope: !1001)
!1001 = distinct !DILexicalBlock(scope: !247, file: !228, line: 894, column: 7)
!1002 = !DILocation(line: 894, column: 29, scope: !1001)
!1003 = !DILocation(line: 894, column: 35, scope: !1001)
!1004 = !DILocation(line: 894, column: 8, scope: !1001)
!1005 = !DILocation(line: 894, column: 7, scope: !247)
!1006 = !DILocation(line: 895, column: 36, scope: !1001)
!1007 = !DILocation(line: 895, column: 5, scope: !1001)
!1008 = !DILocation(line: 898, column: 12, scope: !1009)
!1009 = distinct !DILexicalBlock(scope: !1001, file: !228, line: 896, column: 8)
!1010 = !DILocation(line: 898, column: 21, scope: !1009)
!1011 = !DILocation(line: 898, column: 27, scope: !1009)
!1012 = !DILocation(line: 898, column: 5, scope: !1009)
!1013 = !DILocation(line: 900, column: 9, scope: !1014)
!1014 = distinct !DILexicalBlock(scope: !1009, file: !228, line: 900, column: 9)
!1015 = !DILocation(line: 900, column: 15, scope: !1014)
!1016 = !DILocation(line: 900, column: 9, scope: !1009)
!1017 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "shell_program", scope: !1018, file: !228, line: 901, type: !939)
!1018 = distinct !DILexicalBlock(scope: !1014, file: !228, line: 900, column: 27)
!1019 = !DILocation(line: 901, column: 7, scope: !1018)
!1020 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "shell_path", scope: !1018, file: !228, line: 902, type: !21)
!1021 = !DILocation(line: 902, column: 13, scope: !1018)
!1022 = !DILocation(line: 903, column: 11, scope: !1023)
!1023 = distinct !DILexicalBlock(scope: !1018, file: !228, line: 903, column: 11)
!1024 = !DILocation(line: 903, column: 17, scope: !1023)
!1025 = !DILocation(line: 903, column: 11, scope: !1018)
!1026 = !DILocation(line: 904, column: 20, scope: !1023)
!1027 = !DILocation(line: 904, column: 9, scope: !1023)
!1028 = !DILocation(line: 906, column: 25, scope: !1029)
!1029 = distinct !DILexicalBlock(scope: !1030, file: !228, line: 906, column: 13)
!1030 = distinct !DILexicalBlock(scope: !1023, file: !228, line: 905, column: 12)
!1031 = !DILocation(line: 906, column: 32, scope: !1029)
!1032 = !DILocation(line: 906, column: 38, scope: !1029)
!1033 = !DILocation(line: 906, column: 13, scope: !1029)
!1034 = !DILocation(line: 906, column: 13, scope: !1030)
!1035 = !DILocation(line: 907, column: 24, scope: !1029)
!1036 = !DILocation(line: 907, column: 22, scope: !1029)
!1037 = !DILocation(line: 907, column: 11, scope: !1029)
!1038 = !DILocation(line: 909, column: 22, scope: !1039)
!1039 = distinct !DILexicalBlock(scope: !1029, file: !228, line: 908, column: 14)
!1040 = !DILocation(line: 910, column: 48, scope: !1039)
!1041 = !DILocation(line: 910, column: 11, scope: !1039)
!1042 = !DILocation(line: 914, column: 11, scope: !1043)
!1043 = distinct !DILexicalBlock(scope: !1018, file: !228, line: 914, column: 11)
!1044 = !DILocation(line: 914, column: 22, scope: !1043)
!1045 = !DILocation(line: 914, column: 11, scope: !1018)
!1046 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "new_argv", scope: !1047, file: !228, line: 915, type: !38)
!1047 = distinct !DILexicalBlock(scope: !1043, file: !228, line: 914, column: 28)
!1048 = !DILocation(line: 915, column: 16, scope: !1047)
!1049 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argc", scope: !1047, file: !228, line: 916, type: !112)
!1050 = !DILocation(line: 916, column: 13, scope: !1047)
!1051 = !DILocation(line: 918, column: 14, scope: !1047)
!1052 = !DILocation(line: 919, column: 9, scope: !1047)
!1053 = !DILocation(line: 919, column: 21, scope: !1054)
!1054 = !DILexicalBlockFile(scope: !1055, file: !228, discriminator: 2)
!1055 = !DILexicalBlockFile(scope: !1047, file: !228, discriminator: 1)
!1056 = !DILocation(line: 919, column: 16, scope: !1047)
!1057 = !DILocation(line: 919, column: 27, scope: !1047)
!1058 = !DILocation(line: 920, column: 11, scope: !1047)
!1059 = !DILocation(line: 922, column: 29, scope: !1047)
!1060 = !DILocation(line: 922, column: 20, scope: !1047)
!1061 = !DILocation(line: 922, column: 18, scope: !1047)
!1062 = !DILocation(line: 923, column: 23, scope: !1047)
!1063 = !DILocation(line: 923, column: 9, scope: !1047)
!1064 = !DILocation(line: 923, column: 21, scope: !1047)
!1065 = !DILocation(line: 924, column: 23, scope: !1047)
!1066 = !DILocation(line: 924, column: 9, scope: !1047)
!1067 = !DILocation(line: 924, column: 21, scope: !1047)
!1068 = !DILocation(line: 925, column: 9, scope: !1047)
!1069 = !DILocation(line: 925, column: 16, scope: !1054)
!1070 = !DILocation(line: 925, column: 21, scope: !1047)
!1071 = !DILocation(line: 926, column: 37, scope: !1072)
!1072 = distinct !DILexicalBlock(scope: !1047, file: !228, line: 925, column: 26)
!1073 = !DILocation(line: 926, column: 32, scope: !1072)
!1074 = !DILocation(line: 926, column: 24, scope: !1072)
!1075 = !DILocation(line: 926, column: 22, scope: !1072)
!1076 = !DILocation(line: 926, column: 11, scope: !1072)
!1077 = !DILocation(line: 926, column: 30, scope: !1072)
!1078 = !DILocation(line: 927, column: 11, scope: !1072)
!1079 = !DILocation(line: 930, column: 16, scope: !1047)
!1080 = !DILocation(line: 930, column: 28, scope: !1047)
!1081 = !DILocation(line: 930, column: 38, scope: !1047)
!1082 = !DILocation(line: 930, column: 9, scope: !1047)
!1083 = !DILocation(line: 931, column: 38, scope: !1047)
!1084 = !DILocation(line: 931, column: 9, scope: !1047)
!1085 = !DILocation(line: 932, column: 7, scope: !1047)
!1086 = !DILocation(line: 933, column: 5, scope: !1018)
!1087 = !DILocation(line: 934, column: 36, scope: !1014)
!1088 = !DILocation(line: 934, column: 7, scope: !1014)
!1089 = !DILocation(line: 937, column: 3, scope: !247)
!1090 = !DILocation(line: 938, column: 1, scope: !247)
!1091 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "file", arg: 1, scope: !262, file: !228, line: 791, type: !21)
!1092 = !DILocation(line: 791, column: 44, scope: !262)
!1093 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 2, scope: !262, file: !228, line: 792, type: !21)
!1094 = !DILocation(line: 792, column: 6, scope: !262)
!1095 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "program", arg: 3, scope: !262, file: !228, line: 792, type: !21)
!1096 = !DILocation(line: 792, column: 13, scope: !262)
!1097 = !DILocation(line: 794, column: 7, scope: !1098)
!1098 = distinct !DILexicalBlock(scope: !262, file: !228, line: 794, column: 7)
!1099 = !DILocation(line: 794, column: 12, scope: !1098)
!1100 = !DILocation(line: 794, column: 17, scope: !1098)
!1101 = !DILocation(line: 794, column: 20, scope: !1102)
!1102 = !DILexicalBlockFile(scope: !1098, file: !228, discriminator: 1)
!1103 = !DILocation(line: 794, column: 28, scope: !1098)
!1104 = !DILocation(line: 794, column: 7, scope: !262)
!1105 = !DILocation(line: 795, column: 10, scope: !1098)
!1106 = !DILocation(line: 795, column: 5, scope: !1098)
!1107 = !DILocation(line: 797, column: 7, scope: !1108)
!1108 = distinct !DILexicalBlock(scope: !262, file: !228, line: 797, column: 7)
!1109 = !DILocation(line: 797, column: 24, scope: !1108)
!1110 = !DILocation(line: 797, column: 7, scope: !262)
!1111 = !DILocation(line: 798, column: 12, scope: !1112)
!1112 = distinct !DILexicalBlock(scope: !1108, file: !228, line: 797, column: 30)
!1113 = !DILocation(line: 798, column: 21, scope: !1112)
!1114 = !DILocation(line: 798, column: 5, scope: !1112)
!1115 = !DILocation(line: 799, column: 5, scope: !1112)
!1116 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !1117, file: !228, line: 801, type: !34)
!1117 = distinct !DILexicalBlock(scope: !1108, file: !228, line: 800, column: 10)
!1118 = !DILocation(line: 801, column: 18, scope: !1117)
!1119 = !DILocation(line: 819, column: 24, scope: !1120)
!1120 = distinct !DILexicalBlock(scope: !1117, file: !228, line: 819, column: 9)
!1121 = !DILocation(line: 819, column: 32, scope: !1120)
!1122 = !DILocation(line: 819, column: 9, scope: !1117)
!1123 = !DILocation(line: 820, column: 17, scope: !1120)
!1124 = !DILocation(line: 820, column: 15, scope: !1120)
!1125 = !DILocation(line: 820, column: 7, scope: !1120)
!1126 = !DILocation(line: 823, column: 18, scope: !1117)
!1127 = !DILocation(line: 823, column: 11, scope: !1117)
!1128 = !DILocation(line: 823, column: 24, scope: !1117)
!1129 = !DILocation(line: 823, column: 9, scope: !1117)
!1130 = !DILocation(line: 824, column: 5, scope: !1117)
!1131 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "st", scope: !1132, file: !228, line: 825, type: !1133)
!1132 = distinct !DILexicalBlock(scope: !1117, file: !228, line: 824, column: 8)
!1133 = !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !1134, line: 46, size: 1152, align: 64, elements: !1135)
!1134 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/make")
!1135 = !{!1136, !1138, !1140, !1142, !1144, !1146, !1147, !1148, !1149, !1151, !1153, !1155, !1160, !1161, !1162}
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !1133, file: !1134, line: 48, baseType: !1137, size: 64, align: 64)
!1137 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !47, line: 124, baseType: !223)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !1133, file: !1134, line: 53, baseType: !1139, size: 64, align: 64, offset: 64)
!1139 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !47, line: 127, baseType: !223)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !1133, file: !1134, line: 61, baseType: !1141, size: 64, align: 64, offset: 128)
!1141 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !47, line: 130, baseType: !223)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !1133, file: !1134, line: 62, baseType: !1143, size: 32, align: 32, offset: 192)
!1143 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !47, line: 129, baseType: !34)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !1133, file: !1134, line: 64, baseType: !1145, size: 32, align: 32, offset: 224)
!1145 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !47, line: 125, baseType: !34)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !1133, file: !1134, line: 65, baseType: !285, size: 32, align: 32, offset: 256)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !1133, file: !1134, line: 67, baseType: !112, size: 32, align: 32, offset: 288)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !1133, file: !1134, line: 69, baseType: !1137, size: 64, align: 64, offset: 320)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !1133, file: !1134, line: 74, baseType: !1150, size: 64, align: 64, offset: 384)
!1150 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !47, line: 131, baseType: !48)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !1133, file: !1134, line: 78, baseType: !1152, size: 64, align: 64, offset: 448)
!1152 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !47, line: 153, baseType: !48)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !1133, file: !1134, line: 80, baseType: !1154, size: 64, align: 64, offset: 512)
!1154 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !47, line: 158, baseType: !48)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !1133, file: !1134, line: 91, baseType: !1156, size: 128, align: 64, offset: 576)
!1156 = !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !45, line: 120, size: 128, align: 64, elements: !1157)
!1157 = !{!1158, !1159}
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1156, file: !45, line: 122, baseType: !46, size: 64, align: 64)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1156, file: !45, line: 123, baseType: !141, size: 64, align: 64, offset: 64)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !1133, file: !1134, line: 92, baseType: !1156, size: 128, align: 64, offset: 704)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !1133, file: !1134, line: 93, baseType: !1156, size: 128, align: 64, offset: 832)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1133, file: !1134, line: 106, baseType: !1163, size: 192, align: 64, offset: 960)
!1163 = !DICompositeType(tag: DW_TAG_array_type, baseType: !141, size: 192, align: 64, elements: !1164)
!1164 = !{!1165}
!1165 = !DISubrange(count: 3)
!1166 = !DILocation(line: 825, column: 19, scope: !1132)
!1167 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "perm", scope: !1132, file: !228, line: 826, type: !112)
!1168 = !DILocation(line: 826, column: 11, scope: !1132)
!1169 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !1132, file: !228, line: 827, type: !21)
!1170 = !DILocation(line: 827, column: 13, scope: !1132)
!1171 = !DILocation(line: 829, column: 11, scope: !1132)
!1172 = !DILocation(line: 829, column: 9, scope: !1132)
!1173 = !DILocation(line: 830, column: 11, scope: !1174)
!1174 = distinct !DILexicalBlock(scope: !1132, file: !228, line: 830, column: 11)
!1175 = !DILocation(line: 830, column: 13, scope: !1174)
!1176 = !DILocation(line: 830, column: 11, scope: !1132)
!1177 = !DILocation(line: 831, column: 13, scope: !1174)
!1178 = !DILocation(line: 831, column: 27, scope: !1174)
!1179 = !DILocation(line: 831, column: 20, scope: !1174)
!1180 = !DILocation(line: 831, column: 18, scope: !1174)
!1181 = !DILocation(line: 831, column: 11, scope: !1174)
!1182 = !DILocation(line: 831, column: 9, scope: !1174)
!1183 = !DILocation(line: 833, column: 11, scope: !1184)
!1184 = distinct !DILexicalBlock(scope: !1132, file: !228, line: 833, column: 11)
!1185 = !DILocation(line: 833, column: 16, scope: !1184)
!1186 = !DILocation(line: 833, column: 13, scope: !1184)
!1187 = !DILocation(line: 833, column: 11, scope: !1132)
!1188 = !DILocation(line: 834, column: 9, scope: !1184)
!1189 = !DILocation(line: 836, column: 9, scope: !1190)
!1190 = distinct !DILexicalBlock(scope: !1184, file: !228, line: 835, column: 12)
!1191 = !DILocation(line: 837, column: 17, scope: !1190)
!1192 = !DILocation(line: 837, column: 21, scope: !1190)
!1193 = !DILocation(line: 837, column: 19, scope: !1190)
!1194 = !DILocation(line: 837, column: 9, scope: !1190)
!1195 = !DILocation(line: 837, column: 27, scope: !1190)
!1196 = !DILocation(line: 838, column: 9, scope: !1190)
!1197 = !DILocation(line: 841, column: 16, scope: !1198)
!1198 = distinct !DILexicalBlock(scope: !1132, file: !228, line: 841, column: 11)
!1199 = !DILocation(line: 841, column: 11, scope: !1198)
!1200 = !DILocation(line: 841, column: 30, scope: !1198)
!1201 = !DILocation(line: 841, column: 35, scope: !1198)
!1202 = !DILocation(line: 841, column: 38, scope: !1203)
!1203 = !DILexicalBlockFile(scope: !1198, file: !228, discriminator: 1)
!1204 = !DILocation(line: 841, column: 11, scope: !1132)
!1205 = !DILocation(line: 842, column: 16, scope: !1206)
!1206 = distinct !DILexicalBlock(scope: !1207, file: !228, line: 842, column: 13)
!1207 = distinct !DILexicalBlock(scope: !1198, file: !228, line: 841, column: 59)
!1208 = !DILocation(line: 842, column: 26, scope: !1206)
!1209 = !DILocation(line: 842, column: 23, scope: !1206)
!1210 = !DILocation(line: 842, column: 13, scope: !1207)
!1211 = !DILocation(line: 843, column: 22, scope: !1206)
!1212 = !DILocation(line: 843, column: 30, scope: !1206)
!1213 = !DILocation(line: 843, column: 16, scope: !1206)
!1214 = !DILocation(line: 843, column: 11, scope: !1206)
!1215 = !DILocation(line: 844, column: 21, scope: !1216)
!1216 = distinct !DILexicalBlock(scope: !1206, file: !228, line: 844, column: 18)
!1217 = !DILocation(line: 844, column: 31, scope: !1216)
!1218 = !DILocation(line: 844, column: 28, scope: !1216)
!1219 = !DILocation(line: 844, column: 18, scope: !1206)
!1220 = !DILocation(line: 845, column: 22, scope: !1216)
!1221 = !DILocation(line: 845, column: 30, scope: !1216)
!1222 = !DILocation(line: 845, column: 16, scope: !1216)
!1223 = !DILocation(line: 845, column: 11, scope: !1216)
!1224 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1225, file: !228, line: 848, type: !112)
!1225 = distinct !DILexicalBlock(scope: !1216, file: !228, line: 846, column: 14)
!1226 = !DILocation(line: 848, column: 24, scope: !1225)
!1227 = !DILocation(line: 849, column: 18, scope: !1228)
!1228 = distinct !DILexicalBlock(scope: !1225, file: !228, line: 849, column: 11)
!1229 = !DILocation(line: 849, column: 16, scope: !1228)
!1230 = !DILocation(line: 849, column: 23, scope: !1231)
!1231 = !DILexicalBlockFile(scope: !1232, file: !228, discriminator: 2)
!1232 = !DILexicalBlockFile(scope: !1233, file: !228, discriminator: 1)
!1233 = distinct !DILexicalBlock(scope: !1228, file: !228, line: 849, column: 11)
!1234 = !DILocation(line: 849, column: 27, scope: !1233)
!1235 = !DILocation(line: 849, column: 25, scope: !1233)
!1236 = !DILocation(line: 849, column: 11, scope: !1228)
!1237 = !DILocation(line: 850, column: 24, scope: !1238)
!1238 = distinct !DILexicalBlock(scope: !1233, file: !228, line: 850, column: 17)
!1239 = !DILocation(line: 850, column: 17, scope: !1238)
!1240 = !DILocation(line: 850, column: 33, scope: !1238)
!1241 = !DILocation(line: 850, column: 27, scope: !1238)
!1242 = !DILocation(line: 850, column: 17, scope: !1233)
!1243 = !DILocation(line: 851, column: 15, scope: !1238)
!1244 = !DILocation(line: 850, column: 33, scope: !1245)
!1245 = !DILexicalBlockFile(scope: !1238, file: !228, discriminator: 1)
!1246 = !DILocation(line: 849, column: 36, scope: !1233)
!1247 = !DILocation(line: 849, column: 11, scope: !1233)
!1248 = !DILocation(line: 852, column: 15, scope: !1249)
!1249 = distinct !DILexicalBlock(scope: !1225, file: !228, line: 852, column: 15)
!1250 = !DILocation(line: 852, column: 19, scope: !1249)
!1251 = !DILocation(line: 852, column: 17, scope: !1249)
!1252 = !DILocation(line: 852, column: 15, scope: !1225)
!1253 = !DILocation(line: 853, column: 24, scope: !1249)
!1254 = !DILocation(line: 853, column: 32, scope: !1249)
!1255 = !DILocation(line: 853, column: 18, scope: !1249)
!1256 = !DILocation(line: 853, column: 13, scope: !1249)
!1257 = !DILocation(line: 856, column: 24, scope: !1249)
!1258 = !DILocation(line: 856, column: 32, scope: !1249)
!1259 = !DILocation(line: 856, column: 18, scope: !1249)
!1260 = !DILocation(line: 859, column: 13, scope: !1261)
!1261 = distinct !DILexicalBlock(scope: !1207, file: !228, line: 859, column: 13)
!1262 = !DILocation(line: 859, column: 18, scope: !1261)
!1263 = !DILocation(line: 859, column: 13, scope: !1207)
!1264 = !DILocation(line: 860, column: 11, scope: !1261)
!1265 = !DILocation(line: 861, column: 7, scope: !1207)
!1266 = !DILocation(line: 863, column: 14, scope: !1132)
!1267 = !DILocation(line: 863, column: 16, scope: !1132)
!1268 = !DILocation(line: 863, column: 12, scope: !1132)
!1269 = !DILocation(line: 864, column: 5, scope: !1132)
!1270 = !DILocation(line: 864, column: 15, scope: !1271)
!1271 = !DILexicalBlockFile(scope: !1117, file: !228, discriminator: 1)
!1272 = !DILocation(line: 864, column: 14, scope: !1117)
!1273 = !DILocation(line: 864, column: 20, scope: !1117)
!1274 = !DILocation(line: 867, column: 3, scope: !262)
!1275 = !DILocation(line: 868, column: 1, scope: !262)
!1276 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "line", arg: 1, scope: !250, file: !228, line: 1139, type: !21)
!1277 = !DILocation(line: 1139, column: 53, scope: !250)
!1278 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "restp", arg: 2, scope: !250, file: !228, line: 1140, type: !38)
!1279 = !DILocation(line: 1140, column: 7, scope: !250)
!1280 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "file", arg: 3, scope: !250, file: !228, line: 1141, type: !19)
!1281 = !DILocation(line: 1141, column: 14, scope: !250)
!1282 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "shell", scope: !250, file: !228, line: 1143, type: !21)
!1283 = !DILocation(line: 1143, column: 9, scope: !250)
!1284 = !DILocation(line: 1143, column: 64, scope: !250)
!1285 = !DILocation(line: 1143, column: 17, scope: !250)
!1286 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ifs", scope: !250, file: !228, line: 1144, type: !21)
!1287 = !DILocation(line: 1144, column: 9, scope: !250)
!1288 = !DILocation(line: 1144, column: 60, scope: !250)
!1289 = !DILocation(line: 1144, column: 15, scope: !250)
!1290 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argv", scope: !250, file: !228, line: 1145, type: !38)
!1291 = !DILocation(line: 1145, column: 10, scope: !250)
!1292 = !DILocation(line: 1147, column: 42, scope: !250)
!1293 = !DILocation(line: 1147, column: 48, scope: !250)
!1294 = !DILocation(line: 1147, column: 55, scope: !250)
!1295 = !DILocation(line: 1147, column: 62, scope: !250)
!1296 = !DILocation(line: 1147, column: 10, scope: !250)
!1297 = !DILocation(line: 1147, column: 8, scope: !250)
!1298 = !DILocation(line: 1149, column: 8, scope: !250)
!1299 = !DILocation(line: 1149, column: 3, scope: !250)
!1300 = !DILocation(line: 1150, column: 8, scope: !250)
!1301 = !DILocation(line: 1150, column: 3, scope: !250)
!1302 = !DILocation(line: 1152, column: 10, scope: !250)
!1303 = !DILocation(line: 1152, column: 3, scope: !250)
!1304 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "line", arg: 1, scope: !265, file: !228, line: 953, type: !21)
!1305 = !DILocation(line: 953, column: 68, scope: !265)
!1306 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "restp", arg: 2, scope: !265, file: !228, line: 954, type: !38)
!1307 = !DILocation(line: 954, column: 7, scope: !265)
!1308 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "shell", arg: 3, scope: !265, file: !228, line: 955, type: !21)
!1309 = !DILocation(line: 955, column: 7, scope: !265)
!1310 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "ifs", arg: 4, scope: !265, file: !228, line: 955, type: !21)
!1311 = !DILocation(line: 955, column: 15, scope: !265)
!1312 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !265, file: !228, line: 963, type: !112)
!1313 = !DILocation(line: 963, column: 16, scope: !265)
!1314 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !265, file: !228, line: 964, type: !21)
!1315 = !DILocation(line: 964, column: 18, scope: !265)
!1316 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ap", scope: !265, file: !228, line: 965, type: !21)
!1317 = !DILocation(line: 965, column: 18, scope: !265)
!1318 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !265, file: !228, line: 966, type: !21)
!1319 = !DILocation(line: 966, column: 9, scope: !265)
!1320 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "instring", scope: !265, file: !228, line: 967, type: !112)
!1321 = !DILocation(line: 967, column: 7, scope: !265)
!1322 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "new_argv", scope: !265, file: !228, line: 968, type: !38)
!1323 = !DILocation(line: 968, column: 10, scope: !265)
!1324 = !DILocation(line: 971, column: 7, scope: !1325)
!1325 = distinct !DILexicalBlock(scope: !265, file: !228, line: 971, column: 7)
!1326 = !DILocation(line: 971, column: 13, scope: !1325)
!1327 = !DILocation(line: 971, column: 18, scope: !1325)
!1328 = !DILocation(line: 971, column: 28, scope: !1329)
!1329 = !DILexicalBlockFile(scope: !1325, file: !228, discriminator: 1)
!1330 = !DILocation(line: 971, column: 21, scope: !1325)
!1331 = !DILocation(line: 971, column: 7, scope: !265)
!1332 = !DILocation(line: 972, column: 5, scope: !1325)
!1333 = !DILocation(line: 974, column: 7, scope: !1334)
!1334 = distinct !DILexicalBlock(scope: !265, file: !228, line: 974, column: 7)
!1335 = !DILocation(line: 974, column: 11, scope: !1334)
!1336 = !DILocation(line: 974, column: 7, scope: !265)
!1337 = !DILocation(line: 975, column: 15, scope: !1338)
!1338 = distinct !DILexicalBlock(scope: !1334, file: !228, line: 975, column: 5)
!1339 = !DILocation(line: 975, column: 13, scope: !1338)
!1340 = !DILocation(line: 975, column: 10, scope: !1338)
!1341 = !DILocation(line: 975, column: 21, scope: !1342)
!1342 = !DILexicalBlockFile(scope: !1343, file: !228, discriminator: 2)
!1343 = !DILexicalBlockFile(scope: !1344, file: !228, discriminator: 1)
!1344 = distinct !DILexicalBlock(scope: !1338, file: !228, line: 975, column: 5)
!1345 = !DILocation(line: 975, column: 20, scope: !1344)
!1346 = !DILocation(line: 975, column: 24, scope: !1344)
!1347 = !DILocation(line: 975, column: 5, scope: !1338)
!1348 = !DILocation(line: 976, column: 12, scope: !1349)
!1349 = distinct !DILexicalBlock(scope: !1344, file: !228, line: 976, column: 11)
!1350 = !DILocation(line: 976, column: 11, scope: !1349)
!1351 = !DILocation(line: 976, column: 15, scope: !1349)
!1352 = !DILocation(line: 976, column: 22, scope: !1349)
!1353 = !DILocation(line: 976, column: 26, scope: !1354)
!1354 = !DILexicalBlockFile(scope: !1349, file: !228, discriminator: 1)
!1355 = !DILocation(line: 976, column: 25, scope: !1349)
!1356 = !DILocation(line: 976, column: 29, scope: !1349)
!1357 = !DILocation(line: 976, column: 37, scope: !1349)
!1358 = !DILocation(line: 976, column: 41, scope: !1359)
!1359 = !DILexicalBlockFile(scope: !1349, file: !228, discriminator: 3)
!1360 = !DILocation(line: 976, column: 40, scope: !1349)
!1361 = !DILocation(line: 976, column: 44, scope: !1349)
!1362 = !DILocation(line: 976, column: 11, scope: !1344)
!1363 = !DILocation(line: 977, column: 9, scope: !1349)
!1364 = !DILocation(line: 976, column: 47, scope: !1365)
!1365 = !DILexicalBlockFile(scope: !1366, file: !228, discriminator: 5)
!1366 = !DILexicalBlockFile(scope: !1367, file: !228, discriminator: 4)
!1367 = !DILexicalBlockFile(scope: !1349, file: !228, discriminator: 2)
!1368 = !DILocation(line: 975, column: 33, scope: !1344)
!1369 = !DILocation(line: 975, column: 5, scope: !1344)
!1370 = !DILocation(line: 977, column: 14, scope: !1338)
!1371 = !DILocation(line: 979, column: 14, scope: !265)
!1372 = !DILocation(line: 979, column: 7, scope: !265)
!1373 = !DILocation(line: 979, column: 20, scope: !265)
!1374 = !DILocation(line: 979, column: 5, scope: !265)
!1375 = !DILocation(line: 982, column: 31, scope: !265)
!1376 = !DILocation(line: 982, column: 33, scope: !265)
!1377 = !DILocation(line: 982, column: 23, scope: !265)
!1378 = !DILocation(line: 982, column: 14, scope: !265)
!1379 = !DILocation(line: 982, column: 12, scope: !265)
!1380 = !DILocation(line: 985, column: 38, scope: !265)
!1381 = !DILocation(line: 985, column: 30, scope: !265)
!1382 = !DILocation(line: 985, column: 8, scope: !265)
!1383 = !DILocation(line: 985, column: 20, scope: !265)
!1384 = !DILocation(line: 985, column: 6, scope: !265)
!1385 = !DILocation(line: 986, column: 9, scope: !265)
!1386 = !DILocation(line: 986, column: 14, scope: !265)
!1387 = !DILocation(line: 986, column: 12, scope: !265)
!1388 = !DILocation(line: 986, column: 7, scope: !265)
!1389 = !DILocation(line: 988, column: 7, scope: !1390)
!1390 = distinct !DILexicalBlock(scope: !265, file: !228, line: 988, column: 7)
!1391 = !DILocation(line: 988, column: 13, scope: !1390)
!1392 = !DILocation(line: 988, column: 7, scope: !265)
!1393 = !DILocation(line: 989, column: 6, scope: !1390)
!1394 = !DILocation(line: 989, column: 12, scope: !1390)
!1395 = !DILocation(line: 989, column: 5, scope: !1390)
!1396 = !DILocation(line: 992, column: 5, scope: !265)
!1397 = !DILocation(line: 993, column: 12, scope: !265)
!1398 = !DILocation(line: 994, column: 12, scope: !1399)
!1399 = distinct !DILexicalBlock(scope: !265, file: !228, line: 994, column: 3)
!1400 = !DILocation(line: 994, column: 10, scope: !1399)
!1401 = !DILocation(line: 994, column: 8, scope: !1399)
!1402 = !DILocation(line: 994, column: 19, scope: !1403)
!1403 = !DILexicalBlockFile(scope: !1404, file: !228, discriminator: 2)
!1404 = !DILexicalBlockFile(scope: !1405, file: !228, discriminator: 1)
!1405 = distinct !DILexicalBlock(scope: !1399, file: !228, line: 994, column: 3)
!1406 = !DILocation(line: 994, column: 18, scope: !1405)
!1407 = !DILocation(line: 994, column: 21, scope: !1405)
!1408 = !DILocation(line: 994, column: 3, scope: !1399)
!1409 = !DILocation(line: 995, column: 9, scope: !1410)
!1410 = distinct !DILexicalBlock(scope: !1411, file: !228, line: 995, column: 9)
!1411 = distinct !DILexicalBlock(scope: !1405, file: !228, line: 994, column: 35)
!1412 = !DILocation(line: 995, column: 14, scope: !1410)
!1413 = !DILocation(line: 995, column: 12, scope: !1410)
!1414 = !DILocation(line: 995, column: 9, scope: !1411)
!1415 = !DILocation(line: 996, column: 7, scope: !1410)
!1416 = !DILocation(line: 998, column: 9, scope: !1417)
!1417 = distinct !DILexicalBlock(scope: !1411, file: !228, line: 998, column: 9)
!1418 = !DILocation(line: 998, column: 9, scope: !1411)
!1419 = !DILocation(line: 1000, column: 12, scope: !1420)
!1420 = distinct !DILexicalBlock(scope: !1421, file: !228, line: 1000, column: 11)
!1421 = distinct !DILexicalBlock(scope: !1417, file: !228, line: 998, column: 19)
!1422 = !DILocation(line: 1000, column: 11, scope: !1420)
!1423 = !DILocation(line: 1000, column: 14, scope: !1420)
!1424 = !DILocation(line: 1000, column: 11, scope: !1421)
!1425 = !DILocation(line: 1001, column: 18, scope: !1420)
!1426 = !DILocation(line: 1001, column: 9, scope: !1420)
!1427 = !DILocation(line: 1003, column: 18, scope: !1420)
!1428 = !DILocation(line: 1003, column: 17, scope: !1420)
!1429 = !DILocation(line: 1003, column: 12, scope: !1420)
!1430 = !DILocation(line: 1003, column: 15, scope: !1420)
!1431 = !DILocation(line: 1004, column: 5, scope: !1421)
!1432 = !DILocation(line: 1004, column: 16, scope: !1433)
!1433 = distinct !DILexicalBlock(scope: !1417, file: !228, line: 1004, column: 16)
!1434 = !DILocation(line: 1004, column: 36, scope: !1433)
!1435 = !DILocation(line: 1004, column: 16, scope: !1417)
!1436 = !DILocation(line: 1006, column: 7, scope: !1433)
!1437 = !DILocation(line: 1009, column: 16, scope: !1433)
!1438 = !DILocation(line: 1009, column: 15, scope: !1433)
!1439 = !DILocation(line: 1009, column: 7, scope: !1433)
!1440 = !DILocation(line: 1012, column: 13, scope: !1441)
!1441 = distinct !DILexicalBlock(scope: !1442, file: !228, line: 1012, column: 13)
!1442 = distinct !DILexicalBlock(scope: !1433, file: !228, line: 1009, column: 19)
!1443 = !DILocation(line: 1012, column: 18, scope: !1441)
!1444 = !DILocation(line: 1012, column: 26, scope: !1441)
!1445 = !DILocation(line: 1012, column: 29, scope: !1446)
!1446 = !DILexicalBlockFile(scope: !1441, file: !228, discriminator: 1)
!1447 = !DILocation(line: 1012, column: 34, scope: !1441)
!1448 = !DILocation(line: 1012, column: 13, scope: !1442)
!1449 = !DILocation(line: 1014, column: 20, scope: !1441)
!1450 = !DILocation(line: 1014, column: 19, scope: !1441)
!1451 = !DILocation(line: 1014, column: 14, scope: !1441)
!1452 = !DILocation(line: 1014, column: 17, scope: !1441)
!1453 = !DILocation(line: 1014, column: 11, scope: !1441)
!1454 = !DILocation(line: 1015, column: 9, scope: !1442)
!1455 = !DILocation(line: 1018, column: 18, scope: !1442)
!1456 = !DILocation(line: 1019, column: 9, scope: !1442)
!1457 = !DILocation(line: 1022, column: 13, scope: !1458)
!1458 = distinct !DILexicalBlock(scope: !1442, file: !228, line: 1022, column: 13)
!1459 = !DILocation(line: 1022, column: 19, scope: !1458)
!1460 = !DILocation(line: 1022, column: 13, scope: !1442)
!1461 = !DILocation(line: 1024, column: 20, scope: !1462)
!1462 = distinct !DILexicalBlock(scope: !1458, file: !228, line: 1022, column: 28)
!1463 = !DILocation(line: 1024, column: 12, scope: !1462)
!1464 = !DILocation(line: 1024, column: 18, scope: !1462)
!1465 = !DILocation(line: 1025, column: 11, scope: !1462)
!1466 = !DILocation(line: 1028, column: 14, scope: !1458)
!1467 = !DILocation(line: 1028, column: 17, scope: !1458)
!1468 = !DILocation(line: 1029, column: 9, scope: !1442)
!1469 = !DILocation(line: 1035, column: 12, scope: !1442)
!1470 = !DILocation(line: 1035, column: 15, scope: !1442)
!1471 = !DILocation(line: 1036, column: 25, scope: !1442)
!1472 = !DILocation(line: 1036, column: 18, scope: !1442)
!1473 = !DILocation(line: 1036, column: 9, scope: !1442)
!1474 = !DILocation(line: 1036, column: 23, scope: !1442)
!1475 = !DILocation(line: 1040, column: 13, scope: !1476)
!1476 = distinct !DILexicalBlock(scope: !1442, file: !228, line: 1040, column: 13)
!1477 = !DILocation(line: 1040, column: 15, scope: !1476)
!1478 = !DILocation(line: 1040, column: 13, scope: !1442)
!1479 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !1480, file: !228, line: 1041, type: !112)
!1480 = distinct !DILexicalBlock(scope: !1476, file: !228, line: 1040, column: 21)
!1481 = !DILocation(line: 1041, column: 24, scope: !1480)
!1482 = !DILocation(line: 1042, column: 18, scope: !1483)
!1483 = distinct !DILexicalBlock(scope: !1480, file: !228, line: 1042, column: 11)
!1484 = !DILocation(line: 1042, column: 16, scope: !1483)
!1485 = !DILocation(line: 1042, column: 31, scope: !1486)
!1486 = !DILexicalBlockFile(scope: !1487, file: !228, discriminator: 2)
!1487 = !DILexicalBlockFile(scope: !1488, file: !228, discriminator: 1)
!1488 = distinct !DILexicalBlock(scope: !1483, file: !228, line: 1042, column: 11)
!1489 = !DILocation(line: 1042, column: 23, scope: !1488)
!1490 = !DILocation(line: 1042, column: 34, scope: !1488)
!1491 = !DILocation(line: 1042, column: 11, scope: !1483)
!1492 = !DILocation(line: 1043, column: 17, scope: !1493)
!1493 = distinct !DILexicalBlock(scope: !1488, file: !228, line: 1043, column: 17)
!1494 = !DILocation(line: 1043, column: 17, scope: !1495)
!1495 = !DILexicalBlockFile(scope: !1493, file: !228, discriminator: 1)
!1496 = !DILocation(line: 1043, column: 17, scope: !1497)
!1497 = !DILexicalBlockFile(scope: !1493, file: !228, discriminator: 2)
!1498 = !DILocation(line: 1043, column: 17, scope: !1499)
!1499 = !DILexicalBlockFile(scope: !1493, file: !228, discriminator: 4)
!1500 = !DILocation(line: 1043, column: 17, scope: !1488)
!1501 = !DILocation(line: 1044, column: 15, scope: !1493)
!1502 = !DILocation(line: 1043, column: 17, scope: !1503)
!1503 = !DILexicalBlockFile(scope: !1504, file: !228, discriminator: 5)
!1504 = !DILexicalBlockFile(scope: !1493, file: !228, discriminator: 3)
!1505 = !DILocation(line: 1042, column: 40, scope: !1488)
!1506 = !DILocation(line: 1042, column: 11, scope: !1488)
!1507 = !DILocation(line: 1045, column: 9, scope: !1480)
!1508 = !DILocation(line: 1048, column: 24, scope: !1442)
!1509 = !DILocation(line: 1048, column: 13, scope: !1442)
!1510 = !DILocation(line: 1048, column: 11, scope: !1442)
!1511 = !DILocation(line: 1050, column: 9, scope: !1442)
!1512 = !DILocation(line: 1051, column: 9, scope: !1442)
!1513 = !DILocation(line: 1054, column: 18, scope: !1442)
!1514 = !DILocation(line: 1054, column: 17, scope: !1442)
!1515 = !DILocation(line: 1054, column: 12, scope: !1442)
!1516 = !DILocation(line: 1054, column: 15, scope: !1442)
!1517 = !DILocation(line: 1055, column: 9, scope: !1442)
!1518 = !DILocation(line: 1057, column: 3, scope: !1411)
!1519 = !DILocation(line: 994, column: 30, scope: !1405)
!1520 = !DILocation(line: 994, column: 3, scope: !1405)
!1521 = !DILocation(line: 1057, column: 3, scope: !1399)
!1522 = !DILocation(line: 1060, column: 7, scope: !1523)
!1523 = distinct !DILexicalBlock(scope: !265, file: !228, line: 1060, column: 7)
!1524 = !DILocation(line: 1060, column: 7, scope: !265)
!1525 = !DILocation(line: 1062, column: 5, scope: !1523)
!1526 = !DILocation(line: 1066, column: 4, scope: !265)
!1527 = !DILocation(line: 1066, column: 7, scope: !265)
!1528 = !DILocation(line: 1067, column: 16, scope: !1529)
!1529 = distinct !DILexicalBlock(scope: !265, file: !228, line: 1067, column: 7)
!1530 = !DILocation(line: 1067, column: 7, scope: !1529)
!1531 = !DILocation(line: 1067, column: 22, scope: !1529)
!1532 = !DILocation(line: 1067, column: 7, scope: !265)
!1533 = !DILocation(line: 1068, column: 5, scope: !1529)
!1534 = !DILocation(line: 1069, column: 12, scope: !265)
!1535 = !DILocation(line: 1069, column: 3, scope: !265)
!1536 = !DILocation(line: 1069, column: 15, scope: !265)
!1537 = !DILocation(line: 1071, column: 7, scope: !1538)
!1538 = distinct !DILexicalBlock(scope: !265, file: !228, line: 1071, column: 7)
!1539 = !DILocation(line: 1071, column: 19, scope: !1538)
!1540 = !DILocation(line: 1071, column: 7, scope: !265)
!1541 = !DILocation(line: 1073, column: 5, scope: !1538)
!1542 = !DILocation(line: 1075, column: 12, scope: !1538)
!1543 = !DILocation(line: 1075, column: 5, scope: !1538)
!1544 = !DILocation(line: 1080, column: 7, scope: !1545)
!1545 = distinct !DILexicalBlock(scope: !265, file: !228, line: 1080, column: 7)
!1546 = !DILocation(line: 1080, column: 16, scope: !1545)
!1547 = !DILocation(line: 1080, column: 7, scope: !265)
!1548 = !DILocation(line: 1082, column: 10, scope: !1549)
!1549 = distinct !DILexicalBlock(scope: !1545, file: !228, line: 1080, column: 22)
!1550 = !DILocation(line: 1082, column: 5, scope: !1549)
!1551 = !DILocation(line: 1083, column: 10, scope: !1549)
!1552 = !DILocation(line: 1083, column: 5, scope: !1549)
!1553 = !DILocation(line: 1084, column: 3, scope: !1549)
!1554 = !DILocation(line: 1086, column: 7, scope: !1555)
!1555 = distinct !DILexicalBlock(scope: !265, file: !228, line: 1086, column: 7)
!1556 = !DILocation(line: 1086, column: 13, scope: !1555)
!1557 = !DILocation(line: 1086, column: 18, scope: !1555)
!1558 = !DILocation(line: 1086, column: 29, scope: !1559)
!1559 = !DILexicalBlockFile(scope: !1555, file: !228, discriminator: 1)
!1560 = !DILocation(line: 1086, column: 22, scope: !1555)
!1561 = !DILocation(line: 1086, column: 7, scope: !265)
!1562 = !DILocation(line: 1090, column: 25, scope: !1563)
!1563 = distinct !DILexicalBlock(scope: !1555, file: !228, line: 1086, column: 52)
!1564 = !DILocation(line: 1090, column: 16, scope: !1563)
!1565 = !DILocation(line: 1090, column: 14, scope: !1563)
!1566 = !DILocation(line: 1091, column: 19, scope: !1563)
!1567 = !DILocation(line: 1091, column: 5, scope: !1563)
!1568 = !DILocation(line: 1091, column: 17, scope: !1563)
!1569 = !DILocation(line: 1092, column: 5, scope: !1563)
!1570 = !DILocation(line: 1092, column: 17, scope: !1563)
!1571 = !DILocation(line: 1093, column: 30, scope: !1563)
!1572 = !DILocation(line: 1093, column: 43, scope: !1563)
!1573 = !DILocation(line: 1093, column: 36, scope: !1563)
!1574 = !DILocation(line: 1093, column: 19, scope: !1563)
!1575 = !DILocation(line: 1093, column: 5, scope: !1563)
!1576 = !DILocation(line: 1093, column: 17, scope: !1563)
!1577 = !DILocation(line: 1094, column: 5, scope: !1563)
!1578 = !DILocation(line: 1094, column: 17, scope: !1563)
!1579 = !DILocation(line: 1095, column: 3, scope: !1563)
!1580 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "shell_len", scope: !1581, file: !228, line: 1101, type: !34)
!1581 = distinct !DILexicalBlock(scope: !1555, file: !228, line: 1095, column: 10)
!1582 = !DILocation(line: 1101, column: 18, scope: !1581)
!1583 = !DILocation(line: 1101, column: 37, scope: !1581)
!1584 = !DILocation(line: 1101, column: 30, scope: !1581)
!1585 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "line_len", scope: !1581, file: !228, line: 1103, type: !34)
!1586 = !DILocation(line: 1103, column: 18, scope: !1581)
!1587 = !DILocation(line: 1103, column: 36, scope: !1581)
!1588 = !DILocation(line: 1103, column: 29, scope: !1581)
!1589 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "new_line", scope: !1581, file: !228, line: 1105, type: !21)
!1590 = !DILocation(line: 1105, column: 11, scope: !1581)
!1591 = !DILocation(line: 1105, column: 30, scope: !1581)
!1592 = !DILocation(line: 1107, column: 10, scope: !1581)
!1593 = !DILocation(line: 1107, column: 8, scope: !1581)
!1594 = !DILocation(line: 1108, column: 5, scope: !1581)
!1595 = !DILocation(line: 1109, column: 11, scope: !1581)
!1596 = !DILocation(line: 1109, column: 8, scope: !1581)
!1597 = !DILocation(line: 1110, column: 5, scope: !1581)
!1598 = !DILocation(line: 1111, column: 8, scope: !1581)
!1599 = !DILocation(line: 1112, column: 14, scope: !1600)
!1600 = distinct !DILexicalBlock(scope: !1581, file: !228, line: 1112, column: 5)
!1601 = !DILocation(line: 1112, column: 12, scope: !1600)
!1602 = !DILocation(line: 1112, column: 10, scope: !1600)
!1603 = !DILocation(line: 1112, column: 21, scope: !1604)
!1604 = !DILexicalBlockFile(scope: !1605, file: !228, discriminator: 2)
!1605 = !DILexicalBlockFile(scope: !1606, file: !228, discriminator: 1)
!1606 = distinct !DILexicalBlock(scope: !1600, file: !228, line: 1112, column: 5)
!1607 = !DILocation(line: 1112, column: 20, scope: !1606)
!1608 = !DILocation(line: 1112, column: 23, scope: !1606)
!1609 = !DILocation(line: 1112, column: 5, scope: !1600)
!1610 = !DILocation(line: 1113, column: 12, scope: !1611)
!1611 = distinct !DILexicalBlock(scope: !1612, file: !228, line: 1113, column: 11)
!1612 = distinct !DILexicalBlock(scope: !1606, file: !228, line: 1112, column: 37)
!1613 = !DILocation(line: 1113, column: 11, scope: !1611)
!1614 = !DILocation(line: 1113, column: 14, scope: !1611)
!1615 = !DILocation(line: 1113, column: 22, scope: !1611)
!1616 = !DILocation(line: 1113, column: 26, scope: !1617)
!1617 = !DILexicalBlockFile(scope: !1611, file: !228, discriminator: 1)
!1618 = !DILocation(line: 1113, column: 25, scope: !1611)
!1619 = !DILocation(line: 1113, column: 28, scope: !1611)
!1620 = !DILocation(line: 1113, column: 36, scope: !1611)
!1621 = !DILocation(line: 1113, column: 39, scope: !1622)
!1622 = !DILexicalBlockFile(scope: !1611, file: !228, discriminator: 2)
!1623 = !DILocation(line: 1113, column: 51, scope: !1611)
!1624 = !DILocation(line: 1113, column: 54, scope: !1625)
!1625 = !DILexicalBlockFile(scope: !1611, file: !228, discriminator: 3)
!1626 = !DILocation(line: 1113, column: 74, scope: !1611)
!1627 = !DILocation(line: 1113, column: 11, scope: !1612)
!1628 = !DILocation(line: 1114, column: 12, scope: !1611)
!1629 = !DILocation(line: 1114, column: 15, scope: !1611)
!1630 = !DILocation(line: 1114, column: 9, scope: !1611)
!1631 = !DILocation(line: 1115, column: 16, scope: !1612)
!1632 = !DILocation(line: 1115, column: 15, scope: !1612)
!1633 = !DILocation(line: 1115, column: 10, scope: !1612)
!1634 = !DILocation(line: 1115, column: 13, scope: !1612)
!1635 = !DILocation(line: 1116, column: 5, scope: !1612)
!1636 = !DILocation(line: 1112, column: 32, scope: !1606)
!1637 = !DILocation(line: 1112, column: 5, scope: !1606)
!1638 = !DILocation(line: 1117, column: 6, scope: !1581)
!1639 = !DILocation(line: 1117, column: 9, scope: !1581)
!1640 = !DILocation(line: 1119, column: 48, scope: !1581)
!1641 = !DILocation(line: 1119, column: 58, scope: !1581)
!1642 = !DILocation(line: 1119, column: 16, scope: !1581)
!1643 = !DILocation(line: 1119, column: 14, scope: !1581)
!1644 = !DILocation(line: 1123, column: 10, scope: !265)
!1645 = !DILocation(line: 1123, column: 3, scope: !265)
!1646 = !DILocation(line: 1124, column: 1, scope: !265)
!1647 = !DILocation(line: 225, column: 20, scope: !253)
!1648 = !DILocation(line: 225, column: 36, scope: !253)
!1649 = !DILocation(line: 225, column: 54, scope: !253)
!1650 = !DILocation(line: 225, column: 34, scope: !253)
!1651 = !DILocation(line: 225, column: 32, scope: !253)
!1652 = !DILocation(line: 225, column: 9, scope: !253)
!1653 = !DILocation(line: 229, column: 3, scope: !253)
!1654 = !DILocation(line: 230, column: 1, scope: !253)
!1655 = !DILocation(line: 205, column: 18, scope: !254)
!1656 = !DILocation(line: 205, column: 36, scope: !254)
!1657 = !DILocation(line: 205, column: 9, scope: !254)
!1658 = !DILocation(line: 209, column: 3, scope: !254)
!1659 = !DILocation(line: 210, column: 1, scope: !254)
!1660 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "child", arg: 1, scope: !258, file: !228, line: 498, type: !208)
!1661 = !DILocation(line: 498, column: 46, scope: !258)
!1662 = !DILocation(line: 500, column: 7, scope: !1663)
!1663 = distinct !DILexicalBlock(scope: !258, file: !228, line: 500, column: 7)
!1664 = !DILocation(line: 500, column: 14, scope: !1663)
!1665 = !DILocation(line: 500, column: 28, scope: !1663)
!1666 = !DILocation(line: 500, column: 7, scope: !258)
!1667 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1668, file: !228, line: 501, type: !34)
!1668 = distinct !DILexicalBlock(scope: !1663, file: !228, line: 500, column: 34)
!1669 = !DILocation(line: 501, column: 27, scope: !1668)
!1670 = !DILocation(line: 502, column: 12, scope: !1671)
!1671 = distinct !DILexicalBlock(scope: !1668, file: !228, line: 502, column: 5)
!1672 = !DILocation(line: 502, column: 10, scope: !1671)
!1673 = !DILocation(line: 502, column: 17, scope: !1674)
!1674 = !DILexicalBlockFile(scope: !1675, file: !228, discriminator: 2)
!1675 = !DILexicalBlockFile(scope: !1676, file: !228, discriminator: 1)
!1676 = distinct !DILexicalBlock(scope: !1671, file: !228, line: 502, column: 5)
!1677 = !DILocation(line: 502, column: 21, scope: !1676)
!1678 = !DILocation(line: 502, column: 28, scope: !1676)
!1679 = !DILocation(line: 502, column: 34, scope: !1676)
!1680 = !DILocation(line: 502, column: 40, scope: !1676)
!1681 = !DILocation(line: 502, column: 19, scope: !1676)
!1682 = !DILocation(line: 502, column: 5, scope: !1671)
!1683 = !DILocation(line: 503, column: 33, scope: !1676)
!1684 = !DILocation(line: 503, column: 12, scope: !1676)
!1685 = !DILocation(line: 503, column: 19, scope: !1676)
!1686 = !DILocation(line: 503, column: 7, scope: !1676)
!1687 = !DILocation(line: 502, column: 56, scope: !1676)
!1688 = !DILocation(line: 502, column: 5, scope: !1676)
!1689 = !DILocation(line: 504, column: 18, scope: !1668)
!1690 = !DILocation(line: 504, column: 25, scope: !1668)
!1691 = !DILocation(line: 504, column: 10, scope: !1668)
!1692 = !DILocation(line: 504, column: 5, scope: !1668)
!1693 = !DILocation(line: 505, column: 3, scope: !1668)
!1694 = !DILocation(line: 507, column: 7, scope: !1695)
!1695 = distinct !DILexicalBlock(scope: !258, file: !228, line: 507, column: 7)
!1696 = !DILocation(line: 507, column: 14, scope: !1695)
!1697 = !DILocation(line: 507, column: 26, scope: !1695)
!1698 = !DILocation(line: 507, column: 7, scope: !258)
!1699 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ep", scope: !1700, file: !228, line: 508, type: !38)
!1700 = distinct !DILexicalBlock(scope: !1695, file: !228, line: 507, column: 32)
!1701 = !DILocation(line: 508, column: 21, scope: !1700)
!1702 = !DILocation(line: 508, column: 26, scope: !1700)
!1703 = !DILocation(line: 508, column: 33, scope: !1700)
!1704 = !DILocation(line: 509, column: 5, scope: !1700)
!1705 = !DILocation(line: 509, column: 13, scope: !1706)
!1706 = !DILexicalBlockFile(scope: !1707, file: !228, discriminator: 2)
!1707 = !DILexicalBlockFile(scope: !1700, file: !228, discriminator: 1)
!1708 = !DILocation(line: 509, column: 12, scope: !1700)
!1709 = !DILocation(line: 509, column: 16, scope: !1700)
!1710 = !DILocation(line: 510, column: 15, scope: !1700)
!1711 = !DILocation(line: 510, column: 12, scope: !1700)
!1712 = !DILocation(line: 510, column: 7, scope: !1700)
!1713 = !DILocation(line: 511, column: 18, scope: !1700)
!1714 = !DILocation(line: 511, column: 25, scope: !1700)
!1715 = !DILocation(line: 511, column: 10, scope: !1700)
!1716 = !DILocation(line: 511, column: 5, scope: !1700)
!1717 = !DILocation(line: 512, column: 3, scope: !1700)
!1718 = !DILocation(line: 514, column: 16, scope: !258)
!1719 = !DILocation(line: 514, column: 8, scope: !258)
!1720 = !DILocation(line: 514, column: 3, scope: !258)
!1721 = !DILocation(line: 515, column: 1, scope: !258)
!1722 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "child", arg: 1, scope: !261, file: !228, line: 521, type: !208)
!1723 = !DILocation(line: 521, column: 45, scope: !261)
!1724 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !261, file: !228, line: 524, type: !21)
!1725 = !DILocation(line: 524, column: 18, scope: !261)
!1726 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "noprint", scope: !261, file: !228, line: 525, type: !22)
!1727 = !DILocation(line: 525, column: 8, scope: !261)
!1728 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "recursive", scope: !261, file: !228, line: 525, type: !22)
!1729 = !DILocation(line: 525, column: 21, scope: !261)
!1730 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argv", scope: !261, file: !228, line: 526, type: !38)
!1731 = !DILocation(line: 526, column: 10, scope: !261)
!1732 = !DILocation(line: 528, column: 7, scope: !1733)
!1733 = distinct !DILexicalBlock(scope: !261, file: !228, line: 528, column: 7)
!1734 = !DILocation(line: 528, column: 14, scope: !1733)
!1735 = !DILocation(line: 528, column: 26, scope: !1733)
!1736 = !DILocation(line: 528, column: 31, scope: !1733)
!1737 = !DILocation(line: 528, column: 35, scope: !1738)
!1738 = !DILexicalBlockFile(scope: !1733, file: !228, discriminator: 1)
!1739 = !DILocation(line: 528, column: 42, scope: !1733)
!1740 = !DILocation(line: 528, column: 34, scope: !1733)
!1741 = !DILocation(line: 528, column: 54, scope: !1733)
!1742 = !DILocation(line: 528, column: 7, scope: !261)
!1743 = !DILocation(line: 530, column: 9, scope: !1744)
!1744 = distinct !DILexicalBlock(scope: !1745, file: !228, line: 530, column: 9)
!1745 = distinct !DILexicalBlock(scope: !1733, file: !228, line: 528, column: 63)
!1746 = !DILocation(line: 530, column: 16, scope: !1744)
!1747 = !DILocation(line: 530, column: 32, scope: !1744)
!1748 = !DILocation(line: 530, column: 39, scope: !1744)
!1749 = !DILocation(line: 530, column: 45, scope: !1744)
!1750 = !DILocation(line: 530, column: 51, scope: !1744)
!1751 = !DILocation(line: 530, column: 29, scope: !1744)
!1752 = !DILocation(line: 530, column: 9, scope: !1745)
!1753 = !DILocation(line: 532, column: 7, scope: !1754)
!1754 = distinct !DILexicalBlock(scope: !1744, file: !228, line: 530, column: 67)
!1755 = !DILocation(line: 532, column: 14, scope: !1754)
!1756 = !DILocation(line: 532, column: 26, scope: !1754)
!1757 = !DILocation(line: 533, column: 7, scope: !1754)
!1758 = !DILocation(line: 533, column: 14, scope: !1754)
!1759 = !DILocation(line: 533, column: 20, scope: !1754)
!1760 = !DILocation(line: 533, column: 34, scope: !1754)
!1761 = !DILocation(line: 534, column: 7, scope: !1754)
!1762 = !DILocation(line: 534, column: 14, scope: !1754)
!1763 = !DILocation(line: 534, column: 20, scope: !1754)
!1764 = !DILocation(line: 534, column: 34, scope: !1754)
!1765 = !DILocation(line: 535, column: 7, scope: !1754)
!1766 = !DILocation(line: 539, column: 49, scope: !1767)
!1767 = distinct !DILexicalBlock(scope: !1744, file: !228, line: 536, column: 12)
!1768 = !DILocation(line: 539, column: 56, scope: !1767)
!1769 = !DILocation(line: 539, column: 28, scope: !1767)
!1770 = !DILocation(line: 539, column: 35, scope: !1767)
!1771 = !DILocation(line: 539, column: 7, scope: !1767)
!1772 = !DILocation(line: 539, column: 14, scope: !1767)
!1773 = !DILocation(line: 539, column: 26, scope: !1767)
!1774 = !DILocation(line: 540, column: 52, scope: !1767)
!1775 = !DILocation(line: 540, column: 59, scope: !1767)
!1776 = !DILocation(line: 540, column: 19, scope: !1767)
!1777 = !DILocation(line: 540, column: 26, scope: !1767)
!1778 = !DILocation(line: 540, column: 32, scope: !1767)
!1779 = !DILocation(line: 540, column: 38, scope: !1767)
!1780 = !DILocation(line: 540, column: 17, scope: !1767)
!1781 = !DILocation(line: 541, column: 9, scope: !1767)
!1782 = !DILocation(line: 541, column: 16, scope: !1767)
!1783 = !DILocation(line: 541, column: 7, scope: !1767)
!1784 = !DILocation(line: 543, column: 3, scope: !1745)
!1785 = !DILocation(line: 545, column: 50, scope: !1733)
!1786 = !DILocation(line: 545, column: 57, scope: !1733)
!1787 = !DILocation(line: 545, column: 70, scope: !1733)
!1788 = !DILocation(line: 545, column: 17, scope: !1733)
!1789 = !DILocation(line: 545, column: 24, scope: !1733)
!1790 = !DILocation(line: 545, column: 30, scope: !1733)
!1791 = !DILocation(line: 545, column: 36, scope: !1733)
!1792 = !DILocation(line: 545, column: 15, scope: !1733)
!1793 = !DILocation(line: 549, column: 7, scope: !261)
!1794 = !DILocation(line: 549, column: 14, scope: !261)
!1795 = !DILocation(line: 549, column: 5, scope: !261)
!1796 = !DILocation(line: 550, column: 3, scope: !261)
!1797 = !DILocation(line: 550, column: 10, scope: !261)
!1798 = !DILocation(line: 550, column: 18, scope: !261)
!1799 = !DILocation(line: 551, column: 3, scope: !261)
!1800 = !DILocation(line: 551, column: 11, scope: !1801)
!1801 = !DILexicalBlockFile(scope: !1802, file: !228, discriminator: 2)
!1802 = !DILexicalBlockFile(scope: !261, file: !228, discriminator: 1)
!1803 = !DILocation(line: 551, column: 10, scope: !261)
!1804 = !DILocation(line: 551, column: 13, scope: !261)
!1805 = !DILocation(line: 552, column: 10, scope: !1806)
!1806 = distinct !DILexicalBlock(scope: !1807, file: !228, line: 552, column: 9)
!1807 = distinct !DILexicalBlock(scope: !261, file: !228, line: 551, column: 22)
!1808 = !DILocation(line: 552, column: 9, scope: !1806)
!1809 = !DILocation(line: 552, column: 12, scope: !1806)
!1810 = !DILocation(line: 552, column: 9, scope: !1807)
!1811 = !DILocation(line: 553, column: 15, scope: !1806)
!1812 = !DILocation(line: 553, column: 7, scope: !1806)
!1813 = !DILocation(line: 554, column: 15, scope: !1814)
!1814 = distinct !DILexicalBlock(scope: !1806, file: !228, line: 554, column: 14)
!1815 = !DILocation(line: 554, column: 14, scope: !1814)
!1816 = !DILocation(line: 554, column: 17, scope: !1814)
!1817 = !DILocation(line: 554, column: 14, scope: !1806)
!1818 = !DILocation(line: 555, column: 7, scope: !1814)
!1819 = !DILocation(line: 555, column: 14, scope: !1814)
!1820 = !DILocation(line: 555, column: 22, scope: !1814)
!1821 = !DILocation(line: 556, column: 15, scope: !1822)
!1822 = distinct !DILexicalBlock(scope: !1814, file: !228, line: 556, column: 14)
!1823 = !DILocation(line: 556, column: 14, scope: !1822)
!1824 = !DILocation(line: 556, column: 17, scope: !1822)
!1825 = !DILocation(line: 556, column: 14, scope: !1814)
!1826 = !DILocation(line: 557, column: 17, scope: !1822)
!1827 = !DILocation(line: 557, column: 7, scope: !1822)
!1828 = !DILocation(line: 558, column: 15, scope: !1829)
!1829 = distinct !DILexicalBlock(scope: !1822, file: !228, line: 558, column: 14)
!1830 = !DILocation(line: 558, column: 14, scope: !1822)
!1831 = !DILocation(line: 559, column: 7, scope: !1829)
!1832 = !DILocation(line: 560, column: 5, scope: !1807)
!1833 = !DILocation(line: 564, column: 7, scope: !1834)
!1834 = distinct !DILexicalBlock(scope: !261, file: !228, line: 564, column: 7)
!1835 = !DILocation(line: 564, column: 21, scope: !1834)
!1836 = !DILocation(line: 564, column: 25, scope: !1837)
!1837 = !DILexicalBlockFile(scope: !1834, file: !228, discriminator: 1)
!1838 = !DILocation(line: 564, column: 7, scope: !261)
!1839 = !DILocation(line: 565, column: 5, scope: !1834)
!1840 = !DILocation(line: 569, column: 18, scope: !261)
!1841 = !DILocation(line: 569, column: 7, scope: !261)
!1842 = !DILocation(line: 569, column: 5, scope: !261)
!1843 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !1844, file: !228, line: 574, type: !21)
!1844 = distinct !DILexicalBlock(scope: !261, file: !228, line: 573, column: 3)
!1845 = !DILocation(line: 574, column: 11, scope: !1844)
!1846 = !DILocation(line: 575, column: 35, scope: !1844)
!1847 = !DILocation(line: 575, column: 44, scope: !1844)
!1848 = !DILocation(line: 575, column: 51, scope: !1844)
!1849 = !DILocation(line: 575, column: 12, scope: !1844)
!1850 = !DILocation(line: 575, column: 10, scope: !1844)
!1851 = !DILocation(line: 576, column: 9, scope: !1852)
!1852 = distinct !DILexicalBlock(scope: !1844, file: !228, line: 576, column: 9)
!1853 = !DILocation(line: 576, column: 13, scope: !1852)
!1854 = !DILocation(line: 576, column: 9, scope: !1844)
!1855 = !DILocation(line: 577, column: 7, scope: !1852)
!1856 = !DILocation(line: 577, column: 14, scope: !1852)
!1857 = !DILocation(line: 577, column: 26, scope: !1852)
!1858 = !DILocation(line: 579, column: 11, scope: !1859)
!1859 = distinct !DILexicalBlock(scope: !1852, file: !228, line: 578, column: 10)
!1860 = !DILocation(line: 579, column: 14, scope: !1859)
!1861 = !DILocation(line: 580, column: 28, scope: !1859)
!1862 = !DILocation(line: 580, column: 7, scope: !1859)
!1863 = !DILocation(line: 580, column: 14, scope: !1859)
!1864 = !DILocation(line: 580, column: 26, scope: !1859)
!1865 = !DILocation(line: 586, column: 7, scope: !1866)
!1866 = distinct !DILexicalBlock(scope: !261, file: !228, line: 586, column: 7)
!1867 = !DILocation(line: 586, column: 23, scope: !1866)
!1868 = !DILocation(line: 586, column: 28, scope: !1869)
!1869 = !DILexicalBlockFile(scope: !1866, file: !228, discriminator: 1)
!1870 = !DILocation(line: 586, column: 36, scope: !1866)
!1871 = !DILocation(line: 586, column: 40, scope: !1872)
!1872 = !DILexicalBlockFile(scope: !1866, file: !228, discriminator: 2)
!1873 = !DILocation(line: 586, column: 7, scope: !261)
!1874 = !DILocation(line: 587, column: 10, scope: !1866)
!1875 = !DILocation(line: 587, column: 5, scope: !1866)
!1876 = !DILocation(line: 589, column: 7, scope: !1877)
!1877 = distinct !DILexicalBlock(scope: !261, file: !228, line: 589, column: 7)
!1878 = !DILocation(line: 589, column: 12, scope: !1877)
!1879 = !DILocation(line: 589, column: 7, scope: !261)
!1880 = !DILocation(line: 591, column: 15, scope: !1881)
!1881 = distinct !DILexicalBlock(scope: !1877, file: !228, line: 589, column: 18)
!1882 = !DILocation(line: 591, column: 5, scope: !1881)
!1883 = !DILocation(line: 592, column: 5, scope: !1881)
!1884 = !DILocation(line: 597, column: 7, scope: !1885)
!1885 = distinct !DILexicalBlock(scope: !261, file: !228, line: 597, column: 7)
!1886 = !DILocation(line: 597, column: 23, scope: !1885)
!1887 = !DILocation(line: 597, column: 27, scope: !1888)
!1888 = !DILexicalBlockFile(scope: !1885, file: !228, discriminator: 1)
!1889 = !DILocation(line: 597, column: 7, scope: !261)
!1890 = !DILocation(line: 598, column: 10, scope: !1891)
!1891 = distinct !DILexicalBlock(scope: !1885, file: !228, line: 597, column: 38)
!1892 = !DILocation(line: 598, column: 5, scope: !1891)
!1893 = !DILocation(line: 599, column: 18, scope: !1891)
!1894 = !DILocation(line: 599, column: 10, scope: !1891)
!1895 = !DILocation(line: 599, column: 5, scope: !1891)
!1896 = !DILocation(line: 600, column: 15, scope: !1891)
!1897 = !DILocation(line: 600, column: 5, scope: !1891)
!1898 = !DILocation(line: 601, column: 5, scope: !1891)
!1899 = !DILocation(line: 606, column: 10, scope: !261)
!1900 = !DILocation(line: 606, column: 3, scope: !261)
!1901 = !DILocation(line: 607, column: 10, scope: !261)
!1902 = !DILocation(line: 607, column: 3, scope: !261)
!1903 = !DILocation(line: 611, column: 7, scope: !1904)
!1904 = distinct !DILexicalBlock(scope: !261, file: !228, line: 611, column: 7)
!1905 = !DILocation(line: 611, column: 17, scope: !1904)
!1906 = !DILocation(line: 611, column: 7, scope: !261)
!1907 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pd", scope: !1908, file: !228, line: 614, type: !1909)
!1908 = distinct !DILexicalBlock(scope: !1904, file: !228, line: 611, column: 24)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !112, size: 64, align: 32, elements: !1910)
!1910 = !{!1911}
!1911 = !DISubrange(count: 2)
!1912 = !DILocation(line: 614, column: 9, scope: !1908)
!1913 = !DILocation(line: 615, column: 14, scope: !1914)
!1914 = distinct !DILexicalBlock(scope: !1908, file: !228, line: 615, column: 9)
!1915 = !DILocation(line: 615, column: 9, scope: !1914)
!1916 = !DILocation(line: 615, column: 18, scope: !1914)
!1917 = !DILocation(line: 615, column: 9, scope: !1908)
!1918 = !DILocation(line: 617, column: 19, scope: !1919)
!1919 = distinct !DILexicalBlock(scope: !1914, file: !228, line: 615, column: 24)
!1920 = !DILocation(line: 617, column: 13, scope: !1919)
!1921 = !DILocation(line: 619, column: 19, scope: !1919)
!1922 = !DILocation(line: 619, column: 17, scope: !1919)
!1923 = !DILocation(line: 620, column: 5, scope: !1919)
!1924 = !DILocation(line: 621, column: 3, scope: !1908)
!1925 = !DILocation(line: 627, column: 24, scope: !261)
!1926 = !DILocation(line: 627, column: 23, scope: !261)
!1927 = !DILocation(line: 627, column: 3, scope: !261)
!1928 = !DILocation(line: 627, column: 10, scope: !261)
!1929 = !DILocation(line: 627, column: 21, scope: !261)
!1930 = !DILocation(line: 628, column: 7, scope: !1931)
!1931 = distinct !DILexicalBlock(scope: !261, file: !228, line: 628, column: 7)
!1932 = !DILocation(line: 628, column: 14, scope: !1931)
!1933 = !DILocation(line: 628, column: 7, scope: !261)
!1934 = !DILocation(line: 629, column: 21, scope: !1931)
!1935 = !DILocation(line: 629, column: 5, scope: !1931)
!1936 = !DILocation(line: 631, column: 3, scope: !261)
!1937 = !DILocation(line: 631, column: 10, scope: !261)
!1938 = !DILocation(line: 631, column: 18, scope: !261)
!1939 = !DILocation(line: 634, column: 7, scope: !1940)
!1940 = distinct !DILexicalBlock(scope: !261, file: !228, line: 634, column: 7)
!1941 = !DILocation(line: 634, column: 14, scope: !1940)
!1942 = !DILocation(line: 634, column: 26, scope: !1940)
!1943 = !DILocation(line: 634, column: 7, scope: !261)
!1944 = !DILocation(line: 635, column: 45, scope: !1940)
!1945 = !DILocation(line: 635, column: 52, scope: !1940)
!1946 = !DILocation(line: 635, column: 26, scope: !1940)
!1947 = !DILocation(line: 635, column: 5, scope: !1940)
!1948 = !DILocation(line: 635, column: 12, scope: !1940)
!1949 = !DILocation(line: 635, column: 24, scope: !1940)
!1950 = !DILocation(line: 637, column: 7, scope: !1951)
!1951 = distinct !DILexicalBlock(scope: !261, file: !228, line: 637, column: 7)
!1952 = !DILocation(line: 637, column: 7, scope: !261)
!1953 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "is_remote", scope: !1954, file: !228, line: 638, type: !112)
!1954 = distinct !DILexicalBlock(scope: !1951, file: !228, line: 637, column: 29)
!1955 = !DILocation(line: 638, column: 9, scope: !1954)
!1956 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "id", scope: !1954, file: !228, line: 638, type: !112)
!1957 = !DILocation(line: 638, column: 20, scope: !1954)
!1958 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "used_stdin", scope: !1954, file: !228, line: 638, type: !112)
!1959 = !DILocation(line: 638, column: 24, scope: !1954)
!1960 = !DILocation(line: 639, column: 26, scope: !1961)
!1961 = distinct !DILexicalBlock(scope: !1954, file: !228, line: 639, column: 9)
!1962 = !DILocation(line: 639, column: 32, scope: !1961)
!1963 = !DILocation(line: 639, column: 39, scope: !1961)
!1964 = !DILocation(line: 639, column: 32, scope: !1965)
!1965 = !DILexicalBlockFile(scope: !1961, file: !228, discriminator: 1)
!1966 = !DILocation(line: 639, column: 56, scope: !1967)
!1967 = !DILexicalBlockFile(scope: !1961, file: !228, discriminator: 2)
!1968 = !DILocation(line: 639, column: 9, scope: !1969)
!1969 = !DILexicalBlockFile(scope: !1970, file: !228, discriminator: 4)
!1970 = !DILexicalBlockFile(scope: !1961, file: !228, discriminator: 3)
!1971 = !DILocation(line: 639, column: 9, scope: !1954)
!1972 = !DILocation(line: 641, column: 7, scope: !1961)
!1973 = !DILocation(line: 643, column: 11, scope: !1974)
!1974 = distinct !DILexicalBlock(scope: !1975, file: !228, line: 643, column: 11)
!1975 = distinct !DILexicalBlock(scope: !1961, file: !228, line: 642, column: 10)
!1976 = !DILocation(line: 643, column: 18, scope: !1974)
!1977 = !DILocation(line: 643, column: 29, scope: !1974)
!1978 = !DILocation(line: 643, column: 33, scope: !1979)
!1979 = !DILexicalBlockFile(scope: !1974, file: !228, discriminator: 1)
!1980 = !DILocation(line: 643, column: 11, scope: !1975)
!1981 = !DILocation(line: 644, column: 9, scope: !1982)
!1982 = distinct !DILexicalBlock(scope: !1974, file: !228, line: 643, column: 45)
!1983 = !DILocation(line: 644, column: 16, scope: !1982)
!1984 = !DILocation(line: 644, column: 27, scope: !1982)
!1985 = !DILocation(line: 645, column: 25, scope: !1982)
!1986 = !DILocation(line: 646, column: 7, scope: !1982)
!1987 = !DILocation(line: 647, column: 23, scope: !1975)
!1988 = !DILocation(line: 647, column: 7, scope: !1975)
!1989 = !DILocation(line: 647, column: 14, scope: !1975)
!1990 = !DILocation(line: 647, column: 21, scope: !1975)
!1991 = !DILocation(line: 648, column: 20, scope: !1975)
!1992 = !DILocation(line: 648, column: 7, scope: !1975)
!1993 = !DILocation(line: 648, column: 14, scope: !1975)
!1994 = !DILocation(line: 648, column: 18, scope: !1975)
!1995 = !DILocation(line: 650, column: 3, scope: !1954)
!1996 = !DILocation(line: 651, column: 9, scope: !1997)
!1997 = distinct !DILexicalBlock(scope: !1998, file: !228, line: 651, column: 9)
!1998 = distinct !DILexicalBlock(scope: !1951, file: !228, line: 650, column: 10)
!1999 = !DILocation(line: 651, column: 16, scope: !1997)
!2000 = !DILocation(line: 651, column: 29, scope: !1997)
!2001 = !DILocation(line: 651, column: 33, scope: !1997)
!2002 = !DILocation(line: 651, column: 9, scope: !1998)
!2003 = !DILocation(line: 654, column: 7, scope: !2004)
!2004 = distinct !DILexicalBlock(scope: !1997, file: !228, line: 651, column: 39)
!2005 = !DILocation(line: 655, column: 7, scope: !2004)
!2006 = !DILocation(line: 656, column: 7, scope: !2004)
!2007 = !DILocation(line: 657, column: 5, scope: !2004)
!2008 = !DILocation(line: 661, column: 5, scope: !1998)
!2009 = !DILocation(line: 661, column: 12, scope: !1998)
!2010 = !DILocation(line: 661, column: 19, scope: !1998)
!2011 = !DILocation(line: 662, column: 18, scope: !1998)
!2012 = !DILocation(line: 662, column: 5, scope: !1998)
!2013 = !DILocation(line: 662, column: 12, scope: !1998)
!2014 = !DILocation(line: 662, column: 16, scope: !1998)
!2015 = !DILocation(line: 663, column: 9, scope: !2016)
!2016 = distinct !DILexicalBlock(scope: !1998, file: !228, line: 663, column: 9)
!2017 = !DILocation(line: 663, column: 16, scope: !2016)
!2018 = !DILocation(line: 663, column: 20, scope: !2016)
!2019 = !DILocation(line: 663, column: 9, scope: !1998)
!2020 = !DILocation(line: 665, column: 25, scope: !2016)
!2021 = !DILocation(line: 665, column: 32, scope: !2016)
!2022 = !DILocation(line: 665, column: 25, scope: !2023)
!2023 = !DILexicalBlockFile(scope: !2016, file: !228, discriminator: 1)
!2024 = !DILocation(line: 665, column: 49, scope: !2025)
!2025 = !DILexicalBlockFile(scope: !2016, file: !228, discriminator: 2)
!2026 = !DILocation(line: 666, column: 25, scope: !2016)
!2027 = !DILocation(line: 666, column: 31, scope: !2016)
!2028 = !DILocation(line: 666, column: 38, scope: !2016)
!2029 = !DILocation(line: 665, column: 7, scope: !2016)
!2030 = !DILocation(line: 667, column: 14, scope: !2031)
!2031 = distinct !DILexicalBlock(scope: !2016, file: !228, line: 667, column: 14)
!2032 = !DILocation(line: 667, column: 21, scope: !2031)
!2033 = !DILocation(line: 667, column: 25, scope: !2031)
!2034 = !DILocation(line: 667, column: 14, scope: !2016)
!2035 = !DILocation(line: 669, column: 7, scope: !2036)
!2036 = distinct !DILexicalBlock(scope: !2031, file: !228, line: 667, column: 30)
!2037 = !DILocation(line: 670, column: 7, scope: !2036)
!2038 = !DILocation(line: 677, column: 3, scope: !261)
!2039 = !DILocation(line: 677, column: 10, scope: !261)
!2040 = !DILocation(line: 677, column: 16, scope: !261)
!2041 = !DILocation(line: 677, column: 30, scope: !261)
!2042 = !DILocation(line: 681, column: 8, scope: !261)
!2043 = !DILocation(line: 681, column: 3, scope: !261)
!2044 = !DILocation(line: 682, column: 16, scope: !261)
!2045 = !DILocation(line: 682, column: 8, scope: !261)
!2046 = !DILocation(line: 682, column: 3, scope: !261)
!2047 = !DILocation(line: 684, column: 3, scope: !261)
!2048 = !DILocation(line: 687, column: 3, scope: !261)
!2049 = !DILocation(line: 687, column: 10, scope: !261)
!2050 = !DILocation(line: 687, column: 16, scope: !261)
!2051 = !DILocation(line: 687, column: 30, scope: !261)
!2052 = !DILocation(line: 688, column: 3, scope: !261)
!2053 = !DILocation(line: 688, column: 10, scope: !261)
!2054 = !DILocation(line: 688, column: 16, scope: !261)
!2055 = !DILocation(line: 688, column: 30, scope: !261)
!2056 = !DILocation(line: 689, column: 1, scope: !261)
!2057 = !DILocation(line: 689, column: 1, scope: !1802)
