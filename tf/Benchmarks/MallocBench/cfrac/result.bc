; ModuleID = '/home/gleison/tf/Benchmarks/MallocBench/cfrac/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@verbose = global i32 0, align 4
@debug = global i32 0, align 4
@pone = external global i16*, align 8
@stdout = external global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [6 x i8] c"f(%u,\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"d) = %9.7f\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"kN = \00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [39 x i8] c"couldn't compute factor base in findk\0A\00", align 1
@primes = external global [0 x i16], align 2
@.str.4 = private unnamed_addr constant [10 x i8] c"%u: %5.2f\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c" log(k)/2=%5.2f\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@progName = common global i8* null, align 8
@.str.7 = private unnamed_addr constant [9 x i8] c"a:k:i:dv\00", align 1
@optarg = external global i8*, align 8
@.str.8 = private unnamed_addr constant [69 x i8] c"usage: %s [-dv] [-a aborts ] [-k maxk ] [-i maxCount ] n [[ m ] k ]\0A\00", align 1
@optind = external global i32, align 4
@.str.9 = private unnamed_addr constant [11 x i8] c"maxk = %u\0A\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"k = %u\0A\00", align 1
@.str.11 = private unnamed_addr constant [21 x i8] c"Iterations     : %u\0A\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"Early Aborts   : %u\0A\00", align 1
@cfracNabort = external global i32, align 4
@.str.13 = private unnamed_addr constant [21 x i8] c"Total Partials : %u\0A\00", align 1
@cfracTsolns = external global i32, align 4
@.str.14 = private unnamed_addr constant [21 x i8] c"Used  Partials : %u\0A\00", align 1
@cfracT2solns = external global i32, align 4
@.str.15 = private unnamed_addr constant [21 x i8] c"Full Solutions : %u\0A\00", align 1
@cfracPsolns = external global i32, align 4
@.str.16 = private unnamed_addr constant [21 x i8] c"Factor Attempts: %u\0A\00", align 1
@cfracFsolns = external global i32, align 4
@.str.17 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c" * \00", align 1

; Function Attrs: nounwind uwtable
define float @pfKnuthEx28(i32 %p, i16* %d) #0 {
entry:
  %p.addr = alloca i32, align 4
  %d.addr = alloca i16*, align 8
  %res = alloca float, align 4
  %k = alloca i16*, align 8
  store i32 %p, i32* %p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %p.addr, metadata !39, metadata !40), !dbg !41
  store i16* %d, i16** %d.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %d.addr, metadata !42, metadata !40), !dbg !43
  call void @llvm.dbg.declare(metadata float* %res, metadata !44, metadata !40), !dbg !45
  call void @llvm.dbg.declare(metadata i16** %k, metadata !46, metadata !40), !dbg !47
  store i16* null, i16** %k, align 8, !dbg !47
  %0 = load i16*, i16** %d.addr, align 8, !dbg !48
  %cmp = icmp ne i16* %0, null, !dbg !48
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !48

land.rhs:                                         ; preds = %entry
  %1 = load i16*, i16** %d.addr, align 8, !dbg !49
  %2 = load i16, i16* %1, align 2, !dbg !49
  %inc = add i16 %2, 1, !dbg !49
  store i16 %inc, i16* %1, align 2, !dbg !49
  %conv = zext i16 %2 to i32, !dbg !49
  %tobool = icmp ne i32 %conv, 0, !dbg !49
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %3 to i32, !dbg !51
  %4 = load i16*, i16** %d.addr, align 8, !dbg !51
  %5 = load i32, i32* %p.addr, align 4, !dbg !53
  %cmp1 = icmp eq i32 %5, 2, !dbg !55
  br i1 %cmp1, label %if.then, label %if.else.28, !dbg !56

if.then:                                          ; preds = %land.end
  %6 = load i16*, i16** %d.addr, align 8, !dbg !57
  %call = call i32 @podd(i16* %6), !dbg !57
  %tobool3 = icmp ne i32 %call, 0, !dbg !57
  br i1 %tobool3, label %if.else.13, label %if.then.4, !dbg !60

if.then.4:                                        ; preds = %if.then
  %7 = load i16*, i16** %d.addr, align 8, !dbg !61
  %call5 = call i16* @phalf(i16* %7), !dbg !61
  %call6 = call i16* @psetq(i16** %k, i16* %call5), !dbg !61
  %8 = load i16*, i16** %k, align 8, !dbg !63
  %call7 = call i32 @podd(i16* %8), !dbg !63
  %tobool8 = icmp ne i32 %call7, 0, !dbg !63
  br i1 %tobool8, label %if.else, label %if.then.9, !dbg !65

if.then.9:                                        ; preds = %if.then.4
  %9 = load i16*, i16** %k, align 8, !dbg !66
  %call10 = call float @pfKnuthEx28(i32 2, i16* %9), !dbg !68
  %conv11 = fpext float %call10 to double, !dbg !68
  %div = fdiv double %conv11, 2.000000e+00, !dbg !69
  %add = fadd double 0x3FE5555555555555, %div, !dbg !70
  %conv12 = fptrunc double %add to float, !dbg !71
  store float %conv12, float* %res, align 4, !dbg !72
  br label %if.end, !dbg !73

if.else:                                          ; preds = %if.then.4
  store float 0x3FD5555560000000, float* %res, align 4, !dbg !74
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.9
  br label %if.end.27, !dbg !76

if.else.13:                                       ; preds = %if.then
  %10 = load i16*, i16** %d.addr, align 8, !dbg !77
  %call14 = call i16* @phalf(i16* %10), !dbg !77
  %call15 = call i16* @psetq(i16** %k, i16* %call14), !dbg !77
  %11 = load i16*, i16** %k, align 8, !dbg !79
  %call16 = call i32 @podd(i16* %11), !dbg !81
  %tobool17 = icmp ne i32 %call16, 0, !dbg !81
  br i1 %tobool17, label %if.then.18, label %if.else.19, !dbg !82

if.then.18:                                       ; preds = %if.else.13
  store float 0x3FD5555560000000, float* %res, align 4, !dbg !83
  br label %if.end.26, !dbg !85

if.else.19:                                       ; preds = %if.else.13
  %12 = load i16*, i16** %k, align 8, !dbg !86
  %call20 = call i16* @phalf(i16* %12), !dbg !89
  %call21 = call i32 @podd(i16* %call20), !dbg !90
  %tobool22 = icmp ne i32 %call21, 0, !dbg !90
  br i1 %tobool22, label %if.then.23, label %if.else.24, !dbg !91

if.then.23:                                       ; preds = %if.else.19
  store float 0x3FE5555560000000, float* %res, align 4, !dbg !92
  br label %if.end.25, !dbg !94

if.else.24:                                       ; preds = %if.else.19
  store float 0x3FF5555560000000, float* %res, align 4, !dbg !95
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.24, %if.then.23
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.18
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.end
  br label %if.end.48, !dbg !97

if.else.28:                                       ; preds = %land.end
  %13 = load i32, i32* %p.addr, align 4, !dbg !98
  %call29 = call i16* @utop(i32 %13), !dbg !98
  %call30 = call i16* @psetq(i16** %k, i16* %call29), !dbg !98
  %14 = load i16*, i16** %d.addr, align 8, !dbg !100
  %15 = load i16*, i16** %k, align 8, !dbg !100
  %16 = load i16*, i16** @pone, align 8, !dbg !100
  %call31 = call i16* @psub(i16* %15, i16* %16), !dbg !100
  %call32 = call i16* @phalf(i16* %call31), !dbg !100
  %17 = load i16*, i16** %k, align 8, !dbg !100
  %call33 = call i16* @ppowmod(i16* %14, i16* %call32, i16* %17), !dbg !100
  %18 = load i16*, i16** @pone, align 8, !dbg !100
  %call34 = call i32 @pcmp(i16* %call33, i16* %18), !dbg !100
  %cmp35 = icmp eq i32 %call34, 0, !dbg !100
  br i1 %cmp35, label %if.then.37, label %if.else.46, !dbg !102

if.then.37:                                       ; preds = %if.else.28
  %19 = load i32, i32* %p.addr, align 4, !dbg !103
  %20 = load i32, i32* %p.addr, align 4, !dbg !105
  %add38 = add i32 %19, %20, !dbg !106
  %conv39 = uitofp i32 %add38 to float, !dbg !107
  %conv40 = fpext float %conv39 to double, !dbg !107
  %21 = load i32, i32* %p.addr, align 4, !dbg !108
  %conv41 = uitofp i32 %21 to float, !dbg !109
  %22 = load i32, i32* %p.addr, align 4, !dbg !110
  %conv42 = uitofp i32 %22 to float, !dbg !110
  %mul = fmul float %conv41, %conv42, !dbg !111
  %conv43 = fpext float %mul to double, !dbg !112
  %sub = fsub double %conv43, 1.000000e+00, !dbg !113
  %div44 = fdiv double %conv40, %sub, !dbg !114
  %conv45 = fptrunc double %div44 to float, !dbg !107
  store float %conv45, float* %res, align 4, !dbg !115
  br label %if.end.47, !dbg !116

if.else.46:                                       ; preds = %if.else.28
  store float 0.000000e+00, float* %res, align 4, !dbg !117
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.46, %if.then.37
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %if.end.27
  %23 = load i16*, i16** %k, align 8, !dbg !119
  %cmp49 = icmp ne i16* %23, null, !dbg !119
  br i1 %cmp49, label %land.lhs.true, label %land.end.57, !dbg !119

land.lhs.true:                                    ; preds = %if.end.48
  %24 = load i16*, i16** %k, align 8, !dbg !120
  %25 = load i16, i16* %24, align 2, !dbg !120
  %dec = add i16 %25, -1, !dbg !120
  store i16 %dec, i16* %24, align 2, !dbg !120
  %conv51 = zext i16 %dec to i32, !dbg !120
  %cmp52 = icmp eq i32 %conv51, 0, !dbg !120
  br i1 %cmp52, label %land.rhs.54, label %land.end.57, !dbg !120

land.rhs.54:                                      ; preds = %land.lhs.true
  %26 = load i16*, i16** %k, align 8, !dbg !121
  %call55 = call i32 (i16*, ...) bitcast (i32 (...)* @pfree to i32 (i16*, ...)*)(i16* %26), !dbg !121
  %tobool56 = icmp ne i32 %call55, 0, !dbg !121
  br label %land.end.57

land.end.57:                                      ; preds = %land.rhs.54, %land.lhs.true, %if.end.48
  %27 = phi i1 [ false, %land.lhs.true ], [ false, %if.end.48 ], [ %tobool56, %land.rhs.54 ]
  %land.ext58 = zext i1 %27 to i32, !dbg !123
  %28 = load i16*, i16** %d.addr, align 8, !dbg !125
  %cmp59 = icmp ne i16* %28, null, !dbg !125
  br i1 %cmp59, label %land.lhs.true.61, label %land.end.69, !dbg !125

land.lhs.true.61:                                 ; preds = %land.end.57
  %29 = load i16*, i16** %d.addr, align 8, !dbg !126
  %30 = load i16, i16* %29, align 2, !dbg !126
  %dec62 = add i16 %30, -1, !dbg !126
  store i16 %dec62, i16* %29, align 2, !dbg !126
  %conv63 = zext i16 %dec62 to i32, !dbg !126
  %cmp64 = icmp eq i32 %conv63, 0, !dbg !126
  br i1 %cmp64, label %land.rhs.66, label %land.end.69, !dbg !126

land.rhs.66:                                      ; preds = %land.lhs.true.61
  %31 = load i16*, i16** %d.addr, align 8, !dbg !127
  %call67 = call i32 (i16*, ...) bitcast (i32 (...)* @pfree to i32 (i16*, ...)*)(i16* %31), !dbg !127
  %tobool68 = icmp ne i32 %call67, 0, !dbg !127
  br label %land.end.69

land.end.69:                                      ; preds = %land.rhs.66, %land.lhs.true.61, %land.end.57
  %32 = phi i1 [ false, %land.lhs.true.61 ], [ false, %land.end.57 ], [ %tobool68, %land.rhs.66 ]
  %land.ext70 = zext i1 %32 to i32, !dbg !128
  %33 = load i32, i32* @debug, align 4, !dbg !129
  %cmp71 = icmp sgt i32 %33, 1, !dbg !131
  br i1 %cmp71, label %if.then.73, label %if.end.77, !dbg !132

if.then.73:                                       ; preds = %land.end.69
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !133
  %35 = load i32, i32* %p.addr, align 4, !dbg !135
  %call74 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %35), !dbg !136
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !137
  %37 = load float, float* %res, align 4, !dbg !138
  %conv75 = fpext float %37 to double, !dbg !138
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), double %conv75), !dbg !139
  br label %if.end.77, !dbg !140

if.end.77:                                        ; preds = %if.then.73, %land.end.69
  %38 = load float, float* %res, align 4, !dbg !141
  ret float %38, !dbg !142
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @podd(i16*) #2

declare i16* @psetq(i16**, i16*) #2

declare i16* @phalf(i16*) #2

declare i16* @utop(i32) #2

declare i32 @pcmp(i16*, i16*) #2

declare i16* @ppowmod(i16*, i16*, i16*) #2

declare i16* @psub(i16*, i16*) #2

declare i32 @pfree(...) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: nounwind uwtable
define float @logf_(i32 %p, i16* %n, i32 %k) #0 {
entry:
  %p.addr = alloca i32, align 4
  %n.addr = alloca i16*, align 8
  %k.addr = alloca i32, align 4
  %res = alloca float, align 4
  store i32 %p, i32* %p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %p.addr, metadata !143, metadata !40), !dbg !144
  store i16* %n, i16** %n.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %n.addr, metadata !145, metadata !40), !dbg !146
  store i32 %k, i32* %k.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %k.addr, metadata !147, metadata !40), !dbg !148
  call void @llvm.dbg.declare(metadata float* %res, metadata !149, metadata !40), !dbg !150
  %0 = load i16*, i16** %n.addr, align 8, !dbg !151
  %cmp = icmp ne i16* %0, null, !dbg !151
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !151

land.rhs:                                         ; preds = %entry
  %1 = load i16*, i16** %n.addr, align 8, !dbg !152
  %2 = load i16, i16* %1, align 2, !dbg !152
  %inc = add i16 %2, 1, !dbg !152
  store i16 %inc, i16* %1, align 2, !dbg !152
  %conv = zext i16 %2 to i32, !dbg !152
  %tobool = icmp ne i32 %conv, 0, !dbg !152
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %3 to i32, !dbg !154
  %4 = load i16*, i16** %n.addr, align 8, !dbg !154
  %5 = load i32, i32* %p.addr, align 4, !dbg !156
  %6 = load i32, i32* %k.addr, align 4, !dbg !157
  %call = call i16* @itop(i32 %6), !dbg !158
  %7 = load i16*, i16** %n.addr, align 8, !dbg !159
  %call1 = call i16* @pmul(i16* %call, i16* %7), !dbg !160
  %call2 = call float @pfKnuthEx28(i32 %5, i16* %call1), !dbg !161
  %conv3 = fpext float %call2 to double, !dbg !161
  %8 = load i32, i32* %p.addr, align 4, !dbg !162
  %conv4 = uitofp i32 %8 to double, !dbg !163
  %call5 = call double @log(double %conv4) #6, !dbg !164
  %mul = fmul double %conv3, %call5, !dbg !165
  %conv6 = fptrunc double %mul to float, !dbg !161
  store float %conv6, float* %res, align 4, !dbg !166
  %9 = load i16*, i16** %n.addr, align 8, !dbg !167
  %cmp7 = icmp ne i16* %9, null, !dbg !167
  br i1 %cmp7, label %land.lhs.true, label %land.end.15, !dbg !167

land.lhs.true:                                    ; preds = %land.end
  %10 = load i16*, i16** %n.addr, align 8, !dbg !168
  %11 = load i16, i16* %10, align 2, !dbg !168
  %dec = add i16 %11, -1, !dbg !168
  store i16 %dec, i16* %10, align 2, !dbg !168
  %conv9 = zext i16 %dec to i32, !dbg !168
  %cmp10 = icmp eq i32 %conv9, 0, !dbg !168
  br i1 %cmp10, label %land.rhs.12, label %land.end.15, !dbg !168

land.rhs.12:                                      ; preds = %land.lhs.true
  %12 = load i16*, i16** %n.addr, align 8, !dbg !169
  %call13 = call i32 (i16*, ...) bitcast (i32 (...)* @pfree to i32 (i16*, ...)*)(i16* %12), !dbg !169
  %tobool14 = icmp ne i32 %call13, 0, !dbg !169
  br label %land.end.15

land.end.15:                                      ; preds = %land.rhs.12, %land.lhs.true, %land.end
  %13 = phi i1 [ false, %land.lhs.true ], [ false, %land.end ], [ %tobool14, %land.rhs.12 ]
  %land.ext16 = zext i1 %13 to i32, !dbg !171
  %14 = load float, float* %res, align 4, !dbg !173
  ret float %14, !dbg !174
}

declare i16* @pmul(i16*, i16*) #2

declare i16* @itop(i32) #2

; Function Attrs: nounwind
declare double @log(double) #3

; Function Attrs: nounwind uwtable
define i32 @findk(i16* %n, i32* %m, i32 %aborts, i32 %maxk) #0 {
entry:
  %n.addr = alloca i16*, align 8
  %m.addr = alloca i32*, align 8
  %aborts.addr = alloca i32, align 4
  %maxk.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %bestk = alloca i32, align 4
  %count = alloca i32, align 4
  %bestcount = alloca i32, align 4
  %maxpm = alloca i32, align 4
  %sum = alloca float, align 4
  %max = alloca float, align 4
  %p = alloca i32*, align 8
  %i = alloca i32, align 4
  %primePtr = alloca i16*, align 8
  store i16* %n, i16** %n.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %n.addr, metadata !175, metadata !40), !dbg !176
  store i32* %m, i32** %m.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %m.addr, metadata !177, metadata !40), !dbg !178
  store i32 %aborts, i32* %aborts.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %aborts.addr, metadata !179, metadata !40), !dbg !180
  store i32 %maxk, i32* %maxk.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %maxk.addr, metadata !181, metadata !40), !dbg !182
  call void @llvm.dbg.declare(metadata i32* %k, metadata !183, metadata !40), !dbg !184
  call void @llvm.dbg.declare(metadata i32* %bestk, metadata !185, metadata !40), !dbg !186
  store i32 0, i32* %bestk, align 4, !dbg !186
  call void @llvm.dbg.declare(metadata i32* %count, metadata !187, metadata !40), !dbg !188
  call void @llvm.dbg.declare(metadata i32* %bestcount, metadata !189, metadata !40), !dbg !190
  store i32 0, i32* %bestcount, align 4, !dbg !190
  call void @llvm.dbg.declare(metadata i32* %maxpm, metadata !191, metadata !40), !dbg !192
  call void @llvm.dbg.declare(metadata float* %sum, metadata !193, metadata !40), !dbg !194
  call void @llvm.dbg.declare(metadata float* %max, metadata !195, metadata !40), !dbg !196
  store float 0xC30C6BF520000000, float* %max, align 4, !dbg !196
  call void @llvm.dbg.declare(metadata i32** %p, metadata !197, metadata !40), !dbg !198
  call void @llvm.dbg.declare(metadata i32* %i, metadata !199, metadata !40), !dbg !200
  call void @llvm.dbg.declare(metadata i16** %primePtr, metadata !201, metadata !40), !dbg !203
  %0 = load i16*, i16** %n.addr, align 8, !dbg !204
  %cmp = icmp ne i16* %0, null, !dbg !204
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !204

land.rhs:                                         ; preds = %entry
  %1 = load i16*, i16** %n.addr, align 8, !dbg !205
  %2 = load i16, i16* %1, align 2, !dbg !205
  %inc = add i16 %2, 1, !dbg !205
  store i16 %inc, i16* %1, align 2, !dbg !205
  %conv = zext i16 %2 to i32, !dbg !205
  %tobool = icmp ne i32 %conv, 0, !dbg !205
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %3 to i32, !dbg !207
  %4 = load i16*, i16** %n.addr, align 8, !dbg !207
  store i32 1, i32* %k, align 4, !dbg !209
  br label %for.cond, !dbg !211

for.cond:                                         ; preds = %for.inc, %land.end
  %5 = load i32, i32* %k, align 4, !dbg !212
  %6 = load i32, i32* %maxk.addr, align 4, !dbg !216
  %cmp1 = icmp ult i32 %5, %6, !dbg !217
  br i1 %cmp1, label %for.body, label %for.end, !dbg !218

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* @debug, align 4, !dbg !219
  %tobool3 = icmp ne i32 %7, 0, !dbg !219
  br i1 %tobool3, label %if.then, label %if.end, !dbg !222

if.then:                                          ; preds = %for.body
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !223
  %call = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), %struct._IO_FILE* %8), !dbg !225
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !226
  %10 = load i32, i32* %k, align 4, !dbg !227
  %call4 = call i16* @utop(i32 %10), !dbg !228
  %11 = load i16*, i16** %n.addr, align 8, !dbg !229
  %call5 = call i16* @pmul(i16* %call4, i16* %11), !dbg !230
  %call6 = call i32 @fputp(%struct._IO_FILE* %9, i16* %call5), !dbg !231
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !232
  %call7 = call i32 @_IO_putc(i32 10, %struct._IO_FILE* %12), !dbg !232
  br label %if.end, !dbg !233

if.end:                                           ; preds = %if.then, %for.body
  %13 = load i32*, i32** %m.addr, align 8, !dbg !234
  %14 = load i32, i32* %13, align 4, !dbg !235
  store i32 %14, i32* %count, align 4, !dbg !236
  %15 = load i16*, i16** %n.addr, align 8, !dbg !237
  %16 = load i32, i32* %k, align 4, !dbg !238
  %17 = load i32, i32* %aborts.addr, align 4, !dbg !239
  %call8 = call i32* @pfactorbase(i16* %15, i32 %16, i32* %count, i32 %17), !dbg !240
  store i32* %call8, i32** %p, align 8, !dbg !241
  %18 = load i32*, i32** %p, align 8, !dbg !242
  %cmp9 = icmp eq i32* %18, null, !dbg !244
  br i1 %cmp9, label %if.then.11, label %if.end.13, !dbg !245

if.then.11:                                       ; preds = %if.end
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !246
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i32 0, i32 0)), !dbg !248
  call void @exit(i32 1) #7, !dbg !249
  unreachable, !dbg !249

if.end.13:                                        ; preds = %if.end
  %20 = load i32, i32* %count, align 4, !dbg !250
  %sub = sub i32 %20, 1, !dbg !251
  %idxprom = zext i32 %sub to i64, !dbg !252
  %21 = load i32*, i32** %p, align 8, !dbg !252
  %arrayidx = getelementptr inbounds i32, i32* %21, i64 %idxprom, !dbg !252
  %22 = load i32, i32* %arrayidx, align 4, !dbg !252
  store i32 %22, i32* %maxpm, align 4, !dbg !253
  store float 0.000000e+00, float* %sum, align 4, !dbg !254
  store i16* getelementptr inbounds ([0 x i16], [0 x i16]* @primes, i32 0, i32 0), i16** %primePtr, align 8, !dbg !255
  br label %while.cond, !dbg !256

while.cond:                                       ; preds = %while.body, %if.end.13
  %23 = load i16*, i16** %primePtr, align 8, !dbg !257
  %24 = load i16, i16* %23, align 2, !dbg !260
  %conv14 = zext i16 %24 to i32, !dbg !260
  %25 = load i32, i32* %maxpm, align 4, !dbg !261
  %cmp15 = icmp ule i32 %conv14, %25, !dbg !262
  br i1 %cmp15, label %while.body, label %while.end, !dbg !256

while.body:                                       ; preds = %while.cond
  %26 = load i16*, i16** %primePtr, align 8, !dbg !263
  %incdec.ptr = getelementptr inbounds i16, i16* %26, i32 1, !dbg !263
  store i16* %incdec.ptr, i16** %primePtr, align 8, !dbg !263
  %27 = load i16, i16* %26, align 2, !dbg !265
  %conv17 = zext i16 %27 to i32, !dbg !266
  %28 = load i16*, i16** %n.addr, align 8, !dbg !267
  %29 = load i32, i32* %k, align 4, !dbg !268
  %call18 = call float @logf_(i32 %conv17, i16* %28, i32 %29), !dbg !269
  %30 = load float, float* %sum, align 4, !dbg !270
  %add = fadd float %30, %call18, !dbg !270
  store float %add, float* %sum, align 4, !dbg !270
  br label %while.cond, !dbg !256

while.end:                                        ; preds = %while.cond
  %31 = load i32, i32* %k, align 4, !dbg !271
  %conv19 = uitofp i32 %31 to double, !dbg !272
  %call20 = call double @log(double %conv19) #6, !dbg !273
  %mul = fmul double %call20, 5.000000e-01, !dbg !274
  %32 = load float, float* %sum, align 4, !dbg !275
  %conv21 = fpext float %32 to double, !dbg !275
  %sub22 = fsub double %conv21, %mul, !dbg !275
  %conv23 = fptrunc double %sub22 to float, !dbg !275
  store float %conv23, float* %sum, align 4, !dbg !275
  %33 = load i32, i32* @verbose, align 4, !dbg !276
  %cmp24 = icmp sgt i32 %33, 2, !dbg !278
  br i1 %cmp24, label %if.then.26, label %if.end.29, !dbg !279

if.then.26:                                       ; preds = %while.end
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !280
  %35 = load i32, i32* %k, align 4, !dbg !281
  %36 = load float, float* %sum, align 4, !dbg !282
  %conv27 = fpext float %36 to double, !dbg !282
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), i32 %35, double %conv27), !dbg !283
  br label %if.end.29, !dbg !283

if.end.29:                                        ; preds = %if.then.26, %while.end
  %37 = load i32, i32* @debug, align 4, !dbg !284
  %tobool30 = icmp ne i32 %37, 0, !dbg !284
  br i1 %tobool30, label %if.then.31, label %if.end.36, !dbg !286

if.then.31:                                       ; preds = %if.end.29
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !287
  %39 = load i32, i32* %k, align 4, !dbg !288
  %conv32 = uitofp i32 %39 to double, !dbg !289
  %call33 = call double @log(double %conv32) #6, !dbg !290
  %mul34 = fmul double %call33, 5.000000e-01, !dbg !291
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0), double %mul34), !dbg !292
  br label %if.end.36, !dbg !292

if.end.36:                                        ; preds = %if.then.31, %if.end.29
  %40 = load i32, i32* @verbose, align 4, !dbg !293
  %cmp37 = icmp sgt i32 %40, 2, !dbg !295
  br i1 %cmp37, label %if.then.39, label %if.end.42, !dbg !296

if.then.39:                                       ; preds = %if.end.36
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !297
  %call40 = call i32 @fputs(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0), %struct._IO_FILE* %41), !dbg !299
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !300
  %call41 = call i32 @fflush(%struct._IO_FILE* %42), !dbg !301
  br label %if.end.42, !dbg !302

if.end.42:                                        ; preds = %if.then.39, %if.end.36
  %43 = load float, float* %sum, align 4, !dbg !303
  %44 = load float, float* %max, align 4, !dbg !305
  %cmp43 = fcmp ogt float %43, %44, !dbg !306
  br i1 %cmp43, label %if.then.45, label %if.end.46, !dbg !307

if.then.45:                                       ; preds = %if.end.42
  %45 = load float, float* %sum, align 4, !dbg !308
  store float %45, float* %max, align 4, !dbg !310
  %46 = load i32, i32* %k, align 4, !dbg !311
  store i32 %46, i32* %bestk, align 4, !dbg !312
  %47 = load i32, i32* %count, align 4, !dbg !313
  store i32 %47, i32* %bestcount, align 4, !dbg !314
  br label %if.end.46, !dbg !315

if.end.46:                                        ; preds = %if.then.45, %if.end.42
  %48 = load i32*, i32** %p, align 8, !dbg !316
  %49 = bitcast i32* %48 to i8*, !dbg !316
  call void @free(i8* %49) #6, !dbg !317
  br label %for.inc, !dbg !318

for.inc:                                          ; preds = %if.end.46
  %50 = load i32, i32* %k, align 4, !dbg !319
  %inc47 = add i32 %50, 1, !dbg !319
  store i32 %inc47, i32* %k, align 4, !dbg !319
  br label %for.cond, !dbg !320

for.end:                                          ; preds = %for.cond
  %51 = load i32, i32* %bestcount, align 4, !dbg !321
  %52 = load i32*, i32** %m.addr, align 8, !dbg !322
  store i32 %51, i32* %52, align 4, !dbg !323
  %53 = load i16*, i16** %n.addr, align 8, !dbg !324
  %cmp48 = icmp ne i16* %53, null, !dbg !324
  br i1 %cmp48, label %land.lhs.true, label %land.end.56, !dbg !324

land.lhs.true:                                    ; preds = %for.end
  %54 = load i16*, i16** %n.addr, align 8, !dbg !325
  %55 = load i16, i16* %54, align 2, !dbg !325
  %dec = add i16 %55, -1, !dbg !325
  store i16 %dec, i16* %54, align 2, !dbg !325
  %conv50 = zext i16 %dec to i32, !dbg !325
  %cmp51 = icmp eq i32 %conv50, 0, !dbg !325
  br i1 %cmp51, label %land.rhs.53, label %land.end.56, !dbg !325

land.rhs.53:                                      ; preds = %land.lhs.true
  %56 = load i16*, i16** %n.addr, align 8, !dbg !326
  %call54 = call i32 (i16*, ...) bitcast (i32 (...)* @pfree to i32 (i16*, ...)*)(i16* %56), !dbg !326
  %tobool55 = icmp ne i32 %call54, 0, !dbg !326
  br label %land.end.56

land.end.56:                                      ; preds = %land.rhs.53, %land.lhs.true, %for.end
  %57 = phi i1 [ false, %land.lhs.true ], [ false, %for.end ], [ %tobool55, %land.rhs.53 ]
  %land.ext57 = zext i1 %57 to i32, !dbg !328
  %58 = load i32, i32* %bestk, align 4, !dbg !330
  ret i32 %58, !dbg !331
}

declare i32 @fputs(i8*, %struct._IO_FILE*) #2

declare i32 @fputp(%struct._IO_FILE*, i16*) #2

declare i32 @_IO_putc(i32, %struct._IO_FILE*) #2

declare i32* @pfactorbase(i16*, i32, i32*, i32) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

declare i32 @fflush(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare void @free(i8*) #3

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %m = alloca i32, align 4
  %k = alloca i32, align 4
  %maxCount = alloca i32, align 4
  %count = alloca i32, align 4
  %maxk = alloca i32, align 4
  %ch = alloca i32, align 4
  %n = alloca i16*, align 8
  %f = alloca i16*, align 8
  %aborts = alloca i32, align 4
  %p = alloca i32*, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !332, metadata !40), !dbg !333
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !334, metadata !40), !dbg !335
  call void @llvm.dbg.declare(metadata i32* %m, metadata !336, metadata !40), !dbg !337
  store i32 0, i32* %m, align 4, !dbg !337
  call void @llvm.dbg.declare(metadata i32* %k, metadata !338, metadata !40), !dbg !339
  store i32 0, i32* %k, align 4, !dbg !339
  call void @llvm.dbg.declare(metadata i32* %maxCount, metadata !340, metadata !40), !dbg !341
  store i32 1073741824, i32* %maxCount, align 4, !dbg !341
  call void @llvm.dbg.declare(metadata i32* %count, metadata !342, metadata !40), !dbg !343
  call void @llvm.dbg.declare(metadata i32* %maxk, metadata !344, metadata !40), !dbg !345
  store i32 0, i32* %maxk, align 4, !dbg !345
  call void @llvm.dbg.declare(metadata i32* %ch, metadata !346, metadata !40), !dbg !347
  call void @llvm.dbg.declare(metadata i16** %n, metadata !348, metadata !40), !dbg !349
  store i16* null, i16** %n, align 8, !dbg !349
  call void @llvm.dbg.declare(metadata i16** %f, metadata !350, metadata !40), !dbg !351
  store i16* null, i16** %f, align 8, !dbg !351
  call void @llvm.dbg.declare(metadata i32* %aborts, metadata !352, metadata !40), !dbg !353
  store i32 3, i32* %aborts, align 4, !dbg !353
  call void @llvm.dbg.declare(metadata i32** %p, metadata !354, metadata !40), !dbg !355
  %0 = load i8**, i8*** %argv.addr, align 8, !dbg !356
  %1 = load i8*, i8** %0, align 8, !dbg !357
  store i8* %1, i8** @progName, align 8, !dbg !358
  br label %while.cond, !dbg !359

while.cond:                                       ; preds = %sw.epilog, %entry
  %2 = load i32, i32* %argc.addr, align 4, !dbg !360
  %3 = load i8**, i8*** %argv.addr, align 8, !dbg !363
  %call = call i32 (i32, i8**, i8*, ...) bitcast (i32 (...)* @getopt to i32 (i32, i8**, i8*, ...)*)(i32 %2, i8** %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0)), !dbg !364
  store i32 %call, i32* %ch, align 4, !dbg !365
  %cmp = icmp ne i32 %call, -1, !dbg !366
  br i1 %cmp, label %while.body, label %while.end, !dbg !359

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %ch, align 4, !dbg !367
  switch i32 %4, label %sw.default [
    i32 97, label %sw.bb
    i32 107, label %sw.bb.2
    i32 105, label %sw.bb.4
    i32 100, label %sw.bb.6
    i32 118, label %sw.bb.7
  ], !dbg !368

sw.bb:                                            ; preds = %while.body
  %5 = load i8*, i8** @optarg, align 8, !dbg !369
  %call1 = call i32 @atoi(i8* %5) #8, !dbg !371
  store i32 %call1, i32* %aborts, align 4, !dbg !372
  br label %sw.epilog, !dbg !373

sw.bb.2:                                          ; preds = %while.body
  %6 = load i8*, i8** @optarg, align 8, !dbg !374
  %call3 = call i32 @atoi(i8* %6) #8, !dbg !375
  store i32 %call3, i32* %maxk, align 4, !dbg !376
  br label %sw.epilog, !dbg !377

sw.bb.4:                                          ; preds = %while.body
  %7 = load i8*, i8** @optarg, align 8, !dbg !378
  %call5 = call i32 @atoi(i8* %7) #8, !dbg !379
  store i32 %call5, i32* %maxCount, align 4, !dbg !380
  br label %sw.epilog, !dbg !381

sw.bb.6:                                          ; preds = %while.body
  %8 = load i32, i32* @debug, align 4, !dbg !382
  %inc = add nsw i32 %8, 1, !dbg !382
  store i32 %inc, i32* @debug, align 4, !dbg !382
  br label %sw.epilog, !dbg !383

sw.bb.7:                                          ; preds = %while.body
  %9 = load i32, i32* @verbose, align 4, !dbg !384
  %inc8 = add nsw i32 %9, 1, !dbg !384
  store i32 %inc8, i32* @verbose, align 4, !dbg !384
  br label %sw.epilog, !dbg !385

sw.default:                                       ; preds = %while.body
  br label %usage, !dbg !385

usage:                                            ; preds = %if.then, %sw.default
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !386
  %11 = load i8*, i8** @progName, align 8, !dbg !387
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.8, i32 0, i32 0), i8* %11), !dbg !388
  store i32 1, i32* %retval, !dbg !389
  br label %return, !dbg !389

sw.epilog:                                        ; preds = %sw.bb.7, %sw.bb.6, %sw.bb.4, %sw.bb.2, %sw.bb
  br label %while.cond, !dbg !359

while.end:                                        ; preds = %while.cond
  %12 = load i32, i32* @optind, align 4, !dbg !390
  %13 = load i32, i32* %argc.addr, align 4, !dbg !391
  %sub = sub nsw i32 %13, %12, !dbg !391
  store i32 %sub, i32* %argc.addr, align 4, !dbg !391
  %14 = load i32, i32* @optind, align 4, !dbg !392
  %15 = load i8**, i8*** %argv.addr, align 8, !dbg !393
  %idx.ext = sext i32 %14 to i64, !dbg !393
  %add.ptr = getelementptr inbounds i8*, i8** %15, i64 %idx.ext, !dbg !393
  store i8** %add.ptr, i8*** %argv.addr, align 8, !dbg !393
  %16 = load i32, i32* %argc.addr, align 4, !dbg !394
  %cmp10 = icmp slt i32 %16, 1, !dbg !396
  br i1 %cmp10, label %if.then, label %lor.lhs.false, !dbg !397

lor.lhs.false:                                    ; preds = %while.end
  %17 = load i32, i32* %argc.addr, align 4, !dbg !398
  %cmp11 = icmp sgt i32 %17, 3, !dbg !400
  br i1 %cmp11, label %if.then, label %if.end, !dbg !401

if.then:                                          ; preds = %lor.lhs.false, %while.end
  br label %usage, !dbg !402

if.end:                                           ; preds = %lor.lhs.false
  %18 = load i8**, i8*** %argv.addr, align 8, !dbg !403
  %incdec.ptr = getelementptr inbounds i8*, i8** %18, i32 1, !dbg !403
  store i8** %incdec.ptr, i8*** %argv.addr, align 8, !dbg !403
  %19 = load i8*, i8** %18, align 8, !dbg !403
  %call12 = call i16* @atop(i8* %19), !dbg !403
  %call13 = call i16* @psetq(i16** %n, i16* %call12), !dbg !403
  %20 = load i32, i32* %argc.addr, align 4, !dbg !404
  %dec = add nsw i32 %20, -1, !dbg !404
  store i32 %dec, i32* %argc.addr, align 4, !dbg !404
  %21 = load i32, i32* %argc.addr, align 4, !dbg !405
  %tobool = icmp ne i32 %21, 0, !dbg !405
  br i1 %tobool, label %if.then.14, label %if.end.18, !dbg !407

if.then.14:                                       ; preds = %if.end
  %22 = load i8**, i8*** %argv.addr, align 8, !dbg !408
  %incdec.ptr15 = getelementptr inbounds i8*, i8** %22, i32 1, !dbg !408
  store i8** %incdec.ptr15, i8*** %argv.addr, align 8, !dbg !408
  %23 = load i8*, i8** %22, align 8, !dbg !410
  %call16 = call i32 @atoi(i8* %23) #8, !dbg !411
  store i32 %call16, i32* %m, align 4, !dbg !412
  %24 = load i32, i32* %argc.addr, align 4, !dbg !413
  %dec17 = add nsw i32 %24, -1, !dbg !413
  store i32 %dec17, i32* %argc.addr, align 4, !dbg !413
  br label %if.end.18, !dbg !414

if.end.18:                                        ; preds = %if.then.14, %if.end
  %25 = load i32, i32* %argc.addr, align 4, !dbg !415
  %tobool19 = icmp ne i32 %25, 0, !dbg !415
  br i1 %tobool19, label %if.then.20, label %if.end.24, !dbg !417

if.then.20:                                       ; preds = %if.end.18
  %26 = load i8**, i8*** %argv.addr, align 8, !dbg !418
  %incdec.ptr21 = getelementptr inbounds i8*, i8** %26, i32 1, !dbg !418
  store i8** %incdec.ptr21, i8*** %argv.addr, align 8, !dbg !418
  %27 = load i8*, i8** %26, align 8, !dbg !420
  %call22 = call i32 @atoi(i8* %27) #8, !dbg !421
  store i32 %call22, i32* %k, align 4, !dbg !422
  %28 = load i32, i32* %argc.addr, align 4, !dbg !423
  %dec23 = add nsw i32 %28, -1, !dbg !423
  store i32 %dec23, i32* %argc.addr, align 4, !dbg !423
  br label %if.end.24, !dbg !424

if.end.24:                                        ; preds = %if.then.20, %if.end.18
  %29 = load i32, i32* %k, align 4, !dbg !425
  %cmp25 = icmp eq i32 %29, 0, !dbg !427
  br i1 %cmp25, label %if.then.26, label %if.end.39, !dbg !428

if.then.26:                                       ; preds = %if.end.24
  %30 = load i32, i32* %maxk, align 4, !dbg !429
  %cmp27 = icmp eq i32 %30, 0, !dbg !432
  br i1 %cmp27, label %if.then.28, label %if.end.33, !dbg !433

if.then.28:                                       ; preds = %if.then.26
  %31 = load i32, i32* %m, align 4, !dbg !434
  %div = udiv i32 %31, 2, !dbg !436
  %add = add i32 %div, 5, !dbg !437
  store i32 %add, i32* %maxk, align 4, !dbg !438
  %32 = load i32, i32* @verbose, align 4, !dbg !439
  %tobool29 = icmp ne i32 %32, 0, !dbg !439
  br i1 %tobool29, label %if.then.30, label %if.end.32, !dbg !441

if.then.30:                                       ; preds = %if.then.28
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !442
  %34 = load i32, i32* %maxk, align 4, !dbg !443
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), i32 %34), !dbg !444
  br label %if.end.32, !dbg !444

if.end.32:                                        ; preds = %if.then.30, %if.then.28
  br label %if.end.33, !dbg !445

if.end.33:                                        ; preds = %if.end.32, %if.then.26
  %35 = load i16*, i16** %n, align 8, !dbg !446
  %36 = load i32, i32* %aborts, align 4, !dbg !447
  %37 = load i32, i32* %maxk, align 4, !dbg !448
  %call34 = call i32 @findk(i16* %35, i32* %m, i32 %36, i32 %37), !dbg !449
  store i32 %call34, i32* %k, align 4, !dbg !450
  %38 = load i32, i32* @verbose, align 4, !dbg !451
  %tobool35 = icmp ne i32 %38, 0, !dbg !451
  br i1 %tobool35, label %if.then.36, label %if.end.38, !dbg !453

if.then.36:                                       ; preds = %if.end.33
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !454
  %40 = load i32, i32* %k, align 4, !dbg !456
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i32 %40), !dbg !457
  br label %if.end.38, !dbg !458

if.end.38:                                        ; preds = %if.then.36, %if.end.33
  br label %if.end.39, !dbg !459

if.end.39:                                        ; preds = %if.end.38, %if.end.24
  %41 = load i32, i32* %maxCount, align 4, !dbg !460
  store i32 %41, i32* %count, align 4, !dbg !461
  %42 = load i32, i32* %m, align 4, !dbg !462
  %43 = load i32, i32* %k, align 4, !dbg !463
  %44 = load i32, i32* %aborts, align 4, !dbg !464
  %call40 = call i32 @pcfracInit(i32 %42, i32 %43, i32 %44), !dbg !465
  %45 = load i16*, i16** %n, align 8, !dbg !466
  %call41 = call i16* @pcfrac(i16* %45, i32* %count), !dbg !466
  %call42 = call i16* @psetq(i16** %f, i16* %call41), !dbg !466
  %46 = load i32, i32* %maxCount, align 4, !dbg !467
  %47 = load i32, i32* %count, align 4, !dbg !468
  %sub43 = sub i32 %46, %47, !dbg !469
  store i32 %sub43, i32* %count, align 4, !dbg !470
  %48 = load i32, i32* @verbose, align 4, !dbg !471
  %tobool44 = icmp ne i32 %48, 0, !dbg !471
  br i1 %tobool44, label %if.then.45, label %if.end.53, !dbg !473

if.then.45:                                       ; preds = %if.end.39
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !474
  %call46 = call i32 @_IO_putc(i32 10, %struct._IO_FILE* %49), !dbg !474
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !476
  %51 = load i32, i32* %count, align 4, !dbg !477
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i32 0, i32 0), i32 %51), !dbg !478
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !479
  %53 = load i32, i32* @cfracNabort, align 4, !dbg !480
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i32 0, i32 0), i32 %53), !dbg !481
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !482
  %55 = load i32, i32* @cfracTsolns, align 4, !dbg !483
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i32 0, i32 0), i32 %55), !dbg !484
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !485
  %57 = load i32, i32* @cfracT2solns, align 4, !dbg !486
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i32 0, i32 0), i32 %57), !dbg !487
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !488
  %59 = load i32, i32* @cfracPsolns, align 4, !dbg !489
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.15, i32 0, i32 0), i32 %59), !dbg !490
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !491
  %61 = load i32, i32* @cfracFsolns, align 4, !dbg !492
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i32 0, i32 0), i32 %61), !dbg !493
  br label %if.end.53, !dbg !494

if.end.53:                                        ; preds = %if.then.45, %if.end.39
  %62 = load i16*, i16** %f, align 8, !dbg !495
  %cmp54 = icmp ne i16* %62, null, !dbg !497
  br i1 %cmp54, label %if.then.55, label %if.end.63, !dbg !498

if.then.55:                                       ; preds = %if.end.53
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !499
  %64 = load i16*, i16** %n, align 8, !dbg !501
  %call56 = call i32 @fputp(%struct._IO_FILE* %63, i16* %64), !dbg !502
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !503
  %call57 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), %struct._IO_FILE* %65), !dbg !504
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !505
  %67 = load i16*, i16** %f, align 8, !dbg !506
  %call58 = call i32 @fputp(%struct._IO_FILE* %66, i16* %67), !dbg !507
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !508
  %call59 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), %struct._IO_FILE* %68), !dbg !509
  %69 = load i16*, i16** %n, align 8, !dbg !510
  %70 = load i16*, i16** %f, align 8, !dbg !511
  %call60 = call i16* @pdivmod(i16* %69, i16* %70, i16** %n, i16** null), !dbg !512
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !513
  %72 = load i16*, i16** %n, align 8, !dbg !514
  %call61 = call i32 @fputp(%struct._IO_FILE* %71, i16* %72), !dbg !515
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !516
  %call62 = call i32 @_IO_putc(i32 10, %struct._IO_FILE* %73), !dbg !516
  br label %if.end.63, !dbg !517

if.end.63:                                        ; preds = %if.then.55, %if.end.53
  %74 = load i16*, i16** %f, align 8, !dbg !518
  %cmp64 = icmp ne i16* %74, null, !dbg !518
  br i1 %cmp64, label %land.lhs.true, label %land.end, !dbg !518

land.lhs.true:                                    ; preds = %if.end.63
  %75 = load i16*, i16** %f, align 8, !dbg !519
  %76 = load i16, i16* %75, align 2, !dbg !519
  %dec65 = add i16 %76, -1, !dbg !519
  store i16 %dec65, i16* %75, align 2, !dbg !519
  %conv = zext i16 %dec65 to i32, !dbg !519
  %cmp66 = icmp eq i32 %conv, 0, !dbg !519
  br i1 %cmp66, label %land.rhs, label %land.end, !dbg !519

land.rhs:                                         ; preds = %land.lhs.true
  %77 = load i16*, i16** %f, align 8, !dbg !520
  %call68 = call i32 (i16*, ...) bitcast (i32 (...)* @pfree to i32 (i16*, ...)*)(i16* %77), !dbg !520
  %tobool69 = icmp ne i32 %call68, 0, !dbg !520
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.end.63
  %78 = phi i1 [ false, %land.lhs.true ], [ false, %if.end.63 ], [ %tobool69, %land.rhs ]
  %land.ext = zext i1 %78 to i32, !dbg !522
  %79 = load i16*, i16** %n, align 8, !dbg !525
  %cmp70 = icmp ne i16* %79, null, !dbg !525
  br i1 %cmp70, label %land.lhs.true.72, label %land.end.80, !dbg !525

land.lhs.true.72:                                 ; preds = %land.end
  %80 = load i16*, i16** %n, align 8, !dbg !526
  %81 = load i16, i16* %80, align 2, !dbg !526
  %dec73 = add i16 %81, -1, !dbg !526
  store i16 %dec73, i16* %80, align 2, !dbg !526
  %conv74 = zext i16 %dec73 to i32, !dbg !526
  %cmp75 = icmp eq i32 %conv74, 0, !dbg !526
  br i1 %cmp75, label %land.rhs.77, label %land.end.80, !dbg !526

land.rhs.77:                                      ; preds = %land.lhs.true.72
  %82 = load i16*, i16** %n, align 8, !dbg !527
  %call78 = call i32 (i16*, ...) bitcast (i32 (...)* @pfree to i32 (i16*, ...)*)(i16* %82), !dbg !527
  %tobool79 = icmp ne i32 %call78, 0, !dbg !527
  br label %land.end.80

land.end.80:                                      ; preds = %land.rhs.77, %land.lhs.true.72, %land.end
  %83 = phi i1 [ false, %land.lhs.true.72 ], [ false, %land.end ], [ %tobool79, %land.rhs.77 ]
  %land.ext81 = zext i1 %83 to i32, !dbg !528
  store i32 0, i32* %retval, !dbg !529
  br label %return, !dbg !529

return:                                           ; preds = %land.end.80, %usage
  %84 = load i32, i32* %retval, !dbg !530
  ret i32 %84, !dbg !530
}

declare i32 @getopt(...) #2

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #5

declare i16* @atop(i8*) #2

declare i32 @pcfracInit(i32, i32, i32) #2

declare i16* @pcfrac(i16*, i32*) #2

declare i16* @pdivmod(i16*, i16*, i16**, i16**) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!36, !37}
!llvm.ident = !{!38}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !14, globals: !32)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/MallocBench/cfrac")
!2 = !{}
!3 = !{!4, !6, !9, !10, !11, !12, !13}
!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "precision", file: !5, line: 10, baseType: !6)
!5 = !DIFile(filename: "./precision.h", directory: "/home/gleison/tf/Benchmarks/MallocBench/cfrac")
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "prefc", file: !5, line: 9, baseType: !8)
!8 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!9 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!10 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!12 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64, align: 64)
!14 = !{!15, !19, !22, !25}
!15 = !DISubprogram(name: "pfKnuthEx28", scope: !16, file: !16, line: 35, type: !17, isLocal: false, isDefinition: true, scopeLine: 37, isOptimized: false, function: float (i32, i16*)* @pfKnuthEx28, variables: !2)
!16 = !DIFile(filename: "/home/gleison/tf/Benchmarks/MallocBench/cfrac/tmp.c", directory: "/home/gleison/tf/Benchmarks/MallocBench/cfrac")
!17 = !DISubroutineType(types: !18)
!18 = !{!9, !12, !4}
!19 = !DISubprogram(name: "logf_", scope: !16, file: !16, line: 82, type: !20, isLocal: false, isDefinition: true, scopeLine: 85, isOptimized: false, function: float (i32, i16*, i32)* @logf_, variables: !2)
!20 = !DISubroutineType(types: !21)
!21 = !{!9, !12, !4, !12}
!22 = !DISubprogram(name: "findk", scope: !16, file: !16, line: 111, type: !23, isLocal: false, isDefinition: true, scopeLine: 115, isOptimized: false, function: i32 (i16*, i32*, i32, i32)* @findk, variables: !2)
!23 = !DISubroutineType(types: !24)
!24 = !{!12, !4, !11, !12, !12}
!25 = !DISubprogram(name: "main", scope: !16, file: !16, line: 175, type: !26, isLocal: false, isDefinition: true, scopeLine: 177, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!26 = !DISubroutineType(types: !27)
!27 = !{!28, !28, !29}
!28 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64, align: 64)
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!31 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!32 = !{!33, !34, !35}
!33 = !DIGlobalVariable(name: "verbose", scope: !0, file: !16, line: 20, type: !28, isLocal: false, isDefinition: true, variable: i32* @verbose)
!34 = !DIGlobalVariable(name: "debug", scope: !0, file: !16, line: 21, type: !28, isLocal: false, isDefinition: true, variable: i32* @debug)
!35 = !DIGlobalVariable(name: "progName", scope: !0, file: !16, line: 171, type: !30, isLocal: false, isDefinition: true, variable: i8** @progName)
!36 = !{i32 2, !"Dwarf Version", i32 4}
!37 = !{i32 2, !"Debug Info Version", i32 3}
!38 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!39 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 1, scope: !15, file: !16, line: 35, type: !12)
!40 = !DIExpression()
!41 = !DILocation(line: 35, column: 34, scope: !15)
!42 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "d", arg: 2, scope: !15, file: !16, line: 36, type: !4)
!43 = !DILocation(line: 36, column: 11, scope: !15)
!44 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !15, file: !16, line: 38, type: !9)
!45 = !DILocation(line: 38, column: 18, scope: !15)
!46 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !15, file: !16, line: 39, type: !4)
!47 = !DILocation(line: 39, column: 13, scope: !15)
!48 = !DILocation(line: 41, column: 9, scope: !15)
!49 = !DILocation(line: 41, column: 9, scope: !50)
!50 = !DILexicalBlockFile(scope: !15, file: !16, discriminator: 1)
!51 = !DILocation(line: 41, column: 9, scope: !52)
!52 = !DILexicalBlockFile(scope: !15, file: !16, discriminator: 2)
!53 = !DILocation(line: 42, column: 7, scope: !54)
!54 = distinct !DILexicalBlock(scope: !15, file: !16, line: 42, column: 7)
!55 = !DILocation(line: 42, column: 9, scope: !54)
!56 = !DILocation(line: 42, column: 7, scope: !15)
!57 = !DILocation(line: 43, column: 9, scope: !58)
!58 = distinct !DILexicalBlock(scope: !59, file: !16, line: 43, column: 9)
!59 = distinct !DILexicalBlock(scope: !54, file: !16, line: 42, column: 15)
!60 = !DILocation(line: 43, column: 9, scope: !59)
!61 = !DILocation(line: 44, column: 7, scope: !62)
!62 = distinct !DILexicalBlock(scope: !58, file: !16, line: 43, column: 19)
!63 = !DILocation(line: 45, column: 11, scope: !64)
!64 = distinct !DILexicalBlock(scope: !62, file: !16, line: 45, column: 11)
!65 = !DILocation(line: 45, column: 11, scope: !62)
!66 = !DILocation(line: 46, column: 42, scope: !67)
!67 = distinct !DILexicalBlock(scope: !64, file: !16, line: 45, column: 21)
!68 = !DILocation(line: 46, column: 27, scope: !67)
!69 = !DILocation(line: 46, column: 45, scope: !67)
!70 = !DILocation(line: 46, column: 25, scope: !67)
!71 = !DILocation(line: 46, column: 15, scope: !67)
!72 = !DILocation(line: 46, column: 13, scope: !67)
!73 = !DILocation(line: 47, column: 7, scope: !67)
!74 = !DILocation(line: 48, column: 13, scope: !75)
!75 = distinct !DILexicalBlock(scope: !64, file: !16, line: 47, column: 14)
!76 = !DILocation(line: 50, column: 5, scope: !62)
!77 = !DILocation(line: 51, column: 7, scope: !78)
!78 = distinct !DILexicalBlock(scope: !58, file: !16, line: 50, column: 12)
!79 = !DILocation(line: 52, column: 16, scope: !80)
!80 = distinct !DILexicalBlock(scope: !78, file: !16, line: 52, column: 11)
!81 = !DILocation(line: 52, column: 11, scope: !80)
!82 = !DILocation(line: 52, column: 11, scope: !78)
!83 = !DILocation(line: 53, column: 13, scope: !84)
!84 = distinct !DILexicalBlock(scope: !80, file: !16, line: 52, column: 20)
!85 = !DILocation(line: 54, column: 7, scope: !84)
!86 = !DILocation(line: 55, column: 24, scope: !87)
!87 = distinct !DILexicalBlock(scope: !88, file: !16, line: 55, column: 13)
!88 = distinct !DILexicalBlock(scope: !80, file: !16, line: 54, column: 14)
!89 = !DILocation(line: 55, column: 18, scope: !87)
!90 = !DILocation(line: 55, column: 13, scope: !87)
!91 = !DILocation(line: 55, column: 13, scope: !88)
!92 = !DILocation(line: 56, column: 15, scope: !93)
!93 = distinct !DILexicalBlock(scope: !87, file: !16, line: 55, column: 29)
!94 = !DILocation(line: 57, column: 9, scope: !93)
!95 = !DILocation(line: 58, column: 15, scope: !96)
!96 = distinct !DILexicalBlock(scope: !87, file: !16, line: 57, column: 16)
!97 = !DILocation(line: 62, column: 3, scope: !59)
!98 = !DILocation(line: 63, column: 5, scope: !99)
!99 = distinct !DILexicalBlock(scope: !54, file: !16, line: 62, column: 10)
!100 = !DILocation(line: 65, column: 7, scope: !101)
!101 = distinct !DILexicalBlock(scope: !99, file: !16, line: 65, column: 7)
!102 = !DILocation(line: 65, column: 7, scope: !99)
!103 = !DILocation(line: 66, column: 23, scope: !104)
!104 = distinct !DILexicalBlock(scope: !101, file: !16, line: 65, column: 54)
!105 = !DILocation(line: 66, column: 27, scope: !104)
!106 = !DILocation(line: 66, column: 25, scope: !104)
!107 = !DILocation(line: 66, column: 15, scope: !104)
!108 = !DILocation(line: 66, column: 41, scope: !104)
!109 = !DILocation(line: 66, column: 34, scope: !104)
!110 = !DILocation(line: 66, column: 46, scope: !104)
!111 = !DILocation(line: 66, column: 44, scope: !104)
!112 = !DILocation(line: 66, column: 33, scope: !104)
!113 = !DILocation(line: 66, column: 48, scope: !104)
!114 = !DILocation(line: 66, column: 30, scope: !104)
!115 = !DILocation(line: 66, column: 13, scope: !104)
!116 = !DILocation(line: 67, column: 7, scope: !104)
!117 = !DILocation(line: 69, column: 11, scope: !118)
!118 = distinct !DILexicalBlock(scope: !101, file: !16, line: 68, column: 10)
!119 = !DILocation(line: 73, column: 3, scope: !15)
!120 = !DILocation(line: 73, column: 3, scope: !50)
!121 = !DILocation(line: 73, column: 3, scope: !122)
!122 = !DILexicalBlockFile(scope: !15, file: !16, discriminator: 3)
!123 = !DILocation(line: 73, column: 3, scope: !124)
!124 = !DILexicalBlockFile(scope: !52, file: !16, discriminator: 4)
!125 = !DILocation(line: 74, column: 3, scope: !15)
!126 = !DILocation(line: 74, column: 3, scope: !50)
!127 = !DILocation(line: 74, column: 3, scope: !122)
!128 = !DILocation(line: 74, column: 3, scope: !124)
!129 = !DILocation(line: 75, column: 7, scope: !130)
!130 = distinct !DILexicalBlock(scope: !15, file: !16, line: 75, column: 7)
!131 = !DILocation(line: 75, column: 13, scope: !130)
!132 = !DILocation(line: 75, column: 7, scope: !15)
!133 = !DILocation(line: 76, column: 13, scope: !134)
!134 = distinct !DILexicalBlock(scope: !130, file: !16, line: 75, column: 18)
!135 = !DILocation(line: 76, column: 30, scope: !134)
!136 = !DILocation(line: 76, column: 5, scope: !134)
!137 = !DILocation(line: 77, column: 13, scope: !134)
!138 = !DILocation(line: 77, column: 37, scope: !134)
!139 = !DILocation(line: 77, column: 5, scope: !134)
!140 = !DILocation(line: 78, column: 3, scope: !134)
!141 = !DILocation(line: 79, column: 10, scope: !15)
!142 = !DILocation(line: 79, column: 3, scope: !15)
!143 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 1, scope: !19, file: !16, line: 84, type: !12)
!144 = !DILocation(line: 84, column: 10, scope: !19)
!145 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 2, scope: !19, file: !16, line: 83, type: !4)
!146 = !DILocation(line: 83, column: 15, scope: !19)
!147 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "k", arg: 3, scope: !19, file: !16, line: 84, type: !12)
!148 = !DILocation(line: 84, column: 13, scope: !19)
!149 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !19, file: !16, line: 86, type: !9)
!150 = !DILocation(line: 86, column: 18, scope: !19)
!151 = !DILocation(line: 88, column: 9, scope: !19)
!152 = !DILocation(line: 88, column: 9, scope: !153)
!153 = !DILexicalBlockFile(scope: !19, file: !16, discriminator: 1)
!154 = !DILocation(line: 88, column: 9, scope: !155)
!155 = !DILexicalBlockFile(scope: !19, file: !16, discriminator: 2)
!156 = !DILocation(line: 96, column: 21, scope: !19)
!157 = !DILocation(line: 96, column: 34, scope: !19)
!158 = !DILocation(line: 96, column: 29, scope: !19)
!159 = !DILocation(line: 96, column: 38, scope: !19)
!160 = !DILocation(line: 96, column: 24, scope: !19)
!161 = !DILocation(line: 96, column: 9, scope: !19)
!162 = !DILocation(line: 96, column: 56, scope: !19)
!163 = !DILocation(line: 96, column: 48, scope: !19)
!164 = !DILocation(line: 96, column: 44, scope: !19)
!165 = !DILocation(line: 96, column: 42, scope: !19)
!166 = !DILocation(line: 96, column: 7, scope: !19)
!167 = !DILocation(line: 99, column: 3, scope: !19)
!168 = !DILocation(line: 99, column: 3, scope: !153)
!169 = !DILocation(line: 99, column: 3, scope: !170)
!170 = !DILexicalBlockFile(scope: !19, file: !16, discriminator: 3)
!171 = !DILocation(line: 99, column: 3, scope: !172)
!172 = !DILexicalBlockFile(scope: !155, file: !16, discriminator: 4)
!173 = !DILocation(line: 100, column: 10, scope: !19)
!174 = !DILocation(line: 100, column: 3, scope: !19)
!175 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !22, file: !16, line: 112, type: !4)
!176 = !DILocation(line: 112, column: 15, scope: !22)
!177 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 2, scope: !22, file: !16, line: 113, type: !11)
!178 = !DILocation(line: 113, column: 20, scope: !22)
!179 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "aborts", arg: 3, scope: !22, file: !16, line: 114, type: !12)
!180 = !DILocation(line: 114, column: 10, scope: !22)
!181 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxk", arg: 4, scope: !22, file: !16, line: 114, type: !12)
!182 = !DILocation(line: 114, column: 18, scope: !22)
!183 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !22, file: !16, line: 116, type: !12)
!184 = !DILocation(line: 116, column: 12, scope: !22)
!185 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bestk", scope: !22, file: !16, line: 116, type: !12)
!186 = !DILocation(line: 116, column: 15, scope: !22)
!187 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !22, file: !16, line: 116, type: !12)
!188 = !DILocation(line: 116, column: 26, scope: !22)
!189 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bestcount", scope: !22, file: !16, line: 116, type: !12)
!190 = !DILocation(line: 116, column: 33, scope: !22)
!191 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "maxpm", scope: !22, file: !16, line: 116, type: !12)
!192 = !DILocation(line: 116, column: 48, scope: !22)
!193 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sum", scope: !22, file: !16, line: 117, type: !9)
!194 = !DILocation(line: 117, column: 9, scope: !22)
!195 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "max", scope: !22, file: !16, line: 117, type: !9)
!196 = !DILocation(line: 117, column: 14, scope: !22)
!197 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !22, file: !16, line: 118, type: !11)
!198 = !DILocation(line: 118, column: 13, scope: !22)
!199 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !22, file: !16, line: 119, type: !12)
!200 = !DILocation(line: 119, column: 21, scope: !22)
!201 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "primePtr", scope: !22, file: !16, line: 120, type: !202)
!202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!203 = !DILocation(line: 120, column: 28, scope: !22)
!204 = !DILocation(line: 122, column: 9, scope: !22)
!205 = !DILocation(line: 122, column: 9, scope: !206)
!206 = !DILexicalBlockFile(scope: !22, file: !16, discriminator: 1)
!207 = !DILocation(line: 122, column: 9, scope: !208)
!208 = !DILexicalBlockFile(scope: !22, file: !16, discriminator: 2)
!209 = !DILocation(line: 124, column: 10, scope: !210)
!210 = distinct !DILexicalBlock(scope: !22, file: !16, line: 124, column: 3)
!211 = !DILocation(line: 124, column: 8, scope: !210)
!212 = !DILocation(line: 124, column: 15, scope: !213)
!213 = !DILexicalBlockFile(scope: !214, file: !16, discriminator: 2)
!214 = !DILexicalBlockFile(scope: !215, file: !16, discriminator: 1)
!215 = distinct !DILexicalBlock(scope: !210, file: !16, line: 124, column: 3)
!216 = !DILocation(line: 124, column: 19, scope: !215)
!217 = !DILocation(line: 124, column: 17, scope: !215)
!218 = !DILocation(line: 124, column: 3, scope: !210)
!219 = !DILocation(line: 125, column: 9, scope: !220)
!220 = distinct !DILexicalBlock(scope: !221, file: !16, line: 125, column: 9)
!221 = distinct !DILexicalBlock(scope: !215, file: !16, line: 124, column: 30)
!222 = !DILocation(line: 125, column: 9, scope: !221)
!223 = !DILocation(line: 126, column: 22, scope: !224)
!224 = distinct !DILexicalBlock(scope: !220, file: !16, line: 125, column: 16)
!225 = !DILocation(line: 126, column: 7, scope: !224)
!226 = !DILocation(line: 127, column: 13, scope: !224)
!227 = !DILocation(line: 127, column: 31, scope: !224)
!228 = !DILocation(line: 127, column: 26, scope: !224)
!229 = !DILocation(line: 127, column: 35, scope: !224)
!230 = !DILocation(line: 127, column: 21, scope: !224)
!231 = !DILocation(line: 127, column: 7, scope: !224)
!232 = !DILocation(line: 128, column: 7, scope: !224)
!233 = !DILocation(line: 129, column: 5, scope: !224)
!234 = !DILocation(line: 130, column: 14, scope: !221)
!235 = !DILocation(line: 130, column: 13, scope: !221)
!236 = !DILocation(line: 130, column: 11, scope: !221)
!237 = !DILocation(line: 131, column: 21, scope: !221)
!238 = !DILocation(line: 131, column: 24, scope: !221)
!239 = !DILocation(line: 131, column: 35, scope: !221)
!240 = !DILocation(line: 131, column: 9, scope: !221)
!241 = !DILocation(line: 131, column: 7, scope: !221)
!242 = !DILocation(line: 132, column: 9, scope: !243)
!243 = distinct !DILexicalBlock(scope: !221, file: !16, line: 132, column: 9)
!244 = !DILocation(line: 132, column: 11, scope: !243)
!245 = !DILocation(line: 132, column: 9, scope: !221)
!246 = !DILocation(line: 133, column: 15, scope: !247)
!247 = distinct !DILexicalBlock(scope: !243, file: !16, line: 132, column: 29)
!248 = !DILocation(line: 133, column: 7, scope: !247)
!249 = !DILocation(line: 134, column: 7, scope: !247)
!250 = !DILocation(line: 137, column: 15, scope: !221)
!251 = !DILocation(line: 137, column: 21, scope: !221)
!252 = !DILocation(line: 137, column: 13, scope: !221)
!253 = !DILocation(line: 137, column: 11, scope: !221)
!254 = !DILocation(line: 139, column: 9, scope: !221)
!255 = !DILocation(line: 140, column: 14, scope: !221)
!256 = !DILocation(line: 141, column: 5, scope: !221)
!257 = !DILocation(line: 141, column: 13, scope: !258)
!258 = !DILexicalBlockFile(scope: !259, file: !16, discriminator: 2)
!259 = !DILexicalBlockFile(scope: !221, file: !16, discriminator: 1)
!260 = !DILocation(line: 141, column: 12, scope: !221)
!261 = !DILocation(line: 141, column: 25, scope: !221)
!262 = !DILocation(line: 141, column: 22, scope: !221)
!263 = !DILocation(line: 142, column: 39, scope: !264)
!264 = distinct !DILexicalBlock(scope: !221, file: !16, line: 141, column: 32)
!265 = !DILocation(line: 142, column: 30, scope: !264)
!266 = !DILocation(line: 142, column: 20, scope: !264)
!267 = !DILocation(line: 142, column: 43, scope: !264)
!268 = !DILocation(line: 142, column: 46, scope: !264)
!269 = !DILocation(line: 142, column: 14, scope: !264)
!270 = !DILocation(line: 142, column: 11, scope: !264)
!271 = !DILocation(line: 144, column: 24, scope: !221)
!272 = !DILocation(line: 144, column: 16, scope: !221)
!273 = !DILocation(line: 144, column: 12, scope: !221)
!274 = !DILocation(line: 144, column: 27, scope: !221)
!275 = !DILocation(line: 144, column: 9, scope: !221)
!276 = !DILocation(line: 145, column: 9, scope: !277)
!277 = distinct !DILexicalBlock(scope: !221, file: !16, line: 145, column: 9)
!278 = !DILocation(line: 145, column: 17, scope: !277)
!279 = !DILocation(line: 145, column: 9, scope: !221)
!280 = !DILocation(line: 146, column: 15, scope: !277)
!281 = !DILocation(line: 146, column: 36, scope: !277)
!282 = !DILocation(line: 146, column: 39, scope: !277)
!283 = !DILocation(line: 146, column: 7, scope: !277)
!284 = !DILocation(line: 147, column: 9, scope: !285)
!285 = distinct !DILexicalBlock(scope: !221, file: !16, line: 147, column: 9)
!286 = !DILocation(line: 147, column: 9, scope: !221)
!287 = !DILocation(line: 148, column: 15, scope: !285)
!288 = !DILocation(line: 148, column: 54, scope: !285)
!289 = !DILocation(line: 148, column: 46, scope: !285)
!290 = !DILocation(line: 148, column: 42, scope: !285)
!291 = !DILocation(line: 148, column: 57, scope: !285)
!292 = !DILocation(line: 148, column: 7, scope: !285)
!293 = !DILocation(line: 149, column: 9, scope: !294)
!294 = distinct !DILexicalBlock(scope: !221, file: !16, line: 149, column: 9)
!295 = !DILocation(line: 149, column: 17, scope: !294)
!296 = !DILocation(line: 149, column: 9, scope: !221)
!297 = !DILocation(line: 150, column: 19, scope: !298)
!298 = distinct !DILexicalBlock(scope: !294, file: !16, line: 149, column: 22)
!299 = !DILocation(line: 150, column: 7, scope: !298)
!300 = !DILocation(line: 151, column: 14, scope: !298)
!301 = !DILocation(line: 151, column: 7, scope: !298)
!302 = !DILocation(line: 152, column: 5, scope: !298)
!303 = !DILocation(line: 153, column: 9, scope: !304)
!304 = distinct !DILexicalBlock(scope: !221, file: !16, line: 153, column: 9)
!305 = !DILocation(line: 153, column: 15, scope: !304)
!306 = !DILocation(line: 153, column: 13, scope: !304)
!307 = !DILocation(line: 153, column: 9, scope: !221)
!308 = !DILocation(line: 154, column: 13, scope: !309)
!309 = distinct !DILexicalBlock(scope: !304, file: !16, line: 153, column: 20)
!310 = !DILocation(line: 154, column: 11, scope: !309)
!311 = !DILocation(line: 155, column: 15, scope: !309)
!312 = !DILocation(line: 155, column: 13, scope: !309)
!313 = !DILocation(line: 156, column: 19, scope: !309)
!314 = !DILocation(line: 156, column: 17, scope: !309)
!315 = !DILocation(line: 157, column: 5, scope: !309)
!316 = !DILocation(line: 159, column: 10, scope: !221)
!317 = !DILocation(line: 159, column: 5, scope: !221)
!318 = !DILocation(line: 161, column: 3, scope: !221)
!319 = !DILocation(line: 124, column: 26, scope: !215)
!320 = !DILocation(line: 124, column: 3, scope: !215)
!321 = !DILocation(line: 163, column: 8, scope: !22)
!322 = !DILocation(line: 163, column: 4, scope: !22)
!323 = !DILocation(line: 163, column: 6, scope: !22)
!324 = !DILocation(line: 164, column: 3, scope: !22)
!325 = !DILocation(line: 164, column: 3, scope: !206)
!326 = !DILocation(line: 164, column: 3, scope: !327)
!327 = !DILexicalBlockFile(scope: !22, file: !16, discriminator: 3)
!328 = !DILocation(line: 164, column: 3, scope: !329)
!329 = !DILexicalBlockFile(scope: !208, file: !16, discriminator: 4)
!330 = !DILocation(line: 165, column: 10, scope: !22)
!331 = !DILocation(line: 165, column: 3, scope: !22)
!332 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !25, file: !16, line: 175, type: !28)
!333 = !DILocation(line: 175, column: 26, scope: !25)
!334 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !25, file: !16, line: 176, type: !29)
!335 = !DILocation(line: 176, column: 7, scope: !25)
!336 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !25, file: !16, line: 178, type: !12)
!337 = !DILocation(line: 178, column: 12, scope: !25)
!338 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !25, file: !16, line: 178, type: !12)
!339 = !DILocation(line: 178, column: 19, scope: !25)
!340 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "maxCount", scope: !25, file: !16, line: 179, type: !12)
!341 = !DILocation(line: 179, column: 12, scope: !25)
!342 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !25, file: !16, line: 179, type: !12)
!343 = !DILocation(line: 179, column: 32, scope: !25)
!344 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "maxk", scope: !25, file: !16, line: 179, type: !12)
!345 = !DILocation(line: 179, column: 39, scope: !25)
!346 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ch", scope: !25, file: !16, line: 180, type: !28)
!347 = !DILocation(line: 180, column: 7, scope: !25)
!348 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !25, file: !16, line: 181, type: !4)
!349 = !DILocation(line: 181, column: 13, scope: !25)
!350 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "f", scope: !25, file: !16, line: 181, type: !4)
!351 = !DILocation(line: 181, column: 25, scope: !25)
!352 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "aborts", scope: !25, file: !16, line: 182, type: !12)
!353 = !DILocation(line: 182, column: 12, scope: !25)
!354 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !25, file: !16, line: 183, type: !11)
!355 = !DILocation(line: 183, column: 13, scope: !25)
!356 = !DILocation(line: 185, column: 15, scope: !25)
!357 = !DILocation(line: 185, column: 14, scope: !25)
!358 = !DILocation(line: 185, column: 12, scope: !25)
!359 = !DILocation(line: 187, column: 3, scope: !25)
!360 = !DILocation(line: 187, column: 23, scope: !361)
!361 = !DILexicalBlockFile(scope: !362, file: !16, discriminator: 2)
!362 = !DILexicalBlockFile(scope: !25, file: !16, discriminator: 1)
!363 = !DILocation(line: 187, column: 29, scope: !25)
!364 = !DILocation(line: 187, column: 16, scope: !25)
!365 = !DILocation(line: 187, column: 14, scope: !25)
!366 = !DILocation(line: 187, column: 48, scope: !25)
!367 = !DILocation(line: 188, column: 13, scope: !25)
!368 = !DILocation(line: 188, column: 5, scope: !25)
!369 = !DILocation(line: 190, column: 21, scope: !370)
!370 = distinct !DILexicalBlock(scope: !25, file: !16, line: 188, column: 17)
!371 = !DILocation(line: 190, column: 16, scope: !370)
!372 = !DILocation(line: 190, column: 14, scope: !370)
!373 = !DILocation(line: 191, column: 7, scope: !370)
!374 = !DILocation(line: 193, column: 19, scope: !370)
!375 = !DILocation(line: 193, column: 14, scope: !370)
!376 = !DILocation(line: 193, column: 12, scope: !370)
!377 = !DILocation(line: 194, column: 7, scope: !370)
!378 = !DILocation(line: 196, column: 23, scope: !370)
!379 = !DILocation(line: 196, column: 18, scope: !370)
!380 = !DILocation(line: 196, column: 16, scope: !370)
!381 = !DILocation(line: 197, column: 7, scope: !370)
!382 = !DILocation(line: 199, column: 12, scope: !370)
!383 = !DILocation(line: 200, column: 7, scope: !370)
!384 = !DILocation(line: 202, column: 14, scope: !370)
!385 = !DILocation(line: 203, column: 7, scope: !370)
!386 = !DILocation(line: 206, column: 15, scope: !370)
!387 = !DILocation(line: 208, column: 15, scope: !370)
!388 = !DILocation(line: 206, column: 7, scope: !370)
!389 = !DILocation(line: 209, column: 7, scope: !370)
!390 = !DILocation(line: 211, column: 11, scope: !25)
!391 = !DILocation(line: 211, column: 8, scope: !25)
!392 = !DILocation(line: 212, column: 11, scope: !25)
!393 = !DILocation(line: 212, column: 8, scope: !25)
!394 = !DILocation(line: 214, column: 7, scope: !395)
!395 = distinct !DILexicalBlock(scope: !25, file: !16, line: 214, column: 7)
!396 = !DILocation(line: 214, column: 12, scope: !395)
!397 = !DILocation(line: 214, column: 16, scope: !395)
!398 = !DILocation(line: 214, column: 19, scope: !399)
!399 = !DILexicalBlockFile(scope: !395, file: !16, discriminator: 1)
!400 = !DILocation(line: 214, column: 24, scope: !395)
!401 = !DILocation(line: 214, column: 7, scope: !25)
!402 = !DILocation(line: 215, column: 5, scope: !395)
!403 = !DILocation(line: 217, column: 3, scope: !25)
!404 = !DILocation(line: 218, column: 3, scope: !25)
!405 = !DILocation(line: 219, column: 7, scope: !406)
!406 = distinct !DILexicalBlock(scope: !25, file: !16, line: 219, column: 7)
!407 = !DILocation(line: 219, column: 7, scope: !25)
!408 = !DILocation(line: 220, column: 19, scope: !409)
!409 = distinct !DILexicalBlock(scope: !406, file: !16, line: 219, column: 13)
!410 = !DILocation(line: 220, column: 14, scope: !409)
!411 = !DILocation(line: 220, column: 9, scope: !409)
!412 = !DILocation(line: 220, column: 7, scope: !409)
!413 = !DILocation(line: 221, column: 5, scope: !409)
!414 = !DILocation(line: 222, column: 3, scope: !409)
!415 = !DILocation(line: 223, column: 7, scope: !416)
!416 = distinct !DILexicalBlock(scope: !25, file: !16, line: 223, column: 7)
!417 = !DILocation(line: 223, column: 7, scope: !25)
!418 = !DILocation(line: 224, column: 19, scope: !419)
!419 = distinct !DILexicalBlock(scope: !416, file: !16, line: 223, column: 13)
!420 = !DILocation(line: 224, column: 14, scope: !419)
!421 = !DILocation(line: 224, column: 9, scope: !419)
!422 = !DILocation(line: 224, column: 7, scope: !419)
!423 = !DILocation(line: 225, column: 5, scope: !419)
!424 = !DILocation(line: 226, column: 3, scope: !419)
!425 = !DILocation(line: 228, column: 7, scope: !426)
!426 = distinct !DILexicalBlock(scope: !25, file: !16, line: 228, column: 7)
!427 = !DILocation(line: 228, column: 9, scope: !426)
!428 = !DILocation(line: 228, column: 7, scope: !25)
!429 = !DILocation(line: 229, column: 9, scope: !430)
!430 = distinct !DILexicalBlock(scope: !431, file: !16, line: 229, column: 9)
!431 = distinct !DILexicalBlock(scope: !426, file: !16, line: 228, column: 15)
!432 = !DILocation(line: 229, column: 14, scope: !430)
!433 = !DILocation(line: 229, column: 9, scope: !431)
!434 = !DILocation(line: 230, column: 14, scope: !435)
!435 = distinct !DILexicalBlock(scope: !430, file: !16, line: 229, column: 20)
!436 = !DILocation(line: 230, column: 16, scope: !435)
!437 = !DILocation(line: 230, column: 20, scope: !435)
!438 = !DILocation(line: 230, column: 12, scope: !435)
!439 = !DILocation(line: 231, column: 11, scope: !440)
!440 = distinct !DILexicalBlock(scope: !435, file: !16, line: 231, column: 11)
!441 = !DILocation(line: 231, column: 11, scope: !435)
!442 = !DILocation(line: 232, column: 17, scope: !440)
!443 = !DILocation(line: 232, column: 40, scope: !440)
!444 = !DILocation(line: 232, column: 9, scope: !440)
!445 = !DILocation(line: 233, column: 5, scope: !435)
!446 = !DILocation(line: 234, column: 15, scope: !431)
!447 = !DILocation(line: 234, column: 22, scope: !431)
!448 = !DILocation(line: 234, column: 30, scope: !431)
!449 = !DILocation(line: 234, column: 9, scope: !431)
!450 = !DILocation(line: 234, column: 7, scope: !431)
!451 = !DILocation(line: 235, column: 9, scope: !452)
!452 = distinct !DILexicalBlock(scope: !431, file: !16, line: 235, column: 9)
!453 = !DILocation(line: 235, column: 9, scope: !431)
!454 = !DILocation(line: 236, column: 15, scope: !455)
!455 = distinct !DILexicalBlock(scope: !452, file: !16, line: 235, column: 18)
!456 = !DILocation(line: 236, column: 35, scope: !455)
!457 = !DILocation(line: 236, column: 7, scope: !455)
!458 = !DILocation(line: 237, column: 5, scope: !455)
!459 = !DILocation(line: 238, column: 3, scope: !431)
!460 = !DILocation(line: 240, column: 11, scope: !25)
!461 = !DILocation(line: 240, column: 9, scope: !25)
!462 = !DILocation(line: 242, column: 14, scope: !25)
!463 = !DILocation(line: 242, column: 17, scope: !25)
!464 = !DILocation(line: 242, column: 20, scope: !25)
!465 = !DILocation(line: 242, column: 3, scope: !25)
!466 = !DILocation(line: 244, column: 3, scope: !25)
!467 = !DILocation(line: 245, column: 11, scope: !25)
!468 = !DILocation(line: 245, column: 22, scope: !25)
!469 = !DILocation(line: 245, column: 20, scope: !25)
!470 = !DILocation(line: 245, column: 9, scope: !25)
!471 = !DILocation(line: 246, column: 7, scope: !472)
!472 = distinct !DILexicalBlock(scope: !25, file: !16, line: 246, column: 7)
!473 = !DILocation(line: 246, column: 7, scope: !25)
!474 = !DILocation(line: 247, column: 5, scope: !475)
!475 = distinct !DILexicalBlock(scope: !472, file: !16, line: 246, column: 16)
!476 = !DILocation(line: 248, column: 13, scope: !475)
!477 = !DILocation(line: 248, column: 46, scope: !475)
!478 = !DILocation(line: 248, column: 5, scope: !475)
!479 = !DILocation(line: 249, column: 13, scope: !475)
!480 = !DILocation(line: 249, column: 46, scope: !475)
!481 = !DILocation(line: 249, column: 5, scope: !475)
!482 = !DILocation(line: 250, column: 13, scope: !475)
!483 = !DILocation(line: 250, column: 46, scope: !475)
!484 = !DILocation(line: 250, column: 5, scope: !475)
!485 = !DILocation(line: 251, column: 13, scope: !475)
!486 = !DILocation(line: 251, column: 46, scope: !475)
!487 = !DILocation(line: 251, column: 5, scope: !475)
!488 = !DILocation(line: 252, column: 13, scope: !475)
!489 = !DILocation(line: 252, column: 46, scope: !475)
!490 = !DILocation(line: 252, column: 5, scope: !475)
!491 = !DILocation(line: 253, column: 13, scope: !475)
!492 = !DILocation(line: 253, column: 46, scope: !475)
!493 = !DILocation(line: 253, column: 5, scope: !475)
!494 = !DILocation(line: 254, column: 3, scope: !475)
!495 = !DILocation(line: 256, column: 7, scope: !496)
!496 = distinct !DILexicalBlock(scope: !25, file: !16, line: 256, column: 7)
!497 = !DILocation(line: 256, column: 9, scope: !496)
!498 = !DILocation(line: 256, column: 7, scope: !25)
!499 = !DILocation(line: 257, column: 11, scope: !500)
!500 = distinct !DILexicalBlock(scope: !496, file: !16, line: 256, column: 20)
!501 = !DILocation(line: 257, column: 19, scope: !500)
!502 = !DILocation(line: 257, column: 5, scope: !500)
!503 = !DILocation(line: 258, column: 18, scope: !500)
!504 = !DILocation(line: 258, column: 5, scope: !500)
!505 = !DILocation(line: 259, column: 11, scope: !500)
!506 = !DILocation(line: 259, column: 19, scope: !500)
!507 = !DILocation(line: 259, column: 5, scope: !500)
!508 = !DILocation(line: 260, column: 18, scope: !500)
!509 = !DILocation(line: 260, column: 5, scope: !500)
!510 = !DILocation(line: 261, column: 13, scope: !500)
!511 = !DILocation(line: 261, column: 16, scope: !500)
!512 = !DILocation(line: 261, column: 5, scope: !500)
!513 = !DILocation(line: 262, column: 11, scope: !500)
!514 = !DILocation(line: 262, column: 19, scope: !500)
!515 = !DILocation(line: 262, column: 5, scope: !500)
!516 = !DILocation(line: 263, column: 5, scope: !500)
!517 = !DILocation(line: 264, column: 3, scope: !500)
!518 = !DILocation(line: 266, column: 3, scope: !25)
!519 = !DILocation(line: 266, column: 3, scope: !362)
!520 = !DILocation(line: 266, column: 3, scope: !521)
!521 = !DILexicalBlockFile(scope: !25, file: !16, discriminator: 3)
!522 = !DILocation(line: 266, column: 3, scope: !523)
!523 = !DILexicalBlockFile(scope: !524, file: !16, discriminator: 4)
!524 = !DILexicalBlockFile(scope: !25, file: !16, discriminator: 2)
!525 = !DILocation(line: 267, column: 3, scope: !25)
!526 = !DILocation(line: 267, column: 3, scope: !362)
!527 = !DILocation(line: 267, column: 3, scope: !521)
!528 = !DILocation(line: 267, column: 3, scope: !523)
!529 = !DILocation(line: 269, column: 3, scope: !25)
!530 = !DILocation(line: 270, column: 1, scope: !25)
