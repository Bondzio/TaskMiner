; ModuleID = '/home/gleison/tf/Benchmarks/McCat/03-testtrie/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.charsequence = type { i8*, i64, i64 }
%struct.trie_s = type { [26 x %struct.trie_s*], i32 }

@stderr = external global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [14 x i8] c"Out of memory\00", align 1
@trie_scan_buffer = global %struct.charsequence zeroinitializer, align 8

; Function Attrs: nounwind uwtable
define %struct.trie_s* @trie_init() #0 {
entry:
  %t = alloca %struct.trie_s*, align 8
  call void @llvm.dbg.declare(metadata %struct.trie_s** %t, metadata !51, metadata !52), !dbg !53
  %call = call noalias i8* @calloc(i64 1, i64 216) #5, !dbg !54
  %0 = bitcast i8* %call to %struct.trie_s*, !dbg !54
  store %struct.trie_s* %0, %struct.trie_s** %t, align 8, !dbg !56
  %cmp = icmp eq %struct.trie_s* %0, null, !dbg !57
  br i1 %cmp, label %if.then, label %if.end, !dbg !58

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !59
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0)), !dbg !59
  call void @exit(i32 1) #6, !dbg !61
  unreachable, !dbg !61

if.end:                                           ; preds = %entry
  %2 = load %struct.trie_s*, %struct.trie_s** %t, align 8, !dbg !62
  ret %struct.trie_s* %2, !dbg !63
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

; Function Attrs: nounwind uwtable
define %struct.trie_s* @trie_insert(%struct.trie_s* %t, i8* %s) #0 {
entry:
  %t.addr = alloca %struct.trie_s*, align 8
  %s.addr = alloca i8*, align 8
  store %struct.trie_s* %t, %struct.trie_s** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.trie_s** %t.addr, metadata !64, metadata !52), !dbg !65
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !66, metadata !52), !dbg !67
  %0 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !68
  %cmp = icmp eq %struct.trie_s* %0, null, !dbg !70
  br i1 %cmp, label %if.then, label %if.end, !dbg !71

if.then:                                          ; preds = %entry
  %call = call %struct.trie_s* @trie_init(), !dbg !72
  store %struct.trie_s* %call, %struct.trie_s** %t.addr, align 8, !dbg !73
  br label %if.end, !dbg !74

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8*, i8** %s.addr, align 8, !dbg !75
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !75
  %2 = load i8, i8* %arrayidx, align 1, !dbg !75
  %conv = sext i8 %2 to i32, !dbg !75
  %cmp1 = icmp eq i32 %conv, 0, !dbg !77
  br i1 %cmp1, label %if.then.3, label %if.else, !dbg !78

if.then.3:                                        ; preds = %if.end
  %3 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !79
  %number = getelementptr inbounds %struct.trie_s, %struct.trie_s* %3, i32 0, i32 1, !dbg !80
  %4 = load i32, i32* %number, align 4, !dbg !81
  %inc = add nsw i32 %4, 1, !dbg !81
  store i32 %inc, i32* %number, align 4, !dbg !81
  br label %if.end.16, !dbg !79

if.else:                                          ; preds = %if.end
  %5 = load i8*, i8** %s.addr, align 8, !dbg !82
  %arrayidx4 = getelementptr inbounds i8, i8* %5, i64 0, !dbg !82
  %6 = load i8, i8* %arrayidx4, align 1, !dbg !82
  %conv5 = sext i8 %6 to i32, !dbg !82
  %call6 = call i32 @tolower(i32 %conv5) #5, !dbg !82
  %sub = sub nsw i32 %call6, 97, !dbg !82
  %idxprom = sext i32 %sub to i64, !dbg !83
  %7 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !83
  %next = getelementptr inbounds %struct.trie_s, %struct.trie_s* %7, i32 0, i32 0, !dbg !84
  %arrayidx7 = getelementptr inbounds [26 x %struct.trie_s*], [26 x %struct.trie_s*]* %next, i32 0, i64 %idxprom, !dbg !83
  %8 = load %struct.trie_s*, %struct.trie_s** %arrayidx7, align 8, !dbg !83
  %9 = load i8*, i8** %s.addr, align 8, !dbg !85
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 1, !dbg !86
  %call8 = call %struct.trie_s* @trie_insert(%struct.trie_s* %8, i8* %add.ptr), !dbg !87
  %10 = load i8*, i8** %s.addr, align 8, !dbg !88
  %arrayidx9 = getelementptr inbounds i8, i8* %10, i64 0, !dbg !88
  %11 = load i8, i8* %arrayidx9, align 1, !dbg !88
  %conv10 = sext i8 %11 to i32, !dbg !88
  %call11 = call i32 @tolower(i32 %conv10) #5, !dbg !88
  %sub12 = sub nsw i32 %call11, 97, !dbg !88
  %idxprom13 = sext i32 %sub12 to i64, !dbg !89
  %12 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !89
  %next14 = getelementptr inbounds %struct.trie_s, %struct.trie_s* %12, i32 0, i32 0, !dbg !90
  %arrayidx15 = getelementptr inbounds [26 x %struct.trie_s*], [26 x %struct.trie_s*]* %next14, i32 0, i64 %idxprom13, !dbg !89
  store %struct.trie_s* %call8, %struct.trie_s** %arrayidx15, align 8, !dbg !91
  br label %if.end.16

if.end.16:                                        ; preds = %if.else, %if.then.3
  %13 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !92
  ret %struct.trie_s* %13, !dbg !93
}

; Function Attrs: nounwind
declare i32 @tolower(i32) #2

; Function Attrs: nounwind uwtable
define i32 @trie_lookup(%struct.trie_s* %t, i8* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.trie_s*, align 8
  %s.addr = alloca i8*, align 8
  store %struct.trie_s* %t, %struct.trie_s** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.trie_s** %t.addr, metadata !94, metadata !52), !dbg !95
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !96, metadata !52), !dbg !97
  %0 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !98
  %cmp = icmp eq %struct.trie_s* %0, null, !dbg !100
  br i1 %cmp, label %if.then, label %if.end, !dbg !101

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !102
  br label %return, !dbg !102

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 8, !dbg !103
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !103
  %2 = load i8, i8* %arrayidx, align 1, !dbg !103
  %conv = sext i8 %2 to i32, !dbg !103
  %cmp1 = icmp eq i32 %conv, 0, !dbg !105
  br i1 %cmp1, label %if.then.3, label %if.else, !dbg !106

if.then.3:                                        ; preds = %if.end
  %3 = load i8*, i8** %s.addr, align 8, !dbg !107
  %arrayidx4 = getelementptr inbounds i8, i8* %3, i64 0, !dbg !107
  %4 = load i8, i8* %arrayidx4, align 1, !dbg !107
  %conv5 = sext i8 %4 to i32, !dbg !107
  %call = call i32 @tolower(i32 %conv5) #5, !dbg !107
  %sub = sub nsw i32 %call, 97, !dbg !107
  %idxprom = sext i32 %sub to i64, !dbg !108
  %5 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !108
  %next = getelementptr inbounds %struct.trie_s, %struct.trie_s* %5, i32 0, i32 0, !dbg !109
  %arrayidx6 = getelementptr inbounds [26 x %struct.trie_s*], [26 x %struct.trie_s*]* %next, i32 0, i64 %idxprom, !dbg !108
  %6 = load %struct.trie_s*, %struct.trie_s** %arrayidx6, align 8, !dbg !108
  %number = getelementptr inbounds %struct.trie_s, %struct.trie_s* %6, i32 0, i32 1, !dbg !110
  %7 = load i32, i32* %number, align 4, !dbg !110
  store i32 %7, i32* %retval, !dbg !111
  br label %return, !dbg !111

if.else:                                          ; preds = %if.end
  %8 = load i8*, i8** %s.addr, align 8, !dbg !112
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 0, !dbg !112
  %9 = load i8, i8* %arrayidx7, align 1, !dbg !112
  %conv8 = sext i8 %9 to i32, !dbg !112
  %call9 = call i32 @tolower(i32 %conv8) #5, !dbg !112
  %sub10 = sub nsw i32 %call9, 97, !dbg !112
  %idxprom11 = sext i32 %sub10 to i64, !dbg !113
  %10 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !113
  %next12 = getelementptr inbounds %struct.trie_s, %struct.trie_s* %10, i32 0, i32 0, !dbg !114
  %arrayidx13 = getelementptr inbounds [26 x %struct.trie_s*], [26 x %struct.trie_s*]* %next12, i32 0, i64 %idxprom11, !dbg !113
  %11 = load %struct.trie_s*, %struct.trie_s** %arrayidx13, align 8, !dbg !113
  %12 = load i8*, i8** %s.addr, align 8, !dbg !115
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 1, !dbg !116
  %call14 = call i32 @trie_lookup(%struct.trie_s* %11, i8* %add.ptr), !dbg !117
  store i32 %call14, i32* %retval, !dbg !118
  br label %return, !dbg !118

return:                                           ; preds = %if.else, %if.then.3, %if.then
  %13 = load i32, i32* %retval, !dbg !119
  ret i32 %13, !dbg !119
}

; Function Attrs: nounwind uwtable
define void @trie_scan(%struct.trie_s* %t, void (i32, i8*)* %f) #0 {
entry:
  %t.addr = alloca %struct.trie_s*, align 8
  %f.addr = alloca void (i32, i8*)*, align 8
  %str = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.trie_s* %t, %struct.trie_s** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.trie_s** %t.addr, metadata !120, metadata !52), !dbg !121
  store void (i32, i8*)* %f, void (i32, i8*)** %f.addr, align 8
  call void @llvm.dbg.declare(metadata void (i32, i8*)** %f.addr, metadata !122, metadata !52), !dbg !123
  call void @llvm.dbg.declare(metadata i8** %str, metadata !124, metadata !52), !dbg !125
  call void @llvm.dbg.declare(metadata i32* %i, metadata !126, metadata !52), !dbg !127
  %0 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !128
  %cmp = icmp ne %struct.trie_s* %0, null, !dbg !130
  br i1 %cmp, label %if.then, label %if.end.12, !dbg !131

if.then:                                          ; preds = %entry
  %1 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !132
  %number = getelementptr inbounds %struct.trie_s, %struct.trie_s* %1, i32 0, i32 1, !dbg !135
  %2 = load i32, i32* %number, align 4, !dbg !135
  %cmp1 = icmp ne i32 %2, 0, !dbg !136
  br i1 %cmp1, label %if.then.2, label %if.end, !dbg !137

if.then.2:                                        ; preds = %if.then
  %call = call i8* @charsequence_val(%struct.charsequence* @trie_scan_buffer), !dbg !138
  store i8* %call, i8** %str, align 8, !dbg !140
  %3 = load void (i32, i8*)*, void (i32, i8*)** %f.addr, align 8, !dbg !141
  %4 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !142
  %number3 = getelementptr inbounds %struct.trie_s, %struct.trie_s* %4, i32 0, i32 1, !dbg !143
  %5 = load i32, i32* %number3, align 4, !dbg !143
  %6 = load i8*, i8** %str, align 8, !dbg !144
  call void %3(i32 %5, i8* %6), !dbg !141
  %7 = load i8*, i8** %str, align 8, !dbg !145
  call void @free(i8* %7) #5, !dbg !146
  br label %if.end, !dbg !147

if.end:                                           ; preds = %if.then.2, %if.then
  store i32 0, i32* %i, align 4, !dbg !148
  br label %for.cond, !dbg !150

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4, !dbg !151
  %cmp4 = icmp slt i32 %8, 26, !dbg !155
  br i1 %cmp4, label %for.body, label %for.end, !dbg !156

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4, !dbg !157
  %idxprom = sext i32 %9 to i64, !dbg !159
  %10 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !159
  %next = getelementptr inbounds %struct.trie_s, %struct.trie_s* %10, i32 0, i32 0, !dbg !160
  %arrayidx = getelementptr inbounds [26 x %struct.trie_s*], [26 x %struct.trie_s*]* %next, i32 0, i64 %idxprom, !dbg !159
  %11 = load %struct.trie_s*, %struct.trie_s** %arrayidx, align 8, !dbg !159
  %cmp5 = icmp ne %struct.trie_s* %11, null, !dbg !161
  br i1 %cmp5, label %if.then.6, label %if.end.11, !dbg !162

if.then.6:                                        ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !163
  %add = add nsw i32 %12, 97, !dbg !163
  %conv = trunc i32 %add to i8, !dbg !163
  call void @charsequence_push(%struct.charsequence* @trie_scan_buffer, i8 signext %conv), !dbg !165
  %13 = load i32, i32* %i, align 4, !dbg !166
  %idxprom7 = sext i32 %13 to i64, !dbg !167
  %14 = load %struct.trie_s*, %struct.trie_s** %t.addr, align 8, !dbg !167
  %next8 = getelementptr inbounds %struct.trie_s, %struct.trie_s* %14, i32 0, i32 0, !dbg !168
  %arrayidx9 = getelementptr inbounds [26 x %struct.trie_s*], [26 x %struct.trie_s*]* %next8, i32 0, i64 %idxprom7, !dbg !167
  %15 = load %struct.trie_s*, %struct.trie_s** %arrayidx9, align 8, !dbg !167
  %16 = load void (i32, i8*)*, void (i32, i8*)** %f.addr, align 8, !dbg !169
  call void @trie_scan(%struct.trie_s* %15, void (i32, i8*)* %16), !dbg !170
  %call10 = call signext i8 @charsequence_pop(%struct.charsequence* @trie_scan_buffer), !dbg !171
  br label %if.end.11, !dbg !172

if.end.11:                                        ; preds = %if.then.6, %for.body
  br label %for.inc, !dbg !173

for.inc:                                          ; preds = %if.end.11
  %17 = load i32, i32* %i, align 4, !dbg !175
  %inc = add nsw i32 %17, 1, !dbg !175
  store i32 %inc, i32* %i, align 4, !dbg !175
  br label %for.cond, !dbg !176

for.end:                                          ; preds = %for.cond
  br label %if.end.12, !dbg !177

if.end.12:                                        ; preds = %for.end, %entry
  ret void, !dbg !178
}

declare i8* @charsequence_val(%struct.charsequence*) #3

; Function Attrs: nounwind
declare void @free(i8*) #2

declare void @charsequence_push(%struct.charsequence*, i8 signext) #3

declare signext i8 @charsequence_pop(%struct.charsequence*) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!48, !49}
!llvm.ident = !{!50}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !5, globals: !36)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/McCat/03-testtrie")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!5 = !{!6, !21, !27, !30}
!6 = !DISubprogram(name: "trie_init", scope: !7, file: !7, line: 50, type: !8, isLocal: false, isDefinition: true, scopeLine: 50, flags: DIFlagPrototyped, isOptimized: false, function: %struct.trie_s* ()* @trie_init, variables: !2)
!7 = !DIFile(filename: "/home/gleison/tf/Benchmarks/McCat/03-testtrie/tmp.c", directory: "/home/gleison/tf/Benchmarks/McCat/03-testtrie")
!8 = !DISubroutineType(types: !9)
!9 = !{!10}
!10 = !DIDerivedType(tag: DW_TAG_typedef, name: "trie", file: !11, line: 11, baseType: !12)
!11 = !DIFile(filename: "./trie.h", directory: "/home/gleison/tf/Benchmarks/McCat/03-testtrie")
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64, align: 64)
!13 = !DICompositeType(tag: DW_TAG_structure_type, name: "trie_s", file: !11, line: 8, size: 1728, align: 64, elements: !14)
!14 = !{!15, !19}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !13, file: !11, line: 9, baseType: !16, size: 1664, align: 64)
!16 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 1664, align: 64, elements: !17)
!17 = !{!18}
!18 = !DISubrange(count: 26)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "number", scope: !13, file: !11, line: 10, baseType: !20, size: 32, align: 32, offset: 1664)
!20 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!21 = !DISubprogram(name: "trie_insert", scope: !7, file: !7, line: 62, type: !22, isLocal: false, isDefinition: true, scopeLine: 62, flags: DIFlagPrototyped, isOptimized: false, function: %struct.trie_s* (%struct.trie_s*, i8*)* @trie_insert, variables: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{!10, !10, !24}
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "string", file: !11, line: 13, baseType: !25)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64, align: 64)
!26 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!27 = !DISubprogram(name: "trie_lookup", scope: !7, file: !7, line: 75, type: !28, isLocal: false, isDefinition: true, scopeLine: 75, flags: DIFlagPrototyped, isOptimized: false, function: i32 (%struct.trie_s*, i8*)* @trie_lookup, variables: !2)
!28 = !DISubroutineType(types: !29)
!29 = !{!20, !10, !24}
!30 = !DISubprogram(name: "trie_scan", scope: !7, file: !7, line: 88, type: !31, isLocal: false, isDefinition: true, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.trie_s*, void (i32, i8*)*)* @trie_scan, variables: !2)
!31 = !DISubroutineType(types: !32)
!32 = !{null, !10, !33}
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !34, size: 64, align: 64)
!34 = !DISubroutineType(types: !35)
!35 = !{null, !20, !25}
!36 = !{!37}
!37 = !DIGlobalVariable(name: "trie_scan_buffer", scope: !0, file: !7, line: 85, type: !38, isLocal: false, isDefinition: true, variable: %struct.charsequence* @trie_scan_buffer)
!38 = !DIDerivedType(tag: DW_TAG_typedef, name: "charsequence", file: !39, line: 11, baseType: !40)
!39 = !DIFile(filename: "./charsequence.h", directory: "/home/gleison/tf/Benchmarks/McCat/03-testtrie")
!40 = !DICompositeType(tag: DW_TAG_structure_type, name: "charsequence", file: !39, line: 8, size: 192, align: 64, elements: !41)
!41 = !{!42, !43, !47}
!42 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !40, file: !39, line: 9, baseType: !25, size: 64, align: 64)
!43 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !40, file: !39, line: 10, baseType: !44, size: 64, align: 64, offset: 64)
!44 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !45, line: 62, baseType: !46)
!45 = !DIFile(filename: "/home/gleison/lge/llvm-3.7-src/build-debug/bin/../lib/clang/3.7.0/include/stddef.h", directory: "/home/gleison/tf/Benchmarks/McCat/03-testtrie")
!46 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!47 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !40, file: !39, line: 10, baseType: !44, size: 64, align: 64, offset: 128)
!48 = !{i32 2, !"Dwarf Version", i32 4}
!49 = !{i32 2, !"Debug Info Version", i32 3}
!50 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!51 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !6, file: !7, line: 51, type: !10)
!52 = !DIExpression()
!53 = !DILocation(line: 51, column: 8, scope: !6)
!54 = !DILocation(line: 53, column: 12, scope: !55)
!55 = distinct !DILexicalBlock(scope: !6, file: !7, line: 53, column: 7)
!56 = !DILocation(line: 53, column: 10, scope: !55)
!57 = !DILocation(line: 53, column: 34, scope: !55)
!58 = !DILocation(line: 53, column: 7, scope: !6)
!59 = !DILocation(line: 54, column: 5, scope: !60)
!60 = distinct !DILexicalBlock(scope: !55, file: !7, line: 53, column: 43)
!61 = !DILocation(line: 55, column: 5, scope: !60)
!62 = !DILocation(line: 58, column: 10, scope: !6)
!63 = !DILocation(line: 58, column: 3, scope: !6)
!64 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "t", arg: 1, scope: !21, file: !7, line: 62, type: !10)
!65 = !DILocation(line: 62, column: 23, scope: !21)
!66 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 2, scope: !21, file: !7, line: 62, type: !24)
!67 = !DILocation(line: 62, column: 33, scope: !21)
!68 = !DILocation(line: 63, column: 7, scope: !69)
!69 = distinct !DILexicalBlock(scope: !21, file: !7, line: 63, column: 7)
!70 = !DILocation(line: 63, column: 9, scope: !69)
!71 = !DILocation(line: 63, column: 7, scope: !21)
!72 = !DILocation(line: 64, column: 9, scope: !69)
!73 = !DILocation(line: 64, column: 7, scope: !69)
!74 = !DILocation(line: 64, column: 5, scope: !69)
!75 = !DILocation(line: 66, column: 7, scope: !76)
!76 = distinct !DILexicalBlock(scope: !21, file: !7, line: 66, column: 7)
!77 = !DILocation(line: 66, column: 12, scope: !76)
!78 = !DILocation(line: 66, column: 7, scope: !21)
!79 = !DILocation(line: 67, column: 5, scope: !76)
!80 = !DILocation(line: 67, column: 8, scope: !76)
!81 = !DILocation(line: 67, column: 14, scope: !76)
!82 = !DILocation(line: 69, column: 53, scope: !76)
!83 = !DILocation(line: 69, column: 45, scope: !76)
!84 = !DILocation(line: 69, column: 48, scope: !76)
!85 = !DILocation(line: 69, column: 72, scope: !76)
!86 = !DILocation(line: 69, column: 74, scope: !76)
!87 = !DILocation(line: 69, column: 33, scope: !76)
!88 = !DILocation(line: 69, column: 13, scope: !76)
!89 = !DILocation(line: 69, column: 5, scope: !76)
!90 = !DILocation(line: 69, column: 8, scope: !76)
!91 = !DILocation(line: 69, column: 31, scope: !76)
!92 = !DILocation(line: 71, column: 10, scope: !21)
!93 = !DILocation(line: 71, column: 3, scope: !21)
!94 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "t", arg: 1, scope: !27, file: !7, line: 75, type: !10)
!95 = !DILocation(line: 75, column: 22, scope: !27)
!96 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 2, scope: !27, file: !7, line: 75, type: !24)
!97 = !DILocation(line: 75, column: 32, scope: !27)
!98 = !DILocation(line: 76, column: 7, scope: !99)
!99 = distinct !DILexicalBlock(scope: !27, file: !7, line: 76, column: 7)
!100 = !DILocation(line: 76, column: 9, scope: !99)
!101 = !DILocation(line: 76, column: 7, scope: !27)
!102 = !DILocation(line: 77, column: 5, scope: !99)
!103 = !DILocation(line: 79, column: 7, scope: !104)
!104 = distinct !DILexicalBlock(scope: !27, file: !7, line: 79, column: 7)
!105 = !DILocation(line: 79, column: 12, scope: !104)
!106 = !DILocation(line: 79, column: 7, scope: !27)
!107 = !DILocation(line: 80, column: 21, scope: !104)
!108 = !DILocation(line: 80, column: 13, scope: !104)
!109 = !DILocation(line: 80, column: 16, scope: !104)
!110 = !DILocation(line: 80, column: 41, scope: !104)
!111 = !DILocation(line: 80, column: 5, scope: !104)
!112 = !DILocation(line: 82, column: 33, scope: !104)
!113 = !DILocation(line: 82, column: 25, scope: !104)
!114 = !DILocation(line: 82, column: 28, scope: !104)
!115 = !DILocation(line: 82, column: 52, scope: !104)
!116 = !DILocation(line: 82, column: 54, scope: !104)
!117 = !DILocation(line: 82, column: 13, scope: !104)
!118 = !DILocation(line: 82, column: 5, scope: !104)
!119 = !DILocation(line: 83, column: 1, scope: !27)
!120 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "t", arg: 1, scope: !30, file: !7, line: 88, type: !10)
!121 = !DILocation(line: 88, column: 21, scope: !30)
!122 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "f", arg: 2, scope: !30, file: !7, line: 88, type: !33)
!123 = !DILocation(line: 88, column: 29, scope: !30)
!124 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "str", scope: !30, file: !7, line: 89, type: !25)
!125 = !DILocation(line: 89, column: 9, scope: !30)
!126 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !30, file: !7, line: 90, type: !20)
!127 = !DILocation(line: 90, column: 7, scope: !30)
!128 = !DILocation(line: 91, column: 7, scope: !129)
!129 = distinct !DILexicalBlock(scope: !30, file: !7, line: 91, column: 7)
!130 = !DILocation(line: 91, column: 9, scope: !129)
!131 = !DILocation(line: 91, column: 7, scope: !30)
!132 = !DILocation(line: 92, column: 9, scope: !133)
!133 = distinct !DILexicalBlock(scope: !134, file: !7, line: 92, column: 9)
!134 = distinct !DILexicalBlock(scope: !129, file: !7, line: 91, column: 18)
!135 = !DILocation(line: 92, column: 12, scope: !133)
!136 = !DILocation(line: 92, column: 19, scope: !133)
!137 = !DILocation(line: 92, column: 9, scope: !134)
!138 = !DILocation(line: 93, column: 13, scope: !139)
!139 = distinct !DILexicalBlock(scope: !133, file: !7, line: 92, column: 25)
!140 = !DILocation(line: 93, column: 11, scope: !139)
!141 = !DILocation(line: 94, column: 7, scope: !139)
!142 = !DILocation(line: 94, column: 9, scope: !139)
!143 = !DILocation(line: 94, column: 12, scope: !139)
!144 = !DILocation(line: 94, column: 20, scope: !139)
!145 = !DILocation(line: 95, column: 12, scope: !139)
!146 = !DILocation(line: 95, column: 7, scope: !139)
!147 = !DILocation(line: 96, column: 5, scope: !139)
!148 = !DILocation(line: 97, column: 12, scope: !149)
!149 = distinct !DILexicalBlock(scope: !134, file: !7, line: 97, column: 5)
!150 = !DILocation(line: 97, column: 10, scope: !149)
!151 = !DILocation(line: 97, column: 17, scope: !152)
!152 = !DILexicalBlockFile(scope: !153, file: !7, discriminator: 2)
!153 = !DILexicalBlockFile(scope: !154, file: !7, discriminator: 1)
!154 = distinct !DILexicalBlock(scope: !149, file: !7, line: 97, column: 5)
!155 = !DILocation(line: 97, column: 19, scope: !154)
!156 = !DILocation(line: 97, column: 5, scope: !149)
!157 = !DILocation(line: 98, column: 19, scope: !158)
!158 = distinct !DILexicalBlock(scope: !154, file: !7, line: 98, column: 11)
!159 = !DILocation(line: 98, column: 11, scope: !158)
!160 = !DILocation(line: 98, column: 14, scope: !158)
!161 = !DILocation(line: 98, column: 22, scope: !158)
!162 = !DILocation(line: 98, column: 11, scope: !154)
!163 = !DILocation(line: 99, column: 46, scope: !164)
!164 = distinct !DILexicalBlock(scope: !158, file: !7, line: 98, column: 31)
!165 = !DILocation(line: 99, column: 9, scope: !164)
!166 = !DILocation(line: 100, column: 27, scope: !164)
!167 = !DILocation(line: 100, column: 19, scope: !164)
!168 = !DILocation(line: 100, column: 22, scope: !164)
!169 = !DILocation(line: 100, column: 31, scope: !164)
!170 = !DILocation(line: 100, column: 9, scope: !164)
!171 = !DILocation(line: 101, column: 9, scope: !164)
!172 = !DILocation(line: 102, column: 7, scope: !164)
!173 = !DILocation(line: 98, column: 25, scope: !174)
!174 = !DILexicalBlockFile(scope: !158, file: !7, discriminator: 1)
!175 = !DILocation(line: 97, column: 33, scope: !154)
!176 = !DILocation(line: 97, column: 5, scope: !154)
!177 = !DILocation(line: 103, column: 3, scope: !134)
!178 = !DILocation(line: 104, column: 1, scope: !30)
