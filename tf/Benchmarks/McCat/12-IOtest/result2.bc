; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.global_result = type { i8, i8, i8, i8 }

@.str = private unnamed_addr constant [33 x i8] c"C %d min %d max %d add %d mult \0A\00", align 1

; Function Attrs: nounwind uwtable
define void @testC() #0 {
entry:
  %res = alloca %struct.global_result, align 1
  call void @llvm.dbg.declare(metadata %struct.global_result* %res, metadata !30, metadata !37), !dbg !38
  call void @initarray(), !dbg !39
  %min = getelementptr inbounds %struct.global_result, %struct.global_result* %res, i32 0, i32 0, !dbg !40
  call void @loop(void (i8*)* @initminB, void (i8*)* @stepminB, i8* %min), !dbg !41
  %max = getelementptr inbounds %struct.global_result, %struct.global_result* %res, i32 0, i32 1, !dbg !42
  call void @loop(void (i8*)* @initmaxB, void (i8*)* @stepmaxB, i8* %max), !dbg !43
  %add = getelementptr inbounds %struct.global_result, %struct.global_result* %res, i32 0, i32 2, !dbg !44
  call void @loop(void (i8*)* @initaddB, void (i8*)* @stepaddB, i8* %add), !dbg !45
  %mult = getelementptr inbounds %struct.global_result, %struct.global_result* %res, i32 0, i32 3, !dbg !46
  call void @loop(void (i8*)* @initmultB, void (i8*)* @stepmultB, i8* %mult), !dbg !47
  %min1 = getelementptr inbounds %struct.global_result, %struct.global_result* %res, i32 0, i32 0, !dbg !48
  %tmp = load i8, i8* %min1, align 1, !dbg !48
  %conv = sext i8 %tmp to i32, !dbg !49
  %max2 = getelementptr inbounds %struct.global_result, %struct.global_result* %res, i32 0, i32 1, !dbg !50
  %tmp1 = load i8, i8* %max2, align 1, !dbg !50
  %conv3 = sext i8 %tmp1 to i32, !dbg !51
  %add4 = getelementptr inbounds %struct.global_result, %struct.global_result* %res, i32 0, i32 2, !dbg !52
  %tmp2 = load i8, i8* %add4, align 1, !dbg !52
  %conv5 = sext i8 %tmp2 to i32, !dbg !53
  %mult6 = getelementptr inbounds %struct.global_result, %struct.global_result* %res, i32 0, i32 3, !dbg !54
  %tmp3 = load i8, i8* %mult6, align 1, !dbg !54
  %conv7 = sext i8 %tmp3 to i32, !dbg !55
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i32 0, i32 0), i32 %conv, i32 %conv3, i32 %conv5, i32 %conv7), !dbg !56
  ret void, !dbg !57
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @initarray() #2

declare void @loop(void (i8*)*, void (i8*)*, i8*) #2

; Function Attrs: nounwind uwtable
define internal void @initminB(i8* %res) #0 {
entry:
  call void @llvm.dbg.value(metadata i8* %res, i64 0, metadata !58, metadata !37), !dbg !59
  call void @setac(i64 0), !dbg !60
  store i8 -1, i8* %res, align 1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: nounwind uwtable
define internal void @stepminB(i8* %res) #0 {
entry:
  call void @llvm.dbg.value(metadata i8* %res, i64 0, metadata !63, metadata !37), !dbg !64
  %call = call i64 @getac(), !dbg !65
  %call1 = call signext i8 @array(i64 %call), !dbg !66
  call void @llvm.dbg.value(metadata i8 %call1, i64 0, metadata !67, metadata !37), !dbg !68
  %tmp1 = load i8, i8* %res, align 1, !dbg !69
  %call2 = call signext i8 @min(i8 signext %tmp1, i8 signext %call1), !dbg !70
  store i8 %call2, i8* %res, align 1, !dbg !71
  %call3 = call i64 @getac(), !dbg !72
  %add = add i64 %call3, 4097, !dbg !73
  call void @llvm.dbg.value(metadata i64 %add, i64 0, metadata !74, metadata !37), !dbg !76
  call void @setac(i64 %add), !dbg !77
  ret void, !dbg !78
}

; Function Attrs: nounwind uwtable
define internal void @initmaxB(i8* %res) #0 {
entry:
  call void @llvm.dbg.value(metadata i8* %res, i64 0, metadata !79, metadata !37), !dbg !80
  call void @setac(i64 0), !dbg !81
  store i8 0, i8* %res, align 1, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: nounwind uwtable
define internal void @stepmaxB(i8* %res) #0 {
entry:
  call void @llvm.dbg.value(metadata i8* %res, i64 0, metadata !84, metadata !37), !dbg !85
  %call = call i64 @getac(), !dbg !86
  %call1 = call signext i8 @array(i64 %call), !dbg !87
  call void @llvm.dbg.value(metadata i8 %call1, i64 0, metadata !88, metadata !37), !dbg !89
  %tmp1 = load i8, i8* %res, align 1, !dbg !90
  %call2 = call signext i8 @max(i8 signext %tmp1, i8 signext %call1), !dbg !91
  store i8 %call2, i8* %res, align 1, !dbg !92
  %call3 = call i64 @getac(), !dbg !93
  %add = add i64 %call3, 4097, !dbg !94
  call void @llvm.dbg.value(metadata i64 %add, i64 0, metadata !95, metadata !37), !dbg !96
  call void @setac(i64 %add), !dbg !97
  ret void, !dbg !98
}

; Function Attrs: nounwind uwtable
define internal void @initaddB(i8* %res) #0 {
entry:
  call void @llvm.dbg.value(metadata i8* %res, i64 0, metadata !99, metadata !37), !dbg !100
  call void @setac(i64 0), !dbg !101
  store i8 0, i8* %res, align 1, !dbg !102
  ret void, !dbg !103
}

; Function Attrs: nounwind uwtable
define internal void @stepaddB(i8* %res) #0 {
entry:
  call void @llvm.dbg.value(metadata i8* %res, i64 0, metadata !104, metadata !37), !dbg !105
  %call = call i64 @getac(), !dbg !106
  %call1 = call signext i8 @array(i64 %call), !dbg !107
  call void @llvm.dbg.value(metadata i8 %call1, i64 0, metadata !108, metadata !37), !dbg !109
  %tmp1 = load i8, i8* %res, align 1, !dbg !110
  %call2 = call signext i8 @add(i8 signext %tmp1, i8 signext %call1), !dbg !111
  store i8 %call2, i8* %res, align 1, !dbg !112
  %call3 = call i64 @getac(), !dbg !113
  %add = add i64 %call3, 4097, !dbg !114
  call void @llvm.dbg.value(metadata i64 %add, i64 0, metadata !115, metadata !37), !dbg !116
  call void @setac(i64 %add), !dbg !117
  ret void, !dbg !118
}

; Function Attrs: nounwind uwtable
define internal void @initmultB(i8* %res) #0 {
entry:
  call void @llvm.dbg.value(metadata i8* %res, i64 0, metadata !119, metadata !37), !dbg !120
  call void @setac(i64 0), !dbg !121
  store i8 1, i8* %res, align 1, !dbg !122
  ret void, !dbg !123
}

; Function Attrs: nounwind uwtable
define internal void @stepmultB(i8* %res) #0 {
entry:
  call void @llvm.dbg.value(metadata i8* %res, i64 0, metadata !124, metadata !37), !dbg !125
  %call = call i64 @getac(), !dbg !126
  %call1 = call signext i8 @array(i64 %call), !dbg !127
  call void @llvm.dbg.value(metadata i8 %call1, i64 0, metadata !128, metadata !37), !dbg !129
  %tmp1 = load i8, i8* %res, align 1, !dbg !130
  %call2 = call signext i8 @mult(i8 signext %tmp1, i8 signext %call1), !dbg !131
  store i8 %call2, i8* %res, align 1, !dbg !132
  %call3 = call i64 @getac(), !dbg !133
  %add = add i64 %call3, 4097, !dbg !134
  call void @llvm.dbg.value(metadata i64 %add, i64 0, metadata !135, metadata !37), !dbg !136
  call void @setac(i64 %add), !dbg !137
  ret void, !dbg !138
}

declare i32 @printf(i8*, ...) #2

declare void @setac(i64) #2

declare signext i8 @array(i64) #2

declare i64 @getac() #2

declare signext i8 @min(i8 signext, i8 signext) #2

declare signext i8 @max(i8 signext, i8 signext) #2

declare signext i8 @add(i8 signext, i8 signext) #2

declare signext i8 @mult(i8 signext, i8 signext) #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!27, !28}
!llvm.ident = !{!29}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !8)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/McCat/12-IOtest")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!8 = !{!9, !13, !20, !21, !22, !23, !24, !25, !26}
!9 = !DISubprogram(name: "testC", scope: !10, file: !10, line: 93, type: !11, isLocal: false, isDefinition: true, scopeLine: 93, isOptimized: false, function: void ()* @testC, variables: !2)
!10 = !DIFile(filename: "/home/gleison/tf/Benchmarks/McCat/12-IOtest/tmp.c", directory: "/home/gleison/tf/Benchmarks/McCat/12-IOtest")
!11 = !DISubroutineType(types: !12)
!12 = !{null}
!13 = !DISubprogram(name: "initminB", scope: !10, file: !10, line: 21, type: !14, isLocal: true, isDefinition: true, scopeLine: 21, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*)* @initminB, variables: !2)
!14 = !DISubroutineType(types: !15)
!15 = !{null, !16}
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, align: 64)
!17 = !DIDerivedType(tag: DW_TAG_typedef, name: "char_t", file: !18, line: 4, baseType: !19)
!18 = !DIFile(filename: "./IOtest.h", directory: "/home/gleison/tf/Benchmarks/McCat/12-IOtest")
!19 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!20 = !DISubprogram(name: "stepminB", scope: !10, file: !10, line: 41, type: !14, isLocal: true, isDefinition: true, scopeLine: 44, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*)* @stepminB, variables: !2)
!21 = !DISubprogram(name: "initmaxB", scope: !10, file: !10, line: 26, type: !14, isLocal: true, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*)* @initmaxB, variables: !2)
!22 = !DISubprogram(name: "stepmaxB", scope: !10, file: !10, line: 55, type: !14, isLocal: true, isDefinition: true, scopeLine: 57, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*)* @stepmaxB, variables: !2)
!23 = !DISubprogram(name: "initaddB", scope: !10, file: !10, line: 31, type: !14, isLocal: true, isDefinition: true, scopeLine: 31, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*)* @initaddB, variables: !2)
!24 = !DISubprogram(name: "stepaddB", scope: !10, file: !10, line: 67, type: !14, isLocal: true, isDefinition: true, scopeLine: 69, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*)* @stepaddB, variables: !2)
!25 = !DISubprogram(name: "initmultB", scope: !10, file: !10, line: 36, type: !14, isLocal: true, isDefinition: true, scopeLine: 36, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*)* @initmultB, variables: !2)
!26 = !DISubprogram(name: "stepmultB", scope: !10, file: !10, line: 79, type: !14, isLocal: true, isDefinition: true, scopeLine: 82, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*)* @stepmultB, variables: !2)
!27 = !{i32 2, !"Dwarf Version", i32 4}
!28 = !{i32 2, !"Debug Info Version", i32 3}
!29 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!30 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !9, file: !10, line: 94, type: !31)
!31 = !DICompositeType(tag: DW_TAG_structure_type, name: "global_result", file: !18, line: 6, size: 32, align: 8, elements: !32)
!32 = !{!33, !34, !35, !36}
!33 = !DIDerivedType(tag: DW_TAG_member, name: "min", scope: !31, file: !18, line: 8, baseType: !17, size: 8, align: 8)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !31, file: !18, line: 9, baseType: !17, size: 8, align: 8, offset: 8)
!35 = !DIDerivedType(tag: DW_TAG_member, name: "add", scope: !31, file: !18, line: 10, baseType: !17, size: 8, align: 8, offset: 16)
!36 = !DIDerivedType(tag: DW_TAG_member, name: "mult", scope: !31, file: !18, line: 11, baseType: !17, size: 8, align: 8, offset: 24)
!37 = !DIExpression()
!38 = !DILocation(line: 94, column: 24, scope: !9)
!39 = !DILocation(line: 96, column: 3, scope: !9)
!40 = !DILocation(line: 98, column: 76, scope: !9)
!41 = !DILocation(line: 98, column: 3, scope: !9)
!42 = !DILocation(line: 100, column: 76, scope: !9)
!43 = !DILocation(line: 100, column: 3, scope: !9)
!44 = !DILocation(line: 102, column: 76, scope: !9)
!45 = !DILocation(line: 102, column: 3, scope: !9)
!46 = !DILocation(line: 104, column: 78, scope: !9)
!47 = !DILocation(line: 104, column: 3, scope: !9)
!48 = !DILocation(line: 106, column: 51, scope: !9)
!49 = !DILocation(line: 106, column: 47, scope: !9)
!50 = !DILocation(line: 106, column: 60, scope: !9)
!51 = !DILocation(line: 106, column: 56, scope: !9)
!52 = !DILocation(line: 106, column: 69, scope: !9)
!53 = !DILocation(line: 106, column: 65, scope: !9)
!54 = !DILocation(line: 106, column: 78, scope: !9)
!55 = !DILocation(line: 106, column: 74, scope: !9)
!56 = !DILocation(line: 106, column: 3, scope: !9)
!57 = !DILocation(line: 107, column: 1, scope: !9)
!58 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "res", arg: 1, scope: !13, file: !10, line: 21, type: !16)
!59 = !DILocation(line: 21, column: 30, scope: !13)
!60 = !DILocation(line: 22, column: 3, scope: !13)
!61 = !DILocation(line: 23, column: 8, scope: !13)
!62 = !DILocation(line: 24, column: 1, scope: !13)
!63 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "res", arg: 1, scope: !20, file: !10, line: 41, type: !16)
!64 = !DILocation(line: 41, column: 30, scope: !20)
!65 = !DILocation(line: 47, column: 13, scope: !20)
!66 = !DILocation(line: 47, column: 7, scope: !20)
!67 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !20, file: !10, line: 45, type: !17)
!68 = !DILocation(line: 45, column: 19, scope: !20)
!69 = !DILocation(line: 48, column: 14, scope: !20)
!70 = !DILocation(line: 48, column: 10, scope: !20)
!71 = !DILocation(line: 48, column: 8, scope: !20)
!72 = !DILocation(line: 49, column: 7, scope: !20)
!73 = !DILocation(line: 49, column: 15, scope: !20)
!74 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !20, file: !10, line: 46, type: !75)
!75 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!76 = !DILocation(line: 46, column: 17, scope: !20)
!77 = !DILocation(line: 50, column: 3, scope: !20)
!78 = !DILocation(line: 51, column: 1, scope: !20)
!79 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "res", arg: 1, scope: !21, file: !10, line: 26, type: !16)
!80 = !DILocation(line: 26, column: 30, scope: !21)
!81 = !DILocation(line: 27, column: 3, scope: !21)
!82 = !DILocation(line: 28, column: 8, scope: !21)
!83 = !DILocation(line: 29, column: 1, scope: !21)
!84 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "res", arg: 1, scope: !22, file: !10, line: 55, type: !16)
!85 = !DILocation(line: 55, column: 30, scope: !22)
!86 = !DILocation(line: 60, column: 13, scope: !22)
!87 = !DILocation(line: 60, column: 7, scope: !22)
!88 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !22, file: !10, line: 58, type: !17)
!89 = !DILocation(line: 58, column: 19, scope: !22)
!90 = !DILocation(line: 61, column: 14, scope: !22)
!91 = !DILocation(line: 61, column: 10, scope: !22)
!92 = !DILocation(line: 61, column: 8, scope: !22)
!93 = !DILocation(line: 62, column: 7, scope: !22)
!94 = !DILocation(line: 62, column: 15, scope: !22)
!95 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !22, file: !10, line: 59, type: !75)
!96 = !DILocation(line: 59, column: 17, scope: !22)
!97 = !DILocation(line: 63, column: 3, scope: !22)
!98 = !DILocation(line: 64, column: 1, scope: !22)
!99 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "res", arg: 1, scope: !23, file: !10, line: 31, type: !16)
!100 = !DILocation(line: 31, column: 30, scope: !23)
!101 = !DILocation(line: 32, column: 3, scope: !23)
!102 = !DILocation(line: 33, column: 8, scope: !23)
!103 = !DILocation(line: 34, column: 1, scope: !23)
!104 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "res", arg: 1, scope: !24, file: !10, line: 67, type: !16)
!105 = !DILocation(line: 67, column: 30, scope: !24)
!106 = !DILocation(line: 72, column: 13, scope: !24)
!107 = !DILocation(line: 72, column: 7, scope: !24)
!108 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !24, file: !10, line: 70, type: !17)
!109 = !DILocation(line: 70, column: 19, scope: !24)
!110 = !DILocation(line: 73, column: 14, scope: !24)
!111 = !DILocation(line: 73, column: 10, scope: !24)
!112 = !DILocation(line: 73, column: 8, scope: !24)
!113 = !DILocation(line: 74, column: 7, scope: !24)
!114 = !DILocation(line: 74, column: 15, scope: !24)
!115 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !24, file: !10, line: 71, type: !75)
!116 = !DILocation(line: 71, column: 17, scope: !24)
!117 = !DILocation(line: 75, column: 3, scope: !24)
!118 = !DILocation(line: 76, column: 1, scope: !24)
!119 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "res", arg: 1, scope: !25, file: !10, line: 36, type: !16)
!120 = !DILocation(line: 36, column: 31, scope: !25)
!121 = !DILocation(line: 37, column: 3, scope: !25)
!122 = !DILocation(line: 38, column: 8, scope: !25)
!123 = !DILocation(line: 39, column: 1, scope: !25)
!124 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "res", arg: 1, scope: !26, file: !10, line: 79, type: !16)
!125 = !DILocation(line: 79, column: 31, scope: !26)
!126 = !DILocation(line: 85, column: 13, scope: !26)
!127 = !DILocation(line: 85, column: 7, scope: !26)
!128 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !26, file: !10, line: 83, type: !17)
!129 = !DILocation(line: 83, column: 19, scope: !26)
!130 = !DILocation(line: 86, column: 15, scope: !26)
!131 = !DILocation(line: 86, column: 10, scope: !26)
!132 = !DILocation(line: 86, column: 8, scope: !26)
!133 = !DILocation(line: 87, column: 7, scope: !26)
!134 = !DILocation(line: 87, column: 15, scope: !26)
!135 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !10, line: 84, type: !75)
!136 = !DILocation(line: 84, column: 17, scope: !26)
!137 = !DILocation(line: 88, column: 3, scope: !26)
!138 = !DILocation(line: 89, column: 1, scope: !26)
