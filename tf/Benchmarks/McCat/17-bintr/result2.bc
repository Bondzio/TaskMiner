; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.binaryTree = type { i32, %struct.binaryTree*, %struct.binaryTree* }

@.str = private unnamed_addr constant [21 x i8] c"Constructing tree\0A\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"\0A\0ATree constructed\0A\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"Constructing array of values\0A\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"\0A\0AArray of values constructed\0A\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"Beginning of program\0A\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [62 x i8] c"Summary of sorted binary tree\0A=============================\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [30 x i8] c"Size                   : %d\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"Sum                    : %f\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"Arithmetic Mean        : %f\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"%d is in the tree.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"%d is NOT in the tree.\0A\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"\0A\0AEnd of program\0A\00", align 1

; Function Attrs: nounwind uwtable
define void @fillTree(%struct.binaryTree** %treeToFill) #0 {
entry:
  %number = alloca i32, align 4
  call void @llvm.dbg.value(metadata %struct.binaryTree** %treeToFill, i64 0, metadata !27, metadata !28), !dbg !29
  call void @llvm.dbg.declare(metadata i32* %number, metadata !30, metadata !28), !dbg !31
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0)), !dbg !32
  %call1 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %number), !dbg !33
  br label %while.cond, !dbg !34

while.cond:                                       ; preds = %while.body, %entry
  %tmp = load i32, i32* %number, align 4, !dbg !35
  %cmp = icmp ne i32 %tmp, 0, !dbg !38
  br i1 %cmp, label %while.body, label %while.end, !dbg !34

while.body:                                       ; preds = %while.cond
  %tmp1 = load i32, i32* %number, align 4, !dbg !39
  %call2 = call %struct.binaryTree* @insertSortedBinaryTree(i32 %tmp1, %struct.binaryTree** %treeToFill), !dbg !41
  %call3 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %number), !dbg !42
  br label %while.cond, !dbg !34

while.end:                                        ; preds = %while.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0)), !dbg !43
  ret void, !dbg !44
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(i8*, ...) #2

declare i32 @__isoc99_scanf(i8*, ...) #2

declare %struct.binaryTree* @insertSortedBinaryTree(i32, %struct.binaryTree**) #2

; Function Attrs: nounwind uwtable
define void @fillSearchedValues(i32* %arrayOfValues) #0 {
entry:
  %number = alloca i32, align 4
  %number7 = ptrtoint i32* %number to i64
  call void @llvm.dbg.value(metadata i32* %arrayOfValues, i64 0, metadata !45, metadata !28), !dbg !46
  call void @llvm.dbg.declare(metadata i32* %number, metadata !47, metadata !28), !dbg !48
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !49, metadata !28), !dbg !50
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i32 0, i32 0)), !dbg !51
  %call1 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %number), !dbg !52
  %0 = add i64 %number7, 4, !dbg !53
  %1 = add i64 %number7, 4, !dbg !53
  %2 = add i64 %number7, 4, !dbg !53
  %3 = add i64 %number7, 4, !dbg !53
  br label %while.cond, !dbg !54

while.cond:                                       ; preds = %while.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %while.body ]
  %cmp = icmp slt i32 %i.0, 100, !dbg !55
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !53

land.rhs:                                         ; preds = %while.cond
  %tmp1 = load i32, i32* %number, align 4, !dbg !56
  %cmp2 = icmp ne i32 %tmp1, 0, !dbg !58
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %tmp2 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ]
  br i1 %tmp2, label %while.body, label %while.end, !dbg !59

while.body:                                       ; preds = %land.end
  %tmp3 = load i32, i32* %number, align 4, !dbg !61
  %idxprom = sext i32 %i.0 to i64, !dbg !63
  %arrayidx = getelementptr inbounds i32, i32* %arrayOfValues, i64 %idxprom, !dbg !63
  store i32 %tmp3, i32* %arrayidx, align 4, !dbg !64
  %call3 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %number), !dbg !65
  %inc = add nsw i32 %i.0, 1, !dbg !66
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !49, metadata !28), !dbg !50
  br label %while.cond, !dbg !54

while.end:                                        ; preds = %land.end
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i32 0, i32 0)), !dbg !67
  ret void, !dbg !68
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
entry:
  %tree = alloca %struct.binaryTree*, align 8
  %searchedValues = alloca [100 x i32], align 16
  %0 = ptrtoint [100 x i32]* %searchedValues to i64
  %searchedValues15 = ptrtoint [100 x i32]* %searchedValues to i64
  call void @llvm.dbg.declare(metadata %struct.binaryTree** %tree, metadata !69, metadata !28), !dbg !70
  store %struct.binaryTree* null, %struct.binaryTree** %tree, align 8, !dbg !70
  call void @llvm.dbg.declare(metadata [100 x i32]* %searchedValues, metadata !71, metadata !28), !dbg !75
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i32 0, i32 0)), !dbg !76
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !77, metadata !28), !dbg !78
  %1 = add i64 %searchedValues15, 4, !dbg !79
  %2 = add i64 %searchedValues15, 4, !dbg !79
  %3 = add i64 %0, 4, !dbg !79
  %4 = add i64 %0, 4, !dbg !79
  br label %for.cond, !dbg !81

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 10, !dbg !82
  %5 = ptrtoint [100 x i32]* undef to i64, !dbg !79
  %6 = sub i64 %1, %0, !dbg !79
  %7 = ptrtoint [100 x i32]* %searchedValues to i64, !dbg !79
  %8 = sub i64 %3, %7, !dbg !79
  br i1 %cmp, label %for.body, label %for.end, !dbg !79

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64, !dbg !84
  %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* %searchedValues, i32 0, i64 %idxprom, !dbg !84
  store i32 0, i32* %arrayidx, align 4, !dbg !85
  br label %for.inc, !dbg !84

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1, !dbg !86
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !77, metadata !28), !dbg !78
  br label %for.cond, !dbg !87

for.end:                                          ; preds = %for.cond
  call void @fillTree(%struct.binaryTree** %tree), !dbg !88
  %arraydecay = getelementptr inbounds [100 x i32], [100 x i32]* %searchedValues, i32 0, i32 0, !dbg !89
  call void @fillSearchedValues(i32* %arraydecay), !dbg !90
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.6, i32 0, i32 0)), !dbg !91
  %tmp3 = load %struct.binaryTree*, %struct.binaryTree** %tree, align 8, !dbg !92
  %call2 = call i32 @getSizeBinaryTree(%struct.binaryTree* %tmp3), !dbg !93
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i32 0, i32 0), i32 %call2), !dbg !94
  %tmp4 = load %struct.binaryTree*, %struct.binaryTree** %tree, align 8, !dbg !95
  %call4 = call double @getSumBinaryTree(%struct.binaryTree* %tmp4), !dbg !96
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i32 0, i32 0), double %call4), !dbg !97
  %tmp5 = load %struct.binaryTree*, %struct.binaryTree** %tree, align 8, !dbg !98
  %call6 = call double @getArithmeticMeanBinaryTree(%struct.binaryTree* %tmp5), !dbg !99
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i32 0, i32 0), double %call6), !dbg !100
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !77, metadata !28), !dbg !78
  br label %for.cond.8, !dbg !101

for.cond.8:                                       ; preds = %for.inc.20, %for.end
  %i.1 = phi i32 [ 0, %for.end ], [ %inc21, %for.inc.20 ]
  %cmp9 = icmp slt i32 %i.1, 100, !dbg !103
  br i1 %cmp9, label %for.body.10, label %for.end.22, !dbg !105

for.body.10:                                      ; preds = %for.cond.8
  %tmp7 = load %struct.binaryTree*, %struct.binaryTree** %tree, align 8, !dbg !106
  %idxprom11 = sext i32 %i.1 to i64, !dbg !109
  %arrayidx12 = getelementptr inbounds [100 x i32], [100 x i32]* %searchedValues, i32 0, i64 %idxprom11, !dbg !109
  %tmp9 = load i32, i32* %arrayidx12, align 4, !dbg !109
  %call13 = call i32 @memberOfBinaryTree(%struct.binaryTree* %tmp7, i32 %tmp9), !dbg !110
  %tobool = icmp ne i32 %call13, 0, !dbg !110
  br i1 %tobool, label %if.then, label %if.else, !dbg !111

if.then:                                          ; preds = %for.body.10
  %idxprom14 = sext i32 %i.1 to i64, !dbg !112
  %arrayidx15 = getelementptr inbounds [100 x i32], [100 x i32]* %searchedValues, i32 0, i64 %idxprom14, !dbg !112
  %tmp11 = load i32, i32* %arrayidx15, align 4, !dbg !112
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i32 0, i32 0), i32 %tmp11), !dbg !113
  br label %if.end, !dbg !113

if.else:                                          ; preds = %for.body.10
  %idxprom17 = sext i32 %i.1 to i64, !dbg !114
  %arrayidx18 = getelementptr inbounds [100 x i32], [100 x i32]* %searchedValues, i32 0, i64 %idxprom17, !dbg !114
  %tmp13 = load i32, i32* %arrayidx18, align 4, !dbg !114
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0), i32 %tmp13), !dbg !115
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc.20, !dbg !116

for.inc.20:                                       ; preds = %if.end
  %inc21 = add nsw i32 %i.1, 1, !dbg !117
  call void @llvm.dbg.value(metadata i32 %inc21, i64 0, metadata !77, metadata !28), !dbg !78
  br label %for.cond.8, !dbg !118

for.end.22:                                       ; preds = %for.cond.8
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0)), !dbg !119
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i32 0, i32 0)), !dbg !120
  ret i32 0, !dbg !121
}

declare i32 @getSizeBinaryTree(%struct.binaryTree*) #2

declare double @getSumBinaryTree(%struct.binaryTree*) #2

declare double @getArithmeticMeanBinaryTree(%struct.binaryTree*) #2

declare i32 @memberOfBinaryTree(%struct.binaryTree*, i32) #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!24, !25}
!llvm.ident = !{!26}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/McCat/17-bintr")
!2 = !{}
!3 = !{!4, !17, !21}
!4 = !DISubprogram(name: "fillTree", scope: !5, file: !5, line: 52, type: !6, isLocal: false, isDefinition: true, scopeLine: 54, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.binaryTree**)* @fillTree, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/McCat/17-bintr/tmp.c", directory: "/home/gleison/tf/Benchmarks/McCat/17-bintr")
!6 = !DISubroutineType(types: !7)
!7 = !{null, !8}
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DICompositeType(tag: DW_TAG_structure_type, name: "binaryTree", file: !11, line: 18, size: 192, align: 64, elements: !12)
!11 = !DIFile(filename: "./bintree.h", directory: "/home/gleison/tf/Benchmarks/McCat/17-bintr")
!12 = !{!13, !15, !16}
!13 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !10, file: !11, line: 19, baseType: !14, size: 32, align: 32)
!14 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!15 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !10, file: !11, line: 20, baseType: !9, size: 64, align: 64, offset: 64)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !10, file: !11, line: 21, baseType: !9, size: 64, align: 64, offset: 128)
!17 = !DISubprogram(name: "fillSearchedValues", scope: !5, file: !5, line: 74, type: !18, isLocal: false, isDefinition: true, scopeLine: 76, flags: DIFlagPrototyped, isOptimized: false, function: void (i32*)* @fillSearchedValues, variables: !2)
!18 = !DISubroutineType(types: !19)
!19 = !{null, !20}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!21 = !DISubprogram(name: "main", scope: !5, file: !5, line: 97, type: !22, isLocal: false, isDefinition: true, scopeLine: 99, isOptimized: false, function: i32 ()* @main, variables: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{!14}
!24 = !{i32 2, !"Dwarf Version", i32 4}
!25 = !{i32 2, !"Debug Info Version", i32 3}
!26 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!27 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "treeToFill", arg: 1, scope: !4, file: !5, line: 52, type: !8)
!28 = !DIExpression()
!29 = !DILocation(line: 52, column: 35, scope: !4)
!30 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "number", scope: !4, file: !5, line: 55, type: !14)
!31 = !DILocation(line: 55, column: 7, scope: !4)
!32 = !DILocation(line: 57, column: 3, scope: !4)
!33 = !DILocation(line: 59, column: 3, scope: !4)
!34 = !DILocation(line: 61, column: 3, scope: !4)
!35 = !DILocation(line: 61, column: 10, scope: !36)
!36 = !DILexicalBlockFile(scope: !37, file: !5, discriminator: 2)
!37 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 1)
!38 = !DILocation(line: 61, column: 17, scope: !4)
!39 = !DILocation(line: 63, column: 28, scope: !40)
!40 = distinct !DILexicalBlock(scope: !4, file: !5, line: 61, column: 23)
!41 = !DILocation(line: 63, column: 5, scope: !40)
!42 = !DILocation(line: 66, column: 5, scope: !40)
!43 = !DILocation(line: 69, column: 3, scope: !4)
!44 = !DILocation(line: 70, column: 1, scope: !4)
!45 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arrayOfValues", arg: 1, scope: !17, file: !5, line: 74, type: !20)
!46 = !DILocation(line: 74, column: 29, scope: !17)
!47 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "number", scope: !17, file: !5, line: 77, type: !14)
!48 = !DILocation(line: 77, column: 7, scope: !17)
!49 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !17, file: !5, line: 77, type: !14)
!50 = !DILocation(line: 77, column: 15, scope: !17)
!51 = !DILocation(line: 79, column: 3, scope: !17)
!52 = !DILocation(line: 81, column: 3, scope: !17)
!53 = !DILocation(line: 83, column: 36, scope: !17)
!54 = !DILocation(line: 83, column: 3, scope: !17)
!55 = !DILocation(line: 83, column: 13, scope: !17)
!56 = !DILocation(line: 83, column: 40, scope: !57)
!57 = !DILexicalBlockFile(scope: !17, file: !5, discriminator: 2)
!58 = !DILocation(line: 83, column: 47, scope: !17)
!59 = !DILocation(line: 83, column: 3, scope: !60)
!60 = !DILexicalBlockFile(scope: !17, file: !5, discriminator: 3)
!61 = !DILocation(line: 85, column: 24, scope: !62)
!62 = distinct !DILexicalBlock(scope: !17, file: !5, line: 83, column: 54)
!63 = !DILocation(line: 85, column: 5, scope: !62)
!64 = !DILocation(line: 85, column: 22, scope: !62)
!65 = !DILocation(line: 88, column: 5, scope: !62)
!66 = !DILocation(line: 89, column: 6, scope: !62)
!67 = !DILocation(line: 92, column: 3, scope: !17)
!68 = !DILocation(line: 93, column: 1, scope: !17)
!69 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tree", scope: !21, file: !5, line: 100, type: !9)
!70 = !DILocation(line: 100, column: 22, scope: !21)
!71 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "searchedValues", scope: !21, file: !5, line: 101, type: !72)
!72 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 3200, align: 32, elements: !73)
!73 = !{!74}
!74 = !DISubrange(count: 100)
!75 = !DILocation(line: 101, column: 7, scope: !21)
!76 = !DILocation(line: 104, column: 3, scope: !21)
!77 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !21, file: !5, line: 102, type: !14)
!78 = !DILocation(line: 102, column: 7, scope: !21)
!79 = !DILocation(line: 106, column: 3, scope: !80)
!80 = distinct !DILexicalBlock(scope: !21, file: !5, line: 106, column: 3)
!81 = !DILocation(line: 106, column: 8, scope: !80)
!82 = !DILocation(line: 106, column: 17, scope: !83)
!83 = distinct !DILexicalBlock(scope: !80, file: !5, line: 106, column: 3)
!84 = !DILocation(line: 107, column: 5, scope: !83)
!85 = !DILocation(line: 107, column: 23, scope: !83)
!86 = !DILocation(line: 106, column: 24, scope: !83)
!87 = !DILocation(line: 106, column: 3, scope: !83)
!88 = !DILocation(line: 109, column: 3, scope: !21)
!89 = !DILocation(line: 110, column: 22, scope: !21)
!90 = !DILocation(line: 110, column: 3, scope: !21)
!91 = !DILocation(line: 119, column: 3, scope: !21)
!92 = !DILocation(line: 120, column: 63, scope: !21)
!93 = !DILocation(line: 120, column: 45, scope: !21)
!94 = !DILocation(line: 120, column: 3, scope: !21)
!95 = !DILocation(line: 121, column: 62, scope: !21)
!96 = !DILocation(line: 121, column: 45, scope: !21)
!97 = !DILocation(line: 121, column: 3, scope: !21)
!98 = !DILocation(line: 122, column: 73, scope: !21)
!99 = !DILocation(line: 122, column: 45, scope: !21)
!100 = !DILocation(line: 122, column: 3, scope: !21)
!101 = !DILocation(line: 125, column: 8, scope: !102)
!102 = distinct !DILexicalBlock(scope: !21, file: !5, line: 125, column: 3)
!103 = !DILocation(line: 125, column: 17, scope: !104)
!104 = distinct !DILexicalBlock(scope: !102, file: !5, line: 125, column: 3)
!105 = !DILocation(line: 125, column: 3, scope: !102)
!106 = !DILocation(line: 126, column: 28, scope: !107)
!107 = distinct !DILexicalBlock(scope: !108, file: !5, line: 126, column: 9)
!108 = distinct !DILexicalBlock(scope: !104, file: !5, line: 125, column: 45)
!109 = !DILocation(line: 126, column: 34, scope: !107)
!110 = !DILocation(line: 126, column: 9, scope: !107)
!111 = !DILocation(line: 126, column: 9, scope: !108)
!112 = !DILocation(line: 127, column: 38, scope: !107)
!113 = !DILocation(line: 127, column: 7, scope: !107)
!114 = !DILocation(line: 129, column: 42, scope: !107)
!115 = !DILocation(line: 129, column: 7, scope: !107)
!116 = !DILocation(line: 130, column: 3, scope: !108)
!117 = !DILocation(line: 125, column: 41, scope: !104)
!118 = !DILocation(line: 125, column: 3, scope: !104)
!119 = !DILocation(line: 131, column: 3, scope: !21)
!120 = !DILocation(line: 140, column: 3, scope: !21)
!121 = !DILocation(line: 141, column: 3, scope: !21)
