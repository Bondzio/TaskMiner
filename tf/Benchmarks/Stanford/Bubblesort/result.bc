; ModuleID = '/home/gleison/tf/Benchmarks/Stanford/Bubblesort/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.node = type { %struct.node*, %struct.node*, i32 }
%struct.element = type { i32, i32 }
%struct.complex = type { float, float }

@seed = common global i64 0, align 8
@biggest = common global i32 0, align 4
@littlest = common global i32 0, align 4
@sortlist = common global [5001 x i32] zeroinitializer, align 16
@top = common global i32 0, align 4
@.str = private unnamed_addr constant [19 x i8] c"Error3 in Bubble.\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@value = common global float 0.000000e+00, align 4
@fixed = common global float 0.000000e+00, align 4
@floated = common global float 0.000000e+00, align 4
@permarray = common global [11 x i32] zeroinitializer, align 16
@pctr = common global i32 0, align 4
@tree = common global %struct.node* null, align 8
@stack = common global [4 x i32] zeroinitializer, align 16
@cellspace = common global [19 x %struct.element] zeroinitializer, align 16
@freelist = common global i32 0, align 4
@movesdone = common global i32 0, align 4
@ima = common global [41 x [41 x i32]] zeroinitializer, align 16
@imb = common global [41 x [41 x i32]] zeroinitializer, align 16
@imr = common global [41 x [41 x i32]] zeroinitializer, align 16
@rma = common global [41 x [41 x float]] zeroinitializer, align 16
@rmb = common global [41 x [41 x float]] zeroinitializer, align 16
@rmr = common global [41 x [41 x float]] zeroinitializer, align 16
@piececount = common global [4 x i32] zeroinitializer, align 16
@class = common global [13 x i32] zeroinitializer, align 16
@piecemax = common global [13 x i32] zeroinitializer, align 16
@puzzl = common global [512 x i32] zeroinitializer, align 16
@p = common global [13 x [512 x i32]] zeroinitializer, align 16
@n = common global i32 0, align 4
@kount = common global i32 0, align 4
@z = common global [257 x %struct.complex] zeroinitializer, align 16
@w = common global [257 x %struct.complex] zeroinitializer, align 16
@e = common global [130 x %struct.complex] zeroinitializer, align 16
@zr = common global float 0.000000e+00, align 4
@zi = common global float 0.000000e+00, align 4

; Function Attrs: nounwind uwtable
define void @Initrand() #0 {
entry:
  store i64 74755, i64* @seed, align 8, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: nounwind uwtable
define i32 @Rand() #0 {
entry:
  %0 = load i64, i64* @seed, align 8, !dbg !103
  %mul = mul nsw i64 %0, 1309, !dbg !104
  %add = add nsw i64 %mul, 13849, !dbg !105
  %and = and i64 %add, 65535, !dbg !106
  store i64 %and, i64* @seed, align 8, !dbg !107
  %1 = load i64, i64* @seed, align 8, !dbg !108
  %conv = trunc i64 %1 to i32, !dbg !109
  ret i32 %conv, !dbg !110
}

; Function Attrs: nounwind uwtable
define void @bInitarr() #0 {
entry:
  %i = alloca i32, align 4
  %temp = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !111, metadata !112), !dbg !113
  call void @llvm.dbg.declare(metadata i64* %temp, metadata !114, metadata !112), !dbg !115
  call void @Initrand(), !dbg !116
  store i32 0, i32* @biggest, align 4, !dbg !117
  store i32 0, i32* @littlest, align 4, !dbg !118
  store i32 1, i32* %i, align 4, !dbg !119
  br label %for.cond, !dbg !121

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !122
  %cmp = icmp sle i32 %0, 500, !dbg !126
  br i1 %cmp, label %for.body, label %for.end, !dbg !127

for.body:                                         ; preds = %for.cond
  %call = call i32 @Rand(), !dbg !128
  %conv = sext i32 %call to i64, !dbg !128
  store i64 %conv, i64* %temp, align 8, !dbg !130
  %1 = load i64, i64* %temp, align 8, !dbg !131
  %2 = load i64, i64* %temp, align 8, !dbg !132
  %div = sdiv i64 %2, 100000, !dbg !133
  %mul = mul nsw i64 %div, 100000, !dbg !134
  %sub = sub nsw i64 %1, %mul, !dbg !135
  %sub1 = sub nsw i64 %sub, 50000, !dbg !136
  %conv2 = trunc i64 %sub1 to i32, !dbg !137
  %3 = load i32, i32* %i, align 4, !dbg !138
  %idxprom = sext i32 %3 to i64, !dbg !139
  %arrayidx = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom, !dbg !139
  store i32 %conv2, i32* %arrayidx, align 4, !dbg !140
  %4 = load i32, i32* %i, align 4, !dbg !141
  %idxprom3 = sext i32 %4 to i64, !dbg !143
  %arrayidx4 = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom3, !dbg !143
  %5 = load i32, i32* %arrayidx4, align 4, !dbg !143
  %6 = load i32, i32* @biggest, align 4, !dbg !144
  %cmp5 = icmp sgt i32 %5, %6, !dbg !145
  br i1 %cmp5, label %if.then, label %if.else, !dbg !146

if.then:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !147
  %idxprom7 = sext i32 %7 to i64, !dbg !148
  %arrayidx8 = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom7, !dbg !148
  %8 = load i32, i32* %arrayidx8, align 4, !dbg !148
  store i32 %8, i32* @biggest, align 4, !dbg !149
  br label %if.end.16, !dbg !150

if.else:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !151
  %idxprom9 = sext i32 %9 to i64, !dbg !153
  %arrayidx10 = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom9, !dbg !153
  %10 = load i32, i32* %arrayidx10, align 4, !dbg !153
  %11 = load i32, i32* @littlest, align 4, !dbg !154
  %cmp11 = icmp slt i32 %10, %11, !dbg !155
  br i1 %cmp11, label %if.then.13, label %if.end, !dbg !156

if.then.13:                                       ; preds = %if.else
  %12 = load i32, i32* %i, align 4, !dbg !157
  %idxprom14 = sext i32 %12 to i64, !dbg !158
  %arrayidx15 = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom14, !dbg !158
  %13 = load i32, i32* %arrayidx15, align 4, !dbg !158
  store i32 %13, i32* @littlest, align 4, !dbg !159
  br label %if.end, !dbg !160

if.end:                                           ; preds = %if.then.13, %if.else
  br label %if.end.16

if.end.16:                                        ; preds = %if.end, %if.then
  br label %for.inc, !dbg !161

for.inc:                                          ; preds = %if.end.16
  %14 = load i32, i32* %i, align 4, !dbg !162
  %inc = add nsw i32 %14, 1, !dbg !162
  store i32 %inc, i32* %i, align 4, !dbg !162
  br label %for.cond, !dbg !163

for.end:                                          ; preds = %for.cond
  ret void, !dbg !164
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define void @Bubble(i32 %run) #0 {
entry:
  %run.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %run, i32* %run.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %run.addr, metadata !165, metadata !112), !dbg !166
  call void @llvm.dbg.declare(metadata i32* %i, metadata !167, metadata !112), !dbg !168
  call void @llvm.dbg.declare(metadata i32* %j, metadata !169, metadata !112), !dbg !170
  call void @bInitarr(), !dbg !171
  store i32 500, i32* @top, align 4, !dbg !172
  br label %while.cond, !dbg !173

while.cond:                                       ; preds = %while.end, %entry
  %0 = load i32, i32* @top, align 4, !dbg !174
  %cmp = icmp sgt i32 %0, 1, !dbg !177
  br i1 %cmp, label %while.body, label %while.end.18, !dbg !173

while.body:                                       ; preds = %while.cond
  store i32 1, i32* %i, align 4, !dbg !178
  br label %while.cond.1, !dbg !180

while.cond.1:                                     ; preds = %if.end, %while.body
  %1 = load i32, i32* %i, align 4, !dbg !181
  %2 = load i32, i32* @top, align 4, !dbg !184
  %cmp2 = icmp slt i32 %1, %2, !dbg !185
  br i1 %cmp2, label %while.body.3, label %while.end, !dbg !180

while.body.3:                                     ; preds = %while.cond.1
  %3 = load i32, i32* %i, align 4, !dbg !186
  %idxprom = sext i32 %3 to i64, !dbg !189
  %arrayidx = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom, !dbg !189
  %4 = load i32, i32* %arrayidx, align 4, !dbg !189
  %5 = load i32, i32* %i, align 4, !dbg !190
  %add = add nsw i32 %5, 1, !dbg !191
  %idxprom4 = sext i32 %add to i64, !dbg !192
  %arrayidx5 = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom4, !dbg !192
  %6 = load i32, i32* %arrayidx5, align 4, !dbg !192
  %cmp6 = icmp sgt i32 %4, %6, !dbg !193
  br i1 %cmp6, label %if.then, label %if.end, !dbg !194

if.then:                                          ; preds = %while.body.3
  %7 = load i32, i32* %i, align 4, !dbg !195
  %idxprom7 = sext i32 %7 to i64, !dbg !197
  %arrayidx8 = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom7, !dbg !197
  %8 = load i32, i32* %arrayidx8, align 4, !dbg !197
  store i32 %8, i32* %j, align 4, !dbg !198
  %9 = load i32, i32* %i, align 4, !dbg !199
  %add9 = add nsw i32 %9, 1, !dbg !200
  %idxprom10 = sext i32 %add9 to i64, !dbg !201
  %arrayidx11 = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom10, !dbg !201
  %10 = load i32, i32* %arrayidx11, align 4, !dbg !201
  %11 = load i32, i32* %i, align 4, !dbg !202
  %idxprom12 = sext i32 %11 to i64, !dbg !203
  %arrayidx13 = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom12, !dbg !203
  store i32 %10, i32* %arrayidx13, align 4, !dbg !204
  %12 = load i32, i32* %j, align 4, !dbg !205
  %13 = load i32, i32* %i, align 4, !dbg !206
  %add14 = add nsw i32 %13, 1, !dbg !207
  %idxprom15 = sext i32 %add14 to i64, !dbg !208
  %arrayidx16 = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom15, !dbg !208
  store i32 %12, i32* %arrayidx16, align 4, !dbg !209
  br label %if.end, !dbg !210

if.end:                                           ; preds = %if.then, %while.body.3
  %14 = load i32, i32* %i, align 4, !dbg !211
  %add17 = add nsw i32 %14, 1, !dbg !212
  store i32 %add17, i32* %i, align 4, !dbg !213
  br label %while.cond.1, !dbg !180

while.end:                                        ; preds = %while.cond.1
  %15 = load i32, i32* @top, align 4, !dbg !214
  %sub = sub nsw i32 %15, 1, !dbg !215
  store i32 %sub, i32* @top, align 4, !dbg !216
  br label %while.cond, !dbg !173

while.end.18:                                     ; preds = %while.cond
  %16 = load i32, i32* getelementptr inbounds ([5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 1), align 4, !dbg !217
  %17 = load i32, i32* @littlest, align 4, !dbg !219
  %cmp19 = icmp ne i32 %16, %17, !dbg !220
  br i1 %cmp19, label %if.then.21, label %lor.lhs.false, !dbg !221

lor.lhs.false:                                    ; preds = %while.end.18
  %18 = load i32, i32* getelementptr inbounds ([5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 500), align 4, !dbg !222
  %19 = load i32, i32* @biggest, align 4, !dbg !224
  %cmp20 = icmp ne i32 %18, %19, !dbg !225
  br i1 %cmp20, label %if.then.21, label %if.end.22, !dbg !226

if.then.21:                                       ; preds = %lor.lhs.false, %while.end.18
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0)), !dbg !227
  br label %if.end.22, !dbg !227

if.end.22:                                        ; preds = %if.then.21, %lor.lhs.false
  %20 = load i32, i32* %run.addr, align 4, !dbg !228
  %add23 = add nsw i32 %20, 1, !dbg !229
  %idxprom24 = sext i32 %add23 to i64, !dbg !230
  %arrayidx25 = getelementptr inbounds [5001 x i32], [5001 x i32]* @sortlist, i32 0, i64 %idxprom24, !dbg !230
  %21 = load i32, i32* %arrayidx25, align 4, !dbg !230
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %21), !dbg !231
  ret void, !dbg !232
}

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval
  call void @llvm.dbg.declare(metadata i32* %i, metadata !233, metadata !112), !dbg !234
  store i32 0, i32* %i, align 4, !dbg !235
  br label %for.cond, !dbg !237

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !238
  %cmp = icmp slt i32 %0, 100, !dbg !242
  br i1 %cmp, label %for.body, label %for.end, !dbg !243

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !244
  call void @Bubble(i32 %1), !dbg !246
  br label %for.inc, !dbg !247

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !248
  %inc = add nsw i32 %2, 1, !dbg !248
  store i32 %inc, i32* %i, align 4, !dbg !248
  br label %for.cond, !dbg !249

for.end:                                          ; preds = %for.cond
  ret i32 0, !dbg !250
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!98, !99}
!llvm.ident = !{!100}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !5, globals: !17)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Stanford/Bubblesort")
!2 = !{}
!3 = !{!4}
!4 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!5 = !{!6, !10, !12, !13, !16}
!6 = !DISubprogram(name: "Initrand", scope: !7, file: !7, line: 117, type: !8, isLocal: false, isDefinition: true, scopeLine: 117, isOptimized: false, function: void ()* @Initrand, variables: !2)
!7 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Stanford/Bubblesort/tmp.c", directory: "/home/gleison/tf/Benchmarks/Stanford/Bubblesort")
!8 = !DISubroutineType(types: !9)
!9 = !{null}
!10 = !DISubprogram(name: "Rand", scope: !7, file: !7, line: 121, type: !11, isLocal: false, isDefinition: true, scopeLine: 121, isOptimized: false, function: i32 ()* @Rand, variables: !2)
!11 = !DISubroutineType(types: !3)
!12 = !DISubprogram(name: "bInitarr", scope: !7, file: !7, line: 128, type: !8, isLocal: false, isDefinition: true, scopeLine: 128, isOptimized: false, function: void ()* @bInitarr, variables: !2)
!13 = !DISubprogram(name: "Bubble", scope: !7, file: !7, line: 145, type: !14, isLocal: false, isDefinition: true, scopeLine: 145, flags: DIFlagPrototyped, isOptimized: false, function: void (i32)* @Bubble, variables: !2)
!14 = !DISubroutineType(types: !15)
!15 = !{null, !4}
!16 = !DISubprogram(name: "main", scope: !7, file: !7, line: 168, type: !11, isLocal: false, isDefinition: true, scopeLine: 168, isOptimized: false, function: i32 ()* @main, variables: !2)
!17 = !{!18, !20, !21, !22, !24, !28, !30, !37, !41, !49, !50, !51, !55, !56, !57, !59, !60, !61, !62, !66, !67, !71, !74, !75, !76, !80, !81, !82, !83, !91, !92, !96, !97}
!18 = !DIGlobalVariable(name: "value", scope: !0, file: !7, line: 83, type: !19, isLocal: false, isDefinition: true, variable: float* @value)
!19 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!20 = !DIGlobalVariable(name: "fixed", scope: !0, file: !7, line: 83, type: !19, isLocal: false, isDefinition: true, variable: float* @fixed)
!21 = !DIGlobalVariable(name: "floated", scope: !0, file: !7, line: 83, type: !19, isLocal: false, isDefinition: true, variable: float* @floated)
!22 = !DIGlobalVariable(name: "seed", scope: !0, file: !7, line: 86, type: !23, isLocal: false, isDefinition: true, variable: i64* @seed)
!23 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!24 = !DIGlobalVariable(name: "permarray", scope: !0, file: !7, line: 89, type: !25, isLocal: false, isDefinition: true, variable: [11 x i32]* @permarray)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 352, align: 32, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 11)
!28 = !DIGlobalVariable(name: "pctr", scope: !0, file: !7, line: 91, type: !29, isLocal: false, isDefinition: true, variable: i32* @pctr)
!29 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!30 = !DIGlobalVariable(name: "tree", scope: !0, file: !7, line: 94, type: !31, isLocal: false, isDefinition: true, variable: %struct.node** @tree)
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64, align: 64)
!32 = !DICompositeType(tag: DW_TAG_structure_type, name: "node", file: !7, line: 45, size: 192, align: 64, elements: !33)
!33 = !{!34, !35, !36}
!34 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !32, file: !7, line: 46, baseType: !31, size: 64, align: 64)
!35 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !32, file: !7, line: 46, baseType: !31, size: 64, align: 64, offset: 64)
!36 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !32, file: !7, line: 47, baseType: !4, size: 32, align: 32, offset: 128)
!37 = !DIGlobalVariable(name: "stack", scope: !0, file: !7, line: 97, type: !38, isLocal: false, isDefinition: true, variable: [4 x i32]* @stack)
!38 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, align: 32, elements: !39)
!39 = !{!40}
!40 = !DISubrange(count: 4)
!41 = !DIGlobalVariable(name: "cellspace", scope: !0, file: !7, line: 98, type: !42, isLocal: false, isDefinition: true, variable: [19 x %struct.element]* @cellspace)
!42 = !DICompositeType(tag: DW_TAG_array_type, baseType: !43, size: 1216, align: 32, elements: !47)
!43 = !DICompositeType(tag: DW_TAG_structure_type, name: "element", file: !7, line: 54, size: 64, align: 32, elements: !44)
!44 = !{!45, !46}
!45 = !DIDerivedType(tag: DW_TAG_member, name: "discsize", scope: !43, file: !7, line: 55, baseType: !4, size: 32, align: 32)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !43, file: !7, line: 56, baseType: !4, size: 32, align: 32, offset: 32)
!47 = !{!48}
!48 = !DISubrange(count: 19)
!49 = !DIGlobalVariable(name: "freelist", scope: !0, file: !7, line: 99, type: !4, isLocal: false, isDefinition: true, variable: i32* @freelist)
!50 = !DIGlobalVariable(name: "movesdone", scope: !0, file: !7, line: 99, type: !4, isLocal: false, isDefinition: true, variable: i32* @movesdone)
!51 = !DIGlobalVariable(name: "ima", scope: !0, file: !7, line: 103, type: !52, isLocal: false, isDefinition: true, variable: [41 x [41 x i32]]* @ima)
!52 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 53792, align: 32, elements: !53)
!53 = !{!54, !54}
!54 = !DISubrange(count: 41)
!55 = !DIGlobalVariable(name: "imb", scope: !0, file: !7, line: 103, type: !52, isLocal: false, isDefinition: true, variable: [41 x [41 x i32]]* @imb)
!56 = !DIGlobalVariable(name: "imr", scope: !0, file: !7, line: 103, type: !52, isLocal: false, isDefinition: true, variable: [41 x [41 x i32]]* @imr)
!57 = !DIGlobalVariable(name: "rma", scope: !0, file: !7, line: 104, type: !58, isLocal: false, isDefinition: true, variable: [41 x [41 x float]]* @rma)
!58 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 53792, align: 32, elements: !53)
!59 = !DIGlobalVariable(name: "rmb", scope: !0, file: !7, line: 104, type: !58, isLocal: false, isDefinition: true, variable: [41 x [41 x float]]* @rmb)
!60 = !DIGlobalVariable(name: "rmr", scope: !0, file: !7, line: 104, type: !58, isLocal: false, isDefinition: true, variable: [41 x [41 x float]]* @rmr)
!61 = !DIGlobalVariable(name: "piececount", scope: !0, file: !7, line: 107, type: !38, isLocal: false, isDefinition: true, variable: [4 x i32]* @piececount)
!62 = !DIGlobalVariable(name: "class", scope: !0, file: !7, line: 107, type: !63, isLocal: false, isDefinition: true, variable: [13 x i32]* @class)
!63 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 416, align: 32, elements: !64)
!64 = !{!65}
!65 = !DISubrange(count: 13)
!66 = !DIGlobalVariable(name: "piecemax", scope: !0, file: !7, line: 107, type: !63, isLocal: false, isDefinition: true, variable: [13 x i32]* @piecemax)
!67 = !DIGlobalVariable(name: "puzzl", scope: !0, file: !7, line: 108, type: !68, isLocal: false, isDefinition: true, variable: [512 x i32]* @puzzl)
!68 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16384, align: 32, elements: !69)
!69 = !{!70}
!70 = !DISubrange(count: 512)
!71 = !DIGlobalVariable(name: "p", scope: !0, file: !7, line: 108, type: !72, isLocal: false, isDefinition: true, variable: [13 x [512 x i32]]* @p)
!72 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 212992, align: 32, elements: !73)
!73 = !{!65, !70}
!74 = !DIGlobalVariable(name: "n", scope: !0, file: !7, line: 108, type: !4, isLocal: false, isDefinition: true, variable: i32* @n)
!75 = !DIGlobalVariable(name: "kount", scope: !0, file: !7, line: 108, type: !4, isLocal: false, isDefinition: true, variable: i32* @kount)
!76 = !DIGlobalVariable(name: "sortlist", scope: !0, file: !7, line: 111, type: !77, isLocal: false, isDefinition: true, variable: [5001 x i32]* @sortlist)
!77 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 160032, align: 32, elements: !78)
!78 = !{!79}
!79 = !DISubrange(count: 5001)
!80 = !DIGlobalVariable(name: "biggest", scope: !0, file: !7, line: 111, type: !4, isLocal: false, isDefinition: true, variable: i32* @biggest)
!81 = !DIGlobalVariable(name: "littlest", scope: !0, file: !7, line: 111, type: !4, isLocal: false, isDefinition: true, variable: i32* @littlest)
!82 = !DIGlobalVariable(name: "top", scope: !0, file: !7, line: 111, type: !4, isLocal: false, isDefinition: true, variable: i32* @top)
!83 = !DIGlobalVariable(name: "z", scope: !0, file: !7, line: 114, type: !84, isLocal: false, isDefinition: true, variable: [257 x %struct.complex]* @z)
!84 = !DICompositeType(tag: DW_TAG_array_type, baseType: !85, size: 16448, align: 32, elements: !89)
!85 = !DICompositeType(tag: DW_TAG_structure_type, name: "complex", file: !7, line: 75, size: 64, align: 32, elements: !86)
!86 = !{!87, !88}
!87 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !85, file: !7, line: 76, baseType: !19, size: 32, align: 32)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !85, file: !7, line: 76, baseType: !19, size: 32, align: 32, offset: 32)
!89 = !{!90}
!90 = !DISubrange(count: 257)
!91 = !DIGlobalVariable(name: "w", scope: !0, file: !7, line: 114, type: !84, isLocal: false, isDefinition: true, variable: [257 x %struct.complex]* @w)
!92 = !DIGlobalVariable(name: "e", scope: !0, file: !7, line: 114, type: !93, isLocal: false, isDefinition: true, variable: [130 x %struct.complex]* @e)
!93 = !DICompositeType(tag: DW_TAG_array_type, baseType: !85, size: 8320, align: 32, elements: !94)
!94 = !{!95}
!95 = !DISubrange(count: 130)
!96 = !DIGlobalVariable(name: "zr", scope: !0, file: !7, line: 115, type: !19, isLocal: false, isDefinition: true, variable: float* @zr)
!97 = !DIGlobalVariable(name: "zi", scope: !0, file: !7, line: 115, type: !19, isLocal: false, isDefinition: true, variable: float* @zi)
!98 = !{i32 2, !"Dwarf Version", i32 4}
!99 = !{i32 2, !"Debug Info Version", i32 3}
!100 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!101 = !DILocation(line: 118, column: 8, scope: !6)
!102 = !DILocation(line: 119, column: 1, scope: !6)
!103 = !DILocation(line: 122, column: 11, scope: !10)
!104 = !DILocation(line: 122, column: 16, scope: !10)
!105 = !DILocation(line: 122, column: 24, scope: !10)
!106 = !DILocation(line: 122, column: 34, scope: !10)
!107 = !DILocation(line: 122, column: 8, scope: !10)
!108 = !DILocation(line: 123, column: 16, scope: !10)
!109 = !DILocation(line: 123, column: 11, scope: !10)
!110 = !DILocation(line: 123, column: 3, scope: !10)
!111 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !12, file: !7, line: 129, type: !4)
!112 = !DIExpression()
!113 = !DILocation(line: 129, column: 7, scope: !12)
!114 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "temp", scope: !12, file: !7, line: 130, type: !23)
!115 = !DILocation(line: 130, column: 8, scope: !12)
!116 = !DILocation(line: 131, column: 3, scope: !12)
!117 = !DILocation(line: 132, column: 11, scope: !12)
!118 = !DILocation(line: 133, column: 12, scope: !12)
!119 = !DILocation(line: 134, column: 10, scope: !120)
!120 = distinct !DILexicalBlock(scope: !12, file: !7, line: 134, column: 3)
!121 = !DILocation(line: 134, column: 8, scope: !120)
!122 = !DILocation(line: 134, column: 15, scope: !123)
!123 = !DILexicalBlockFile(scope: !124, file: !7, discriminator: 2)
!124 = !DILexicalBlockFile(scope: !125, file: !7, discriminator: 1)
!125 = distinct !DILexicalBlock(scope: !120, file: !7, line: 134, column: 3)
!126 = !DILocation(line: 134, column: 17, scope: !125)
!127 = !DILocation(line: 134, column: 3, scope: !120)
!128 = !DILocation(line: 135, column: 12, scope: !129)
!129 = distinct !DILexicalBlock(scope: !125, file: !7, line: 134, column: 38)
!130 = !DILocation(line: 135, column: 10, scope: !129)
!131 = !DILocation(line: 137, column: 25, scope: !129)
!132 = !DILocation(line: 137, column: 33, scope: !129)
!133 = !DILocation(line: 137, column: 38, scope: !129)
!134 = !DILocation(line: 137, column: 49, scope: !129)
!135 = !DILocation(line: 137, column: 30, scope: !129)
!136 = !DILocation(line: 137, column: 59, scope: !129)
!137 = !DILocation(line: 137, column: 19, scope: !129)
!138 = !DILocation(line: 137, column: 14, scope: !129)
!139 = !DILocation(line: 137, column: 5, scope: !129)
!140 = !DILocation(line: 137, column: 17, scope: !129)
!141 = !DILocation(line: 138, column: 18, scope: !142)
!142 = distinct !DILexicalBlock(scope: !129, file: !7, line: 138, column: 9)
!143 = !DILocation(line: 138, column: 9, scope: !142)
!144 = !DILocation(line: 138, column: 23, scope: !142)
!145 = !DILocation(line: 138, column: 21, scope: !142)
!146 = !DILocation(line: 138, column: 9, scope: !129)
!147 = !DILocation(line: 139, column: 26, scope: !142)
!148 = !DILocation(line: 139, column: 17, scope: !142)
!149 = !DILocation(line: 139, column: 15, scope: !142)
!150 = !DILocation(line: 139, column: 7, scope: !142)
!151 = !DILocation(line: 140, column: 23, scope: !152)
!152 = distinct !DILexicalBlock(scope: !142, file: !7, line: 140, column: 14)
!153 = !DILocation(line: 140, column: 14, scope: !152)
!154 = !DILocation(line: 140, column: 28, scope: !152)
!155 = !DILocation(line: 140, column: 26, scope: !152)
!156 = !DILocation(line: 140, column: 14, scope: !142)
!157 = !DILocation(line: 141, column: 27, scope: !152)
!158 = !DILocation(line: 141, column: 18, scope: !152)
!159 = !DILocation(line: 141, column: 16, scope: !152)
!160 = !DILocation(line: 141, column: 7, scope: !152)
!161 = !DILocation(line: 142, column: 3, scope: !129)
!162 = !DILocation(line: 134, column: 34, scope: !125)
!163 = !DILocation(line: 134, column: 3, scope: !125)
!164 = !DILocation(line: 143, column: 1, scope: !12)
!165 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "run", arg: 1, scope: !13, file: !7, line: 145, type: !4)
!166 = !DILocation(line: 145, column: 17, scope: !13)
!167 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !13, file: !7, line: 146, type: !4)
!168 = !DILocation(line: 146, column: 7, scope: !13)
!169 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !13, file: !7, line: 146, type: !4)
!170 = !DILocation(line: 146, column: 10, scope: !13)
!171 = !DILocation(line: 147, column: 3, scope: !13)
!172 = !DILocation(line: 148, column: 7, scope: !13)
!173 = !DILocation(line: 150, column: 3, scope: !13)
!174 = !DILocation(line: 150, column: 10, scope: !175)
!175 = !DILexicalBlockFile(scope: !176, file: !7, discriminator: 2)
!176 = !DILexicalBlockFile(scope: !13, file: !7, discriminator: 1)
!177 = !DILocation(line: 150, column: 14, scope: !13)
!178 = !DILocation(line: 151, column: 7, scope: !179)
!179 = distinct !DILexicalBlock(scope: !13, file: !7, line: 150, column: 19)
!180 = !DILocation(line: 152, column: 5, scope: !179)
!181 = !DILocation(line: 152, column: 12, scope: !182)
!182 = !DILexicalBlockFile(scope: !183, file: !7, discriminator: 2)
!183 = !DILexicalBlockFile(scope: !179, file: !7, discriminator: 1)
!184 = !DILocation(line: 152, column: 16, scope: !179)
!185 = !DILocation(line: 152, column: 14, scope: !179)
!186 = !DILocation(line: 153, column: 20, scope: !187)
!187 = distinct !DILexicalBlock(scope: !188, file: !7, line: 153, column: 11)
!188 = distinct !DILexicalBlock(scope: !179, file: !7, line: 152, column: 21)
!189 = !DILocation(line: 153, column: 11, scope: !187)
!190 = !DILocation(line: 153, column: 34, scope: !187)
!191 = !DILocation(line: 153, column: 36, scope: !187)
!192 = !DILocation(line: 153, column: 25, scope: !187)
!193 = !DILocation(line: 153, column: 23, scope: !187)
!194 = !DILocation(line: 153, column: 11, scope: !188)
!195 = !DILocation(line: 154, column: 22, scope: !196)
!196 = distinct !DILexicalBlock(scope: !187, file: !7, line: 153, column: 42)
!197 = !DILocation(line: 154, column: 13, scope: !196)
!198 = !DILocation(line: 154, column: 11, scope: !196)
!199 = !DILocation(line: 155, column: 32, scope: !196)
!200 = !DILocation(line: 155, column: 34, scope: !196)
!201 = !DILocation(line: 155, column: 23, scope: !196)
!202 = !DILocation(line: 155, column: 18, scope: !196)
!203 = !DILocation(line: 155, column: 9, scope: !196)
!204 = !DILocation(line: 155, column: 21, scope: !196)
!205 = !DILocation(line: 156, column: 27, scope: !196)
!206 = !DILocation(line: 156, column: 18, scope: !196)
!207 = !DILocation(line: 156, column: 20, scope: !196)
!208 = !DILocation(line: 156, column: 9, scope: !196)
!209 = !DILocation(line: 156, column: 25, scope: !196)
!210 = !DILocation(line: 157, column: 7, scope: !196)
!211 = !DILocation(line: 158, column: 11, scope: !188)
!212 = !DILocation(line: 158, column: 13, scope: !188)
!213 = !DILocation(line: 158, column: 9, scope: !188)
!214 = !DILocation(line: 160, column: 11, scope: !179)
!215 = !DILocation(line: 160, column: 15, scope: !179)
!216 = !DILocation(line: 160, column: 9, scope: !179)
!217 = !DILocation(line: 163, column: 8, scope: !218)
!218 = distinct !DILexicalBlock(scope: !13, file: !7, line: 163, column: 7)
!219 = !DILocation(line: 163, column: 23, scope: !218)
!220 = !DILocation(line: 163, column: 20, scope: !218)
!221 = !DILocation(line: 163, column: 33, scope: !218)
!222 = !DILocation(line: 163, column: 37, scope: !223)
!223 = !DILexicalBlockFile(scope: !218, file: !7, discriminator: 1)
!224 = !DILocation(line: 163, column: 62, scope: !218)
!225 = !DILocation(line: 163, column: 59, scope: !218)
!226 = !DILocation(line: 163, column: 7, scope: !13)
!227 = !DILocation(line: 164, column: 5, scope: !218)
!228 = !DILocation(line: 165, column: 27, scope: !13)
!229 = !DILocation(line: 165, column: 31, scope: !13)
!230 = !DILocation(line: 165, column: 18, scope: !13)
!231 = !DILocation(line: 165, column: 3, scope: !13)
!232 = !DILocation(line: 166, column: 1, scope: !13)
!233 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !16, file: !7, line: 169, type: !4)
!234 = !DILocation(line: 169, column: 7, scope: !16)
!235 = !DILocation(line: 170, column: 10, scope: !236)
!236 = distinct !DILexicalBlock(scope: !16, file: !7, line: 170, column: 3)
!237 = !DILocation(line: 170, column: 8, scope: !236)
!238 = !DILocation(line: 170, column: 15, scope: !239)
!239 = !DILexicalBlockFile(scope: !240, file: !7, discriminator: 2)
!240 = !DILexicalBlockFile(scope: !241, file: !7, discriminator: 1)
!241 = distinct !DILexicalBlock(scope: !236, file: !7, line: 170, column: 3)
!242 = !DILocation(line: 170, column: 17, scope: !241)
!243 = !DILocation(line: 170, column: 3, scope: !236)
!244 = !DILocation(line: 171, column: 12, scope: !245)
!245 = distinct !DILexicalBlock(scope: !241, file: !7, line: 170, column: 29)
!246 = !DILocation(line: 171, column: 5, scope: !245)
!247 = !DILocation(line: 172, column: 3, scope: !245)
!248 = !DILocation(line: 170, column: 25, scope: !241)
!249 = !DILocation(line: 170, column: 3, scope: !241)
!250 = !DILocation(line: 173, column: 3, scope: !16)
