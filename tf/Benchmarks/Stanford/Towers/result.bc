; ModuleID = '/home/gleison/tf/Benchmarks/Stanford/Towers/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.element = type { i32, i32 }
%struct.node = type { %struct.node*, %struct.node*, i32 }
%struct.complex = type { float, float }

@seed = common global i64 0, align 8
@.str = private unnamed_addr constant [22 x i8] c" Error in Towers: %s\0A\00", align 1
@stack = common global [4 x i32] zeroinitializer, align 16
@freelist = common global i32 0, align 4
@cellspace = common global [19 x %struct.element] zeroinitializer, align 16
@.str.1 = private unnamed_addr constant [16 x i8] c"out of space   \00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"disc size error\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"nothing to pop \00", align 1
@movesdone = common global i32 0, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c" Error in Towers.\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@value = common global float 0.000000e+00, align 4
@fixed = common global float 0.000000e+00, align 4
@floated = common global float 0.000000e+00, align 4
@permarray = common global [11 x i32] zeroinitializer, align 16
@pctr = common global i32 0, align 4
@tree = common global %struct.node* null, align 8
@ima = common global [41 x [41 x i32]] zeroinitializer, align 16
@imb = common global [41 x [41 x i32]] zeroinitializer, align 16
@imr = common global [41 x [41 x i32]] zeroinitializer, align 16
@rma = common global [41 x [41 x float]] zeroinitializer, align 16
@rmb = common global [41 x [41 x float]] zeroinitializer, align 16
@rmr = common global [41 x [41 x float]] zeroinitializer, align 16
@piececount = common global [4 x i32] zeroinitializer, align 16
@class = common global [13 x i32] zeroinitializer, align 16
@piecemax = common global [13 x i32] zeroinitializer, align 16
@puzzl = common global [512 x i32] zeroinitializer, align 16
@p = common global [13 x [512 x i32]] zeroinitializer, align 16
@n = common global i32 0, align 4
@kount = common global i32 0, align 4
@sortlist = common global [5001 x i32] zeroinitializer, align 16
@biggest = common global i32 0, align 4
@littlest = common global i32 0, align 4
@top = common global i32 0, align 4
@z = common global [257 x %struct.complex] zeroinitializer, align 16
@w = common global [257 x %struct.complex] zeroinitializer, align 16
@e = common global [130 x %struct.complex] zeroinitializer, align 16
@zr = common global float 0.000000e+00, align 4
@zi = common global float 0.000000e+00, align 4

; Function Attrs: nounwind uwtable
define void @Initrand() #0 {
entry:
  store i64 74755, i64* @seed, align 8, !dbg !118
  ret void, !dbg !119
}

; Function Attrs: nounwind uwtable
define i32 @Rand() #0 {
entry:
  %0 = load i64, i64* @seed, align 8, !dbg !120
  %mul = mul nsw i64 %0, 1309, !dbg !121
  %add = add nsw i64 %mul, 13849, !dbg !122
  %and = and i64 %add, 65535, !dbg !123
  store i64 %and, i64* @seed, align 8, !dbg !124
  %1 = load i64, i64* @seed, align 8, !dbg !125
  %conv = trunc i64 %1 to i32, !dbg !126
  ret i32 %conv, !dbg !127
}

; Function Attrs: nounwind uwtable
define void @Error(i8* %emsg) #0 {
entry:
  %emsg.addr = alloca i8*, align 8
  store i8* %emsg, i8** %emsg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %emsg.addr, metadata !128, metadata !129), !dbg !130
  %0 = load i8*, i8** %emsg.addr, align 8, !dbg !131
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i8* %0), !dbg !132
  ret void, !dbg !133
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind uwtable
define void @Makenull(i32 %s) #0 {
entry:
  %s.addr = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !134, metadata !129), !dbg !135
  %0 = load i32, i32* %s.addr, align 4, !dbg !136
  %idxprom = sext i32 %0 to i64, !dbg !137
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @stack, i32 0, i64 %idxprom, !dbg !137
  store i32 0, i32* %arrayidx, align 4, !dbg !138
  ret void, !dbg !139
}

; Function Attrs: nounwind uwtable
define i32 @Getelement() #0 {
entry:
  %temp = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %temp, metadata !140, metadata !129), !dbg !141
  store i32 0, i32* %temp, align 4, !dbg !141
  %0 = load i32, i32* @freelist, align 4, !dbg !142
  %cmp = icmp sgt i32 %0, 0, !dbg !144
  br i1 %cmp, label %if.then, label %if.else, !dbg !145

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @freelist, align 4, !dbg !146
  store i32 %1, i32* %temp, align 4, !dbg !148
  %2 = load i32, i32* @freelist, align 4, !dbg !149
  %idxprom = sext i32 %2 to i64, !dbg !150
  %arrayidx = getelementptr inbounds [19 x %struct.element], [19 x %struct.element]* @cellspace, i32 0, i64 %idxprom, !dbg !150
  %next = getelementptr inbounds %struct.element, %struct.element* %arrayidx, i32 0, i32 1, !dbg !151
  %3 = load i32, i32* %next, align 4, !dbg !151
  store i32 %3, i32* @freelist, align 4, !dbg !152
  br label %if.end, !dbg !153

if.else:                                          ; preds = %entry
  call void @Error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !154
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i32, i32* %temp, align 4, !dbg !155
  ret i32 %4, !dbg !156
}

; Function Attrs: nounwind uwtable
define void @Push(i32 %i, i32 %s) #0 {
entry:
  %i.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %errorfound = alloca i32, align 4
  %localel = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !157, metadata !129), !dbg !158
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !159, metadata !129), !dbg !160
  call void @llvm.dbg.declare(metadata i32* %errorfound, metadata !161, metadata !129), !dbg !162
  call void @llvm.dbg.declare(metadata i32* %localel, metadata !163, metadata !129), !dbg !164
  store i32 0, i32* %errorfound, align 4, !dbg !165
  %0 = load i32, i32* %s.addr, align 4, !dbg !166
  %idxprom = sext i32 %0 to i64, !dbg !168
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @stack, i32 0, i64 %idxprom, !dbg !168
  %1 = load i32, i32* %arrayidx, align 4, !dbg !168
  %cmp = icmp sgt i32 %1, 0, !dbg !169
  br i1 %cmp, label %if.then, label %if.end.7, !dbg !170

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %s.addr, align 4, !dbg !171
  %idxprom1 = sext i32 %2 to i64, !dbg !173
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* @stack, i32 0, i64 %idxprom1, !dbg !173
  %3 = load i32, i32* %arrayidx2, align 4, !dbg !173
  %idxprom3 = sext i32 %3 to i64, !dbg !174
  %arrayidx4 = getelementptr inbounds [19 x %struct.element], [19 x %struct.element]* @cellspace, i32 0, i64 %idxprom3, !dbg !174
  %discsize = getelementptr inbounds %struct.element, %struct.element* %arrayidx4, i32 0, i32 0, !dbg !175
  %4 = load i32, i32* %discsize, align 4, !dbg !175
  %5 = load i32, i32* %i.addr, align 4, !dbg !176
  %cmp5 = icmp sle i32 %4, %5, !dbg !177
  br i1 %cmp5, label %if.then.6, label %if.end, !dbg !178

if.then.6:                                        ; preds = %if.then
  store i32 1, i32* %errorfound, align 4, !dbg !179
  call void @Error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0)), !dbg !181
  br label %if.end, !dbg !182

if.end:                                           ; preds = %if.then.6, %if.then
  br label %if.end.7, !dbg !183

if.end.7:                                         ; preds = %if.end, %entry
  %6 = load i32, i32* %errorfound, align 4, !dbg !185
  %tobool = icmp ne i32 %6, 0, !dbg !185
  br i1 %tobool, label %if.end.18, label %if.then.8, !dbg !187

if.then.8:                                        ; preds = %if.end.7
  %call = call i32 @Getelement(), !dbg !188
  store i32 %call, i32* %localel, align 4, !dbg !190
  %7 = load i32, i32* %s.addr, align 4, !dbg !191
  %idxprom9 = sext i32 %7 to i64, !dbg !192
  %arrayidx10 = getelementptr inbounds [4 x i32], [4 x i32]* @stack, i32 0, i64 %idxprom9, !dbg !192
  %8 = load i32, i32* %arrayidx10, align 4, !dbg !192
  %9 = load i32, i32* %localel, align 4, !dbg !193
  %idxprom11 = sext i32 %9 to i64, !dbg !194
  %arrayidx12 = getelementptr inbounds [19 x %struct.element], [19 x %struct.element]* @cellspace, i32 0, i64 %idxprom11, !dbg !194
  %next = getelementptr inbounds %struct.element, %struct.element* %arrayidx12, i32 0, i32 1, !dbg !195
  store i32 %8, i32* %next, align 4, !dbg !196
  %10 = load i32, i32* %localel, align 4, !dbg !197
  %11 = load i32, i32* %s.addr, align 4, !dbg !198
  %idxprom13 = sext i32 %11 to i64, !dbg !199
  %arrayidx14 = getelementptr inbounds [4 x i32], [4 x i32]* @stack, i32 0, i64 %idxprom13, !dbg !199
  store i32 %10, i32* %arrayidx14, align 4, !dbg !200
  %12 = load i32, i32* %i.addr, align 4, !dbg !201
  %13 = load i32, i32* %localel, align 4, !dbg !202
  %idxprom15 = sext i32 %13 to i64, !dbg !203
  %arrayidx16 = getelementptr inbounds [19 x %struct.element], [19 x %struct.element]* @cellspace, i32 0, i64 %idxprom15, !dbg !203
  %discsize17 = getelementptr inbounds %struct.element, %struct.element* %arrayidx16, i32 0, i32 0, !dbg !204
  store i32 %12, i32* %discsize17, align 4, !dbg !205
  br label %if.end.18, !dbg !206

if.end.18:                                        ; preds = %if.then.8, %if.end.7
  ret void, !dbg !207
}

; Function Attrs: nounwind uwtable
define void @Init(i32 %s, i32 %n) #0 {
entry:
  %s.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %discctr = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !208, metadata !129), !dbg !209
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !210, metadata !129), !dbg !211
  call void @llvm.dbg.declare(metadata i32* %discctr, metadata !212, metadata !129), !dbg !213
  %0 = load i32, i32* %s.addr, align 4, !dbg !214
  call void @Makenull(i32 %0), !dbg !215
  %1 = load i32, i32* %n.addr, align 4, !dbg !216
  store i32 %1, i32* %discctr, align 4, !dbg !218
  br label %for.cond, !dbg !219

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %discctr, align 4, !dbg !220
  %cmp = icmp sge i32 %2, 1, !dbg !224
  br i1 %cmp, label %for.body, label %for.end, !dbg !225

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %discctr, align 4, !dbg !226
  %4 = load i32, i32* %s.addr, align 4, !dbg !227
  call void @Push(i32 %3, i32 %4), !dbg !228
  br label %for.inc, !dbg !228

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %discctr, align 4, !dbg !229
  %dec = add nsw i32 %5, -1, !dbg !229
  store i32 %dec, i32* %discctr, align 4, !dbg !229
  br label %for.cond, !dbg !230

for.end:                                          ; preds = %for.cond
  ret void, !dbg !231
}

; Function Attrs: nounwind uwtable
define i32 @Pop(i32 %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  %temp1 = alloca i32, align 4
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !232, metadata !129), !dbg !233
  call void @llvm.dbg.declare(metadata i32* %temp, metadata !234, metadata !129), !dbg !235
  call void @llvm.dbg.declare(metadata i32* %temp1, metadata !236, metadata !129), !dbg !237
  %0 = load i32, i32* %s.addr, align 4, !dbg !238
  %idxprom = sext i32 %0 to i64, !dbg !240
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @stack, i32 0, i64 %idxprom, !dbg !240
  %1 = load i32, i32* %arrayidx, align 4, !dbg !240
  %cmp = icmp sgt i32 %1, 0, !dbg !241
  br i1 %cmp, label %if.then, label %if.else, !dbg !242

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %s.addr, align 4, !dbg !243
  %idxprom1 = sext i32 %2 to i64, !dbg !245
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* @stack, i32 0, i64 %idxprom1, !dbg !245
  %3 = load i32, i32* %arrayidx2, align 4, !dbg !245
  %idxprom3 = sext i32 %3 to i64, !dbg !246
  %arrayidx4 = getelementptr inbounds [19 x %struct.element], [19 x %struct.element]* @cellspace, i32 0, i64 %idxprom3, !dbg !246
  %discsize = getelementptr inbounds %struct.element, %struct.element* %arrayidx4, i32 0, i32 0, !dbg !247
  %4 = load i32, i32* %discsize, align 4, !dbg !247
  store i32 %4, i32* %temp1, align 4, !dbg !248
  %5 = load i32, i32* %s.addr, align 4, !dbg !249
  %idxprom5 = sext i32 %5 to i64, !dbg !250
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* @stack, i32 0, i64 %idxprom5, !dbg !250
  %6 = load i32, i32* %arrayidx6, align 4, !dbg !250
  %idxprom7 = sext i32 %6 to i64, !dbg !251
  %arrayidx8 = getelementptr inbounds [19 x %struct.element], [19 x %struct.element]* @cellspace, i32 0, i64 %idxprom7, !dbg !251
  %next = getelementptr inbounds %struct.element, %struct.element* %arrayidx8, i32 0, i32 1, !dbg !252
  %7 = load i32, i32* %next, align 4, !dbg !252
  store i32 %7, i32* %temp, align 4, !dbg !253
  %8 = load i32, i32* @freelist, align 4, !dbg !254
  %9 = load i32, i32* %s.addr, align 4, !dbg !255
  %idxprom9 = sext i32 %9 to i64, !dbg !256
  %arrayidx10 = getelementptr inbounds [4 x i32], [4 x i32]* @stack, i32 0, i64 %idxprom9, !dbg !256
  %10 = load i32, i32* %arrayidx10, align 4, !dbg !256
  %idxprom11 = sext i32 %10 to i64, !dbg !257
  %arrayidx12 = getelementptr inbounds [19 x %struct.element], [19 x %struct.element]* @cellspace, i32 0, i64 %idxprom11, !dbg !257
  %next13 = getelementptr inbounds %struct.element, %struct.element* %arrayidx12, i32 0, i32 1, !dbg !258
  store i32 %8, i32* %next13, align 4, !dbg !259
  %11 = load i32, i32* %s.addr, align 4, !dbg !260
  %idxprom14 = sext i32 %11 to i64, !dbg !261
  %arrayidx15 = getelementptr inbounds [4 x i32], [4 x i32]* @stack, i32 0, i64 %idxprom14, !dbg !261
  %12 = load i32, i32* %arrayidx15, align 4, !dbg !261
  store i32 %12, i32* @freelist, align 4, !dbg !262
  %13 = load i32, i32* %temp, align 4, !dbg !263
  %14 = load i32, i32* %s.addr, align 4, !dbg !264
  %idxprom16 = sext i32 %14 to i64, !dbg !265
  %arrayidx17 = getelementptr inbounds [4 x i32], [4 x i32]* @stack, i32 0, i64 %idxprom16, !dbg !265
  store i32 %13, i32* %arrayidx17, align 4, !dbg !266
  %15 = load i32, i32* %temp1, align 4, !dbg !267
  store i32 %15, i32* %retval, !dbg !268
  br label %return, !dbg !268

if.else:                                          ; preds = %entry
  call void @Error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0)), !dbg !269
  br label %if.end

if.end:                                           ; preds = %if.else
  store i32 0, i32* %retval, !dbg !270
  br label %return, !dbg !270

return:                                           ; preds = %if.end, %if.then
  %16 = load i32, i32* %retval, !dbg !271
  ret i32 %16, !dbg !271
}

; Function Attrs: nounwind uwtable
define void @Move(i32 %s1, i32 %s2) #0 {
entry:
  %s1.addr = alloca i32, align 4
  %s2.addr = alloca i32, align 4
  store i32 %s1, i32* %s1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s1.addr, metadata !272, metadata !129), !dbg !273
  store i32 %s2, i32* %s2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s2.addr, metadata !274, metadata !129), !dbg !275
  %0 = load i32, i32* %s1.addr, align 4, !dbg !276
  %call = call i32 @Pop(i32 %0), !dbg !277
  %1 = load i32, i32* %s2.addr, align 4, !dbg !278
  call void @Push(i32 %call, i32 %1), !dbg !279
  %2 = load i32, i32* @movesdone, align 4, !dbg !280
  %add = add nsw i32 %2, 1, !dbg !281
  store i32 %add, i32* @movesdone, align 4, !dbg !282
  ret void, !dbg !283
}

; Function Attrs: nounwind uwtable
define void @tower(i32 %i, i32 %j, i32 %k) #0 {
entry:
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %other = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !284, metadata !129), !dbg !285
  store i32 %j, i32* %j.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %j.addr, metadata !286, metadata !129), !dbg !287
  store i32 %k, i32* %k.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %k.addr, metadata !288, metadata !129), !dbg !289
  call void @llvm.dbg.declare(metadata i32* %other, metadata !290, metadata !129), !dbg !291
  %0 = load i32, i32* %k.addr, align 4, !dbg !292
  %cmp = icmp eq i32 %0, 1, !dbg !294
  br i1 %cmp, label %if.then, label %if.else, !dbg !295

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !296
  %2 = load i32, i32* %j.addr, align 4, !dbg !297
  call void @Move(i32 %1, i32 %2), !dbg !298
  br label %if.end, !dbg !298

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %i.addr, align 4, !dbg !299
  %sub = sub nsw i32 6, %3, !dbg !301
  %4 = load i32, i32* %j.addr, align 4, !dbg !302
  %sub1 = sub nsw i32 %sub, %4, !dbg !303
  store i32 %sub1, i32* %other, align 4, !dbg !304
  %5 = load i32, i32* %i.addr, align 4, !dbg !305
  %6 = load i32, i32* %other, align 4, !dbg !306
  %7 = load i32, i32* %k.addr, align 4, !dbg !307
  %sub2 = sub nsw i32 %7, 1, !dbg !308
  call void @tower(i32 %5, i32 %6, i32 %sub2), !dbg !309
  %8 = load i32, i32* %i.addr, align 4, !dbg !310
  %9 = load i32, i32* %j.addr, align 4, !dbg !311
  call void @Move(i32 %8, i32 %9), !dbg !312
  %10 = load i32, i32* %other, align 4, !dbg !313
  %11 = load i32, i32* %j.addr, align 4, !dbg !314
  %12 = load i32, i32* %k.addr, align 4, !dbg !315
  %sub3 = sub nsw i32 %12, 1, !dbg !316
  call void @tower(i32 %10, i32 %11, i32 %sub3), !dbg !317
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !318
}

; Function Attrs: nounwind uwtable
define void @Towers() #0 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !319, metadata !129), !dbg !320
  store i32 1, i32* %i, align 4, !dbg !321
  br label %for.cond, !dbg !323

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !324
  %cmp = icmp sle i32 %0, 18, !dbg !328
  br i1 %cmp, label %for.body, label %for.end, !dbg !329

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !330
  %sub = sub nsw i32 %1, 1, !dbg !331
  %2 = load i32, i32* %i, align 4, !dbg !332
  %idxprom = sext i32 %2 to i64, !dbg !333
  %arrayidx = getelementptr inbounds [19 x %struct.element], [19 x %struct.element]* @cellspace, i32 0, i64 %idxprom, !dbg !333
  %next = getelementptr inbounds %struct.element, %struct.element* %arrayidx, i32 0, i32 1, !dbg !334
  store i32 %sub, i32* %next, align 4, !dbg !335
  br label %for.inc, !dbg !333

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4, !dbg !336
  %inc = add nsw i32 %3, 1, !dbg !336
  store i32 %inc, i32* %i, align 4, !dbg !336
  br label %for.cond, !dbg !337

for.end:                                          ; preds = %for.cond
  store i32 18, i32* @freelist, align 4, !dbg !338
  call void @Init(i32 1, i32 14), !dbg !339
  call void @Makenull(i32 2), !dbg !340
  call void @Makenull(i32 3), !dbg !341
  store i32 0, i32* @movesdone, align 4, !dbg !342
  call void @tower(i32 1, i32 2, i32 14), !dbg !343
  %4 = load i32, i32* @movesdone, align 4, !dbg !344
  %cmp1 = icmp ne i32 %4, 16383, !dbg !346
  br i1 %cmp1, label %if.then, label %if.end, !dbg !347

if.then:                                          ; preds = %for.end
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0)), !dbg !348
  br label %if.end, !dbg !348

if.end:                                           ; preds = %if.then, %for.end
  %5 = load i32, i32* @movesdone, align 4, !dbg !349
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %5), !dbg !350
  ret void, !dbg !351
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval
  call void @llvm.dbg.declare(metadata i32* %i, metadata !352, metadata !129), !dbg !353
  store i32 0, i32* %i, align 4, !dbg !354
  br label %for.cond, !dbg !356

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !357
  %cmp = icmp slt i32 %0, 100, !dbg !361
  br i1 %cmp, label %for.body, label %for.end, !dbg !362

for.body:                                         ; preds = %for.cond
  call void @Towers(), !dbg !363
  br label %for.inc, !dbg !363

for.inc:                                          ; preds = %for.body
  %1 = load i32, i32* %i, align 4, !dbg !364
  %inc = add nsw i32 %1, 1, !dbg !364
  store i32 %inc, i32* %i, align 4, !dbg !364
  br label %for.cond, !dbg !365

for.end:                                          ; preds = %for.cond
  ret i32 0, !dbg !366
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!115, !116}
!llvm.ident = !{!117}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !5, globals: !34)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Stanford/Towers")
!2 = !{}
!3 = !{!4}
!4 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!5 = !{!6, !10, !12, !17, !20, !21, !24, !25, !28, !29, !32, !33}
!6 = !DISubprogram(name: "Initrand", scope: !7, file: !7, line: 117, type: !8, isLocal: false, isDefinition: true, scopeLine: 117, isOptimized: false, function: void ()* @Initrand, variables: !2)
!7 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Stanford/Towers/tmp.c", directory: "/home/gleison/tf/Benchmarks/Stanford/Towers")
!8 = !DISubroutineType(types: !9)
!9 = !{null}
!10 = !DISubprogram(name: "Rand", scope: !7, file: !7, line: 121, type: !11, isLocal: false, isDefinition: true, scopeLine: 121, isOptimized: false, function: i32 ()* @Rand, variables: !2)
!11 = !DISubroutineType(types: !3)
!12 = !DISubprogram(name: "Error", scope: !7, file: !7, line: 128, type: !13, isLocal: false, isDefinition: true, scopeLine: 128, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*)* @Error, variables: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{null, !15}
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64, align: 64)
!16 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!17 = !DISubprogram(name: "Makenull", scope: !7, file: !7, line: 132, type: !18, isLocal: false, isDefinition: true, scopeLine: 132, flags: DIFlagPrototyped, isOptimized: false, function: void (i32)* @Makenull, variables: !2)
!18 = !DISubroutineType(types: !19)
!19 = !{null, !4}
!20 = !DISubprogram(name: "Getelement", scope: !7, file: !7, line: 136, type: !11, isLocal: false, isDefinition: true, scopeLine: 136, isOptimized: false, function: i32 ()* @Getelement, variables: !2)
!21 = !DISubprogram(name: "Push", scope: !7, file: !7, line: 146, type: !22, isLocal: false, isDefinition: true, scopeLine: 146, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32)* @Push, variables: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{null, !4, !4}
!24 = !DISubprogram(name: "Init", scope: !7, file: !7, line: 162, type: !22, isLocal: false, isDefinition: true, scopeLine: 162, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32)* @Init, variables: !2)
!25 = !DISubprogram(name: "Pop", scope: !7, file: !7, line: 169, type: !26, isLocal: false, isDefinition: true, scopeLine: 169, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32)* @Pop, variables: !2)
!26 = !DISubroutineType(types: !27)
!27 = !{!4, !4}
!28 = !DISubprogram(name: "Move", scope: !7, file: !7, line: 183, type: !22, isLocal: false, isDefinition: true, scopeLine: 183, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32)* @Move, variables: !2)
!29 = !DISubprogram(name: "tower", scope: !7, file: !7, line: 188, type: !30, isLocal: false, isDefinition: true, scopeLine: 188, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, i32)* @tower, variables: !2)
!30 = !DISubroutineType(types: !31)
!31 = !{null, !4, !4, !4}
!32 = !DISubprogram(name: "Towers", scope: !7, file: !7, line: 200, type: !8, isLocal: false, isDefinition: true, scopeLine: 200, isOptimized: false, function: void ()* @Towers, variables: !2)
!33 = !DISubprogram(name: "main", scope: !7, file: !7, line: 215, type: !11, isLocal: false, isDefinition: true, scopeLine: 215, isOptimized: false, function: i32 ()* @main, variables: !2)
!34 = !{!35, !37, !38, !39, !41, !45, !47, !54, !58, !66, !67, !68, !72, !73, !74, !76, !77, !78, !79, !83, !84, !88, !91, !92, !93, !97, !98, !99, !100, !108, !109, !113, !114}
!35 = !DIGlobalVariable(name: "value", scope: !0, file: !7, line: 83, type: !36, isLocal: false, isDefinition: true, variable: float* @value)
!36 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!37 = !DIGlobalVariable(name: "fixed", scope: !0, file: !7, line: 83, type: !36, isLocal: false, isDefinition: true, variable: float* @fixed)
!38 = !DIGlobalVariable(name: "floated", scope: !0, file: !7, line: 83, type: !36, isLocal: false, isDefinition: true, variable: float* @floated)
!39 = !DIGlobalVariable(name: "seed", scope: !0, file: !7, line: 86, type: !40, isLocal: false, isDefinition: true, variable: i64* @seed)
!40 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!41 = !DIGlobalVariable(name: "permarray", scope: !0, file: !7, line: 89, type: !42, isLocal: false, isDefinition: true, variable: [11 x i32]* @permarray)
!42 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 352, align: 32, elements: !43)
!43 = !{!44}
!44 = !DISubrange(count: 11)
!45 = !DIGlobalVariable(name: "pctr", scope: !0, file: !7, line: 91, type: !46, isLocal: false, isDefinition: true, variable: i32* @pctr)
!46 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!47 = !DIGlobalVariable(name: "tree", scope: !0, file: !7, line: 94, type: !48, isLocal: false, isDefinition: true, variable: %struct.node** @tree)
!48 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !49, size: 64, align: 64)
!49 = !DICompositeType(tag: DW_TAG_structure_type, name: "node", file: !7, line: 45, size: 192, align: 64, elements: !50)
!50 = !{!51, !52, !53}
!51 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !49, file: !7, line: 46, baseType: !48, size: 64, align: 64)
!52 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !49, file: !7, line: 46, baseType: !48, size: 64, align: 64, offset: 64)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !49, file: !7, line: 47, baseType: !4, size: 32, align: 32, offset: 128)
!54 = !DIGlobalVariable(name: "stack", scope: !0, file: !7, line: 97, type: !55, isLocal: false, isDefinition: true, variable: [4 x i32]* @stack)
!55 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, align: 32, elements: !56)
!56 = !{!57}
!57 = !DISubrange(count: 4)
!58 = !DIGlobalVariable(name: "cellspace", scope: !0, file: !7, line: 98, type: !59, isLocal: false, isDefinition: true, variable: [19 x %struct.element]* @cellspace)
!59 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 1216, align: 32, elements: !64)
!60 = !DICompositeType(tag: DW_TAG_structure_type, name: "element", file: !7, line: 54, size: 64, align: 32, elements: !61)
!61 = !{!62, !63}
!62 = !DIDerivedType(tag: DW_TAG_member, name: "discsize", scope: !60, file: !7, line: 55, baseType: !4, size: 32, align: 32)
!63 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !60, file: !7, line: 56, baseType: !4, size: 32, align: 32, offset: 32)
!64 = !{!65}
!65 = !DISubrange(count: 19)
!66 = !DIGlobalVariable(name: "freelist", scope: !0, file: !7, line: 99, type: !4, isLocal: false, isDefinition: true, variable: i32* @freelist)
!67 = !DIGlobalVariable(name: "movesdone", scope: !0, file: !7, line: 99, type: !4, isLocal: false, isDefinition: true, variable: i32* @movesdone)
!68 = !DIGlobalVariable(name: "ima", scope: !0, file: !7, line: 103, type: !69, isLocal: false, isDefinition: true, variable: [41 x [41 x i32]]* @ima)
!69 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 53792, align: 32, elements: !70)
!70 = !{!71, !71}
!71 = !DISubrange(count: 41)
!72 = !DIGlobalVariable(name: "imb", scope: !0, file: !7, line: 103, type: !69, isLocal: false, isDefinition: true, variable: [41 x [41 x i32]]* @imb)
!73 = !DIGlobalVariable(name: "imr", scope: !0, file: !7, line: 103, type: !69, isLocal: false, isDefinition: true, variable: [41 x [41 x i32]]* @imr)
!74 = !DIGlobalVariable(name: "rma", scope: !0, file: !7, line: 104, type: !75, isLocal: false, isDefinition: true, variable: [41 x [41 x float]]* @rma)
!75 = !DICompositeType(tag: DW_TAG_array_type, baseType: !36, size: 53792, align: 32, elements: !70)
!76 = !DIGlobalVariable(name: "rmb", scope: !0, file: !7, line: 104, type: !75, isLocal: false, isDefinition: true, variable: [41 x [41 x float]]* @rmb)
!77 = !DIGlobalVariable(name: "rmr", scope: !0, file: !7, line: 104, type: !75, isLocal: false, isDefinition: true, variable: [41 x [41 x float]]* @rmr)
!78 = !DIGlobalVariable(name: "piececount", scope: !0, file: !7, line: 107, type: !55, isLocal: false, isDefinition: true, variable: [4 x i32]* @piececount)
!79 = !DIGlobalVariable(name: "class", scope: !0, file: !7, line: 107, type: !80, isLocal: false, isDefinition: true, variable: [13 x i32]* @class)
!80 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 416, align: 32, elements: !81)
!81 = !{!82}
!82 = !DISubrange(count: 13)
!83 = !DIGlobalVariable(name: "piecemax", scope: !0, file: !7, line: 107, type: !80, isLocal: false, isDefinition: true, variable: [13 x i32]* @piecemax)
!84 = !DIGlobalVariable(name: "puzzl", scope: !0, file: !7, line: 108, type: !85, isLocal: false, isDefinition: true, variable: [512 x i32]* @puzzl)
!85 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16384, align: 32, elements: !86)
!86 = !{!87}
!87 = !DISubrange(count: 512)
!88 = !DIGlobalVariable(name: "p", scope: !0, file: !7, line: 108, type: !89, isLocal: false, isDefinition: true, variable: [13 x [512 x i32]]* @p)
!89 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 212992, align: 32, elements: !90)
!90 = !{!82, !87}
!91 = !DIGlobalVariable(name: "n", scope: !0, file: !7, line: 108, type: !4, isLocal: false, isDefinition: true, variable: i32* @n)
!92 = !DIGlobalVariable(name: "kount", scope: !0, file: !7, line: 108, type: !4, isLocal: false, isDefinition: true, variable: i32* @kount)
!93 = !DIGlobalVariable(name: "sortlist", scope: !0, file: !7, line: 111, type: !94, isLocal: false, isDefinition: true, variable: [5001 x i32]* @sortlist)
!94 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 160032, align: 32, elements: !95)
!95 = !{!96}
!96 = !DISubrange(count: 5001)
!97 = !DIGlobalVariable(name: "biggest", scope: !0, file: !7, line: 111, type: !4, isLocal: false, isDefinition: true, variable: i32* @biggest)
!98 = !DIGlobalVariable(name: "littlest", scope: !0, file: !7, line: 111, type: !4, isLocal: false, isDefinition: true, variable: i32* @littlest)
!99 = !DIGlobalVariable(name: "top", scope: !0, file: !7, line: 111, type: !4, isLocal: false, isDefinition: true, variable: i32* @top)
!100 = !DIGlobalVariable(name: "z", scope: !0, file: !7, line: 114, type: !101, isLocal: false, isDefinition: true, variable: [257 x %struct.complex]* @z)
!101 = !DICompositeType(tag: DW_TAG_array_type, baseType: !102, size: 16448, align: 32, elements: !106)
!102 = !DICompositeType(tag: DW_TAG_structure_type, name: "complex", file: !7, line: 75, size: 64, align: 32, elements: !103)
!103 = !{!104, !105}
!104 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !102, file: !7, line: 76, baseType: !36, size: 32, align: 32)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !102, file: !7, line: 76, baseType: !36, size: 32, align: 32, offset: 32)
!106 = !{!107}
!107 = !DISubrange(count: 257)
!108 = !DIGlobalVariable(name: "w", scope: !0, file: !7, line: 114, type: !101, isLocal: false, isDefinition: true, variable: [257 x %struct.complex]* @w)
!109 = !DIGlobalVariable(name: "e", scope: !0, file: !7, line: 114, type: !110, isLocal: false, isDefinition: true, variable: [130 x %struct.complex]* @e)
!110 = !DICompositeType(tag: DW_TAG_array_type, baseType: !102, size: 8320, align: 32, elements: !111)
!111 = !{!112}
!112 = !DISubrange(count: 130)
!113 = !DIGlobalVariable(name: "zr", scope: !0, file: !7, line: 115, type: !36, isLocal: false, isDefinition: true, variable: float* @zr)
!114 = !DIGlobalVariable(name: "zi", scope: !0, file: !7, line: 115, type: !36, isLocal: false, isDefinition: true, variable: float* @zi)
!115 = !{i32 2, !"Dwarf Version", i32 4}
!116 = !{i32 2, !"Debug Info Version", i32 3}
!117 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!118 = !DILocation(line: 118, column: 8, scope: !6)
!119 = !DILocation(line: 119, column: 1, scope: !6)
!120 = !DILocation(line: 122, column: 11, scope: !10)
!121 = !DILocation(line: 122, column: 16, scope: !10)
!122 = !DILocation(line: 122, column: 24, scope: !10)
!123 = !DILocation(line: 122, column: 34, scope: !10)
!124 = !DILocation(line: 122, column: 8, scope: !10)
!125 = !DILocation(line: 123, column: 16, scope: !10)
!126 = !DILocation(line: 123, column: 11, scope: !10)
!127 = !DILocation(line: 123, column: 3, scope: !10)
!128 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "emsg", arg: 1, scope: !12, file: !7, line: 128, type: !15)
!129 = !DIExpression()
!130 = !DILocation(line: 128, column: 18, scope: !12)
!131 = !DILocation(line: 129, column: 36, scope: !12)
!132 = !DILocation(line: 129, column: 3, scope: !12)
!133 = !DILocation(line: 130, column: 1, scope: !12)
!134 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !17, file: !7, line: 132, type: !4)
!135 = !DILocation(line: 132, column: 19, scope: !17)
!136 = !DILocation(line: 133, column: 9, scope: !17)
!137 = !DILocation(line: 133, column: 3, scope: !17)
!138 = !DILocation(line: 133, column: 12, scope: !17)
!139 = !DILocation(line: 134, column: 1, scope: !17)
!140 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "temp", scope: !20, file: !7, line: 137, type: !4)
!141 = !DILocation(line: 137, column: 7, scope: !20)
!142 = !DILocation(line: 138, column: 7, scope: !143)
!143 = distinct !DILexicalBlock(scope: !20, file: !7, line: 138, column: 7)
!144 = !DILocation(line: 138, column: 16, scope: !143)
!145 = !DILocation(line: 138, column: 7, scope: !20)
!146 = !DILocation(line: 139, column: 12, scope: !147)
!147 = distinct !DILexicalBlock(scope: !143, file: !7, line: 138, column: 21)
!148 = !DILocation(line: 139, column: 10, scope: !147)
!149 = !DILocation(line: 140, column: 26, scope: !147)
!150 = !DILocation(line: 140, column: 16, scope: !147)
!151 = !DILocation(line: 140, column: 36, scope: !147)
!152 = !DILocation(line: 140, column: 14, scope: !147)
!153 = !DILocation(line: 141, column: 3, scope: !147)
!154 = !DILocation(line: 142, column: 5, scope: !143)
!155 = !DILocation(line: 143, column: 11, scope: !20)
!156 = !DILocation(line: 143, column: 3, scope: !20)
!157 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 1, scope: !21, file: !7, line: 146, type: !4)
!158 = !DILocation(line: 146, column: 15, scope: !21)
!159 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 2, scope: !21, file: !7, line: 146, type: !4)
!160 = !DILocation(line: 146, column: 22, scope: !21)
!161 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "errorfound", scope: !21, file: !7, line: 147, type: !4)
!162 = !DILocation(line: 147, column: 7, scope: !21)
!163 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "localel", scope: !21, file: !7, line: 147, type: !4)
!164 = !DILocation(line: 147, column: 19, scope: !21)
!165 = !DILocation(line: 148, column: 14, scope: !21)
!166 = !DILocation(line: 149, column: 13, scope: !167)
!167 = distinct !DILexicalBlock(scope: !21, file: !7, line: 149, column: 7)
!168 = !DILocation(line: 149, column: 7, scope: !167)
!169 = !DILocation(line: 149, column: 16, scope: !167)
!170 = !DILocation(line: 149, column: 7, scope: !21)
!171 = !DILocation(line: 150, column: 25, scope: !172)
!172 = distinct !DILexicalBlock(scope: !167, file: !7, line: 150, column: 9)
!173 = !DILocation(line: 150, column: 19, scope: !172)
!174 = !DILocation(line: 150, column: 9, scope: !172)
!175 = !DILocation(line: 150, column: 29, scope: !172)
!176 = !DILocation(line: 150, column: 41, scope: !172)
!177 = !DILocation(line: 150, column: 38, scope: !172)
!178 = !DILocation(line: 150, column: 9, scope: !167)
!179 = !DILocation(line: 151, column: 18, scope: !180)
!180 = distinct !DILexicalBlock(scope: !172, file: !7, line: 150, column: 44)
!181 = !DILocation(line: 152, column: 7, scope: !180)
!182 = !DILocation(line: 153, column: 5, scope: !180)
!183 = !DILocation(line: 150, column: 41, scope: !184)
!184 = !DILexicalBlockFile(scope: !172, file: !7, discriminator: 1)
!185 = !DILocation(line: 154, column: 8, scope: !186)
!186 = distinct !DILexicalBlock(scope: !21, file: !7, line: 154, column: 7)
!187 = !DILocation(line: 154, column: 7, scope: !21)
!188 = !DILocation(line: 155, column: 15, scope: !189)
!189 = distinct !DILexicalBlock(scope: !186, file: !7, line: 154, column: 20)
!190 = !DILocation(line: 155, column: 13, scope: !189)
!191 = !DILocation(line: 156, column: 37, scope: !189)
!192 = !DILocation(line: 156, column: 31, scope: !189)
!193 = !DILocation(line: 156, column: 15, scope: !189)
!194 = !DILocation(line: 156, column: 5, scope: !189)
!195 = !DILocation(line: 156, column: 24, scope: !189)
!196 = !DILocation(line: 156, column: 29, scope: !189)
!197 = !DILocation(line: 157, column: 16, scope: !189)
!198 = !DILocation(line: 157, column: 11, scope: !189)
!199 = !DILocation(line: 157, column: 5, scope: !189)
!200 = !DILocation(line: 157, column: 14, scope: !189)
!201 = !DILocation(line: 158, column: 35, scope: !189)
!202 = !DILocation(line: 158, column: 15, scope: !189)
!203 = !DILocation(line: 158, column: 5, scope: !189)
!204 = !DILocation(line: 158, column: 24, scope: !189)
!205 = !DILocation(line: 158, column: 33, scope: !189)
!206 = !DILocation(line: 159, column: 3, scope: !189)
!207 = !DILocation(line: 160, column: 1, scope: !21)
!208 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !24, file: !7, line: 162, type: !4)
!209 = !DILocation(line: 162, column: 15, scope: !24)
!210 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 2, scope: !24, file: !7, line: 162, type: !4)
!211 = !DILocation(line: 162, column: 22, scope: !24)
!212 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "discctr", scope: !24, file: !7, line: 163, type: !4)
!213 = !DILocation(line: 163, column: 7, scope: !24)
!214 = !DILocation(line: 164, column: 12, scope: !24)
!215 = !DILocation(line: 164, column: 3, scope: !24)
!216 = !DILocation(line: 165, column: 18, scope: !217)
!217 = distinct !DILexicalBlock(scope: !24, file: !7, line: 165, column: 3)
!218 = !DILocation(line: 165, column: 16, scope: !217)
!219 = !DILocation(line: 165, column: 8, scope: !217)
!220 = !DILocation(line: 165, column: 21, scope: !221)
!221 = !DILexicalBlockFile(scope: !222, file: !7, discriminator: 2)
!222 = !DILexicalBlockFile(scope: !223, file: !7, discriminator: 1)
!223 = distinct !DILexicalBlock(scope: !217, file: !7, line: 165, column: 3)
!224 = !DILocation(line: 165, column: 29, scope: !223)
!225 = !DILocation(line: 165, column: 3, scope: !217)
!226 = !DILocation(line: 166, column: 10, scope: !223)
!227 = !DILocation(line: 166, column: 19, scope: !223)
!228 = !DILocation(line: 166, column: 5, scope: !223)
!229 = !DILocation(line: 165, column: 42, scope: !223)
!230 = !DILocation(line: 165, column: 3, scope: !223)
!231 = !DILocation(line: 167, column: 1, scope: !24)
!232 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !25, file: !7, line: 169, type: !4)
!233 = !DILocation(line: 169, column: 13, scope: !25)
!234 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "temp", scope: !25, file: !7, line: 170, type: !4)
!235 = !DILocation(line: 170, column: 7, scope: !25)
!236 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "temp1", scope: !25, file: !7, line: 170, type: !4)
!237 = !DILocation(line: 170, column: 13, scope: !25)
!238 = !DILocation(line: 171, column: 13, scope: !239)
!239 = distinct !DILexicalBlock(scope: !25, file: !7, line: 171, column: 7)
!240 = !DILocation(line: 171, column: 7, scope: !239)
!241 = !DILocation(line: 171, column: 16, scope: !239)
!242 = !DILocation(line: 171, column: 7, scope: !25)
!243 = !DILocation(line: 172, column: 29, scope: !244)
!244 = distinct !DILexicalBlock(scope: !239, file: !7, line: 171, column: 21)
!245 = !DILocation(line: 172, column: 23, scope: !244)
!246 = !DILocation(line: 172, column: 13, scope: !244)
!247 = !DILocation(line: 172, column: 33, scope: !244)
!248 = !DILocation(line: 172, column: 11, scope: !244)
!249 = !DILocation(line: 173, column: 28, scope: !244)
!250 = !DILocation(line: 173, column: 22, scope: !244)
!251 = !DILocation(line: 173, column: 12, scope: !244)
!252 = !DILocation(line: 173, column: 32, scope: !244)
!253 = !DILocation(line: 173, column: 10, scope: !244)
!254 = !DILocation(line: 174, column: 32, scope: !244)
!255 = !DILocation(line: 174, column: 21, scope: !244)
!256 = !DILocation(line: 174, column: 15, scope: !244)
!257 = !DILocation(line: 174, column: 5, scope: !244)
!258 = !DILocation(line: 174, column: 25, scope: !244)
!259 = !DILocation(line: 174, column: 30, scope: !244)
!260 = !DILocation(line: 175, column: 22, scope: !244)
!261 = !DILocation(line: 175, column: 16, scope: !244)
!262 = !DILocation(line: 175, column: 14, scope: !244)
!263 = !DILocation(line: 176, column: 16, scope: !244)
!264 = !DILocation(line: 176, column: 11, scope: !244)
!265 = !DILocation(line: 176, column: 5, scope: !244)
!266 = !DILocation(line: 176, column: 14, scope: !244)
!267 = !DILocation(line: 177, column: 13, scope: !244)
!268 = !DILocation(line: 177, column: 5, scope: !244)
!269 = !DILocation(line: 179, column: 5, scope: !239)
!270 = !DILocation(line: 180, column: 3, scope: !25)
!271 = !DILocation(line: 181, column: 1, scope: !25)
!272 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s1", arg: 1, scope: !28, file: !7, line: 183, type: !4)
!273 = !DILocation(line: 183, column: 15, scope: !28)
!274 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s2", arg: 2, scope: !28, file: !7, line: 183, type: !4)
!275 = !DILocation(line: 183, column: 23, scope: !28)
!276 = !DILocation(line: 184, column: 12, scope: !28)
!277 = !DILocation(line: 184, column: 8, scope: !28)
!278 = !DILocation(line: 184, column: 17, scope: !28)
!279 = !DILocation(line: 184, column: 3, scope: !28)
!280 = !DILocation(line: 185, column: 15, scope: !28)
!281 = !DILocation(line: 185, column: 25, scope: !28)
!282 = !DILocation(line: 185, column: 13, scope: !28)
!283 = !DILocation(line: 186, column: 1, scope: !28)
!284 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 1, scope: !29, file: !7, line: 188, type: !4)
!285 = !DILocation(line: 188, column: 16, scope: !29)
!286 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "j", arg: 2, scope: !29, file: !7, line: 188, type: !4)
!287 = !DILocation(line: 188, column: 23, scope: !29)
!288 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "k", arg: 3, scope: !29, file: !7, line: 188, type: !4)
!289 = !DILocation(line: 188, column: 30, scope: !29)
!290 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "other", scope: !29, file: !7, line: 189, type: !4)
!291 = !DILocation(line: 189, column: 7, scope: !29)
!292 = !DILocation(line: 190, column: 7, scope: !293)
!293 = distinct !DILexicalBlock(scope: !29, file: !7, line: 190, column: 7)
!294 = !DILocation(line: 190, column: 9, scope: !293)
!295 = !DILocation(line: 190, column: 7, scope: !29)
!296 = !DILocation(line: 191, column: 10, scope: !293)
!297 = !DILocation(line: 191, column: 13, scope: !293)
!298 = !DILocation(line: 191, column: 5, scope: !293)
!299 = !DILocation(line: 193, column: 17, scope: !300)
!300 = distinct !DILexicalBlock(scope: !293, file: !7, line: 192, column: 8)
!301 = !DILocation(line: 193, column: 15, scope: !300)
!302 = !DILocation(line: 193, column: 21, scope: !300)
!303 = !DILocation(line: 193, column: 19, scope: !300)
!304 = !DILocation(line: 193, column: 11, scope: !300)
!305 = !DILocation(line: 194, column: 11, scope: !300)
!306 = !DILocation(line: 194, column: 14, scope: !300)
!307 = !DILocation(line: 194, column: 21, scope: !300)
!308 = !DILocation(line: 194, column: 23, scope: !300)
!309 = !DILocation(line: 194, column: 5, scope: !300)
!310 = !DILocation(line: 195, column: 10, scope: !300)
!311 = !DILocation(line: 195, column: 13, scope: !300)
!312 = !DILocation(line: 195, column: 5, scope: !300)
!313 = !DILocation(line: 196, column: 11, scope: !300)
!314 = !DILocation(line: 196, column: 18, scope: !300)
!315 = !DILocation(line: 196, column: 21, scope: !300)
!316 = !DILocation(line: 196, column: 23, scope: !300)
!317 = !DILocation(line: 196, column: 5, scope: !300)
!318 = !DILocation(line: 198, column: 1, scope: !29)
!319 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !32, file: !7, line: 201, type: !4)
!320 = !DILocation(line: 201, column: 7, scope: !32)
!321 = !DILocation(line: 202, column: 10, scope: !322)
!322 = distinct !DILexicalBlock(scope: !32, file: !7, line: 202, column: 3)
!323 = !DILocation(line: 202, column: 8, scope: !322)
!324 = !DILocation(line: 202, column: 15, scope: !325)
!325 = !DILexicalBlockFile(scope: !326, file: !7, discriminator: 2)
!326 = !DILexicalBlockFile(scope: !327, file: !7, discriminator: 1)
!327 = distinct !DILexicalBlock(scope: !322, file: !7, line: 202, column: 3)
!328 = !DILocation(line: 202, column: 17, scope: !327)
!329 = !DILocation(line: 202, column: 3, scope: !322)
!330 = !DILocation(line: 203, column: 25, scope: !327)
!331 = !DILocation(line: 203, column: 27, scope: !327)
!332 = !DILocation(line: 203, column: 15, scope: !327)
!333 = !DILocation(line: 203, column: 5, scope: !327)
!334 = !DILocation(line: 203, column: 18, scope: !327)
!335 = !DILocation(line: 203, column: 23, scope: !327)
!336 = !DILocation(line: 202, column: 31, scope: !327)
!337 = !DILocation(line: 202, column: 3, scope: !327)
!338 = !DILocation(line: 204, column: 12, scope: !32)
!339 = !DILocation(line: 205, column: 3, scope: !32)
!340 = !DILocation(line: 206, column: 3, scope: !32)
!341 = !DILocation(line: 207, column: 3, scope: !32)
!342 = !DILocation(line: 208, column: 13, scope: !32)
!343 = !DILocation(line: 209, column: 3, scope: !32)
!344 = !DILocation(line: 210, column: 7, scope: !345)
!345 = distinct !DILexicalBlock(scope: !32, file: !7, line: 210, column: 7)
!346 = !DILocation(line: 210, column: 17, scope: !345)
!347 = !DILocation(line: 210, column: 7, scope: !32)
!348 = !DILocation(line: 211, column: 5, scope: !345)
!349 = !DILocation(line: 212, column: 18, scope: !32)
!350 = !DILocation(line: 212, column: 3, scope: !32)
!351 = !DILocation(line: 213, column: 1, scope: !32)
!352 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !33, file: !7, line: 216, type: !4)
!353 = !DILocation(line: 216, column: 7, scope: !33)
!354 = !DILocation(line: 217, column: 10, scope: !355)
!355 = distinct !DILexicalBlock(scope: !33, file: !7, line: 217, column: 3)
!356 = !DILocation(line: 217, column: 8, scope: !355)
!357 = !DILocation(line: 217, column: 15, scope: !358)
!358 = !DILexicalBlockFile(scope: !359, file: !7, discriminator: 2)
!359 = !DILexicalBlockFile(scope: !360, file: !7, discriminator: 1)
!360 = distinct !DILexicalBlock(scope: !355, file: !7, line: 217, column: 3)
!361 = !DILocation(line: 217, column: 17, scope: !360)
!362 = !DILocation(line: 217, column: 3, scope: !355)
!363 = !DILocation(line: 218, column: 5, scope: !360)
!364 = !DILocation(line: 217, column: 25, scope: !360)
!365 = !DILocation(line: 217, column: 3, scope: !360)
!366 = !DILocation(line: 219, column: 3, scope: !33)
