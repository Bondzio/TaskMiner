; ModuleID = '/home/gleison/tf/Benchmarks/Stanford/IntMM/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.node = type { %struct.node*, %struct.node*, i32 }
%struct.element = type { i32, i32 }
%struct.complex = type { float, float }

@seed = common global i64 0, align 8
@ima = common global [41 x [41 x i32]] zeroinitializer, align 16
@imb = common global [41 x [41 x i32]] zeroinitializer, align 16
@imr = common global [41 x [41 x i32]] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@value = common global float 0.000000e+00, align 4
@fixed = common global float 0.000000e+00, align 4
@floated = common global float 0.000000e+00, align 4
@permarray = common global [11 x i32] zeroinitializer, align 16
@pctr = common global i32 0, align 4
@tree = common global %struct.node* null, align 8
@stack = common global [4 x i32] zeroinitializer, align 16
@cellspace = common global [19 x %struct.element] zeroinitializer, align 16
@freelist = common global i32 0, align 4
@movesdone = common global i32 0, align 4
@rma = common global [41 x [41 x float]] zeroinitializer, align 16
@rmb = common global [41 x [41 x float]] zeroinitializer, align 16
@rmr = common global [41 x [41 x float]] zeroinitializer, align 16
@piececount = common global [4 x i32] zeroinitializer, align 16
@class = common global [13 x i32] zeroinitializer, align 16
@piecemax = common global [13 x i32] zeroinitializer, align 16
@puzzl = common global [512 x i32] zeroinitializer, align 16
@p = common global [13 x [512 x i32]] zeroinitializer, align 16
@n = common global i32 0, align 4
@kount = common global i32 0, align 4
@sortlist = common global [5001 x i32] zeroinitializer, align 16
@biggest = common global i32 0, align 4
@littlest = common global i32 0, align 4
@top = common global i32 0, align 4
@z = common global [257 x %struct.complex] zeroinitializer, align 16
@w = common global [257 x %struct.complex] zeroinitializer, align 16
@e = common global [130 x %struct.complex] zeroinitializer, align 16
@zr = common global float 0.000000e+00, align 4
@zi = common global float 0.000000e+00, align 4

; Function Attrs: nounwind uwtable
define void @Initrand() #0 {
entry:
  store i64 74755, i64* @seed, align 8, !dbg !110
  ret void, !dbg !111
}

; Function Attrs: nounwind uwtable
define i32 @Rand() #0 {
entry:
  %0 = load i64, i64* @seed, align 8, !dbg !112
  %mul = mul nsw i64 %0, 1309, !dbg !113
  %add = add nsw i64 %mul, 13849, !dbg !114
  %and = and i64 %add, 65535, !dbg !115
  store i64 %and, i64* @seed, align 8, !dbg !116
  %1 = load i64, i64* @seed, align 8, !dbg !117
  %conv = trunc i64 %1 to i32, !dbg !118
  ret i32 %conv, !dbg !119
}

; Function Attrs: nounwind uwtable
define void @Initmatrix([41 x i32]* %m) #0 {
entry:
  %m.addr = alloca [41 x i32]*, align 8
  %temp = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [41 x i32]* %m, [41 x i32]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [41 x i32]** %m.addr, metadata !120, metadata !121), !dbg !122
  call void @llvm.dbg.declare(metadata i32* %temp, metadata !123, metadata !121), !dbg !124
  call void @llvm.dbg.declare(metadata i32* %i, metadata !125, metadata !121), !dbg !126
  call void @llvm.dbg.declare(metadata i32* %j, metadata !127, metadata !121), !dbg !128
  store i32 1, i32* %i, align 4, !dbg !129
  br label %for.cond, !dbg !131

for.cond:                                         ; preds = %for.inc.7, %entry
  %0 = load i32, i32* %i, align 4, !dbg !132
  %cmp = icmp sle i32 %0, 40, !dbg !136
  br i1 %cmp, label %for.body, label %for.end.9, !dbg !137

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4, !dbg !138
  br label %for.cond.1, !dbg !140

for.cond.1:                                       ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !141
  %cmp2 = icmp sle i32 %1, 40, !dbg !145
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !146

for.body.3:                                       ; preds = %for.cond.1
  %call = call i32 @Rand(), !dbg !147
  store i32 %call, i32* %temp, align 4, !dbg !149
  %2 = load i32, i32* %temp, align 4, !dbg !150
  %3 = load i32, i32* %temp, align 4, !dbg !151
  %div = sdiv i32 %3, 120, !dbg !152
  %mul = mul nsw i32 %div, 120, !dbg !153
  %sub = sub nsw i32 %2, %mul, !dbg !154
  %sub4 = sub nsw i32 %sub, 60, !dbg !155
  %4 = load i32, i32* %j, align 4, !dbg !156
  %idxprom = sext i32 %4 to i64, !dbg !157
  %5 = load i32, i32* %i, align 4, !dbg !158
  %idxprom5 = sext i32 %5 to i64, !dbg !157
  %6 = load [41 x i32]*, [41 x i32]** %m.addr, align 8, !dbg !157
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %6, i64 %idxprom5, !dbg !157
  %arrayidx6 = getelementptr inbounds [41 x i32], [41 x i32]* %arrayidx, i32 0, i64 %idxprom, !dbg !157
  store i32 %sub4, i32* %arrayidx6, align 4, !dbg !159
  br label %for.inc, !dbg !160

for.inc:                                          ; preds = %for.body.3
  %7 = load i32, i32* %j, align 4, !dbg !161
  %inc = add nsw i32 %7, 1, !dbg !161
  store i32 %inc, i32* %j, align 4, !dbg !161
  br label %for.cond.1, !dbg !162

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.7, !dbg !163

for.inc.7:                                        ; preds = %for.end
  %8 = load i32, i32* %i, align 4, !dbg !164
  %inc8 = add nsw i32 %8, 1, !dbg !164
  store i32 %inc8, i32* %i, align 4, !dbg !164
  br label %for.cond, !dbg !165

for.end.9:                                        ; preds = %for.cond
  ret void, !dbg !166
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define void @Innerproduct(i32* %result, [41 x i32]* %a, [41 x i32]* %b, i32 %row, i32 %column) #0 {
entry:
  %result.addr = alloca i32*, align 8
  %a.addr = alloca [41 x i32]*, align 8
  %b.addr = alloca [41 x i32]*, align 8
  %row.addr = alloca i32, align 4
  %column.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %result, i32** %result.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %result.addr, metadata !167, metadata !121), !dbg !168
  store [41 x i32]* %a, [41 x i32]** %a.addr, align 8
  call void @llvm.dbg.declare(metadata [41 x i32]** %a.addr, metadata !169, metadata !121), !dbg !170
  store [41 x i32]* %b, [41 x i32]** %b.addr, align 8
  call void @llvm.dbg.declare(metadata [41 x i32]** %b.addr, metadata !171, metadata !121), !dbg !172
  store i32 %row, i32* %row.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %row.addr, metadata !173, metadata !121), !dbg !174
  store i32 %column, i32* %column.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %column.addr, metadata !175, metadata !121), !dbg !176
  call void @llvm.dbg.declare(metadata i32* %i, metadata !177, metadata !121), !dbg !178
  %0 = load i32*, i32** %result.addr, align 8, !dbg !179
  store i32 0, i32* %0, align 4, !dbg !180
  store i32 1, i32* %i, align 4, !dbg !181
  br label %for.cond, !dbg !183

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !184
  %cmp = icmp sle i32 %1, 40, !dbg !188
  br i1 %cmp, label %for.body, label %for.end, !dbg !189

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %result.addr, align 8, !dbg !190
  %3 = load i32, i32* %2, align 4, !dbg !191
  %4 = load i32, i32* %i, align 4, !dbg !192
  %idxprom = sext i32 %4 to i64, !dbg !193
  %5 = load i32, i32* %row.addr, align 4, !dbg !194
  %idxprom1 = sext i32 %5 to i64, !dbg !193
  %6 = load [41 x i32]*, [41 x i32]** %a.addr, align 8, !dbg !193
  %arrayidx = getelementptr inbounds [41 x i32], [41 x i32]* %6, i64 %idxprom1, !dbg !193
  %arrayidx2 = getelementptr inbounds [41 x i32], [41 x i32]* %arrayidx, i32 0, i64 %idxprom, !dbg !193
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !193
  %8 = load i32, i32* %column.addr, align 4, !dbg !195
  %idxprom3 = sext i32 %8 to i64, !dbg !196
  %9 = load i32, i32* %i, align 4, !dbg !197
  %idxprom4 = sext i32 %9 to i64, !dbg !196
  %10 = load [41 x i32]*, [41 x i32]** %b.addr, align 8, !dbg !196
  %arrayidx5 = getelementptr inbounds [41 x i32], [41 x i32]* %10, i64 %idxprom4, !dbg !196
  %arrayidx6 = getelementptr inbounds [41 x i32], [41 x i32]* %arrayidx5, i32 0, i64 %idxprom3, !dbg !196
  %11 = load i32, i32* %arrayidx6, align 4, !dbg !196
  %mul = mul nsw i32 %7, %11, !dbg !198
  %add = add nsw i32 %3, %mul, !dbg !199
  %12 = load i32*, i32** %result.addr, align 8, !dbg !200
  store i32 %add, i32* %12, align 4, !dbg !201
  br label %for.inc, !dbg !202

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4, !dbg !203
  %inc = add nsw i32 %13, 1, !dbg !203
  store i32 %inc, i32* %i, align 4, !dbg !203
  br label %for.cond, !dbg !204

for.end:                                          ; preds = %for.cond
  ret void, !dbg !205
}

; Function Attrs: nounwind uwtable
define void @Intmm(i32 %run) #0 {
entry:
  %run.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %run, i32* %run.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %run.addr, metadata !206, metadata !121), !dbg !207
  call void @llvm.dbg.declare(metadata i32* %i, metadata !208, metadata !121), !dbg !209
  call void @llvm.dbg.declare(metadata i32* %j, metadata !210, metadata !121), !dbg !211
  call void @Initrand(), !dbg !212
  call void @Initmatrix([41 x i32]* getelementptr inbounds ([41 x [41 x i32]], [41 x [41 x i32]]* @ima, i32 0, i32 0)), !dbg !213
  call void @Initmatrix([41 x i32]* getelementptr inbounds ([41 x [41 x i32]], [41 x [41 x i32]]* @imb, i32 0, i32 0)), !dbg !214
  store i32 1, i32* %i, align 4, !dbg !215
  br label %for.cond, !dbg !217

for.cond:                                         ; preds = %for.inc.6, %entry
  %0 = load i32, i32* %i, align 4, !dbg !218
  %cmp = icmp sle i32 %0, 40, !dbg !222
  br i1 %cmp, label %for.body, label %for.end.8, !dbg !223

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4, !dbg !224
  br label %for.cond.1, !dbg !226

for.cond.1:                                       ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !227
  %cmp2 = icmp sle i32 %1, 40, !dbg !231
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !232

for.body.3:                                       ; preds = %for.cond.1
  %2 = load i32, i32* %j, align 4, !dbg !233
  %idxprom = sext i32 %2 to i64, !dbg !234
  %3 = load i32, i32* %i, align 4, !dbg !235
  %idxprom4 = sext i32 %3 to i64, !dbg !234
  %arrayidx = getelementptr inbounds [41 x [41 x i32]], [41 x [41 x i32]]* @imr, i32 0, i64 %idxprom4, !dbg !234
  %arrayidx5 = getelementptr inbounds [41 x i32], [41 x i32]* %arrayidx, i32 0, i64 %idxprom, !dbg !234
  %4 = load i32, i32* %i, align 4, !dbg !236
  %5 = load i32, i32* %j, align 4, !dbg !237
  call void @Innerproduct(i32* %arrayidx5, [41 x i32]* getelementptr inbounds ([41 x [41 x i32]], [41 x [41 x i32]]* @ima, i32 0, i32 0), [41 x i32]* getelementptr inbounds ([41 x [41 x i32]], [41 x [41 x i32]]* @imb, i32 0, i32 0), i32 %4, i32 %5), !dbg !238
  br label %for.inc, !dbg !238

for.inc:                                          ; preds = %for.body.3
  %6 = load i32, i32* %j, align 4, !dbg !239
  %inc = add nsw i32 %6, 1, !dbg !239
  store i32 %inc, i32* %j, align 4, !dbg !239
  br label %for.cond.1, !dbg !240

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.6, !dbg !241

for.inc.6:                                        ; preds = %for.end
  %7 = load i32, i32* %i, align 4, !dbg !242
  %inc7 = add nsw i32 %7, 1, !dbg !242
  store i32 %inc7, i32* %i, align 4, !dbg !242
  br label %for.cond, !dbg !243

for.end.8:                                        ; preds = %for.cond
  %8 = load i32, i32* %run.addr, align 4, !dbg !244
  %add = add nsw i32 %8, 1, !dbg !245
  %idxprom9 = sext i32 %add to i64, !dbg !246
  %9 = load i32, i32* %run.addr, align 4, !dbg !247
  %add10 = add nsw i32 %9, 1, !dbg !248
  %idxprom11 = sext i32 %add10 to i64, !dbg !246
  %arrayidx12 = getelementptr inbounds [41 x [41 x i32]], [41 x [41 x i32]]* @imr, i32 0, i64 %idxprom11, !dbg !246
  %arrayidx13 = getelementptr inbounds [41 x i32], [41 x i32]* %arrayidx12, i32 0, i64 %idxprom9, !dbg !246
  %10 = load i32, i32* %arrayidx13, align 4, !dbg !246
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %10), !dbg !249
  ret void, !dbg !250
}

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval
  call void @llvm.dbg.declare(metadata i32* %i, metadata !251, metadata !121), !dbg !252
  store i32 0, i32* %i, align 4, !dbg !253
  br label %for.cond, !dbg !255

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !256
  %cmp = icmp slt i32 %0, 10, !dbg !260
  br i1 %cmp, label %for.body, label %for.end, !dbg !261

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !262
  call void @Intmm(i32 %1), !dbg !263
  br label %for.inc, !dbg !263

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !264
  %inc = add nsw i32 %2, 1, !dbg !264
  store i32 %inc, i32* %i, align 4, !dbg !264
  br label %for.cond, !dbg !265

for.end:                                          ; preds = %for.cond
  ret i32 0, !dbg !266
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!107, !108}
!llvm.ident = !{!109}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !5, globals: !27)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Stanford/IntMM")
!2 = !{}
!3 = !{!4}
!4 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!5 = !{!6, !10, !12, !19, !23, !26}
!6 = !DISubprogram(name: "Initrand", scope: !7, file: !7, line: 117, type: !8, isLocal: false, isDefinition: true, scopeLine: 117, isOptimized: false, function: void ()* @Initrand, variables: !2)
!7 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Stanford/IntMM/tmp.c", directory: "/home/gleison/tf/Benchmarks/Stanford/IntMM")
!8 = !DISubroutineType(types: !9)
!9 = !{null}
!10 = !DISubprogram(name: "Rand", scope: !7, file: !7, line: 121, type: !11, isLocal: false, isDefinition: true, scopeLine: 121, isOptimized: false, function: i32 ()* @Rand, variables: !2)
!11 = !DISubroutineType(types: !3)
!12 = !DISubprogram(name: "Initmatrix", scope: !7, file: !7, line: 128, type: !13, isLocal: false, isDefinition: true, scopeLine: 128, flags: DIFlagPrototyped, isOptimized: false, function: void ([41 x i32]*)* @Initmatrix, variables: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{null, !15}
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64, align: 64)
!16 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 1312, align: 32, elements: !17)
!17 = !{!18}
!18 = !DISubrange(count: 41)
!19 = !DISubprogram(name: "Innerproduct", scope: !7, file: !7, line: 137, type: !20, isLocal: false, isDefinition: true, scopeLine: 137, flags: DIFlagPrototyped, isOptimized: false, function: void (i32*, [41 x i32]*, [41 x i32]*, i32, i32)* @Innerproduct, variables: !2)
!20 = !DISubroutineType(types: !21)
!21 = !{null, !22, !15, !15, !4, !4}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64, align: 64)
!23 = !DISubprogram(name: "Intmm", scope: !7, file: !7, line: 145, type: !24, isLocal: false, isDefinition: true, scopeLine: 145, flags: DIFlagPrototyped, isOptimized: false, function: void (i32)* @Intmm, variables: !2)
!24 = !DISubroutineType(types: !25)
!25 = !{null, !4}
!26 = !DISubprogram(name: "main", scope: !7, file: !7, line: 156, type: !11, isLocal: false, isDefinition: true, scopeLine: 156, isOptimized: false, function: i32 ()* @main, variables: !2)
!27 = !{!28, !30, !31, !32, !34, !38, !40, !47, !51, !59, !60, !61, !64, !65, !66, !68, !69, !70, !71, !75, !76, !80, !83, !84, !85, !89, !90, !91, !92, !100, !101, !105, !106}
!28 = !DIGlobalVariable(name: "value", scope: !0, file: !7, line: 83, type: !29, isLocal: false, isDefinition: true, variable: float* @value)
!29 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!30 = !DIGlobalVariable(name: "fixed", scope: !0, file: !7, line: 83, type: !29, isLocal: false, isDefinition: true, variable: float* @fixed)
!31 = !DIGlobalVariable(name: "floated", scope: !0, file: !7, line: 83, type: !29, isLocal: false, isDefinition: true, variable: float* @floated)
!32 = !DIGlobalVariable(name: "seed", scope: !0, file: !7, line: 86, type: !33, isLocal: false, isDefinition: true, variable: i64* @seed)
!33 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!34 = !DIGlobalVariable(name: "permarray", scope: !0, file: !7, line: 89, type: !35, isLocal: false, isDefinition: true, variable: [11 x i32]* @permarray)
!35 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 352, align: 32, elements: !36)
!36 = !{!37}
!37 = !DISubrange(count: 11)
!38 = !DIGlobalVariable(name: "pctr", scope: !0, file: !7, line: 91, type: !39, isLocal: false, isDefinition: true, variable: i32* @pctr)
!39 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!40 = !DIGlobalVariable(name: "tree", scope: !0, file: !7, line: 94, type: !41, isLocal: false, isDefinition: true, variable: %struct.node** @tree)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64, align: 64)
!42 = !DICompositeType(tag: DW_TAG_structure_type, name: "node", file: !7, line: 45, size: 192, align: 64, elements: !43)
!43 = !{!44, !45, !46}
!44 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !42, file: !7, line: 46, baseType: !41, size: 64, align: 64)
!45 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !42, file: !7, line: 46, baseType: !41, size: 64, align: 64, offset: 64)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !42, file: !7, line: 47, baseType: !4, size: 32, align: 32, offset: 128)
!47 = !DIGlobalVariable(name: "stack", scope: !0, file: !7, line: 97, type: !48, isLocal: false, isDefinition: true, variable: [4 x i32]* @stack)
!48 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, align: 32, elements: !49)
!49 = !{!50}
!50 = !DISubrange(count: 4)
!51 = !DIGlobalVariable(name: "cellspace", scope: !0, file: !7, line: 98, type: !52, isLocal: false, isDefinition: true, variable: [19 x %struct.element]* @cellspace)
!52 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 1216, align: 32, elements: !57)
!53 = !DICompositeType(tag: DW_TAG_structure_type, name: "element", file: !7, line: 54, size: 64, align: 32, elements: !54)
!54 = !{!55, !56}
!55 = !DIDerivedType(tag: DW_TAG_member, name: "discsize", scope: !53, file: !7, line: 55, baseType: !4, size: 32, align: 32)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !53, file: !7, line: 56, baseType: !4, size: 32, align: 32, offset: 32)
!57 = !{!58}
!58 = !DISubrange(count: 19)
!59 = !DIGlobalVariable(name: "freelist", scope: !0, file: !7, line: 99, type: !4, isLocal: false, isDefinition: true, variable: i32* @freelist)
!60 = !DIGlobalVariable(name: "movesdone", scope: !0, file: !7, line: 99, type: !4, isLocal: false, isDefinition: true, variable: i32* @movesdone)
!61 = !DIGlobalVariable(name: "ima", scope: !0, file: !7, line: 103, type: !62, isLocal: false, isDefinition: true, variable: [41 x [41 x i32]]* @ima)
!62 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 53792, align: 32, elements: !63)
!63 = !{!18, !18}
!64 = !DIGlobalVariable(name: "imb", scope: !0, file: !7, line: 103, type: !62, isLocal: false, isDefinition: true, variable: [41 x [41 x i32]]* @imb)
!65 = !DIGlobalVariable(name: "imr", scope: !0, file: !7, line: 103, type: !62, isLocal: false, isDefinition: true, variable: [41 x [41 x i32]]* @imr)
!66 = !DIGlobalVariable(name: "rma", scope: !0, file: !7, line: 104, type: !67, isLocal: false, isDefinition: true, variable: [41 x [41 x float]]* @rma)
!67 = !DICompositeType(tag: DW_TAG_array_type, baseType: !29, size: 53792, align: 32, elements: !63)
!68 = !DIGlobalVariable(name: "rmb", scope: !0, file: !7, line: 104, type: !67, isLocal: false, isDefinition: true, variable: [41 x [41 x float]]* @rmb)
!69 = !DIGlobalVariable(name: "rmr", scope: !0, file: !7, line: 104, type: !67, isLocal: false, isDefinition: true, variable: [41 x [41 x float]]* @rmr)
!70 = !DIGlobalVariable(name: "piececount", scope: !0, file: !7, line: 107, type: !48, isLocal: false, isDefinition: true, variable: [4 x i32]* @piececount)
!71 = !DIGlobalVariable(name: "class", scope: !0, file: !7, line: 107, type: !72, isLocal: false, isDefinition: true, variable: [13 x i32]* @class)
!72 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 416, align: 32, elements: !73)
!73 = !{!74}
!74 = !DISubrange(count: 13)
!75 = !DIGlobalVariable(name: "piecemax", scope: !0, file: !7, line: 107, type: !72, isLocal: false, isDefinition: true, variable: [13 x i32]* @piecemax)
!76 = !DIGlobalVariable(name: "puzzl", scope: !0, file: !7, line: 108, type: !77, isLocal: false, isDefinition: true, variable: [512 x i32]* @puzzl)
!77 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 16384, align: 32, elements: !78)
!78 = !{!79}
!79 = !DISubrange(count: 512)
!80 = !DIGlobalVariable(name: "p", scope: !0, file: !7, line: 108, type: !81, isLocal: false, isDefinition: true, variable: [13 x [512 x i32]]* @p)
!81 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 212992, align: 32, elements: !82)
!82 = !{!74, !79}
!83 = !DIGlobalVariable(name: "n", scope: !0, file: !7, line: 108, type: !4, isLocal: false, isDefinition: true, variable: i32* @n)
!84 = !DIGlobalVariable(name: "kount", scope: !0, file: !7, line: 108, type: !4, isLocal: false, isDefinition: true, variable: i32* @kount)
!85 = !DIGlobalVariable(name: "sortlist", scope: !0, file: !7, line: 111, type: !86, isLocal: false, isDefinition: true, variable: [5001 x i32]* @sortlist)
!86 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 160032, align: 32, elements: !87)
!87 = !{!88}
!88 = !DISubrange(count: 5001)
!89 = !DIGlobalVariable(name: "biggest", scope: !0, file: !7, line: 111, type: !4, isLocal: false, isDefinition: true, variable: i32* @biggest)
!90 = !DIGlobalVariable(name: "littlest", scope: !0, file: !7, line: 111, type: !4, isLocal: false, isDefinition: true, variable: i32* @littlest)
!91 = !DIGlobalVariable(name: "top", scope: !0, file: !7, line: 111, type: !4, isLocal: false, isDefinition: true, variable: i32* @top)
!92 = !DIGlobalVariable(name: "z", scope: !0, file: !7, line: 114, type: !93, isLocal: false, isDefinition: true, variable: [257 x %struct.complex]* @z)
!93 = !DICompositeType(tag: DW_TAG_array_type, baseType: !94, size: 16448, align: 32, elements: !98)
!94 = !DICompositeType(tag: DW_TAG_structure_type, name: "complex", file: !7, line: 75, size: 64, align: 32, elements: !95)
!95 = !{!96, !97}
!96 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !94, file: !7, line: 76, baseType: !29, size: 32, align: 32)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !94, file: !7, line: 76, baseType: !29, size: 32, align: 32, offset: 32)
!98 = !{!99}
!99 = !DISubrange(count: 257)
!100 = !DIGlobalVariable(name: "w", scope: !0, file: !7, line: 114, type: !93, isLocal: false, isDefinition: true, variable: [257 x %struct.complex]* @w)
!101 = !DIGlobalVariable(name: "e", scope: !0, file: !7, line: 114, type: !102, isLocal: false, isDefinition: true, variable: [130 x %struct.complex]* @e)
!102 = !DICompositeType(tag: DW_TAG_array_type, baseType: !94, size: 8320, align: 32, elements: !103)
!103 = !{!104}
!104 = !DISubrange(count: 130)
!105 = !DIGlobalVariable(name: "zr", scope: !0, file: !7, line: 115, type: !29, isLocal: false, isDefinition: true, variable: float* @zr)
!106 = !DIGlobalVariable(name: "zi", scope: !0, file: !7, line: 115, type: !29, isLocal: false, isDefinition: true, variable: float* @zi)
!107 = !{i32 2, !"Dwarf Version", i32 4}
!108 = !{i32 2, !"Debug Info Version", i32 3}
!109 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!110 = !DILocation(line: 118, column: 8, scope: !6)
!111 = !DILocation(line: 119, column: 1, scope: !6)
!112 = !DILocation(line: 122, column: 11, scope: !10)
!113 = !DILocation(line: 122, column: 16, scope: !10)
!114 = !DILocation(line: 122, column: 24, scope: !10)
!115 = !DILocation(line: 122, column: 34, scope: !10)
!116 = !DILocation(line: 122, column: 8, scope: !10)
!117 = !DILocation(line: 123, column: 16, scope: !10)
!118 = !DILocation(line: 123, column: 11, scope: !10)
!119 = !DILocation(line: 123, column: 3, scope: !10)
!120 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 1, scope: !12, file: !7, line: 128, type: !15)
!121 = !DIExpression()
!122 = !DILocation(line: 128, column: 21, scope: !12)
!123 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "temp", scope: !12, file: !7, line: 129, type: !4)
!124 = !DILocation(line: 129, column: 7, scope: !12)
!125 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !12, file: !7, line: 129, type: !4)
!126 = !DILocation(line: 129, column: 13, scope: !12)
!127 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !12, file: !7, line: 129, type: !4)
!128 = !DILocation(line: 129, column: 16, scope: !12)
!129 = !DILocation(line: 130, column: 10, scope: !130)
!130 = distinct !DILexicalBlock(scope: !12, file: !7, line: 130, column: 3)
!131 = !DILocation(line: 130, column: 8, scope: !130)
!132 = !DILocation(line: 130, column: 15, scope: !133)
!133 = !DILexicalBlockFile(scope: !134, file: !7, discriminator: 2)
!134 = !DILexicalBlockFile(scope: !135, file: !7, discriminator: 1)
!135 = distinct !DILexicalBlock(scope: !130, file: !7, line: 130, column: 3)
!136 = !DILocation(line: 130, column: 17, scope: !135)
!137 = !DILocation(line: 130, column: 3, scope: !130)
!138 = !DILocation(line: 131, column: 12, scope: !139)
!139 = distinct !DILexicalBlock(scope: !135, file: !7, line: 131, column: 5)
!140 = !DILocation(line: 131, column: 10, scope: !139)
!141 = !DILocation(line: 131, column: 17, scope: !142)
!142 = !DILexicalBlockFile(scope: !143, file: !7, discriminator: 2)
!143 = !DILexicalBlockFile(scope: !144, file: !7, discriminator: 1)
!144 = distinct !DILexicalBlock(scope: !139, file: !7, line: 131, column: 5)
!145 = !DILocation(line: 131, column: 19, scope: !144)
!146 = !DILocation(line: 131, column: 5, scope: !139)
!147 = !DILocation(line: 132, column: 14, scope: !148)
!148 = distinct !DILexicalBlock(scope: !144, file: !7, line: 131, column: 36)
!149 = !DILocation(line: 132, column: 12, scope: !148)
!150 = !DILocation(line: 133, column: 17, scope: !148)
!151 = !DILocation(line: 133, column: 25, scope: !148)
!152 = !DILocation(line: 133, column: 30, scope: !148)
!153 = !DILocation(line: 133, column: 37, scope: !148)
!154 = !DILocation(line: 133, column: 22, scope: !148)
!155 = !DILocation(line: 133, column: 43, scope: !148)
!156 = !DILocation(line: 133, column: 12, scope: !148)
!157 = !DILocation(line: 133, column: 7, scope: !148)
!158 = !DILocation(line: 133, column: 9, scope: !148)
!159 = !DILocation(line: 133, column: 15, scope: !148)
!160 = !DILocation(line: 134, column: 5, scope: !148)
!161 = !DILocation(line: 131, column: 32, scope: !144)
!162 = !DILocation(line: 131, column: 5, scope: !144)
!163 = !DILocation(line: 134, column: 5, scope: !139)
!164 = !DILocation(line: 130, column: 30, scope: !135)
!165 = !DILocation(line: 130, column: 3, scope: !135)
!166 = !DILocation(line: 135, column: 1, scope: !12)
!167 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "result", arg: 1, scope: !19, file: !7, line: 137, type: !22)
!168 = !DILocation(line: 137, column: 24, scope: !19)
!169 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 2, scope: !19, file: !7, line: 137, type: !15)
!170 = !DILocation(line: 137, column: 36, scope: !19)
!171 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 3, scope: !19, file: !7, line: 137, type: !15)
!172 = !DILocation(line: 137, column: 69, scope: !19)
!173 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "row", arg: 4, scope: !19, file: !7, line: 137, type: !4)
!174 = !DILocation(line: 137, column: 102, scope: !19)
!175 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "column", arg: 5, scope: !19, file: !7, line: 137, type: !4)
!176 = !DILocation(line: 137, column: 111, scope: !19)
!177 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !19, file: !7, line: 139, type: !4)
!178 = !DILocation(line: 139, column: 7, scope: !19)
!179 = !DILocation(line: 140, column: 4, scope: !19)
!180 = !DILocation(line: 140, column: 11, scope: !19)
!181 = !DILocation(line: 141, column: 10, scope: !182)
!182 = distinct !DILexicalBlock(scope: !19, file: !7, line: 141, column: 3)
!183 = !DILocation(line: 141, column: 8, scope: !182)
!184 = !DILocation(line: 141, column: 15, scope: !185)
!185 = !DILexicalBlockFile(scope: !186, file: !7, discriminator: 2)
!186 = !DILexicalBlockFile(scope: !187, file: !7, discriminator: 1)
!187 = distinct !DILexicalBlock(scope: !182, file: !7, line: 141, column: 3)
!188 = !DILocation(line: 141, column: 17, scope: !187)
!189 = !DILocation(line: 141, column: 3, scope: !182)
!190 = !DILocation(line: 142, column: 16, scope: !187)
!191 = !DILocation(line: 142, column: 15, scope: !187)
!192 = !DILocation(line: 142, column: 32, scope: !187)
!193 = !DILocation(line: 142, column: 25, scope: !187)
!194 = !DILocation(line: 142, column: 27, scope: !187)
!195 = !DILocation(line: 142, column: 42, scope: !187)
!196 = !DILocation(line: 142, column: 37, scope: !187)
!197 = !DILocation(line: 142, column: 39, scope: !187)
!198 = !DILocation(line: 142, column: 35, scope: !187)
!199 = !DILocation(line: 142, column: 23, scope: !187)
!200 = !DILocation(line: 142, column: 6, scope: !187)
!201 = !DILocation(line: 142, column: 13, scope: !187)
!202 = !DILocation(line: 142, column: 5, scope: !187)
!203 = !DILocation(line: 141, column: 30, scope: !187)
!204 = !DILocation(line: 141, column: 3, scope: !187)
!205 = !DILocation(line: 143, column: 1, scope: !19)
!206 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "run", arg: 1, scope: !23, file: !7, line: 145, type: !4)
!207 = !DILocation(line: 145, column: 16, scope: !23)
!208 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !23, file: !7, line: 146, type: !4)
!209 = !DILocation(line: 146, column: 7, scope: !23)
!210 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !23, file: !7, line: 146, type: !4)
!211 = !DILocation(line: 146, column: 10, scope: !23)
!212 = !DILocation(line: 147, column: 3, scope: !23)
!213 = !DILocation(line: 148, column: 3, scope: !23)
!214 = !DILocation(line: 149, column: 3, scope: !23)
!215 = !DILocation(line: 150, column: 10, scope: !216)
!216 = distinct !DILexicalBlock(scope: !23, file: !7, line: 150, column: 3)
!217 = !DILocation(line: 150, column: 8, scope: !216)
!218 = !DILocation(line: 150, column: 15, scope: !219)
!219 = !DILexicalBlockFile(scope: !220, file: !7, discriminator: 2)
!220 = !DILexicalBlockFile(scope: !221, file: !7, discriminator: 1)
!221 = distinct !DILexicalBlock(scope: !216, file: !7, line: 150, column: 3)
!222 = !DILocation(line: 150, column: 17, scope: !221)
!223 = !DILocation(line: 150, column: 3, scope: !216)
!224 = !DILocation(line: 151, column: 12, scope: !225)
!225 = distinct !DILexicalBlock(scope: !221, file: !7, line: 151, column: 5)
!226 = !DILocation(line: 151, column: 10, scope: !225)
!227 = !DILocation(line: 151, column: 17, scope: !228)
!228 = !DILexicalBlockFile(scope: !229, file: !7, discriminator: 2)
!229 = !DILexicalBlockFile(scope: !230, file: !7, discriminator: 1)
!230 = distinct !DILexicalBlock(scope: !225, file: !7, line: 151, column: 5)
!231 = !DILocation(line: 151, column: 19, scope: !230)
!232 = !DILocation(line: 151, column: 5, scope: !225)
!233 = !DILocation(line: 152, column: 28, scope: !230)
!234 = !DILocation(line: 152, column: 21, scope: !230)
!235 = !DILocation(line: 152, column: 25, scope: !230)
!236 = !DILocation(line: 152, column: 42, scope: !230)
!237 = !DILocation(line: 152, column: 45, scope: !230)
!238 = !DILocation(line: 152, column: 7, scope: !230)
!239 = !DILocation(line: 151, column: 32, scope: !230)
!240 = !DILocation(line: 151, column: 5, scope: !230)
!241 = !DILocation(line: 152, column: 46, scope: !225)
!242 = !DILocation(line: 150, column: 30, scope: !221)
!243 = !DILocation(line: 150, column: 3, scope: !221)
!244 = !DILocation(line: 153, column: 31, scope: !23)
!245 = !DILocation(line: 153, column: 35, scope: !23)
!246 = !DILocation(line: 153, column: 18, scope: !23)
!247 = !DILocation(line: 153, column: 22, scope: !23)
!248 = !DILocation(line: 153, column: 26, scope: !23)
!249 = !DILocation(line: 153, column: 3, scope: !23)
!250 = !DILocation(line: 154, column: 1, scope: !23)
!251 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !7, line: 157, type: !4)
!252 = !DILocation(line: 157, column: 7, scope: !26)
!253 = !DILocation(line: 158, column: 10, scope: !254)
!254 = distinct !DILexicalBlock(scope: !26, file: !7, line: 158, column: 3)
!255 = !DILocation(line: 158, column: 8, scope: !254)
!256 = !DILocation(line: 158, column: 15, scope: !257)
!257 = !DILexicalBlockFile(scope: !258, file: !7, discriminator: 2)
!258 = !DILexicalBlockFile(scope: !259, file: !7, discriminator: 1)
!259 = distinct !DILexicalBlock(scope: !254, file: !7, line: 158, column: 3)
!260 = !DILocation(line: 158, column: 17, scope: !259)
!261 = !DILocation(line: 158, column: 3, scope: !254)
!262 = !DILocation(line: 159, column: 11, scope: !259)
!263 = !DILocation(line: 159, column: 5, scope: !259)
!264 = !DILocation(line: 158, column: 24, scope: !259)
!265 = !DILocation(line: 158, column: 3, scope: !259)
!266 = !DILocation(line: 160, column: 3, scope: !26)
