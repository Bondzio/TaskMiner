; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [9 x i8] c"%.9f\09%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"(2/3)^k\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"k^-0.5\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"1/k(k+1)\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Flint Hills\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Cookson Hills\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"Harmonic\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"Riemann Zeta\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"Alternating Harmonic\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"Gregory\00", align 1

; Function Attrs: nounwind uwtable
define <2 x double> @make_vec(double %a, double %b) #0 {
entry:
  %v = alloca <2 x double>, align 16
  call void @llvm.dbg.value(metadata double %a, i64 0, metadata !28, metadata !29), !dbg !30
  call void @llvm.dbg.value(metadata double %b, i64 0, metadata !31, metadata !29), !dbg !32
  call void @llvm.dbg.declare(metadata <2 x double>* %v, metadata !33, metadata !29), !dbg !34
  %tmp1 = bitcast <2 x double>* %v to double*, !dbg !35
  call void @llvm.dbg.value(metadata double* %tmp1, i64 0, metadata !36, metadata !29), !dbg !37
  store double %a, double* %tmp1, align 8, !dbg !38
  %add.ptr = getelementptr inbounds double, double* %tmp1, i64 1, !dbg !39
  store double %b, double* %add.ptr, align 8, !dbg !40
  %tmp6 = load <2 x double>, <2 x double>* %v, align 16, !dbg !41
  ret <2 x double> %tmp6, !dbg !42
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define double @sum_vec(<2 x double> %x) #0 {
entry:
  %x.addr = alloca <2 x double>, align 16
  store <2 x double> %x, <2 x double>* %x.addr, align 16
  call void @llvm.dbg.declare(metadata <2 x double>* %x.addr, metadata !43, metadata !29), !dbg !44
  %tmp1 = bitcast <2 x double>* %x.addr to double*, !dbg !45
  call void @llvm.dbg.value(metadata double* %tmp1, i64 0, metadata !46, metadata !29), !dbg !47
  %tmp3 = load double, double* %tmp1, align 8, !dbg !48
  %add.ptr = getelementptr inbounds double, double* %tmp1, i64 1, !dbg !49
  %tmp5 = load double, double* %add.ptr, align 8, !dbg !50
  %add = fadd double %tmp3, %tmp5, !dbg !51
  ret double %add, !dbg !52
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %kv = alloca <2 x double>, align 16
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !53, metadata !29), !dbg !54
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !55, metadata !29), !dbg !56
  call void @llvm.dbg.value(metadata double 0.000000e+00, i64 0, metadata !57, metadata !29), !dbg !58
  call void @llvm.dbg.value(metadata double 0.000000e+00, i64 0, metadata !59, metadata !29), !dbg !60
  call void @llvm.dbg.value(metadata double 0.000000e+00, i64 0, metadata !61, metadata !29), !dbg !62
  call void @llvm.dbg.value(metadata double 0.000000e+00, i64 0, metadata !63, metadata !29), !dbg !64
  call void @llvm.dbg.declare(metadata <2 x double>* %kv, metadata !65, metadata !29), !dbg !66
  call void @llvm.dbg.value(metadata i32 2500000, i64 0, metadata !67, metadata !29), !dbg !68
  %call = call <2 x double> @make_vec(double 0.000000e+00, double 0.000000e+00), !dbg !69
  call void @llvm.dbg.value(metadata <2 x double> %call, i64 0, metadata !70, metadata !29), !dbg !71
  %call1 = call <2 x double> @make_vec(double 1.000000e+00, double 1.000000e+00), !dbg !72
  call void @llvm.dbg.value(metadata <2 x double> %call1, i64 0, metadata !73, metadata !29), !dbg !74
  %call2 = call <2 x double> @make_vec(double 2.000000e+00, double 2.000000e+00), !dbg !75
  call void @llvm.dbg.value(metadata <2 x double> %call2, i64 0, metadata !76, metadata !29), !dbg !77
  %call3 = call <2 x double> @make_vec(double -1.000000e+00, double -1.000000e+00), !dbg !78
  call void @llvm.dbg.value(metadata <2 x double> %call3, i64 0, metadata !79, metadata !29), !dbg !80
  %call4 = call <2 x double> @make_vec(double 1.000000e+00, double 2.000000e+00), !dbg !81
  call void @llvm.dbg.value(metadata <2 x double> %call4, i64 0, metadata !82, metadata !29), !dbg !83
  %call5 = call <2 x double> @make_vec(double 1.000000e+00, double -1.000000e+00), !dbg !84
  call void @llvm.dbg.value(metadata <2 x double> %call5, i64 0, metadata !85, metadata !29), !dbg !86
  call void @llvm.dbg.value(metadata <2 x double> %call, i64 0, metadata !87, metadata !29), !dbg !88
  call void @llvm.dbg.value(metadata <2 x double> %call, i64 0, metadata !89, metadata !29), !dbg !90
  call void @llvm.dbg.value(metadata <2 x double> %call, i64 0, metadata !91, metadata !29), !dbg !92
  call void @llvm.dbg.value(metadata <2 x double> %call, i64 0, metadata !93, metadata !29), !dbg !94
  call void @llvm.dbg.value(metadata <2 x double> %call, i64 0, metadata !95, metadata !29), !dbg !96
  call void @llvm.dbg.value(metadata double 1.000000e+00, i64 0, metadata !97, metadata !29), !dbg !98
  br label %for.cond, !dbg !99

for.cond:                                         ; preds = %for.inc, %entry
  %Cookson.0 = phi double [ 0.000000e+00, %entry ], [ %add20, %for.inc ]
  %Flint.0 = phi double [ 0.000000e+00, %entry ], [ %add16, %for.inc ]
  %sqrts.0 = phi double [ 0.000000e+00, %entry ], [ %add9, %for.inc ]
  %twoThrd.0 = phi double [ 0.000000e+00, %entry ], [ %add, %for.inc ]
  %k.0 = phi double [ 1.000000e+00, %entry ], [ %inc, %for.inc ]
  %conv = sitofp i32 2500000 to double, !dbg !101
  %cmp = fcmp ole double %k.0, %conv, !dbg !103
  br i1 %cmp, label %for.body, label %for.end, !dbg !104

for.body:                                         ; preds = %for.cond
  %sub = fsub double %k.0, 1.000000e+00, !dbg !105
  %call7 = call double @pow(double 0x3FE5555555555555, double %sub) #4, !dbg !107
  %add = fadd double %twoThrd.0, %call7, !dbg !108
  call void @llvm.dbg.value(metadata double %add, i64 0, metadata !57, metadata !29), !dbg !58
  %call8 = call double @sqrt(double %k.0) #4, !dbg !109
  %div = fdiv double 1.000000e+00, %call8, !dbg !110
  %add9 = fadd double %sqrts.0, %div, !dbg !111
  call void @llvm.dbg.value(metadata double %add9, i64 0, metadata !59, metadata !29), !dbg !60
  %mul = fmul double %k.0, %k.0, !dbg !112
  %mul10 = fmul double %mul, %k.0, !dbg !113
  call void @llvm.dbg.value(metadata double %mul10, i64 0, metadata !114, metadata !29), !dbg !115
  %call11 = call double @sin(double %k.0) #4, !dbg !116
  call void @llvm.dbg.value(metadata double %call11, i64 0, metadata !117, metadata !29), !dbg !118
  %call12 = call double @cos(double %k.0) #4, !dbg !119
  call void @llvm.dbg.value(metadata double %call12, i64 0, metadata !120, metadata !29), !dbg !121
  %mul13 = fmul double %mul10, %call11, !dbg !122
  %mul14 = fmul double %mul13, %call11, !dbg !123
  %div15 = fdiv double 1.000000e+00, %mul14, !dbg !124
  %add16 = fadd double %Flint.0, %div15, !dbg !125
  call void @llvm.dbg.value(metadata double %add16, i64 0, metadata !61, metadata !29), !dbg !62
  %mul17 = fmul double %mul10, %call12, !dbg !126
  %mul18 = fmul double %mul17, %call12, !dbg !127
  %div19 = fdiv double 1.000000e+00, %mul18, !dbg !128
  %add20 = fadd double %Cookson.0, %div19, !dbg !129
  call void @llvm.dbg.value(metadata double %add20, i64 0, metadata !63, metadata !29), !dbg !64
  br label %for.inc, !dbg !130

for.inc:                                          ; preds = %for.body
  %inc = fadd double %k.0, 1.000000e+00, !dbg !131
  call void @llvm.dbg.value(metadata double %inc, i64 0, metadata !97, metadata !29), !dbg !98
  br label %for.cond, !dbg !132

for.end:                                          ; preds = %for.cond
  %twoThrd.0.lcssa = phi double [ %twoThrd.0, %for.cond ]
  %sqrts.0.lcssa = phi double [ %sqrts.0, %for.cond ]
  %Flint.0.lcssa = phi double [ %Flint.0, %for.cond ]
  %Cookson.0.lcssa = phi double [ %Cookson.0, %for.cond ]
  store <2 x double> %call4, <2 x double>* %kv, align 16, !dbg !133
  br label %for.cond.21, !dbg !135

for.cond.21:                                      ; preds = %for.inc.41, %for.end
  %poly.0 = phi <2 x double> [ %call, %for.end ], [ %add29, %for.inc.41 ]
  %zeta.0 = phi <2 x double> [ %call, %for.end ], [ %add34, %for.inc.41 ]
  %Harmonic.0 = phi <2 x double> [ %call, %for.end ], [ %add31, %for.inc.41 ]
  %alt.0 = phi <2 x double> [ %call, %for.end ], [ %add36, %for.inc.41 ]
  %Gregory.0 = phi <2 x double> [ %call, %for.end ], [ %add40, %for.inc.41 ]
  %tmp22 = bitcast <2 x double>* %kv to double*, !dbg !136
  %tmp23 = load double, double* %tmp22, align 8, !dbg !140
  %conv22 = sitofp i32 2500000 to double, !dbg !141
  %cmp23 = fcmp ole double %tmp23, %conv22, !dbg !142
  %0 = icmp ult <2 x double>* %kv, %kv, !dbg !143
  %umin = select i1 %0, <2 x double>* %kv, <2 x double>* %kv, !dbg !143
  %1 = icmp ult <2 x double>* %kv, %umin, !dbg !143
  %umin56 = select i1 %1, <2 x double>* %kv, <2 x double>* %umin, !dbg !143
  %2 = icmp ult <2 x double>* %kv, %umin56, !dbg !143
  %umin57 = select i1 %2, <2 x double>* %kv, <2 x double>* %umin56, !dbg !143
  %3 = icmp ult <2 x double>* %kv, %umin57, !dbg !143
  %umin58 = select i1 %3, <2 x double>* %kv, <2 x double>* %umin57, !dbg !143
  %4 = icmp ult <2 x double>* %kv, %umin58, !dbg !143
  %umin59 = select i1 %4, <2 x double>* %kv, <2 x double>* %umin58, !dbg !143
  %5 = icmp ult <2 x double>* %kv, %umin59, !dbg !143
  %umin60 = select i1 %5, <2 x double>* %kv, <2 x double>* %umin59, !dbg !143
  %6 = icmp ult <2 x double>* %kv, %umin60, !dbg !143
  %umin61 = select i1 %6, <2 x double>* %kv, <2 x double>* %umin60, !dbg !143
  %7 = icmp ult <2 x double>* %kv, %umin61, !dbg !143
  %umin62 = select i1 %7, <2 x double>* %kv, <2 x double>* %umin61, !dbg !143
  %8 = icmp ult <2 x double>* %kv, %umin62, !dbg !143
  %umin63 = select i1 %8, <2 x double>* %kv, <2 x double>* %umin62, !dbg !143
  %9 = icmp ugt <2 x double>* %kv, %kv, !dbg !143
  %umax = select i1 %9, <2 x double>* %kv, <2 x double>* %kv, !dbg !143
  %10 = icmp ugt <2 x double>* %kv, %umax, !dbg !143
  %umax64 = select i1 %10, <2 x double>* %kv, <2 x double>* %umax, !dbg !143
  %11 = icmp ugt <2 x double>* %kv, %umax64, !dbg !143
  %umax65 = select i1 %11, <2 x double>* %kv, <2 x double>* %umax64, !dbg !143
  %12 = icmp ugt <2 x double>* %kv, %umax65, !dbg !143
  %umax66 = select i1 %12, <2 x double>* %kv, <2 x double>* %umax65, !dbg !143
  %13 = icmp ugt <2 x double>* %kv, %umax66, !dbg !143
  %umax67 = select i1 %13, <2 x double>* %kv, <2 x double>* %umax66, !dbg !143
  %14 = icmp ugt <2 x double>* %kv, %umax67, !dbg !143
  %umax68 = select i1 %14, <2 x double>* %kv, <2 x double>* %umax67, !dbg !143
  %15 = icmp ugt <2 x double>* %kv, %umax68, !dbg !143
  %umax69 = select i1 %15, <2 x double>* %kv, <2 x double>* %umax68, !dbg !143
  %16 = icmp ugt <2 x double>* %kv, %umax69, !dbg !143
  %umax70 = select i1 %16, <2 x double>* %kv, <2 x double>* %umax69, !dbg !143
  %17 = icmp ugt <2 x double>* %kv, %umax70, !dbg !143
  %umax71 = select i1 %17, <2 x double>* %kv, <2 x double>* %umax70, !dbg !143
  %umax7172 = ptrtoint <2 x double>* %umax71 to i64
  %18 = add i64 %umax7172, 8, !dbg !143
  %19 = icmp ult <2 x double>* %kv, %kv, !dbg !143
  %umin73 = select i1 %19, <2 x double>* %kv, <2 x double>* %kv, !dbg !143
  %20 = icmp ult <2 x double>* %kv, %umin73, !dbg !143
  %umin74 = select i1 %20, <2 x double>* %kv, <2 x double>* %umin73, !dbg !143
  %21 = icmp ult <2 x double>* %kv, %umin74, !dbg !143
  %umin75 = select i1 %21, <2 x double>* %kv, <2 x double>* %umin74, !dbg !143
  %22 = icmp ult <2 x double>* %kv, %umin75, !dbg !143
  %umin76 = select i1 %22, <2 x double>* %kv, <2 x double>* %umin75, !dbg !143
  %23 = icmp ult <2 x double>* %kv, %umin76, !dbg !143
  %umin77 = select i1 %23, <2 x double>* %kv, <2 x double>* %umin76, !dbg !143
  %24 = icmp ult <2 x double>* %kv, %umin77, !dbg !143
  %umin78 = select i1 %24, <2 x double>* %kv, <2 x double>* %umin77, !dbg !143
  %25 = icmp ult <2 x double>* %kv, %umin78, !dbg !143
  %umin79 = select i1 %25, <2 x double>* %kv, <2 x double>* %umin78, !dbg !143
  %26 = icmp ult <2 x double>* %kv, %umin79, !dbg !143
  %umin80 = select i1 %26, <2 x double>* %kv, <2 x double>* %umin79, !dbg !143
  %27 = icmp ult <2 x double>* %kv, %umin80, !dbg !143
  %umin81 = select i1 %27, <2 x double>* %kv, <2 x double>* %umin80, !dbg !143
  %28 = icmp ugt <2 x double>* %kv, %kv, !dbg !143
  %umax82 = select i1 %28, <2 x double>* %kv, <2 x double>* %kv, !dbg !143
  %29 = icmp ugt <2 x double>* %kv, %umax82, !dbg !143
  %umax83 = select i1 %29, <2 x double>* %kv, <2 x double>* %umax82, !dbg !143
  %30 = icmp ugt <2 x double>* %kv, %umax83, !dbg !143
  %umax84 = select i1 %30, <2 x double>* %kv, <2 x double>* %umax83, !dbg !143
  %31 = icmp ugt <2 x double>* %kv, %umax84, !dbg !143
  %umax85 = select i1 %31, <2 x double>* %kv, <2 x double>* %umax84, !dbg !143
  %32 = icmp ugt <2 x double>* %kv, %umax85, !dbg !143
  %umax86 = select i1 %32, <2 x double>* %kv, <2 x double>* %umax85, !dbg !143
  %33 = icmp ugt <2 x double>* %kv, %umax86, !dbg !143
  %umax87 = select i1 %33, <2 x double>* %kv, <2 x double>* %umax86, !dbg !143
  %34 = icmp ugt <2 x double>* %kv, %umax87, !dbg !143
  %umax88 = select i1 %34, <2 x double>* %kv, <2 x double>* %umax87, !dbg !143
  %35 = icmp ugt <2 x double>* %kv, %umax88, !dbg !143
  %umax89 = select i1 %35, <2 x double>* %kv, <2 x double>* %umax88, !dbg !143
  %36 = icmp ugt <2 x double>* %kv, %umax89, !dbg !143
  %umax90 = select i1 %36, <2 x double>* %kv, <2 x double>* %umax89, !dbg !143
  %umax9091 = ptrtoint <2 x double>* %umax90 to i64
  %37 = add i64 %umax9091, 8, !dbg !143
  %38 = icmp ult <2 x double>* %kv, %kv, !dbg !143
  %umin92 = select i1 %38, <2 x double>* %kv, <2 x double>* %kv, !dbg !143
  %39 = icmp ult <2 x double>* %kv, %umin92, !dbg !143
  %umin93 = select i1 %39, <2 x double>* %kv, <2 x double>* %umin92, !dbg !143
  %40 = icmp ult <2 x double>* %kv, %umin93, !dbg !143
  %umin94 = select i1 %40, <2 x double>* %kv, <2 x double>* %umin93, !dbg !143
  %41 = icmp ult <2 x double>* %kv, %umin94, !dbg !143
  %umin95 = select i1 %41, <2 x double>* %kv, <2 x double>* %umin94, !dbg !143
  %42 = icmp ult <2 x double>* %kv, %umin95, !dbg !143
  %umin96 = select i1 %42, <2 x double>* %kv, <2 x double>* %umin95, !dbg !143
  %43 = icmp ult <2 x double>* %kv, %umin96, !dbg !143
  %umin97 = select i1 %43, <2 x double>* %kv, <2 x double>* %umin96, !dbg !143
  %44 = icmp ult <2 x double>* %kv, %umin97, !dbg !143
  %umin98 = select i1 %44, <2 x double>* %kv, <2 x double>* %umin97, !dbg !143
  %45 = icmp ult <2 x double>* %kv, %umin98, !dbg !143
  %umin99 = select i1 %45, <2 x double>* %kv, <2 x double>* %umin98, !dbg !143
  %46 = icmp ult <2 x double>* %kv, %umin99, !dbg !143
  %umin100 = select i1 %46, <2 x double>* %kv, <2 x double>* %umin99, !dbg !143
  %47 = icmp ugt <2 x double>* %kv, %kv, !dbg !143
  %umax101 = select i1 %47, <2 x double>* %kv, <2 x double>* %kv, !dbg !143
  %48 = icmp ugt <2 x double>* %kv, %umax101, !dbg !143
  %umax102 = select i1 %48, <2 x double>* %kv, <2 x double>* %umax101, !dbg !143
  %49 = icmp ugt <2 x double>* %kv, %umax102, !dbg !143
  %umax103 = select i1 %49, <2 x double>* %kv, <2 x double>* %umax102, !dbg !143
  %50 = icmp ugt <2 x double>* %kv, %umax103, !dbg !143
  %umax104 = select i1 %50, <2 x double>* %kv, <2 x double>* %umax103, !dbg !143
  %51 = icmp ugt <2 x double>* %kv, %umax104, !dbg !143
  %umax105 = select i1 %51, <2 x double>* %kv, <2 x double>* %umax104, !dbg !143
  %52 = icmp ugt <2 x double>* %kv, %umax105, !dbg !143
  %umax106 = select i1 %52, <2 x double>* %kv, <2 x double>* %umax105, !dbg !143
  %53 = icmp ugt <2 x double>* %kv, %umax106, !dbg !143
  %umax107 = select i1 %53, <2 x double>* %kv, <2 x double>* %umax106, !dbg !143
  %54 = icmp ugt <2 x double>* %kv, %umax107, !dbg !143
  %umax108 = select i1 %54, <2 x double>* %kv, <2 x double>* %umax107, !dbg !143
  %55 = icmp ugt <2 x double>* %kv, %umax108, !dbg !143
  %umax109 = select i1 %55, <2 x double>* %kv, <2 x double>* %umax108, !dbg !143
  %umax109110 = ptrtoint <2 x double>* %umax109 to i64
  %56 = add i64 %umax109110, 8, !dbg !143
  %57 = icmp ult <2 x double>* %kv, %kv, !dbg !143
  %umin111 = select i1 %57, <2 x double>* %kv, <2 x double>* %kv, !dbg !143
  %58 = icmp ult <2 x double>* %kv, %umin111, !dbg !143
  %umin112 = select i1 %58, <2 x double>* %kv, <2 x double>* %umin111, !dbg !143
  %59 = icmp ult <2 x double>* %kv, %umin112, !dbg !143
  %umin113 = select i1 %59, <2 x double>* %kv, <2 x double>* %umin112, !dbg !143
  %60 = icmp ult <2 x double>* %kv, %umin113, !dbg !143
  %umin114 = select i1 %60, <2 x double>* %kv, <2 x double>* %umin113, !dbg !143
  %61 = icmp ult <2 x double>* %kv, %umin114, !dbg !143
  %umin115 = select i1 %61, <2 x double>* %kv, <2 x double>* %umin114, !dbg !143
  %62 = icmp ult <2 x double>* %kv, %umin115, !dbg !143
  %umin116 = select i1 %62, <2 x double>* %kv, <2 x double>* %umin115, !dbg !143
  %63 = icmp ult <2 x double>* %kv, %umin116, !dbg !143
  %umin117 = select i1 %63, <2 x double>* %kv, <2 x double>* %umin116, !dbg !143
  %64 = icmp ult <2 x double>* %kv, %umin117, !dbg !143
  %umin118 = select i1 %64, <2 x double>* %kv, <2 x double>* %umin117, !dbg !143
  %65 = icmp ult <2 x double>* %kv, %umin118, !dbg !143
  %umin119 = select i1 %65, <2 x double>* %kv, <2 x double>* %umin118, !dbg !143
  %66 = icmp ugt <2 x double>* %kv, %kv, !dbg !143
  %umax120 = select i1 %66, <2 x double>* %kv, <2 x double>* %kv, !dbg !143
  %67 = icmp ugt <2 x double>* %kv, %umax120, !dbg !143
  %umax121 = select i1 %67, <2 x double>* %kv, <2 x double>* %umax120, !dbg !143
  %68 = icmp ugt <2 x double>* %kv, %umax121, !dbg !143
  %umax122 = select i1 %68, <2 x double>* %kv, <2 x double>* %umax121, !dbg !143
  %69 = icmp ugt <2 x double>* %kv, %umax122, !dbg !143
  %umax123 = select i1 %69, <2 x double>* %kv, <2 x double>* %umax122, !dbg !143
  %70 = icmp ugt <2 x double>* %kv, %umax123, !dbg !143
  %umax124 = select i1 %70, <2 x double>* %kv, <2 x double>* %umax123, !dbg !143
  %71 = icmp ugt <2 x double>* %kv, %umax124, !dbg !143
  %umax125 = select i1 %71, <2 x double>* %kv, <2 x double>* %umax124, !dbg !143
  %72 = icmp ugt <2 x double>* %kv, %umax125, !dbg !143
  %umax126 = select i1 %72, <2 x double>* %kv, <2 x double>* %umax125, !dbg !143
  %73 = icmp ugt <2 x double>* %kv, %umax126, !dbg !143
  %umax127 = select i1 %73, <2 x double>* %kv, <2 x double>* %umax126, !dbg !143
  %74 = icmp ugt <2 x double>* %kv, %umax127, !dbg !143
  %umax128 = select i1 %74, <2 x double>* %kv, <2 x double>* %umax127, !dbg !143
  %umax128129 = ptrtoint <2 x double>* %umax128 to i64
  %75 = add i64 %umax128129, 8, !dbg !143
  br i1 %cmp23, label %for.body.25, label %for.end.43, !dbg !143

for.body.25:                                      ; preds = %for.cond.21
  %tmp26 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !144
  %tmp27 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !146
  %add26 = fadd <2 x double> %tmp27, %call1, !dbg !147
  %mul27 = fmul <2 x double> %tmp26, %add26, !dbg !148
  %div28 = fdiv <2 x double> %call1, %mul27, !dbg !149
  %add29 = fadd <2 x double> %poly.0, %div28, !dbg !150
  call void @llvm.dbg.value(metadata <2 x double> %add29, i64 0, metadata !91, metadata !29), !dbg !92
  %tmp31 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !151
  %div30 = fdiv <2 x double> %call1, %tmp31, !dbg !152
  %add31 = fadd <2 x double> %Harmonic.0, %div30, !dbg !153
  call void @llvm.dbg.value(metadata <2 x double> %add31, i64 0, metadata !95, metadata !29), !dbg !96
  %tmp34 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !154
  %tmp35 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !155
  %mul32 = fmul <2 x double> %tmp34, %tmp35, !dbg !156
  %div33 = fdiv <2 x double> %call1, %mul32, !dbg !157
  %add34 = fadd <2 x double> %zeta.0, %div33, !dbg !158
  call void @llvm.dbg.value(metadata <2 x double> %add34, i64 0, metadata !93, metadata !29), !dbg !94
  %tmp38 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !159
  %div35 = fdiv <2 x double> %call5, %tmp38, !dbg !160
  %add36 = fadd <2 x double> %alt.0, %div35, !dbg !161
  call void @llvm.dbg.value(metadata <2 x double> %add36, i64 0, metadata !89, metadata !29), !dbg !90
  %tmp42 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !162
  %mul37 = fmul <2 x double> %call2, %tmp42, !dbg !163
  %sub38 = fsub <2 x double> %mul37, %call1, !dbg !164
  %div39 = fdiv <2 x double> %call5, %sub38, !dbg !165
  %add40 = fadd <2 x double> %Gregory.0, %div39, !dbg !166
  call void @llvm.dbg.value(metadata <2 x double> %add40, i64 0, metadata !87, metadata !29), !dbg !88
  br label %for.inc.41, !dbg !167

for.inc.41:                                       ; preds = %for.body.25
  %tmp46 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !168
  %add42 = fadd <2 x double> %tmp46, %call2, !dbg !168
  store <2 x double> %add42, <2 x double>* %kv, align 16, !dbg !168
  br label %for.cond.21, !dbg !169

for.end.43:                                       ; preds = %for.cond.21
  %Gregory.0.lcssa = phi <2 x double> [ %Gregory.0, %for.cond.21 ]
  %alt.0.lcssa = phi <2 x double> [ %alt.0, %for.cond.21 ]
  %Harmonic.0.lcssa = phi <2 x double> [ %Harmonic.0, %for.cond.21 ]
  %zeta.0.lcssa = phi <2 x double> [ %zeta.0, %for.cond.21 ]
  %poly.0.lcssa = phi <2 x double> [ %poly.0, %for.cond.21 ]
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %twoThrd.0.lcssa, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0)), !dbg !170
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %sqrts.0.lcssa, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0)), !dbg !171
  %call46 = call double @sum_vec(<2 x double> %poly.0.lcssa), !dbg !172
  %call47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %call46, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0)), !dbg !172
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %Flint.0.lcssa, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0)), !dbg !173
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %Cookson.0.lcssa, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0)), !dbg !174
  %call50 = call double @sum_vec(<2 x double> %Harmonic.0.lcssa), !dbg !175
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %call50, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0)), !dbg !175
  %call52 = call double @sum_vec(<2 x double> %zeta.0.lcssa), !dbg !176
  %call53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %call52, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0)), !dbg !176
  %call54 = call double @sum_vec(<2 x double> %alt.0.lcssa), !dbg !177
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %call54, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i32 0, i32 0)), !dbg !177
  %call56 = call double @sum_vec(<2 x double> %Gregory.0.lcssa), !dbg !178
  %call57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %call56, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0)), !dbg !178
  ret i32 0, !dbg !179
}

; Function Attrs: nounwind
declare double @pow(double, double) #2

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @sin(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!25, !26}
!llvm.ident = !{!27}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !6)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/BenchmarkGame/partialsums")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!6 = !{!7, !15, !18}
!7 = !DISubprogram(name: "make_vec", scope: !8, file: !8, line: 12, type: !9, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, function: <2 x double> (double, double)* @make_vec, variables: !2)
!8 = !DIFile(filename: "/home/gleison/tf/Benchmarks/BenchmarkGame/partialsums/tmp.c", directory: "/home/gleison/tf/Benchmarks/BenchmarkGame/partialsums")
!9 = !DISubroutineType(types: !10)
!10 = !{!11, !5, !5}
!11 = !DIDerivedType(tag: DW_TAG_typedef, name: "v2df", file: !8, line: 10, baseType: !12)
!12 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 128, align: 128, flags: DIFlagVector, elements: !13)
!13 = !{!14}
!14 = !DISubrange(count: 2)
!15 = !DISubprogram(name: "sum_vec", scope: !8, file: !8, line: 21, type: !16, isLocal: false, isDefinition: true, scopeLine: 21, flags: DIFlagPrototyped, isOptimized: false, function: double (<2 x double>)* @sum_vec, variables: !2)
!16 = !DISubroutineType(types: !17)
!17 = !{!5, !11}
!18 = !DISubprogram(name: "main", scope: !8, file: !8, line: 26, type: !19, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!19 = !DISubroutineType(types: !20)
!20 = !{!21, !21, !22}
!21 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64, align: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64, align: 64)
!24 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!25 = !{i32 2, !"Dwarf Version", i32 4}
!26 = !{i32 2, !"Debug Info Version", i32 3}
!27 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!28 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !7, file: !8, line: 12, type: !5)
!29 = !DIExpression()
!30 = !DILocation(line: 12, column: 22, scope: !7)
!31 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !7, file: !8, line: 12, type: !5)
!32 = !DILocation(line: 12, column: 32, scope: !7)
!33 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !7, file: !8, line: 13, type: !11)
!34 = !DILocation(line: 13, column: 8, scope: !7)
!35 = !DILocation(line: 15, column: 9, scope: !7)
!36 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !7, file: !8, line: 14, type: !4)
!37 = !DILocation(line: 14, column: 11, scope: !7)
!38 = !DILocation(line: 16, column: 10, scope: !7)
!39 = !DILocation(line: 17, column: 9, scope: !7)
!40 = !DILocation(line: 17, column: 14, scope: !7)
!41 = !DILocation(line: 18, column: 10, scope: !7)
!42 = !DILocation(line: 18, column: 3, scope: !7)
!43 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 1, scope: !15, file: !8, line: 21, type: !11)
!44 = !DILocation(line: 21, column: 21, scope: !15)
!45 = !DILocation(line: 22, column: 17, scope: !15)
!46 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !15, file: !8, line: 22, type: !4)
!47 = !DILocation(line: 22, column: 11, scope: !15)
!48 = !DILocation(line: 23, column: 10, scope: !15)
!49 = !DILocation(line: 23, column: 25, scope: !15)
!50 = !DILocation(line: 23, column: 19, scope: !15)
!51 = !DILocation(line: 23, column: 17, scope: !15)
!52 = !DILocation(line: 23, column: 3, scope: !15)
!53 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !18, file: !8, line: 26, type: !21)
!54 = !DILocation(line: 26, column: 14, scope: !18)
!55 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !18, file: !8, line: 26, type: !22)
!56 = !DILocation(line: 26, column: 26, scope: !18)
!57 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "twoThrd", scope: !18, file: !8, line: 27, type: !5)
!58 = !DILocation(line: 27, column: 10, scope: !18)
!59 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sqrts", scope: !18, file: !8, line: 27, type: !5)
!60 = !DILocation(line: 27, column: 23, scope: !18)
!61 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Flint", scope: !18, file: !8, line: 27, type: !5)
!62 = !DILocation(line: 27, column: 34, scope: !18)
!63 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Cookson", scope: !18, file: !8, line: 27, type: !5)
!64 = !DILocation(line: 27, column: 45, scope: !18)
!65 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "kv", scope: !18, file: !8, line: 29, type: !11)
!66 = !DILocation(line: 29, column: 37, scope: !18)
!67 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !18, file: !8, line: 32, type: !21)
!68 = !DILocation(line: 32, column: 7, scope: !18)
!69 = !DILocation(line: 35, column: 10, scope: !18)
!70 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "zero", scope: !18, file: !8, line: 29, type: !11)
!71 = !DILocation(line: 29, column: 8, scope: !18)
!72 = !DILocation(line: 36, column: 9, scope: !18)
!73 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "one", scope: !18, file: !8, line: 29, type: !11)
!74 = !DILocation(line: 29, column: 14, scope: !18)
!75 = !DILocation(line: 37, column: 9, scope: !18)
!76 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "two", scope: !18, file: !8, line: 29, type: !11)
!77 = !DILocation(line: 29, column: 19, scope: !18)
!78 = !DILocation(line: 38, column: 11, scope: !18)
!79 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m_one", scope: !18, file: !8, line: 29, type: !11)
!80 = !DILocation(line: 29, column: 30, scope: !18)
!81 = !DILocation(line: 39, column: 10, scope: !18)
!82 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "init", scope: !18, file: !8, line: 29, type: !11)
!83 = !DILocation(line: 29, column: 24, scope: !18)
!84 = !DILocation(line: 40, column: 8, scope: !18)
!85 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "av", scope: !18, file: !8, line: 29, type: !11)
!86 = !DILocation(line: 29, column: 41, scope: !18)
!87 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Gregory", scope: !18, file: !8, line: 28, type: !11)
!88 = !DILocation(line: 28, column: 35, scope: !18)
!89 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "alt", scope: !18, file: !8, line: 28, type: !11)
!90 = !DILocation(line: 28, column: 30, scope: !18)
!91 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "poly", scope: !18, file: !8, line: 28, type: !11)
!92 = !DILocation(line: 28, column: 24, scope: !18)
!93 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "zeta", scope: !18, file: !8, line: 28, type: !11)
!94 = !DILocation(line: 28, column: 18, scope: !18)
!95 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Harmonic", scope: !18, file: !8, line: 28, type: !11)
!96 = !DILocation(line: 28, column: 8, scope: !18)
!97 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !18, file: !8, line: 31, type: !5)
!98 = !DILocation(line: 31, column: 10, scope: !18)
!99 = !DILocation(line: 44, column: 8, scope: !100)
!100 = distinct !DILexicalBlock(scope: !18, file: !8, line: 44, column: 3)
!101 = !DILocation(line: 44, column: 20, scope: !102)
!102 = distinct !DILexicalBlock(scope: !100, file: !8, line: 44, column: 3)
!103 = !DILocation(line: 44, column: 17, scope: !102)
!104 = !DILocation(line: 44, column: 3, scope: !100)
!105 = !DILocation(line: 45, column: 33, scope: !106)
!106 = distinct !DILexicalBlock(scope: !102, file: !8, line: 44, column: 28)
!107 = !DILocation(line: 45, column: 16, scope: !106)
!108 = !DILocation(line: 45, column: 13, scope: !106)
!109 = !DILocation(line: 46, column: 20, scope: !106)
!110 = !DILocation(line: 46, column: 18, scope: !106)
!111 = !DILocation(line: 46, column: 11, scope: !106)
!112 = !DILocation(line: 47, column: 12, scope: !106)
!113 = !DILocation(line: 47, column: 16, scope: !106)
!114 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k3", scope: !18, file: !8, line: 31, type: !5)
!115 = !DILocation(line: 31, column: 13, scope: !18)
!116 = !DILocation(line: 48, column: 9, scope: !106)
!117 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !18, file: !8, line: 31, type: !5)
!118 = !DILocation(line: 31, column: 17, scope: !18)
!119 = !DILocation(line: 49, column: 9, scope: !106)
!120 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !18, file: !8, line: 31, type: !5)
!121 = !DILocation(line: 31, column: 20, scope: !18)
!122 = !DILocation(line: 50, column: 24, scope: !106)
!123 = !DILocation(line: 50, column: 28, scope: !106)
!124 = !DILocation(line: 50, column: 18, scope: !106)
!125 = !DILocation(line: 50, column: 11, scope: !106)
!126 = !DILocation(line: 51, column: 26, scope: !106)
!127 = !DILocation(line: 51, column: 30, scope: !106)
!128 = !DILocation(line: 51, column: 20, scope: !106)
!129 = !DILocation(line: 51, column: 13, scope: !106)
!130 = !DILocation(line: 52, column: 3, scope: !106)
!131 = !DILocation(line: 44, column: 24, scope: !102)
!132 = !DILocation(line: 44, column: 3, scope: !102)
!133 = !DILocation(line: 54, column: 11, scope: !134)
!134 = distinct !DILexicalBlock(scope: !18, file: !8, line: 54, column: 3)
!135 = !DILocation(line: 54, column: 8, scope: !134)
!136 = !DILocation(line: 54, column: 20, scope: !137)
!137 = !DILexicalBlockFile(scope: !138, file: !8, discriminator: 2)
!138 = !DILexicalBlockFile(scope: !139, file: !8, discriminator: 1)
!139 = distinct !DILexicalBlock(scope: !134, file: !8, line: 54, column: 3)
!140 = !DILocation(line: 54, column: 19, scope: !139)
!141 = !DILocation(line: 54, column: 39, scope: !139)
!142 = !DILocation(line: 54, column: 36, scope: !139)
!143 = !DILocation(line: 54, column: 3, scope: !134)
!144 = !DILocation(line: 55, column: 20, scope: !145)
!145 = distinct !DILexicalBlock(scope: !139, file: !8, line: 54, column: 53)
!146 = !DILocation(line: 55, column: 26, scope: !145)
!147 = !DILocation(line: 55, column: 29, scope: !145)
!148 = !DILocation(line: 55, column: 23, scope: !145)
!149 = !DILocation(line: 55, column: 17, scope: !145)
!150 = !DILocation(line: 55, column: 10, scope: !145)
!151 = !DILocation(line: 56, column: 23, scope: !145)
!152 = !DILocation(line: 56, column: 21, scope: !145)
!153 = !DILocation(line: 56, column: 14, scope: !145)
!154 = !DILocation(line: 57, column: 20, scope: !145)
!155 = !DILocation(line: 57, column: 25, scope: !145)
!156 = !DILocation(line: 57, column: 23, scope: !145)
!157 = !DILocation(line: 57, column: 17, scope: !145)
!158 = !DILocation(line: 57, column: 10, scope: !145)
!159 = !DILocation(line: 58, column: 17, scope: !145)
!160 = !DILocation(line: 58, column: 15, scope: !145)
!161 = !DILocation(line: 58, column: 9, scope: !145)
!162 = !DILocation(line: 59, column: 28, scope: !145)
!163 = !DILocation(line: 59, column: 26, scope: !145)
!164 = !DILocation(line: 59, column: 31, scope: !145)
!165 = !DILocation(line: 59, column: 19, scope: !145)
!166 = !DILocation(line: 59, column: 13, scope: !145)
!167 = !DILocation(line: 60, column: 3, scope: !145)
!168 = !DILocation(line: 54, column: 45, scope: !139)
!169 = !DILocation(line: 54, column: 3, scope: !139)
!170 = !DILocation(line: 63, column: 3, scope: !18)
!171 = !DILocation(line: 64, column: 3, scope: !18)
!172 = !DILocation(line: 65, column: 3, scope: !18)
!173 = !DILocation(line: 66, column: 3, scope: !18)
!174 = !DILocation(line: 67, column: 3, scope: !18)
!175 = !DILocation(line: 68, column: 3, scope: !18)
!176 = !DILocation(line: 69, column: 3, scope: !18)
!177 = !DILocation(line: 70, column: 3, scope: !18)
!178 = !DILocation(line: 71, column: 3, scope: !18)
!179 = !DILocation(line: 73, column: 3, scope: !18)
