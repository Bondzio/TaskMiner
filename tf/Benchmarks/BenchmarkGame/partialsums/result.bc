; ModuleID = '/home/gleison/tf/Benchmarks/BenchmarkGame/partialsums/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [9 x i8] c"%.9f\09%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"(2/3)^k\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"k^-0.5\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"1/k(k+1)\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Flint Hills\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Cookson Hills\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"Harmonic\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"Riemann Zeta\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"Alternating Harmonic\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"Gregory\00", align 1

; Function Attrs: nounwind uwtable
define <2 x double> @make_vec(double %a, double %b) #0 {
entry:
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %v = alloca <2 x double>, align 16
  %tmp = alloca double*, align 8
  store double %a, double* %a.addr, align 8
  call void @llvm.dbg.declare(metadata double* %a.addr, metadata !28, metadata !29), !dbg !30
  store double %b, double* %b.addr, align 8
  call void @llvm.dbg.declare(metadata double* %b.addr, metadata !31, metadata !29), !dbg !32
  call void @llvm.dbg.declare(metadata <2 x double>* %v, metadata !33, metadata !29), !dbg !34
  call void @llvm.dbg.declare(metadata double** %tmp, metadata !35, metadata !29), !dbg !36
  %0 = bitcast <2 x double>* %v to double*, !dbg !37
  store double* %0, double** %tmp, align 8, !dbg !38
  %1 = load double, double* %a.addr, align 8, !dbg !39
  %2 = load double*, double** %tmp, align 8, !dbg !40
  store double %1, double* %2, align 8, !dbg !41
  %3 = load double, double* %b.addr, align 8, !dbg !42
  %4 = load double*, double** %tmp, align 8, !dbg !43
  %add.ptr = getelementptr inbounds double, double* %4, i64 1, !dbg !44
  store double %3, double* %add.ptr, align 8, !dbg !45
  %5 = load <2 x double>, <2 x double>* %v, align 16, !dbg !46
  ret <2 x double> %5, !dbg !47
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define double @sum_vec(<2 x double> %x) #0 {
entry:
  %x.addr = alloca <2 x double>, align 16
  %tmp = alloca double*, align 8
  store <2 x double> %x, <2 x double>* %x.addr, align 16
  call void @llvm.dbg.declare(metadata <2 x double>* %x.addr, metadata !48, metadata !29), !dbg !49
  call void @llvm.dbg.declare(metadata double** %tmp, metadata !50, metadata !29), !dbg !51
  %0 = bitcast <2 x double>* %x.addr to double*, !dbg !52
  store double* %0, double** %tmp, align 8, !dbg !51
  %1 = load double*, double** %tmp, align 8, !dbg !53
  %2 = load double, double* %1, align 8, !dbg !54
  %3 = load double*, double** %tmp, align 8, !dbg !55
  %add.ptr = getelementptr inbounds double, double* %3, i64 1, !dbg !56
  %4 = load double, double* %add.ptr, align 8, !dbg !57
  %add = fadd double %2, %4, !dbg !58
  ret double %add, !dbg !59
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %twoThrd = alloca double, align 8
  %sqrts = alloca double, align 8
  %Flint = alloca double, align 8
  %Cookson = alloca double, align 8
  %Harmonic = alloca <2 x double>, align 16
  %zeta = alloca <2 x double>, align 16
  %poly = alloca <2 x double>, align 16
  %alt = alloca <2 x double>, align 16
  %Gregory = alloca <2 x double>, align 16
  %zero = alloca <2 x double>, align 16
  %one = alloca <2 x double>, align 16
  %two = alloca <2 x double>, align 16
  %init = alloca <2 x double>, align 16
  %m_one = alloca <2 x double>, align 16
  %kv = alloca <2 x double>, align 16
  %av = alloca <2 x double>, align 16
  %k = alloca double, align 8
  %k3 = alloca double, align 8
  %s = alloca double, align 8
  %c = alloca double, align 8
  %n = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !60, metadata !29), !dbg !61
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !62, metadata !29), !dbg !63
  call void @llvm.dbg.declare(metadata double* %twoThrd, metadata !64, metadata !29), !dbg !65
  store double 0.000000e+00, double* %twoThrd, align 8, !dbg !65
  call void @llvm.dbg.declare(metadata double* %sqrts, metadata !66, metadata !29), !dbg !67
  store double 0.000000e+00, double* %sqrts, align 8, !dbg !67
  call void @llvm.dbg.declare(metadata double* %Flint, metadata !68, metadata !29), !dbg !69
  store double 0.000000e+00, double* %Flint, align 8, !dbg !69
  call void @llvm.dbg.declare(metadata double* %Cookson, metadata !70, metadata !29), !dbg !71
  store double 0.000000e+00, double* %Cookson, align 8, !dbg !71
  call void @llvm.dbg.declare(metadata <2 x double>* %Harmonic, metadata !72, metadata !29), !dbg !73
  call void @llvm.dbg.declare(metadata <2 x double>* %zeta, metadata !74, metadata !29), !dbg !75
  call void @llvm.dbg.declare(metadata <2 x double>* %poly, metadata !76, metadata !29), !dbg !77
  call void @llvm.dbg.declare(metadata <2 x double>* %alt, metadata !78, metadata !29), !dbg !79
  call void @llvm.dbg.declare(metadata <2 x double>* %Gregory, metadata !80, metadata !29), !dbg !81
  call void @llvm.dbg.declare(metadata <2 x double>* %zero, metadata !82, metadata !29), !dbg !83
  call void @llvm.dbg.declare(metadata <2 x double>* %one, metadata !84, metadata !29), !dbg !85
  call void @llvm.dbg.declare(metadata <2 x double>* %two, metadata !86, metadata !29), !dbg !87
  call void @llvm.dbg.declare(metadata <2 x double>* %init, metadata !88, metadata !29), !dbg !89
  call void @llvm.dbg.declare(metadata <2 x double>* %m_one, metadata !90, metadata !29), !dbg !91
  call void @llvm.dbg.declare(metadata <2 x double>* %kv, metadata !92, metadata !29), !dbg !93
  call void @llvm.dbg.declare(metadata <2 x double>* %av, metadata !94, metadata !29), !dbg !95
  call void @llvm.dbg.declare(metadata double* %k, metadata !96, metadata !29), !dbg !97
  call void @llvm.dbg.declare(metadata double* %k3, metadata !98, metadata !29), !dbg !99
  call void @llvm.dbg.declare(metadata double* %s, metadata !100, metadata !29), !dbg !101
  call void @llvm.dbg.declare(metadata double* %c, metadata !102, metadata !29), !dbg !103
  call void @llvm.dbg.declare(metadata i32* %n, metadata !104, metadata !29), !dbg !105
  store i32 2500000, i32* %n, align 4, !dbg !106
  %call = call <2 x double> @make_vec(double 0.000000e+00, double 0.000000e+00), !dbg !107
  store <2 x double> %call, <2 x double>* %zero, align 16, !dbg !108
  %call1 = call <2 x double> @make_vec(double 1.000000e+00, double 1.000000e+00), !dbg !109
  store <2 x double> %call1, <2 x double>* %one, align 16, !dbg !110
  %call2 = call <2 x double> @make_vec(double 2.000000e+00, double 2.000000e+00), !dbg !111
  store <2 x double> %call2, <2 x double>* %two, align 16, !dbg !112
  %call3 = call <2 x double> @make_vec(double -1.000000e+00, double -1.000000e+00), !dbg !113
  store <2 x double> %call3, <2 x double>* %m_one, align 16, !dbg !114
  %call4 = call <2 x double> @make_vec(double 1.000000e+00, double 2.000000e+00), !dbg !115
  store <2 x double> %call4, <2 x double>* %init, align 16, !dbg !116
  %call5 = call <2 x double> @make_vec(double 1.000000e+00, double -1.000000e+00), !dbg !117
  store <2 x double> %call5, <2 x double>* %av, align 16, !dbg !118
  %0 = load <2 x double>, <2 x double>* %zero, align 16, !dbg !119
  store <2 x double> %0, <2 x double>* %Gregory, align 16, !dbg !120
  store <2 x double> %0, <2 x double>* %alt, align 16, !dbg !121
  store <2 x double> %0, <2 x double>* %poly, align 16, !dbg !122
  store <2 x double> %0, <2 x double>* %zeta, align 16, !dbg !123
  store <2 x double> %0, <2 x double>* %Harmonic, align 16, !dbg !124
  store double 1.000000e+00, double* %k, align 8, !dbg !125
  br label %for.cond, !dbg !127

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load double, double* %k, align 8, !dbg !128
  %2 = load i32, i32* %n, align 4, !dbg !132
  %conv = sitofp i32 %2 to double, !dbg !132
  %cmp = fcmp ole double %1, %conv, !dbg !133
  br i1 %cmp, label %for.body, label %for.end, !dbg !134

for.body:                                         ; preds = %for.cond
  %3 = load double, double* %k, align 8, !dbg !135
  %sub = fsub double %3, 1.000000e+00, !dbg !137
  %call7 = call double @pow(double 0x3FE5555555555555, double %sub) #4, !dbg !138
  %4 = load double, double* %twoThrd, align 8, !dbg !139
  %add = fadd double %4, %call7, !dbg !139
  store double %add, double* %twoThrd, align 8, !dbg !139
  %5 = load double, double* %k, align 8, !dbg !140
  %call8 = call double @sqrt(double %5) #4, !dbg !141
  %div = fdiv double 1.000000e+00, %call8, !dbg !142
  %6 = load double, double* %sqrts, align 8, !dbg !143
  %add9 = fadd double %6, %div, !dbg !143
  store double %add9, double* %sqrts, align 8, !dbg !143
  %7 = load double, double* %k, align 8, !dbg !144
  %8 = load double, double* %k, align 8, !dbg !145
  %mul = fmul double %7, %8, !dbg !146
  %9 = load double, double* %k, align 8, !dbg !147
  %mul10 = fmul double %mul, %9, !dbg !148
  store double %mul10, double* %k3, align 8, !dbg !149
  %10 = load double, double* %k, align 8, !dbg !150
  %call11 = call double @sin(double %10) #4, !dbg !151
  store double %call11, double* %s, align 8, !dbg !152
  %11 = load double, double* %k, align 8, !dbg !153
  %call12 = call double @cos(double %11) #4, !dbg !154
  store double %call12, double* %c, align 8, !dbg !155
  %12 = load double, double* %k3, align 8, !dbg !156
  %13 = load double, double* %s, align 8, !dbg !157
  %mul13 = fmul double %12, %13, !dbg !158
  %14 = load double, double* %s, align 8, !dbg !159
  %mul14 = fmul double %mul13, %14, !dbg !160
  %div15 = fdiv double 1.000000e+00, %mul14, !dbg !161
  %15 = load double, double* %Flint, align 8, !dbg !162
  %add16 = fadd double %15, %div15, !dbg !162
  store double %add16, double* %Flint, align 8, !dbg !162
  %16 = load double, double* %k3, align 8, !dbg !163
  %17 = load double, double* %c, align 8, !dbg !164
  %mul17 = fmul double %16, %17, !dbg !165
  %18 = load double, double* %c, align 8, !dbg !166
  %mul18 = fmul double %mul17, %18, !dbg !167
  %div19 = fdiv double 1.000000e+00, %mul18, !dbg !168
  %19 = load double, double* %Cookson, align 8, !dbg !169
  %add20 = fadd double %19, %div19, !dbg !169
  store double %add20, double* %Cookson, align 8, !dbg !169
  br label %for.inc, !dbg !170

for.inc:                                          ; preds = %for.body
  %20 = load double, double* %k, align 8, !dbg !171
  %inc = fadd double %20, 1.000000e+00, !dbg !171
  store double %inc, double* %k, align 8, !dbg !171
  br label %for.cond, !dbg !172

for.end:                                          ; preds = %for.cond
  %21 = load <2 x double>, <2 x double>* %init, align 16, !dbg !173
  store <2 x double> %21, <2 x double>* %kv, align 16, !dbg !175
  br label %for.cond.21, !dbg !176

for.cond.21:                                      ; preds = %for.inc.41, %for.end
  %22 = bitcast <2 x double>* %kv to double*, !dbg !177
  %23 = load double, double* %22, align 8, !dbg !181
  %24 = load i32, i32* %n, align 4, !dbg !182
  %conv22 = sitofp i32 %24 to double, !dbg !182
  %cmp23 = fcmp ole double %23, %conv22, !dbg !183
  br i1 %cmp23, label %for.body.25, label %for.end.43, !dbg !184

for.body.25:                                      ; preds = %for.cond.21
  %25 = load <2 x double>, <2 x double>* %one, align 16, !dbg !185
  %26 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !187
  %27 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !188
  %28 = load <2 x double>, <2 x double>* %one, align 16, !dbg !189
  %add26 = fadd <2 x double> %27, %28, !dbg !190
  %mul27 = fmul <2 x double> %26, %add26, !dbg !191
  %div28 = fdiv <2 x double> %25, %mul27, !dbg !192
  %29 = load <2 x double>, <2 x double>* %poly, align 16, !dbg !193
  %add29 = fadd <2 x double> %29, %div28, !dbg !193
  store <2 x double> %add29, <2 x double>* %poly, align 16, !dbg !193
  %30 = load <2 x double>, <2 x double>* %one, align 16, !dbg !194
  %31 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !195
  %div30 = fdiv <2 x double> %30, %31, !dbg !196
  %32 = load <2 x double>, <2 x double>* %Harmonic, align 16, !dbg !197
  %add31 = fadd <2 x double> %32, %div30, !dbg !197
  store <2 x double> %add31, <2 x double>* %Harmonic, align 16, !dbg !197
  %33 = load <2 x double>, <2 x double>* %one, align 16, !dbg !198
  %34 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !199
  %35 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !200
  %mul32 = fmul <2 x double> %34, %35, !dbg !201
  %div33 = fdiv <2 x double> %33, %mul32, !dbg !202
  %36 = load <2 x double>, <2 x double>* %zeta, align 16, !dbg !203
  %add34 = fadd <2 x double> %36, %div33, !dbg !203
  store <2 x double> %add34, <2 x double>* %zeta, align 16, !dbg !203
  %37 = load <2 x double>, <2 x double>* %av, align 16, !dbg !204
  %38 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !205
  %div35 = fdiv <2 x double> %37, %38, !dbg !206
  %39 = load <2 x double>, <2 x double>* %alt, align 16, !dbg !207
  %add36 = fadd <2 x double> %39, %div35, !dbg !207
  store <2 x double> %add36, <2 x double>* %alt, align 16, !dbg !207
  %40 = load <2 x double>, <2 x double>* %av, align 16, !dbg !208
  %41 = load <2 x double>, <2 x double>* %two, align 16, !dbg !209
  %42 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !210
  %mul37 = fmul <2 x double> %41, %42, !dbg !211
  %43 = load <2 x double>, <2 x double>* %one, align 16, !dbg !212
  %sub38 = fsub <2 x double> %mul37, %43, !dbg !213
  %div39 = fdiv <2 x double> %40, %sub38, !dbg !214
  %44 = load <2 x double>, <2 x double>* %Gregory, align 16, !dbg !215
  %add40 = fadd <2 x double> %44, %div39, !dbg !215
  store <2 x double> %add40, <2 x double>* %Gregory, align 16, !dbg !215
  br label %for.inc.41, !dbg !216

for.inc.41:                                       ; preds = %for.body.25
  %45 = load <2 x double>, <2 x double>* %two, align 16, !dbg !217
  %46 = load <2 x double>, <2 x double>* %kv, align 16, !dbg !218
  %add42 = fadd <2 x double> %46, %45, !dbg !218
  store <2 x double> %add42, <2 x double>* %kv, align 16, !dbg !218
  br label %for.cond.21, !dbg !219

for.end.43:                                       ; preds = %for.cond.21
  %47 = load double, double* %twoThrd, align 8, !dbg !220
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %47, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0)), !dbg !220
  %48 = load double, double* %sqrts, align 8, !dbg !221
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %48, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0)), !dbg !221
  %49 = load <2 x double>, <2 x double>* %poly, align 16, !dbg !222
  %call46 = call double @sum_vec(<2 x double> %49), !dbg !222
  %call47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %call46, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0)), !dbg !222
  %50 = load double, double* %Flint, align 8, !dbg !223
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %50, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0)), !dbg !223
  %51 = load double, double* %Cookson, align 8, !dbg !224
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %51, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0)), !dbg !224
  %52 = load <2 x double>, <2 x double>* %Harmonic, align 16, !dbg !225
  %call50 = call double @sum_vec(<2 x double> %52), !dbg !225
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %call50, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0)), !dbg !225
  %53 = load <2 x double>, <2 x double>* %zeta, align 16, !dbg !226
  %call52 = call double @sum_vec(<2 x double> %53), !dbg !226
  %call53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %call52, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0)), !dbg !226
  %54 = load <2 x double>, <2 x double>* %alt, align 16, !dbg !227
  %call54 = call double @sum_vec(<2 x double> %54), !dbg !227
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %call54, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i32 0, i32 0)), !dbg !227
  %55 = load <2 x double>, <2 x double>* %Gregory, align 16, !dbg !228
  %call56 = call double @sum_vec(<2 x double> %55), !dbg !228
  %call57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %call56, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0)), !dbg !228
  ret i32 0, !dbg !229
}

; Function Attrs: nounwind
declare double @pow(double, double) #2

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @sin(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!25, !26}
!llvm.ident = !{!27}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !6)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/BenchmarkGame/partialsums")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!6 = !{!7, !15, !18}
!7 = !DISubprogram(name: "make_vec", scope: !8, file: !8, line: 12, type: !9, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, function: <2 x double> (double, double)* @make_vec, variables: !2)
!8 = !DIFile(filename: "/home/gleison/tf/Benchmarks/BenchmarkGame/partialsums/tmp.c", directory: "/home/gleison/tf/Benchmarks/BenchmarkGame/partialsums")
!9 = !DISubroutineType(types: !10)
!10 = !{!11, !5, !5}
!11 = !DIDerivedType(tag: DW_TAG_typedef, name: "v2df", file: !8, line: 10, baseType: !12)
!12 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 128, align: 128, flags: DIFlagVector, elements: !13)
!13 = !{!14}
!14 = !DISubrange(count: 2)
!15 = !DISubprogram(name: "sum_vec", scope: !8, file: !8, line: 21, type: !16, isLocal: false, isDefinition: true, scopeLine: 21, flags: DIFlagPrototyped, isOptimized: false, function: double (<2 x double>)* @sum_vec, variables: !2)
!16 = !DISubroutineType(types: !17)
!17 = !{!5, !11}
!18 = !DISubprogram(name: "main", scope: !8, file: !8, line: 26, type: !19, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!19 = !DISubroutineType(types: !20)
!20 = !{!21, !21, !22}
!21 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64, align: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64, align: 64)
!24 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!25 = !{i32 2, !"Dwarf Version", i32 4}
!26 = !{i32 2, !"Debug Info Version", i32 3}
!27 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!28 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !7, file: !8, line: 12, type: !5)
!29 = !DIExpression()
!30 = !DILocation(line: 12, column: 22, scope: !7)
!31 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !7, file: !8, line: 12, type: !5)
!32 = !DILocation(line: 12, column: 32, scope: !7)
!33 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !7, file: !8, line: 13, type: !11)
!34 = !DILocation(line: 13, column: 8, scope: !7)
!35 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !7, file: !8, line: 14, type: !4)
!36 = !DILocation(line: 14, column: 11, scope: !7)
!37 = !DILocation(line: 15, column: 9, scope: !7)
!38 = !DILocation(line: 15, column: 7, scope: !7)
!39 = !DILocation(line: 16, column: 12, scope: !7)
!40 = !DILocation(line: 16, column: 5, scope: !7)
!41 = !DILocation(line: 16, column: 10, scope: !7)
!42 = !DILocation(line: 17, column: 16, scope: !7)
!43 = !DILocation(line: 17, column: 5, scope: !7)
!44 = !DILocation(line: 17, column: 9, scope: !7)
!45 = !DILocation(line: 17, column: 14, scope: !7)
!46 = !DILocation(line: 18, column: 10, scope: !7)
!47 = !DILocation(line: 18, column: 3, scope: !7)
!48 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 1, scope: !15, file: !8, line: 21, type: !11)
!49 = !DILocation(line: 21, column: 21, scope: !15)
!50 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !15, file: !8, line: 22, type: !4)
!51 = !DILocation(line: 22, column: 11, scope: !15)
!52 = !DILocation(line: 22, column: 17, scope: !15)
!53 = !DILocation(line: 23, column: 12, scope: !15)
!54 = !DILocation(line: 23, column: 10, scope: !15)
!55 = !DILocation(line: 23, column: 21, scope: !15)
!56 = !DILocation(line: 23, column: 25, scope: !15)
!57 = !DILocation(line: 23, column: 19, scope: !15)
!58 = !DILocation(line: 23, column: 17, scope: !15)
!59 = !DILocation(line: 23, column: 3, scope: !15)
!60 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !18, file: !8, line: 26, type: !21)
!61 = !DILocation(line: 26, column: 14, scope: !18)
!62 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !18, file: !8, line: 26, type: !22)
!63 = !DILocation(line: 26, column: 26, scope: !18)
!64 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "twoThrd", scope: !18, file: !8, line: 27, type: !5)
!65 = !DILocation(line: 27, column: 10, scope: !18)
!66 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sqrts", scope: !18, file: !8, line: 27, type: !5)
!67 = !DILocation(line: 27, column: 23, scope: !18)
!68 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Flint", scope: !18, file: !8, line: 27, type: !5)
!69 = !DILocation(line: 27, column: 34, scope: !18)
!70 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Cookson", scope: !18, file: !8, line: 27, type: !5)
!71 = !DILocation(line: 27, column: 45, scope: !18)
!72 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Harmonic", scope: !18, file: !8, line: 28, type: !11)
!73 = !DILocation(line: 28, column: 8, scope: !18)
!74 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "zeta", scope: !18, file: !8, line: 28, type: !11)
!75 = !DILocation(line: 28, column: 18, scope: !18)
!76 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "poly", scope: !18, file: !8, line: 28, type: !11)
!77 = !DILocation(line: 28, column: 24, scope: !18)
!78 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "alt", scope: !18, file: !8, line: 28, type: !11)
!79 = !DILocation(line: 28, column: 30, scope: !18)
!80 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Gregory", scope: !18, file: !8, line: 28, type: !11)
!81 = !DILocation(line: 28, column: 35, scope: !18)
!82 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "zero", scope: !18, file: !8, line: 29, type: !11)
!83 = !DILocation(line: 29, column: 8, scope: !18)
!84 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "one", scope: !18, file: !8, line: 29, type: !11)
!85 = !DILocation(line: 29, column: 14, scope: !18)
!86 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "two", scope: !18, file: !8, line: 29, type: !11)
!87 = !DILocation(line: 29, column: 19, scope: !18)
!88 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "init", scope: !18, file: !8, line: 29, type: !11)
!89 = !DILocation(line: 29, column: 24, scope: !18)
!90 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m_one", scope: !18, file: !8, line: 29, type: !11)
!91 = !DILocation(line: 29, column: 30, scope: !18)
!92 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "kv", scope: !18, file: !8, line: 29, type: !11)
!93 = !DILocation(line: 29, column: 37, scope: !18)
!94 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "av", scope: !18, file: !8, line: 29, type: !11)
!95 = !DILocation(line: 29, column: 41, scope: !18)
!96 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !18, file: !8, line: 31, type: !5)
!97 = !DILocation(line: 31, column: 10, scope: !18)
!98 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k3", scope: !18, file: !8, line: 31, type: !5)
!99 = !DILocation(line: 31, column: 13, scope: !18)
!100 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !18, file: !8, line: 31, type: !5)
!101 = !DILocation(line: 31, column: 17, scope: !18)
!102 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !18, file: !8, line: 31, type: !5)
!103 = !DILocation(line: 31, column: 20, scope: !18)
!104 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !18, file: !8, line: 32, type: !21)
!105 = !DILocation(line: 32, column: 7, scope: !18)
!106 = !DILocation(line: 33, column: 5, scope: !18)
!107 = !DILocation(line: 35, column: 10, scope: !18)
!108 = !DILocation(line: 35, column: 8, scope: !18)
!109 = !DILocation(line: 36, column: 9, scope: !18)
!110 = !DILocation(line: 36, column: 7, scope: !18)
!111 = !DILocation(line: 37, column: 9, scope: !18)
!112 = !DILocation(line: 37, column: 7, scope: !18)
!113 = !DILocation(line: 38, column: 11, scope: !18)
!114 = !DILocation(line: 38, column: 9, scope: !18)
!115 = !DILocation(line: 39, column: 10, scope: !18)
!116 = !DILocation(line: 39, column: 8, scope: !18)
!117 = !DILocation(line: 40, column: 8, scope: !18)
!118 = !DILocation(line: 40, column: 6, scope: !18)
!119 = !DILocation(line: 42, column: 44, scope: !18)
!120 = !DILocation(line: 42, column: 42, scope: !18)
!121 = !DILocation(line: 42, column: 32, scope: !18)
!122 = !DILocation(line: 42, column: 26, scope: !18)
!123 = !DILocation(line: 42, column: 19, scope: !18)
!124 = !DILocation(line: 42, column: 12, scope: !18)
!125 = !DILocation(line: 44, column: 10, scope: !126)
!126 = distinct !DILexicalBlock(scope: !18, file: !8, line: 44, column: 3)
!127 = !DILocation(line: 44, column: 8, scope: !126)
!128 = !DILocation(line: 44, column: 15, scope: !129)
!129 = !DILexicalBlockFile(scope: !130, file: !8, discriminator: 2)
!130 = !DILexicalBlockFile(scope: !131, file: !8, discriminator: 1)
!131 = distinct !DILexicalBlock(scope: !126, file: !8, line: 44, column: 3)
!132 = !DILocation(line: 44, column: 20, scope: !131)
!133 = !DILocation(line: 44, column: 17, scope: !131)
!134 = !DILocation(line: 44, column: 3, scope: !126)
!135 = !DILocation(line: 45, column: 31, scope: !136)
!136 = distinct !DILexicalBlock(scope: !131, file: !8, line: 44, column: 28)
!137 = !DILocation(line: 45, column: 33, scope: !136)
!138 = !DILocation(line: 45, column: 16, scope: !136)
!139 = !DILocation(line: 45, column: 13, scope: !136)
!140 = !DILocation(line: 46, column: 25, scope: !136)
!141 = !DILocation(line: 46, column: 20, scope: !136)
!142 = !DILocation(line: 46, column: 18, scope: !136)
!143 = !DILocation(line: 46, column: 11, scope: !136)
!144 = !DILocation(line: 47, column: 10, scope: !136)
!145 = !DILocation(line: 47, column: 14, scope: !136)
!146 = !DILocation(line: 47, column: 12, scope: !136)
!147 = !DILocation(line: 47, column: 18, scope: !136)
!148 = !DILocation(line: 47, column: 16, scope: !136)
!149 = !DILocation(line: 47, column: 8, scope: !136)
!150 = !DILocation(line: 48, column: 13, scope: !136)
!151 = !DILocation(line: 48, column: 9, scope: !136)
!152 = !DILocation(line: 48, column: 7, scope: !136)
!153 = !DILocation(line: 49, column: 13, scope: !136)
!154 = !DILocation(line: 49, column: 9, scope: !136)
!155 = !DILocation(line: 49, column: 7, scope: !136)
!156 = !DILocation(line: 50, column: 21, scope: !136)
!157 = !DILocation(line: 50, column: 26, scope: !136)
!158 = !DILocation(line: 50, column: 24, scope: !136)
!159 = !DILocation(line: 50, column: 30, scope: !136)
!160 = !DILocation(line: 50, column: 28, scope: !136)
!161 = !DILocation(line: 50, column: 18, scope: !136)
!162 = !DILocation(line: 50, column: 11, scope: !136)
!163 = !DILocation(line: 51, column: 23, scope: !136)
!164 = !DILocation(line: 51, column: 28, scope: !136)
!165 = !DILocation(line: 51, column: 26, scope: !136)
!166 = !DILocation(line: 51, column: 32, scope: !136)
!167 = !DILocation(line: 51, column: 30, scope: !136)
!168 = !DILocation(line: 51, column: 20, scope: !136)
!169 = !DILocation(line: 51, column: 13, scope: !136)
!170 = !DILocation(line: 52, column: 3, scope: !136)
!171 = !DILocation(line: 44, column: 24, scope: !131)
!172 = !DILocation(line: 44, column: 3, scope: !131)
!173 = !DILocation(line: 54, column: 13, scope: !174)
!174 = distinct !DILexicalBlock(scope: !18, file: !8, line: 54, column: 3)
!175 = !DILocation(line: 54, column: 11, scope: !174)
!176 = !DILocation(line: 54, column: 8, scope: !174)
!177 = !DILocation(line: 54, column: 20, scope: !178)
!178 = !DILexicalBlockFile(scope: !179, file: !8, discriminator: 2)
!179 = !DILexicalBlockFile(scope: !180, file: !8, discriminator: 1)
!180 = distinct !DILexicalBlock(scope: !174, file: !8, line: 54, column: 3)
!181 = !DILocation(line: 54, column: 19, scope: !180)
!182 = !DILocation(line: 54, column: 39, scope: !180)
!183 = !DILocation(line: 54, column: 36, scope: !180)
!184 = !DILocation(line: 54, column: 3, scope: !174)
!185 = !DILocation(line: 55, column: 13, scope: !186)
!186 = distinct !DILexicalBlock(scope: !180, file: !8, line: 54, column: 53)
!187 = !DILocation(line: 55, column: 20, scope: !186)
!188 = !DILocation(line: 55, column: 26, scope: !186)
!189 = !DILocation(line: 55, column: 31, scope: !186)
!190 = !DILocation(line: 55, column: 29, scope: !186)
!191 = !DILocation(line: 55, column: 23, scope: !186)
!192 = !DILocation(line: 55, column: 17, scope: !186)
!193 = !DILocation(line: 55, column: 10, scope: !186)
!194 = !DILocation(line: 56, column: 17, scope: !186)
!195 = !DILocation(line: 56, column: 23, scope: !186)
!196 = !DILocation(line: 56, column: 21, scope: !186)
!197 = !DILocation(line: 56, column: 14, scope: !186)
!198 = !DILocation(line: 57, column: 13, scope: !186)
!199 = !DILocation(line: 57, column: 20, scope: !186)
!200 = !DILocation(line: 57, column: 25, scope: !186)
!201 = !DILocation(line: 57, column: 23, scope: !186)
!202 = !DILocation(line: 57, column: 17, scope: !186)
!203 = !DILocation(line: 57, column: 10, scope: !186)
!204 = !DILocation(line: 58, column: 12, scope: !186)
!205 = !DILocation(line: 58, column: 17, scope: !186)
!206 = !DILocation(line: 58, column: 15, scope: !186)
!207 = !DILocation(line: 58, column: 9, scope: !186)
!208 = !DILocation(line: 59, column: 16, scope: !186)
!209 = !DILocation(line: 59, column: 22, scope: !186)
!210 = !DILocation(line: 59, column: 28, scope: !186)
!211 = !DILocation(line: 59, column: 26, scope: !186)
!212 = !DILocation(line: 59, column: 33, scope: !186)
!213 = !DILocation(line: 59, column: 31, scope: !186)
!214 = !DILocation(line: 59, column: 19, scope: !186)
!215 = !DILocation(line: 59, column: 13, scope: !186)
!216 = !DILocation(line: 60, column: 3, scope: !186)
!217 = !DILocation(line: 54, column: 48, scope: !180)
!218 = !DILocation(line: 54, column: 45, scope: !180)
!219 = !DILocation(line: 54, column: 3, scope: !180)
!220 = !DILocation(line: 63, column: 3, scope: !18)
!221 = !DILocation(line: 64, column: 3, scope: !18)
!222 = !DILocation(line: 65, column: 3, scope: !18)
!223 = !DILocation(line: 66, column: 3, scope: !18)
!224 = !DILocation(line: 67, column: 3, scope: !18)
!225 = !DILocation(line: 68, column: 3, scope: !18)
!226 = !DILocation(line: 69, column: 3, scope: !18)
!227 = !DILocation(line: 70, column: 3, scope: !18)
!228 = !DILocation(line: 71, column: 3, scope: !18)
!229 = !DILocation(line: 73, column: 3, scope: !18)
