; ModuleID = '/home/gleison/tf/Benchmarks/BenchmarkGame/puzzle/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@next = internal global i64 1, align 8
@.str = private unnamed_addr constant [21 x i8] c"Found duplicate: %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @rand() #0 {
entry:
  %0 = load i64, i64* @next, align 8, !dbg !34
  %mul = mul i64 %0, 1103515245, !dbg !35
  %add = add i64 %mul, 12345, !dbg !36
  store i64 %add, i64* @next, align 8, !dbg !37
  %1 = load i64, i64* @next, align 8, !dbg !38
  %div = udiv i64 %1, 65536, !dbg !39
  %conv = trunc i64 %div to i32, !dbg !40
  %rem = urem i32 %conv, 32767, !dbg !41
  %add1 = add i32 %rem, 1, !dbg !42
  ret i32 %add1, !dbg !43
}

; Function Attrs: nounwind uwtable
define void @srand(i32 %seed) #0 {
entry:
  %seed.addr = alloca i32, align 4
  store i32 %seed, i32* %seed.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seed.addr, metadata !44, metadata !45), !dbg !46
  %0 = load i32, i32* %seed.addr, align 4, !dbg !47
  %conv = zext i32 %0 to i64, !dbg !47
  store i64 %conv, i64* @next, align 8, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define i32 @randInt(i32 %min, i32 %max) #0 {
entry:
  %min.addr = alloca i32, align 4
  %max.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %min, i32* %min.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %min.addr, metadata !50, metadata !45), !dbg !51
  store i32 %max, i32* %max.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max.addr, metadata !52, metadata !45), !dbg !53
  call void @llvm.dbg.declare(metadata i32* %k, metadata !54, metadata !45), !dbg !55
  call void @llvm.dbg.declare(metadata i32* %n, metadata !56, metadata !45), !dbg !57
  %0 = load i32, i32* %max.addr, align 4, !dbg !58
  %1 = load i32, i32* %min.addr, align 4, !dbg !59
  %sub = sub nsw i32 %0, %1, !dbg !60
  %add = add nsw i32 %sub, 1, !dbg !61
  store i32 %add, i32* %n, align 4, !dbg !62
  %2 = load i32, i32* %n, align 4, !dbg !63
  %conv = sitofp i32 %2 to double, !dbg !63
  %call = call i32 @rand() #4, !dbg !64
  %conv1 = sitofp i32 %call to double, !dbg !64
  %div = fdiv double %conv1, 3.276800e+04, !dbg !65
  %mul = fmul double %conv, %div, !dbg !66
  %conv2 = fptosi double %mul to i32, !dbg !67
  store i32 %conv2, i32* %k, align 4, !dbg !68
  %3 = load i32, i32* %k, align 4, !dbg !69
  %4 = load i32, i32* %n, align 4, !dbg !70
  %cmp = icmp eq i32 %3, %4, !dbg !71
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !72

cond.true:                                        ; preds = %entry
  %5 = load i32, i32* %k, align 4, !dbg !73
  %6 = load i32, i32* %min.addr, align 4, !dbg !75
  %add4 = add nsw i32 %5, %6, !dbg !76
  %sub5 = sub nsw i32 %add4, 1, !dbg !77
  br label %cond.end, !dbg !72

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %k, align 4, !dbg !78
  %8 = load i32, i32* %min.addr, align 4, !dbg !80
  %add6 = add nsw i32 %7, %8, !dbg !81
  br label %cond.end, !dbg !72

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub5, %cond.true ], [ %add6, %cond.false ], !dbg !72
  ret i32 %cond, !dbg !82
}

; Function Attrs: nounwind uwtable
define void @shuffle(i32* %items, i32 %len) #0 {
entry:
  %items.addr = alloca i32*, align 8
  %len.addr = alloca i32, align 4
  %j = alloca i64, align 8
  %k = alloca i64, align 8
  %i = alloca i64, align 8
  %aux = alloca i32, align 4
  store i32* %items, i32** %items.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %items.addr, metadata !85, metadata !45), !dbg !86
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !87, metadata !45), !dbg !88
  call void @llvm.dbg.declare(metadata i64* %j, metadata !89, metadata !45), !dbg !93
  call void @llvm.dbg.declare(metadata i64* %k, metadata !94, metadata !45), !dbg !95
  call void @llvm.dbg.declare(metadata i64* %i, metadata !96, metadata !45), !dbg !97
  call void @llvm.dbg.declare(metadata i32* %aux, metadata !98, metadata !45), !dbg !99
  %0 = load i32, i32* %len.addr, align 4, !dbg !100
  %sub = sub nsw i32 %0, 1, !dbg !102
  %conv = sext i32 %sub to i64, !dbg !100
  store i64 %conv, i64* %i, align 8, !dbg !103
  br label %for.cond, !dbg !104

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !dbg !105
  %cmp = icmp ugt i64 %1, 0, !dbg !109
  br i1 %cmp, label %for.body, label %for.end, !dbg !110

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8, !dbg !111
  %add = add i64 %2, 1, !dbg !113
  %conv2 = uitofp i64 %add to double, !dbg !114
  %call = call i32 @rand() #4, !dbg !115
  %conv3 = sitofp i32 %call to double, !dbg !115
  %div = fdiv double %conv3, 3.276800e+04, !dbg !116
  %mul = fmul double %conv2, %div, !dbg !117
  %conv4 = fptosi double %mul to i32, !dbg !118
  %conv5 = sext i32 %conv4 to i64, !dbg !118
  store i64 %conv5, i64* %k, align 8, !dbg !119
  %3 = load i64, i64* %k, align 8, !dbg !120
  %4 = load i64, i64* %i, align 8, !dbg !121
  %add6 = add i64 %4, 1, !dbg !122
  %cmp7 = icmp eq i64 %3, %add6, !dbg !123
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !124

cond.true:                                        ; preds = %for.body
  %5 = load i64, i64* %k, align 8, !dbg !125
  %sub9 = sub i64 %5, 1, !dbg !127
  br label %cond.end, !dbg !124

cond.false:                                       ; preds = %for.body
  %6 = load i64, i64* %k, align 8, !dbg !128
  br label %cond.end, !dbg !124

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub9, %cond.true ], [ %6, %cond.false ], !dbg !124
  store i64 %cond, i64* %j, align 8, !dbg !130
  %7 = load i64, i64* %i, align 8, !dbg !133
  %8 = load i32*, i32** %items.addr, align 8, !dbg !134
  %arrayidx = getelementptr inbounds i32, i32* %8, i64 %7, !dbg !134
  %9 = load i32, i32* %arrayidx, align 4, !dbg !134
  store i32 %9, i32* %aux, align 4, !dbg !135
  %10 = load i64, i64* %j, align 8, !dbg !136
  %11 = load i32*, i32** %items.addr, align 8, !dbg !137
  %arrayidx10 = getelementptr inbounds i32, i32* %11, i64 %10, !dbg !137
  %12 = load i32, i32* %arrayidx10, align 4, !dbg !137
  %13 = load i64, i64* %i, align 8, !dbg !138
  %14 = load i32*, i32** %items.addr, align 8, !dbg !139
  %arrayidx11 = getelementptr inbounds i32, i32* %14, i64 %13, !dbg !139
  store i32 %12, i32* %arrayidx11, align 4, !dbg !140
  %15 = load i32, i32* %aux, align 4, !dbg !141
  %16 = load i64, i64* %j, align 8, !dbg !142
  %17 = load i32*, i32** %items.addr, align 8, !dbg !143
  %arrayidx12 = getelementptr inbounds i32, i32* %17, i64 %16, !dbg !143
  store i32 %15, i32* %arrayidx12, align 4, !dbg !144
  br label %for.inc, !dbg !145

for.inc:                                          ; preds = %cond.end
  %18 = load i64, i64* %i, align 8, !dbg !146
  %dec = add i64 %18, -1, !dbg !146
  store i64 %dec, i64* %i, align 8, !dbg !146
  br label %for.cond, !dbg !147

for.end:                                          ; preds = %for.cond
  ret void, !dbg !148
}

; Function Attrs: nounwind uwtable
define i32* @createRandomArray(i32 %size) #0 {
entry:
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %result = alloca i32*, align 8
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !149, metadata !45), !dbg !150
  call void @llvm.dbg.declare(metadata i32* %i, metadata !151, metadata !45), !dbg !152
  call void @llvm.dbg.declare(metadata i32* %len, metadata !153, metadata !45), !dbg !154
  call void @llvm.dbg.declare(metadata i32** %result, metadata !155, metadata !45), !dbg !156
  %0 = load i32, i32* %size.addr, align 4, !dbg !157
  %add = add nsw i32 %0, 1, !dbg !158
  store i32 %add, i32* %len, align 4, !dbg !159
  %1 = load i32, i32* %len, align 4, !dbg !160
  %conv = sext i32 %1 to i64, !dbg !160
  %mul = mul i64 %conv, 4, !dbg !161
  %call = call noalias i8* @malloc(i64 %mul) #4, !dbg !162
  %2 = bitcast i8* %call to i32*, !dbg !163
  store i32* %2, i32** %result, align 8, !dbg !164
  store i32 0, i32* %i, align 4, !dbg !165
  br label %for.cond, !dbg !167

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !168
  %4 = load i32, i32* %len, align 4, !dbg !172
  %cmp = icmp slt i32 %3, %4, !dbg !173
  br i1 %cmp, label %for.body, label %for.end, !dbg !174

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4, !dbg !175
  %6 = load i32, i32* %i, align 4, !dbg !176
  %idxprom = sext i32 %6 to i64, !dbg !177
  %7 = load i32*, i32** %result, align 8, !dbg !177
  %arrayidx = getelementptr inbounds i32, i32* %7, i64 %idxprom, !dbg !177
  store i32 %5, i32* %arrayidx, align 4, !dbg !178
  br label %for.inc, !dbg !177

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !179
  %inc = add nsw i32 %8, 1, !dbg !179
  store i32 %inc, i32* %i, align 4, !dbg !179
  br label %for.cond, !dbg !180

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %size.addr, align 4, !dbg !181
  %call2 = call i32 @randInt(i32 1, i32 %9), !dbg !182
  %10 = load i32*, i32** %result, align 8, !dbg !183
  %arrayidx3 = getelementptr inbounds i32, i32* %10, i64 0, !dbg !183
  store i32 %call2, i32* %arrayidx3, align 4, !dbg !184
  %11 = load i32*, i32** %result, align 8, !dbg !185
  %12 = load i32, i32* %len, align 4, !dbg !186
  call void @shuffle(i32* %11, i32 %12), !dbg !187
  %13 = load i32*, i32** %result, align 8, !dbg !188
  ret i32* %13, !dbg !189
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind uwtable
define i32 @findDuplicate(i32* %data, i32 %len) #0 {
entry:
  %data.addr = alloca i32*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  store i32* %data, i32** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %data.addr, metadata !190, metadata !45), !dbg !191
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !192, metadata !45), !dbg !193
  call void @llvm.dbg.declare(metadata i32* %i, metadata !194, metadata !45), !dbg !195
  call void @llvm.dbg.declare(metadata i32* %result, metadata !196, metadata !45), !dbg !197
  store i32 0, i32* %result, align 4, !dbg !197
  store i32 0, i32* %i, align 4, !dbg !198
  br label %for.cond, !dbg !200

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !201
  %1 = load i32, i32* %len.addr, align 4, !dbg !205
  %cmp = icmp slt i32 %0, %1, !dbg !206
  br i1 %cmp, label %for.body, label %for.end, !dbg !207

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %result, align 4, !dbg !208
  %3 = load i32, i32* %i, align 4, !dbg !209
  %add = add nsw i32 %3, 1, !dbg !210
  %xor = xor i32 %2, %add, !dbg !211
  %4 = load i32, i32* %i, align 4, !dbg !212
  %idxprom = sext i32 %4 to i64, !dbg !213
  %5 = load i32*, i32** %data.addr, align 8, !dbg !213
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom, !dbg !213
  %6 = load i32, i32* %arrayidx, align 4, !dbg !213
  %xor1 = xor i32 %xor, %6, !dbg !214
  store i32 %xor1, i32* %result, align 4, !dbg !215
  br label %for.inc, !dbg !216

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !217
  %inc = add nsw i32 %7, 1, !dbg !217
  store i32 %inc, i32* %i, align 4, !dbg !217
  br label %for.cond, !dbg !218

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %len.addr, align 4, !dbg !219
  %9 = load i32, i32* %result, align 4, !dbg !220
  %xor2 = xor i32 %9, %8, !dbg !220
  store i32 %xor2, i32* %result, align 4, !dbg !220
  %10 = load i32, i32* %result, align 4, !dbg !221
  ret i32 %10, !dbg !222
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %duplicate = alloca i32, align 4
  %rndArr = alloca i32*, align 8
  store i32 0, i32* %retval
  call void @llvm.dbg.declare(metadata i32* %i, metadata !223, metadata !45), !dbg !224
  call void @llvm.dbg.declare(metadata i32* %j, metadata !225, metadata !45), !dbg !226
  call void @llvm.dbg.declare(metadata i32* %duplicate, metadata !227, metadata !45), !dbg !228
  call void @llvm.dbg.declare(metadata i32** %rndArr, metadata !229, metadata !45), !dbg !230
  call void @srand(i32 1) #4, !dbg !231
  store i32 0, i32* %i, align 4, !dbg !232
  br label %for.cond, !dbg !234

for.cond:                                         ; preds = %for.inc.6, %entry
  %0 = load i32, i32* %i, align 4, !dbg !235
  %cmp = icmp slt i32 %0, 5, !dbg !239
  br i1 %cmp, label %for.body, label %for.end.8, !dbg !240

for.body:                                         ; preds = %for.cond
  %call = call i32* @createRandomArray(i32 500000), !dbg !241
  store i32* %call, i32** %rndArr, align 8, !dbg !243
  store i32 0, i32* %j, align 4, !dbg !244
  br label %for.cond.1, !dbg !246

for.cond.1:                                       ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !247
  %cmp2 = icmp slt i32 %1, 200, !dbg !251
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !252

for.body.3:                                       ; preds = %for.cond.1
  %2 = load i32*, i32** %rndArr, align 8, !dbg !253
  %call4 = call i32 @findDuplicate(i32* %2, i32 500001), !dbg !254
  store i32 %call4, i32* %duplicate, align 4, !dbg !255
  br label %for.inc, !dbg !256

for.inc:                                          ; preds = %for.body.3
  %3 = load i32, i32* %j, align 4, !dbg !257
  %inc = add nsw i32 %3, 1, !dbg !257
  store i32 %inc, i32* %j, align 4, !dbg !257
  br label %for.cond.1, !dbg !258

for.end:                                          ; preds = %for.cond.1
  %4 = load i32*, i32** %rndArr, align 8, !dbg !259
  %5 = bitcast i32* %4 to i8*, !dbg !259
  call void @free(i8* %5) #4, !dbg !260
  %6 = load i32, i32* %duplicate, align 4, !dbg !261
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i32 %6), !dbg !262
  br label %for.inc.6, !dbg !263

for.inc.6:                                        ; preds = %for.end
  %7 = load i32, i32* %i, align 4, !dbg !264
  %inc7 = add nsw i32 %7, 1, !dbg !264
  store i32 %inc7, i32* %i, align 4, !dbg !264
  br label %for.cond, !dbg !265

for.end.8:                                        ; preds = %for.cond
  ret i32 0, !dbg !266
}

; Function Attrs: nounwind
declare void @free(i8*) #2

declare i32 @printf(i8*, ...) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!31, !32}
!llvm.ident = !{!33}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !7, globals: !28)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/BenchmarkGame/puzzle")
!2 = !{}
!3 = !{!4, !5, !6}
!4 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!5 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!7 = !{!8, !12, !15, !18, !21, !24, !27}
!8 = !DISubprogram(name: "rand", scope: !9, file: !9, line: 15, type: !10, isLocal: false, isDefinition: true, scopeLine: 15, flags: DIFlagPrototyped, isOptimized: false, function: i32 ()* @rand, variables: !2)
!9 = !DIFile(filename: "/home/gleison/tf/Benchmarks/BenchmarkGame/puzzle/tmp.c", directory: "/home/gleison/tf/Benchmarks/BenchmarkGame/puzzle")
!10 = !DISubroutineType(types: !11)
!11 = !{!5}
!12 = !DISubprogram(name: "srand", scope: !9, file: !9, line: 20, type: !13, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: false, function: void (i32)* @srand, variables: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{null, !4}
!15 = !DISubprogram(name: "randInt", scope: !9, file: !9, line: 25, type: !16, isLocal: false, isDefinition: true, scopeLine: 25, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i32)* @randInt, variables: !2)
!16 = !DISubroutineType(types: !17)
!17 = !{!5, !5, !5}
!18 = !DISubprogram(name: "shuffle", scope: !9, file: !9, line: 32, type: !19, isLocal: false, isDefinition: true, scopeLine: 32, flags: DIFlagPrototyped, isOptimized: false, function: void (i32*, i32)* @shuffle, variables: !2)
!19 = !DISubroutineType(types: !20)
!20 = !{null, !6, !5}
!21 = !DISubprogram(name: "createRandomArray", scope: !9, file: !9, line: 46, type: !22, isLocal: false, isDefinition: true, scopeLine: 46, flags: DIFlagPrototyped, isOptimized: false, function: i32* (i32)* @createRandomArray, variables: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{!6, !5}
!24 = !DISubprogram(name: "findDuplicate", scope: !9, file: !9, line: 59, type: !25, isLocal: false, isDefinition: true, scopeLine: 59, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32*, i32)* @findDuplicate, variables: !2)
!25 = !DISubroutineType(types: !26)
!26 = !{!5, !6, !5}
!27 = !DISubprogram(name: "main", scope: !9, file: !9, line: 69, type: !10, isLocal: false, isDefinition: true, scopeLine: 69, isOptimized: false, function: i32 ()* @main, variables: !2)
!28 = !{!29}
!29 = !DIGlobalVariable(name: "next", scope: !0, file: !9, line: 13, type: !30, isLocal: true, isDefinition: true, variable: i64* @next)
!30 = !DIBasicType(name: "long long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!31 = !{i32 2, !"Dwarf Version", i32 4}
!32 = !{i32 2, !"Debug Info Version", i32 3}
!33 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!34 = !DILocation(line: 16, column: 10, scope: !8)
!35 = !DILocation(line: 16, column: 15, scope: !8)
!36 = !DILocation(line: 16, column: 28, scope: !8)
!37 = !DILocation(line: 16, column: 8, scope: !8)
!38 = !DILocation(line: 17, column: 25, scope: !8)
!39 = !DILocation(line: 17, column: 30, scope: !8)
!40 = !DILocation(line: 17, column: 10, scope: !8)
!41 = !DILocation(line: 17, column: 39, scope: !8)
!42 = !DILocation(line: 17, column: 50, scope: !8)
!43 = !DILocation(line: 17, column: 3, scope: !8)
!44 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "seed", arg: 1, scope: !12, file: !9, line: 20, type: !4)
!45 = !DIExpression()
!46 = !DILocation(line: 20, column: 25, scope: !12)
!47 = !DILocation(line: 21, column: 10, scope: !12)
!48 = !DILocation(line: 21, column: 8, scope: !12)
!49 = !DILocation(line: 22, column: 1, scope: !12)
!50 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "min", arg: 1, scope: !15, file: !9, line: 25, type: !5)
!51 = !DILocation(line: 25, column: 17, scope: !15)
!52 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "max", arg: 2, scope: !15, file: !9, line: 25, type: !5)
!53 = !DILocation(line: 25, column: 26, scope: !15)
!54 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !15, file: !9, line: 26, type: !5)
!55 = !DILocation(line: 26, column: 7, scope: !15)
!56 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !15, file: !9, line: 26, type: !5)
!57 = !DILocation(line: 26, column: 10, scope: !15)
!58 = !DILocation(line: 27, column: 8, scope: !15)
!59 = !DILocation(line: 27, column: 14, scope: !15)
!60 = !DILocation(line: 27, column: 12, scope: !15)
!61 = !DILocation(line: 27, column: 19, scope: !15)
!62 = !DILocation(line: 27, column: 5, scope: !15)
!63 = !DILocation(line: 28, column: 13, scope: !15)
!64 = !DILocation(line: 28, column: 18, scope: !15)
!65 = !DILocation(line: 28, column: 25, scope: !15)
!66 = !DILocation(line: 28, column: 15, scope: !15)
!67 = !DILocation(line: 28, column: 7, scope: !15)
!68 = !DILocation(line: 28, column: 5, scope: !15)
!69 = !DILocation(line: 29, column: 11, scope: !15)
!70 = !DILocation(line: 29, column: 16, scope: !15)
!71 = !DILocation(line: 29, column: 13, scope: !15)
!72 = !DILocation(line: 29, column: 10, scope: !15)
!73 = !DILocation(line: 29, column: 21, scope: !74)
!74 = !DILexicalBlockFile(scope: !15, file: !9, discriminator: 1)
!75 = !DILocation(line: 29, column: 25, scope: !15)
!76 = !DILocation(line: 29, column: 23, scope: !15)
!77 = !DILocation(line: 29, column: 29, scope: !15)
!78 = !DILocation(line: 29, column: 35, scope: !79)
!79 = !DILexicalBlockFile(scope: !15, file: !9, discriminator: 2)
!80 = !DILocation(line: 29, column: 39, scope: !15)
!81 = !DILocation(line: 29, column: 37, scope: !15)
!82 = !DILocation(line: 29, column: 3, scope: !83)
!83 = !DILexicalBlockFile(scope: !84, file: !9, discriminator: 4)
!84 = !DILexicalBlockFile(scope: !15, file: !9, discriminator: 3)
!85 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "items", arg: 1, scope: !18, file: !9, line: 32, type: !6)
!86 = !DILocation(line: 32, column: 19, scope: !18)
!87 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len", arg: 2, scope: !18, file: !9, line: 32, type: !5)
!88 = !DILocation(line: 32, column: 30, scope: !18)
!89 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !18, file: !9, line: 33, type: !90)
!90 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !91, line: 62, baseType: !92)
!91 = !DIFile(filename: "/home/gleison/lge/llvm-3.7-src/build-debug/bin/../lib/clang/3.7.0/include/stddef.h", directory: "/home/gleison/tf/Benchmarks/BenchmarkGame/puzzle")
!92 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!93 = !DILocation(line: 33, column: 10, scope: !18)
!94 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !18, file: !9, line: 33, type: !90)
!95 = !DILocation(line: 33, column: 13, scope: !18)
!96 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !18, file: !9, line: 33, type: !90)
!97 = !DILocation(line: 33, column: 16, scope: !18)
!98 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "aux", scope: !18, file: !9, line: 34, type: !5)
!99 = !DILocation(line: 34, column: 7, scope: !18)
!100 = !DILocation(line: 36, column: 12, scope: !101)
!101 = distinct !DILexicalBlock(scope: !18, file: !9, line: 36, column: 3)
!102 = !DILocation(line: 36, column: 16, scope: !101)
!103 = !DILocation(line: 36, column: 10, scope: !101)
!104 = !DILocation(line: 36, column: 8, scope: !101)
!105 = !DILocation(line: 36, column: 21, scope: !106)
!106 = !DILexicalBlockFile(scope: !107, file: !9, discriminator: 2)
!107 = !DILexicalBlockFile(scope: !108, file: !9, discriminator: 1)
!108 = distinct !DILexicalBlock(scope: !101, file: !9, line: 36, column: 3)
!109 = !DILocation(line: 36, column: 23, scope: !108)
!110 = !DILocation(line: 36, column: 3, scope: !101)
!111 = !DILocation(line: 37, column: 16, scope: !112)
!112 = distinct !DILexicalBlock(scope: !108, file: !9, line: 36, column: 33)
!113 = !DILocation(line: 37, column: 18, scope: !112)
!114 = !DILocation(line: 37, column: 15, scope: !112)
!115 = !DILocation(line: 37, column: 26, scope: !112)
!116 = !DILocation(line: 37, column: 33, scope: !112)
!117 = !DILocation(line: 37, column: 23, scope: !112)
!118 = !DILocation(line: 37, column: 9, scope: !112)
!119 = !DILocation(line: 37, column: 7, scope: !112)
!120 = !DILocation(line: 38, column: 10, scope: !112)
!121 = !DILocation(line: 38, column: 16, scope: !112)
!122 = !DILocation(line: 38, column: 18, scope: !112)
!123 = !DILocation(line: 38, column: 12, scope: !112)
!124 = !DILocation(line: 38, column: 9, scope: !112)
!125 = !DILocation(line: 38, column: 26, scope: !126)
!126 = !DILexicalBlockFile(scope: !112, file: !9, discriminator: 1)
!127 = !DILocation(line: 38, column: 28, scope: !112)
!128 = !DILocation(line: 38, column: 34, scope: !129)
!129 = !DILexicalBlockFile(scope: !112, file: !9, discriminator: 2)
!130 = !DILocation(line: 38, column: 7, scope: !131)
!131 = !DILexicalBlockFile(scope: !132, file: !9, discriminator: 4)
!132 = !DILexicalBlockFile(scope: !112, file: !9, discriminator: 3)
!133 = !DILocation(line: 40, column: 17, scope: !112)
!134 = !DILocation(line: 40, column: 11, scope: !112)
!135 = !DILocation(line: 40, column: 9, scope: !112)
!136 = !DILocation(line: 41, column: 22, scope: !112)
!137 = !DILocation(line: 41, column: 16, scope: !112)
!138 = !DILocation(line: 41, column: 11, scope: !112)
!139 = !DILocation(line: 41, column: 5, scope: !112)
!140 = !DILocation(line: 41, column: 14, scope: !112)
!141 = !DILocation(line: 42, column: 16, scope: !112)
!142 = !DILocation(line: 42, column: 11, scope: !112)
!143 = !DILocation(line: 42, column: 5, scope: !112)
!144 = !DILocation(line: 42, column: 14, scope: !112)
!145 = !DILocation(line: 43, column: 3, scope: !112)
!146 = !DILocation(line: 36, column: 28, scope: !108)
!147 = !DILocation(line: 36, column: 3, scope: !108)
!148 = !DILocation(line: 44, column: 1, scope: !18)
!149 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "size", arg: 1, scope: !21, file: !9, line: 46, type: !5)
!150 = !DILocation(line: 46, column: 28, scope: !21)
!151 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !21, file: !9, line: 47, type: !5)
!152 = !DILocation(line: 47, column: 7, scope: !21)
!153 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !21, file: !9, line: 47, type: !5)
!154 = !DILocation(line: 47, column: 10, scope: !21)
!155 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !21, file: !9, line: 48, type: !6)
!156 = !DILocation(line: 48, column: 8, scope: !21)
!157 = !DILocation(line: 50, column: 9, scope: !21)
!158 = !DILocation(line: 50, column: 14, scope: !21)
!159 = !DILocation(line: 50, column: 7, scope: !21)
!160 = !DILocation(line: 51, column: 26, scope: !21)
!161 = !DILocation(line: 51, column: 30, scope: !21)
!162 = !DILocation(line: 51, column: 19, scope: !21)
!163 = !DILocation(line: 51, column: 12, scope: !21)
!164 = !DILocation(line: 51, column: 10, scope: !21)
!165 = !DILocation(line: 52, column: 10, scope: !166)
!166 = distinct !DILexicalBlock(scope: !21, file: !9, line: 52, column: 3)
!167 = !DILocation(line: 52, column: 8, scope: !166)
!168 = !DILocation(line: 52, column: 15, scope: !169)
!169 = !DILexicalBlockFile(scope: !170, file: !9, discriminator: 2)
!170 = !DILexicalBlockFile(scope: !171, file: !9, discriminator: 1)
!171 = distinct !DILexicalBlock(scope: !166, file: !9, line: 52, column: 3)
!172 = !DILocation(line: 52, column: 19, scope: !171)
!173 = !DILocation(line: 52, column: 17, scope: !171)
!174 = !DILocation(line: 52, column: 3, scope: !166)
!175 = !DILocation(line: 53, column: 17, scope: !171)
!176 = !DILocation(line: 53, column: 12, scope: !171)
!177 = !DILocation(line: 53, column: 5, scope: !171)
!178 = !DILocation(line: 53, column: 15, scope: !171)
!179 = !DILocation(line: 52, column: 25, scope: !171)
!180 = !DILocation(line: 52, column: 3, scope: !171)
!181 = !DILocation(line: 54, column: 26, scope: !21)
!182 = !DILocation(line: 54, column: 15, scope: !21)
!183 = !DILocation(line: 54, column: 3, scope: !21)
!184 = !DILocation(line: 54, column: 13, scope: !21)
!185 = !DILocation(line: 55, column: 11, scope: !21)
!186 = !DILocation(line: 55, column: 19, scope: !21)
!187 = !DILocation(line: 55, column: 3, scope: !21)
!188 = !DILocation(line: 56, column: 10, scope: !21)
!189 = !DILocation(line: 56, column: 3, scope: !21)
!190 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "data", arg: 1, scope: !24, file: !9, line: 59, type: !6)
!191 = !DILocation(line: 59, column: 24, scope: !24)
!192 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len", arg: 2, scope: !24, file: !9, line: 59, type: !5)
!193 = !DILocation(line: 59, column: 34, scope: !24)
!194 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !24, file: !9, line: 60, type: !5)
!195 = !DILocation(line: 60, column: 7, scope: !24)
!196 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !24, file: !9, line: 61, type: !5)
!197 = !DILocation(line: 61, column: 7, scope: !24)
!198 = !DILocation(line: 63, column: 10, scope: !199)
!199 = distinct !DILexicalBlock(scope: !24, file: !9, line: 63, column: 3)
!200 = !DILocation(line: 63, column: 8, scope: !199)
!201 = !DILocation(line: 63, column: 15, scope: !202)
!202 = !DILexicalBlockFile(scope: !203, file: !9, discriminator: 2)
!203 = !DILexicalBlockFile(scope: !204, file: !9, discriminator: 1)
!204 = distinct !DILexicalBlock(scope: !199, file: !9, line: 63, column: 3)
!205 = !DILocation(line: 63, column: 19, scope: !204)
!206 = !DILocation(line: 63, column: 17, scope: !204)
!207 = !DILocation(line: 63, column: 3, scope: !199)
!208 = !DILocation(line: 64, column: 14, scope: !204)
!209 = !DILocation(line: 64, column: 24, scope: !204)
!210 = !DILocation(line: 64, column: 26, scope: !204)
!211 = !DILocation(line: 64, column: 21, scope: !204)
!212 = !DILocation(line: 64, column: 38, scope: !204)
!213 = !DILocation(line: 64, column: 33, scope: !204)
!214 = !DILocation(line: 64, column: 31, scope: !204)
!215 = !DILocation(line: 64, column: 12, scope: !204)
!216 = !DILocation(line: 64, column: 5, scope: !204)
!217 = !DILocation(line: 63, column: 25, scope: !204)
!218 = !DILocation(line: 63, column: 3, scope: !204)
!219 = !DILocation(line: 65, column: 13, scope: !24)
!220 = !DILocation(line: 65, column: 10, scope: !24)
!221 = !DILocation(line: 66, column: 10, scope: !24)
!222 = !DILocation(line: 66, column: 3, scope: !24)
!223 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !27, file: !9, line: 70, type: !5)
!224 = !DILocation(line: 70, column: 7, scope: !27)
!225 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !27, file: !9, line: 70, type: !5)
!226 = !DILocation(line: 70, column: 10, scope: !27)
!227 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "duplicate", scope: !27, file: !9, line: 70, type: !5)
!228 = !DILocation(line: 70, column: 13, scope: !27)
!229 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rndArr", scope: !27, file: !9, line: 71, type: !6)
!230 = !DILocation(line: 71, column: 8, scope: !27)
!231 = !DILocation(line: 73, column: 3, scope: !27)
!232 = !DILocation(line: 75, column: 10, scope: !233)
!233 = distinct !DILexicalBlock(scope: !27, file: !9, line: 75, column: 3)
!234 = !DILocation(line: 75, column: 8, scope: !233)
!235 = !DILocation(line: 75, column: 15, scope: !236)
!236 = !DILexicalBlockFile(scope: !237, file: !9, discriminator: 2)
!237 = !DILexicalBlockFile(scope: !238, file: !9, discriminator: 1)
!238 = distinct !DILexicalBlock(scope: !233, file: !9, line: 75, column: 3)
!239 = !DILocation(line: 75, column: 17, scope: !238)
!240 = !DILocation(line: 75, column: 3, scope: !233)
!241 = !DILocation(line: 76, column: 14, scope: !242)
!242 = distinct !DILexicalBlock(scope: !238, file: !9, line: 75, column: 33)
!243 = !DILocation(line: 76, column: 12, scope: !242)
!244 = !DILocation(line: 77, column: 12, scope: !245)
!245 = distinct !DILexicalBlock(scope: !242, file: !9, line: 77, column: 5)
!246 = !DILocation(line: 77, column: 10, scope: !245)
!247 = !DILocation(line: 77, column: 17, scope: !248)
!248 = !DILexicalBlockFile(scope: !249, file: !9, discriminator: 2)
!249 = !DILexicalBlockFile(scope: !250, file: !9, discriminator: 1)
!250 = distinct !DILexicalBlock(scope: !245, file: !9, line: 77, column: 5)
!251 = !DILocation(line: 77, column: 19, scope: !250)
!252 = !DILocation(line: 77, column: 5, scope: !245)
!253 = !DILocation(line: 78, column: 33, scope: !250)
!254 = !DILocation(line: 78, column: 19, scope: !250)
!255 = !DILocation(line: 78, column: 17, scope: !250)
!256 = !DILocation(line: 78, column: 7, scope: !250)
!257 = !DILocation(line: 77, column: 31, scope: !250)
!258 = !DILocation(line: 77, column: 5, scope: !250)
!259 = !DILocation(line: 79, column: 10, scope: !242)
!260 = !DILocation(line: 79, column: 5, scope: !242)
!261 = !DILocation(line: 80, column: 37, scope: !242)
!262 = !DILocation(line: 80, column: 5, scope: !242)
!263 = !DILocation(line: 81, column: 3, scope: !242)
!264 = !DILocation(line: 75, column: 29, scope: !238)
!265 = !DILocation(line: 75, column: 3, scope: !238)
!266 = !DILocation(line: 83, column: 3, scope: !27)
