; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"Primes up to %8d %8d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !19, metadata !20), !dbg !21
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !22, metadata !20), !dbg !23
  call void @llvm.dbg.value(metadata i32 40960000, i64 0, metadata !24, metadata !20), !dbg !25
  %div = udiv i32 40960000, 8, !dbg !26
  %conv = zext i32 %div to i64, !dbg !26
  %add = add i64 %conv, 4, !dbg !26
  %call = call noalias i8* @malloc(i64 %add) #3, !dbg !27
  %tmp1 = bitcast i8* %call to i32*, !dbg !28
  call void @llvm.dbg.value(metadata i32* %tmp1, i64 0, metadata !29, metadata !20), !dbg !30
  %tobool = icmp ne i32* %tmp1, null, !dbg !31
  br i1 %tobool, label %if.end, label %if.then, !dbg !33

if.then:                                          ; preds = %entry
  br label %return, !dbg !34

if.end:                                           ; preds = %entry
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !35, metadata !20), !dbg !36
  br label %for.cond, !dbg !37

for.cond:                                         ; preds = %for.inc.43, %if.end
  %m.0 = phi i32 [ 0, %if.end ], [ %inc44, %for.inc.43 ]
  %cmp = icmp ule i32 %m.0, 2, !dbg !39
  br i1 %cmp, label %for.body, label %for.end.45, !dbg !41

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !42, metadata !20), !dbg !44
  %shr = lshr i32 40960000, %m.0, !dbg !45
  call void @llvm.dbg.value(metadata i32 %shr, i64 0, metadata !46, metadata !20), !dbg !47
  %tmp7 = bitcast i32* %tmp1 to i8*, !dbg !48
  %div2 = udiv i32 %shr, 8, !dbg !49
  %conv3 = zext i32 %div2 to i64, !dbg !49
  %add4 = add i64 %conv3, 4, !dbg !49
  call void @llvm.memset.p0i8.i64(i8* %tmp7, i8 -1, i64 %add4, i32 4, i1 false), !dbg !48
  call void @llvm.dbg.value(metadata i32 2, i64 0, metadata !50, metadata !20), !dbg !51
  br label %for.cond.5, !dbg !52

for.cond.5:                                       ; preds = %for.inc.39, %for.body
  %i.0 = phi i32 [ 2, %for.body ], [ %inc40, %for.inc.39 ]
  %count.0 = phi i32 [ 0, %for.body ], [ %count.1, %for.inc.39 ]
  %cmp6 = icmp ule i32 %i.0, %shr, !dbg !54
  br i1 %cmp6, label %for.body.8, label %for.end.41, !dbg !56

for.body.8:                                       ; preds = %for.cond.5
  %conv9 = zext i32 %i.0 to i64, !dbg !57
  %div10 = udiv i64 %conv9, 32, !dbg !57
  %arrayidx = getelementptr inbounds i32, i32* %tmp1, i64 %div10, !dbg !57
  %tmp13 = load i32, i32* %arrayidx, align 4, !dbg !57
  %conv11 = zext i32 %i.0 to i64, !dbg !57
  %rem = urem i64 %conv11, 32, !dbg !57
  %sh_prom = trunc i64 %rem to i32, !dbg !57
  %shl = shl i32 1, %sh_prom, !dbg !57
  %and = and i32 %tmp13, %shl, !dbg !57
  %tobool12 = icmp ne i32 %and, 0, !dbg !57
  br i1 %tobool12, label %if.then.13, label %if.end.38, !dbg !59

if.then.13:                                       ; preds = %for.body.8
  %inc = add i32 %count.0, 1, !dbg !60
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !42, metadata !20), !dbg !44
  %add14 = add i32 %i.0, %i.0, !dbg !62
  call void @llvm.dbg.value(metadata i32 %add14, i64 0, metadata !64, metadata !20), !dbg !65
  br label %for.cond.15, !dbg !66

for.cond.15:                                      ; preds = %for.inc, %if.then.13
  %j.0 = phi i32 [ %add14, %if.then.13 ], [ %add37, %for.inc ]
  %cmp16 = icmp ule i32 %j.0, %shr, !dbg !67
  br i1 %cmp16, label %for.body.18, label %for.end, !dbg !69

for.body.18:                                      ; preds = %for.cond.15
  %conv19 = zext i32 %j.0 to i64, !dbg !70
  %div20 = udiv i64 %conv19, 32, !dbg !70
  %arrayidx21 = getelementptr inbounds i32, i32* %tmp1, i64 %div20, !dbg !70
  %tmp22 = load i32, i32* %arrayidx21, align 4, !dbg !70
  %conv22 = zext i32 %j.0 to i64, !dbg !70
  %rem23 = urem i64 %conv22, 32, !dbg !70
  %sh_prom24 = trunc i64 %rem23 to i32, !dbg !70
  %shl25 = shl i32 1, %sh_prom24, !dbg !70
  %and26 = and i32 %tmp22, %shl25, !dbg !70
  %tobool27 = icmp ne i32 %and26, 0, !dbg !70
  br i1 %tobool27, label %if.then.28, label %if.end.36, !dbg !72

if.then.28:                                       ; preds = %for.body.18
  %conv29 = zext i32 %j.0 to i64, !dbg !73
  %rem30 = urem i64 %conv29, 32, !dbg !73
  %sh_prom31 = trunc i64 %rem30 to i32, !dbg !73
  %shl32 = shl i32 1, %sh_prom31, !dbg !73
  %conv33 = zext i32 %j.0 to i64, !dbg !73
  %div34 = udiv i64 %conv33, 32, !dbg !73
  %arrayidx35 = getelementptr inbounds i32, i32* %tmp1, i64 %div34, !dbg !73
  %tmp27 = load i32, i32* %arrayidx35, align 4, !dbg !73
  %xor = xor i32 %tmp27, %shl32, !dbg !73
  store i32 %xor, i32* %arrayidx35, align 4, !dbg !73
  br label %if.end.36, !dbg !73

if.end.36:                                        ; preds = %if.then.28, %for.body.18
  br label %for.inc, !dbg !74

for.inc:                                          ; preds = %if.end.36
  %add37 = add i32 %j.0, %i.0, !dbg !76
  call void @llvm.dbg.value(metadata i32 %add37, i64 0, metadata !64, metadata !20), !dbg !65
  br label %for.cond.15, !dbg !77

for.end:                                          ; preds = %for.cond.15
  br label %if.end.38, !dbg !78

if.end.38:                                        ; preds = %for.end, %for.body.8
  %count.1 = phi i32 [ %inc, %for.end ], [ %count.0, %for.body.8 ]
  br label %for.inc.39, !dbg !79

for.inc.39:                                       ; preds = %if.end.38
  %inc40 = add i32 %i.0, 1, !dbg !81
  call void @llvm.dbg.value(metadata i32 %inc40, i64 0, metadata !50, metadata !20), !dbg !51
  br label %for.cond.5, !dbg !82

for.end.41:                                       ; preds = %for.cond.5
  %count.0.lcssa = phi i32 [ %count.0, %for.cond.5 ]
  %call42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i32 %shr, i32 %count.0.lcssa), !dbg !83
  br label %for.inc.43, !dbg !84

for.inc.43:                                       ; preds = %for.end.41
  %inc44 = add i32 %m.0, 1, !dbg !85
  call void @llvm.dbg.value(metadata i32 %inc44, i64 0, metadata !35, metadata !20), !dbg !36
  br label %for.cond, !dbg !86

for.end.45:                                       ; preds = %for.cond
  %tmp35 = bitcast i32* %tmp1 to i8*, !dbg !87
  call void @free(i8* %tmp35) #3, !dbg !88
  br label %return, !dbg !89

return:                                           ; preds = %for.end.45, %if.then
  %retval.0 = phi i32 [ 0, %for.end.45 ], [ 1, %if.then ]
  ret i32 %retval.0, !dbg !90
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

declare i32 @printf(i8*, ...) #4

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!16, !17}
!llvm.ident = !{!18}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !8)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/BenchmarkGame/nsieve-bits")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIDerivedType(tag: DW_TAG_typedef, name: "bits", file: !6, line: 11, baseType: !7)
!6 = !DIFile(filename: "/home/gleison/tf/Benchmarks/BenchmarkGame/nsieve-bits/tmp.c", directory: "/home/gleison/tf/Benchmarks/BenchmarkGame/nsieve-bits")
!7 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!8 = !{!9}
!9 = !DISubprogram(name: "main", scope: !6, file: !6, line: 18, type: !10, isLocal: false, isDefinition: true, scopeLine: 18, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!10 = !DISubroutineType(types: !11)
!11 = !{!12, !12, !13}
!12 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64, align: 64)
!15 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!16 = !{i32 2, !"Dwarf Version", i32 4}
!17 = !{i32 2, !"Debug Info Version", i32 3}
!18 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!19 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !9, file: !6, line: 18, type: !12)
!20 = !DIExpression()
!21 = !DILocation(line: 18, column: 14, scope: !9)
!22 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !9, file: !6, line: 18, type: !13)
!23 = !DILocation(line: 18, column: 27, scope: !9)
!24 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sz", scope: !9, file: !6, line: 19, type: !7)
!25 = !DILocation(line: 19, column: 19, scope: !9)
!26 = !DILocation(line: 20, column: 33, scope: !9)
!27 = !DILocation(line: 20, column: 26, scope: !9)
!28 = !DILocation(line: 20, column: 18, scope: !9)
!29 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "primes", scope: !9, file: !6, line: 20, type: !4)
!30 = !DILocation(line: 20, column: 9, scope: !9)
!31 = !DILocation(line: 21, column: 8, scope: !32)
!32 = distinct !DILexicalBlock(scope: !9, file: !6, line: 21, column: 7)
!33 = !DILocation(line: 21, column: 7, scope: !9)
!34 = !DILocation(line: 22, column: 5, scope: !32)
!35 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !9, file: !6, line: 19, type: !7)
!36 = !DILocation(line: 19, column: 16, scope: !9)
!37 = !DILocation(line: 23, column: 8, scope: !38)
!38 = distinct !DILexicalBlock(scope: !9, file: !6, line: 23, column: 3)
!39 = !DILocation(line: 23, column: 17, scope: !40)
!40 = distinct !DILexicalBlock(scope: !38, file: !6, line: 23, column: 3)
!41 = !DILocation(line: 23, column: 3, scope: !38)
!42 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !43, file: !6, line: 24, type: !7)
!43 = distinct !DILexicalBlock(scope: !40, file: !6, line: 23, column: 28)
!44 = !DILocation(line: 24, column: 24, scope: !43)
!45 = !DILocation(line: 24, column: 42, scope: !43)
!46 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !43, file: !6, line: 24, type: !7)
!47 = !DILocation(line: 24, column: 35, scope: !43)
!48 = !DILocation(line: 25, column: 5, scope: !43)
!49 = !DILocation(line: 25, column: 26, scope: !43)
!50 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !43, file: !6, line: 24, type: !7)
!51 = !DILocation(line: 24, column: 18, scope: !43)
!52 = !DILocation(line: 26, column: 10, scope: !53)
!53 = distinct !DILexicalBlock(scope: !43, file: !6, line: 26, column: 5)
!54 = !DILocation(line: 26, column: 19, scope: !55)
!55 = distinct !DILexicalBlock(scope: !53, file: !6, line: 26, column: 5)
!56 = !DILocation(line: 26, column: 5, scope: !53)
!57 = !DILocation(line: 27, column: 11, scope: !58)
!58 = distinct !DILexicalBlock(scope: !55, file: !6, line: 27, column: 11)
!59 = !DILocation(line: 27, column: 11, scope: !55)
!60 = !DILocation(line: 28, column: 14, scope: !61)
!61 = distinct !DILexicalBlock(scope: !58, file: !6, line: 27, column: 29)
!62 = !DILocation(line: 29, column: 20, scope: !63)
!63 = distinct !DILexicalBlock(scope: !61, file: !6, line: 29, column: 9)
!64 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !43, file: !6, line: 24, type: !7)
!65 = !DILocation(line: 24, column: 21, scope: !43)
!66 = !DILocation(line: 29, column: 14, scope: !63)
!67 = !DILocation(line: 29, column: 27, scope: !68)
!68 = distinct !DILexicalBlock(scope: !63, file: !6, line: 29, column: 9)
!69 = !DILocation(line: 29, column: 9, scope: !63)
!70 = !DILocation(line: 30, column: 15, scope: !71)
!71 = distinct !DILexicalBlock(scope: !68, file: !6, line: 30, column: 15)
!72 = !DILocation(line: 30, column: 15, scope: !68)
!73 = !DILocation(line: 31, column: 13, scope: !71)
!74 = !DILocation(line: 30, column: 15, scope: !75)
!75 = !DILexicalBlockFile(scope: !71, file: !6, discriminator: 1)
!76 = !DILocation(line: 29, column: 35, scope: !68)
!77 = !DILocation(line: 29, column: 9, scope: !68)
!78 = !DILocation(line: 32, column: 7, scope: !61)
!79 = !DILocation(line: 27, column: 11, scope: !80)
!80 = !DILexicalBlockFile(scope: !58, file: !6, discriminator: 1)
!81 = !DILocation(line: 26, column: 26, scope: !55)
!82 = !DILocation(line: 26, column: 5, scope: !55)
!83 = !DILocation(line: 33, column: 5, scope: !43)
!84 = !DILocation(line: 34, column: 3, scope: !43)
!85 = !DILocation(line: 23, column: 24, scope: !40)
!86 = !DILocation(line: 23, column: 3, scope: !40)
!87 = !DILocation(line: 35, column: 8, scope: !9)
!88 = !DILocation(line: 35, column: 3, scope: !9)
!89 = !DILocation(line: 36, column: 3, scope: !9)
!90 = !DILocation(line: 37, column: 1, scope: !9)
