; ModuleID = '/home/gleison/tf/Benchmarks/Dhrystone/dry/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Record = type { %struct.Record*, i32, i32, i32, [31 x i8] }

@Version = global [4 x i8] c"1.1\00", align 1
@PtrGlbNext = common global %struct.Record* null, align 8
@PtrGlb = common global %struct.Record* null, align 8
@.str = private unnamed_addr constant [31 x i8] c"DHRYSTONE PROGRAM, SOME STRING\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"DHRYSTONE PROGRAM, 1'ST STRING\00", align 1
@Array2Glob = common global [51 x [51 x i32]] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [31 x i8] c"DHRYSTONE PROGRAM, 2'ND STRING\00", align 1
@BoolGlob = common global i32 0, align 4
@Array1Glob = common global [51 x i32] zeroinitializer, align 16
@Char2Glob = common global i8 0, align 1
@Char1Glob = common global i8 0, align 1
@IntGlob = common global i32 0, align 4

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval
  %call = call i32 @Proc0(), !dbg !98
  ret i32 0, !dbg !99
}

; Function Attrs: nounwind uwtable
define i32 @Proc0() #0 {
entry:
  %retval = alloca i32, align 4
  %IntLoc1 = alloca i32, align 4
  %IntLoc2 = alloca i32, align 4
  %IntLoc3 = alloca i32, align 4
  %CharLoc = alloca i8, align 1
  %CharIndex = alloca i8, align 1
  %EnumLoc = alloca i32, align 4
  %String1Loc = alloca [31 x i8], align 16
  %String2Loc = alloca [31 x i8], align 16
  %i = alloca i32, align 4
  %starttime = alloca i64, align 8
  %benchtime = alloca i64, align 8
  %nulltime = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i32* %IntLoc1, metadata !100, metadata !101), !dbg !102
  call void @llvm.dbg.declare(metadata i32* %IntLoc2, metadata !103, metadata !101), !dbg !104
  call void @llvm.dbg.declare(metadata i32* %IntLoc3, metadata !105, metadata !101), !dbg !106
  call void @llvm.dbg.declare(metadata i8* %CharLoc, metadata !107, metadata !101), !dbg !108
  call void @llvm.dbg.declare(metadata i8* %CharIndex, metadata !109, metadata !101), !dbg !110
  call void @llvm.dbg.declare(metadata i32* %EnumLoc, metadata !111, metadata !101), !dbg !112
  call void @llvm.dbg.declare(metadata [31 x i8]* %String1Loc, metadata !113, metadata !101), !dbg !114
  call void @llvm.dbg.declare(metadata [31 x i8]* %String2Loc, metadata !115, metadata !101), !dbg !116
  call void @llvm.dbg.declare(metadata i32* %i, metadata !117, metadata !101), !dbg !119
  call void @llvm.dbg.declare(metadata i64* %starttime, metadata !120, metadata !101), !dbg !122
  call void @llvm.dbg.declare(metadata i64* %benchtime, metadata !123, metadata !101), !dbg !124
  call void @llvm.dbg.declare(metadata i64* %nulltime, metadata !125, metadata !101), !dbg !126
  %call = call i64 @clock() #4, !dbg !127
  store i64 %call, i64* %starttime, align 8, !dbg !128
  store i32 0, i32* %i, align 4, !dbg !129
  br label %for.cond, !dbg !131

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !132
  %cmp = icmp ult i32 %0, 100000000, !dbg !136
  br i1 %cmp, label %for.body, label %for.end, !dbg !137

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !138

for.inc:                                          ; preds = %for.body
  %1 = load i32, i32* %i, align 4, !dbg !140
  %inc = add i32 %1, 1, !dbg !140
  store i32 %inc, i32* %i, align 4, !dbg !140
  br label %for.cond, !dbg !142

for.end:                                          ; preds = %for.cond
  %call1 = call i64 @clock() #4, !dbg !143
  %2 = load i64, i64* %starttime, align 8, !dbg !144
  %sub = sub nsw i64 %call1, %2, !dbg !145
  store i64 %sub, i64* %nulltime, align 8, !dbg !146
  %call2 = call noalias i8* @malloc(i64 56) #4, !dbg !147
  %3 = bitcast i8* %call2 to %struct.Record*, !dbg !148
  store %struct.Record* %3, %struct.Record** @PtrGlbNext, align 8, !dbg !149
  %call3 = call noalias i8* @malloc(i64 56) #4, !dbg !150
  %4 = bitcast i8* %call3 to %struct.Record*, !dbg !151
  store %struct.Record* %4, %struct.Record** @PtrGlb, align 8, !dbg !152
  %5 = load %struct.Record*, %struct.Record** @PtrGlbNext, align 8, !dbg !153
  %6 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !154
  %PtrComp = getelementptr inbounds %struct.Record, %struct.Record* %6, i32 0, i32 0, !dbg !155
  store %struct.Record* %5, %struct.Record** %PtrComp, align 8, !dbg !156
  %7 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !157
  %Discr = getelementptr inbounds %struct.Record, %struct.Record* %7, i32 0, i32 1, !dbg !158
  store i32 0, i32* %Discr, align 4, !dbg !159
  %8 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !160
  %EnumComp = getelementptr inbounds %struct.Record, %struct.Record* %8, i32 0, i32 2, !dbg !161
  store i32 10001, i32* %EnumComp, align 4, !dbg !162
  %9 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !163
  %IntComp = getelementptr inbounds %struct.Record, %struct.Record* %9, i32 0, i32 3, !dbg !164
  store i32 40, i32* %IntComp, align 4, !dbg !165
  %10 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !166
  %StringComp = getelementptr inbounds %struct.Record, %struct.Record* %10, i32 0, i32 4, !dbg !167
  %arraydecay = getelementptr inbounds [31 x i8], [31 x i8]* %StringComp, i32 0, i32 0, !dbg !166
  %call4 = call i8* @strcpy(i8* %arraydecay, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i32 0, i32 0)) #4, !dbg !168
  %arraydecay5 = getelementptr inbounds [31 x i8], [31 x i8]* %String1Loc, i32 0, i32 0, !dbg !169
  %call6 = call i8* @strcpy(i8* %arraydecay5, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i32 0, i32 0)) #4, !dbg !170
  store i32 10, i32* getelementptr inbounds ([51 x [51 x i32]], [51 x [51 x i32]]* @Array2Glob, i32 0, i64 8, i64 7), align 4, !dbg !171
  %call7 = call i64 @clock() #4, !dbg !172
  store i64 %call7, i64* %starttime, align 8, !dbg !173
  store i32 0, i32* %i, align 4, !dbg !174
  br label %for.cond.8, !dbg !176

for.cond.8:                                       ; preds = %for.inc.42, %for.end
  %11 = load i32, i32* %i, align 4, !dbg !177
  %cmp9 = icmp ult i32 %11, 100000000, !dbg !181
  br i1 %cmp9, label %for.body.10, label %for.end.44, !dbg !182

for.body.10:                                      ; preds = %for.cond.8
  %call11 = call i32 @Proc5(), !dbg !183
  %call12 = call i32 @Proc4(), !dbg !185
  store i32 2, i32* %IntLoc1, align 4, !dbg !186
  store i32 3, i32* %IntLoc2, align 4, !dbg !187
  %arraydecay13 = getelementptr inbounds [31 x i8], [31 x i8]* %String2Loc, i32 0, i32 0, !dbg !188
  %call14 = call i8* @strcpy(i8* %arraydecay13, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i32 0, i32 0)) #4, !dbg !189
  store i32 10000, i32* %EnumLoc, align 4, !dbg !190
  %arraydecay15 = getelementptr inbounds [31 x i8], [31 x i8]* %String1Loc, i32 0, i32 0, !dbg !191
  %arraydecay16 = getelementptr inbounds [31 x i8], [31 x i8]* %String2Loc, i32 0, i32 0, !dbg !192
  %call17 = call i32 @Func2(i8* %arraydecay15, i8* %arraydecay16), !dbg !193
  %tobool = icmp ne i32 %call17, 0, !dbg !194
  %lnot = xor i1 %tobool, true, !dbg !194
  %lnot.ext = zext i1 %lnot to i32, !dbg !194
  store i32 %lnot.ext, i32* @BoolGlob, align 4, !dbg !195
  br label %while.cond, !dbg !196

while.cond:                                       ; preds = %while.body, %for.body.10
  %12 = load i32, i32* %IntLoc1, align 4, !dbg !197
  %13 = load i32, i32* %IntLoc2, align 4, !dbg !200
  %cmp18 = icmp slt i32 %12, %13, !dbg !201
  br i1 %cmp18, label %while.body, label %while.end, !dbg !196

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %IntLoc1, align 4, !dbg !202
  %mul = mul nsw i32 5, %14, !dbg !204
  %15 = load i32, i32* %IntLoc2, align 4, !dbg !205
  %sub19 = sub nsw i32 %mul, %15, !dbg !206
  store i32 %sub19, i32* %IntLoc3, align 4, !dbg !207
  %16 = load i32, i32* %IntLoc1, align 4, !dbg !208
  %17 = load i32, i32* %IntLoc2, align 4, !dbg !209
  %call20 = call i32 @Proc7(i32 %16, i32 %17, i32* %IntLoc3), !dbg !210
  %18 = load i32, i32* %IntLoc1, align 4, !dbg !211
  %inc21 = add nsw i32 %18, 1, !dbg !211
  store i32 %inc21, i32* %IntLoc1, align 4, !dbg !211
  br label %while.cond, !dbg !196

while.end:                                        ; preds = %while.cond
  %19 = load i32, i32* %IntLoc1, align 4, !dbg !212
  %20 = load i32, i32* %IntLoc3, align 4, !dbg !213
  %call22 = call i32 @Proc8(i32* getelementptr inbounds ([51 x i32], [51 x i32]* @Array1Glob, i32 0, i32 0), [51 x i32]* getelementptr inbounds ([51 x [51 x i32]], [51 x [51 x i32]]* @Array2Glob, i32 0, i32 0), i32 %19, i32 %20), !dbg !214
  %21 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !215
  %call23 = call i32 @Proc1(%struct.Record* %21), !dbg !216
  store i8 65, i8* %CharIndex, align 1, !dbg !217
  br label %for.cond.24, !dbg !219

for.cond.24:                                      ; preds = %for.inc.34, %while.end
  %22 = load i8, i8* %CharIndex, align 1, !dbg !220
  %conv = sext i8 %22 to i32, !dbg !220
  %23 = load i8, i8* @Char2Glob, align 1, !dbg !224
  %conv25 = sext i8 %23 to i32, !dbg !224
  %cmp26 = icmp sle i32 %conv, %conv25, !dbg !225
  br i1 %cmp26, label %for.body.28, label %for.end.36, !dbg !226

for.body.28:                                      ; preds = %for.cond.24
  %24 = load i32, i32* %EnumLoc, align 4, !dbg !227
  %25 = load i8, i8* %CharIndex, align 1, !dbg !229
  %conv29 = sext i8 %25 to i32, !dbg !229
  %call30 = call i32 @Func1(i32 %conv29, i32 67), !dbg !230
  %cmp31 = icmp eq i32 %24, %call30, !dbg !231
  br i1 %cmp31, label %if.then, label %if.end, !dbg !232

if.then:                                          ; preds = %for.body.28
  %call33 = call i32 @Proc6(i32 0, i32* %EnumLoc), !dbg !233
  br label %if.end, !dbg !233

if.end:                                           ; preds = %if.then, %for.body.28
  br label %for.inc.34, !dbg !234

for.inc.34:                                       ; preds = %if.end
  %26 = load i8, i8* %CharIndex, align 1, !dbg !236
  %inc35 = add i8 %26, 1, !dbg !236
  store i8 %inc35, i8* %CharIndex, align 1, !dbg !236
  br label %for.cond.24, !dbg !237

for.end.36:                                       ; preds = %for.cond.24
  %27 = load i32, i32* %IntLoc2, align 4, !dbg !238
  %28 = load i32, i32* %IntLoc1, align 4, !dbg !239
  %mul37 = mul nsw i32 %27, %28, !dbg !240
  store i32 %mul37, i32* %IntLoc3, align 4, !dbg !241
  %29 = load i32, i32* %IntLoc3, align 4, !dbg !242
  %30 = load i32, i32* %IntLoc1, align 4, !dbg !243
  %div = sdiv i32 %29, %30, !dbg !244
  store i32 %div, i32* %IntLoc2, align 4, !dbg !245
  %31 = load i32, i32* %IntLoc3, align 4, !dbg !246
  %32 = load i32, i32* %IntLoc2, align 4, !dbg !247
  %sub38 = sub nsw i32 %31, %32, !dbg !248
  %mul39 = mul nsw i32 7, %sub38, !dbg !249
  %33 = load i32, i32* %IntLoc1, align 4, !dbg !250
  %sub40 = sub nsw i32 %mul39, %33, !dbg !251
  store i32 %sub40, i32* %IntLoc2, align 4, !dbg !252
  %call41 = call i32 @Proc2(i32* %IntLoc1), !dbg !253
  br label %for.inc.42, !dbg !254

for.inc.42:                                       ; preds = %for.end.36
  %34 = load i32, i32* %i, align 4, !dbg !255
  %inc43 = add i32 %34, 1, !dbg !255
  store i32 %inc43, i32* %i, align 4, !dbg !255
  br label %for.cond.8, !dbg !256

for.end.44:                                       ; preds = %for.cond.8
  %35 = load i32, i32* %retval, !dbg !257
  ret i32 %35, !dbg !257
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare i64 @clock() #2

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #2

; Function Attrs: nounwind uwtable
define i32 @Proc1(%struct.Record* %PtrParIn) #0 {
entry:
  %retval = alloca i32, align 4
  %PtrParIn.addr = alloca %struct.Record*, align 8
  store %struct.Record* %PtrParIn, %struct.Record** %PtrParIn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Record** %PtrParIn.addr, metadata !258, metadata !101), !dbg !259
  %0 = load %struct.Record*, %struct.Record** %PtrParIn.addr, align 8, !dbg !260
  %IntComp = getelementptr inbounds %struct.Record, %struct.Record* %0, i32 0, i32 3, !dbg !261
  store i32 5, i32* %IntComp, align 4, !dbg !262
  %1 = load %struct.Record*, %struct.Record** %PtrParIn.addr, align 8, !dbg !263
  %IntComp1 = getelementptr inbounds %struct.Record, %struct.Record* %1, i32 0, i32 3, !dbg !264
  %2 = load i32, i32* %IntComp1, align 4, !dbg !264
  %3 = load %struct.Record*, %struct.Record** %PtrParIn.addr, align 8, !dbg !265
  %PtrComp = getelementptr inbounds %struct.Record, %struct.Record* %3, i32 0, i32 0, !dbg !265
  %4 = load %struct.Record*, %struct.Record** %PtrComp, align 8, !dbg !265
  %IntComp2 = getelementptr inbounds %struct.Record, %struct.Record* %4, i32 0, i32 3, !dbg !266
  store i32 %2, i32* %IntComp2, align 4, !dbg !267
  %5 = load %struct.Record*, %struct.Record** %PtrParIn.addr, align 8, !dbg !268
  %PtrComp3 = getelementptr inbounds %struct.Record, %struct.Record* %5, i32 0, i32 0, !dbg !269
  %6 = load %struct.Record*, %struct.Record** %PtrComp3, align 8, !dbg !269
  %7 = load %struct.Record*, %struct.Record** %PtrParIn.addr, align 8, !dbg !270
  %PtrComp4 = getelementptr inbounds %struct.Record, %struct.Record* %7, i32 0, i32 0, !dbg !270
  %8 = load %struct.Record*, %struct.Record** %PtrComp4, align 8, !dbg !270
  %PtrComp5 = getelementptr inbounds %struct.Record, %struct.Record* %8, i32 0, i32 0, !dbg !271
  store %struct.Record* %6, %struct.Record** %PtrComp5, align 8, !dbg !272
  %9 = load i32, i32* %retval, !dbg !273
  ret i32 %9, !dbg !273
}

; Function Attrs: nounwind uwtable
define i32 @Proc2(i32* %IntParIO) #0 {
entry:
  %retval = alloca i32, align 4
  %IntParIO.addr = alloca i32*, align 8
  %IntLoc = alloca i32, align 4
  %EnumLoc = alloca i32, align 4
  store i32* %IntParIO, i32** %IntParIO.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %IntParIO.addr, metadata !274, metadata !101), !dbg !275
  call void @llvm.dbg.declare(metadata i32* %IntLoc, metadata !276, metadata !101), !dbg !277
  call void @llvm.dbg.declare(metadata i32* %EnumLoc, metadata !278, metadata !101), !dbg !279
  %0 = load i32*, i32** %IntParIO.addr, align 8, !dbg !280
  %1 = load i32, i32* %0, align 4, !dbg !281
  %add = add nsw i32 %1, 10, !dbg !282
  store i32 %add, i32* %IntLoc, align 4, !dbg !283
  br label %for.cond, !dbg !284

for.cond:                                         ; preds = %if.end.5, %entry
  %2 = load i8, i8* @Char1Glob, align 1, !dbg !285
  %conv = sext i8 %2 to i32, !dbg !285
  %cmp = icmp eq i32 %conv, 65, !dbg !290
  br i1 %cmp, label %if.then, label %if.end, !dbg !291

if.then:                                          ; preds = %for.cond
  %3 = load i32, i32* %IntLoc, align 4, !dbg !292
  %dec = add nsw i32 %3, -1, !dbg !292
  store i32 %dec, i32* %IntLoc, align 4, !dbg !292
  %4 = load i32, i32* %IntLoc, align 4, !dbg !294
  %5 = load i32, i32* @IntGlob, align 4, !dbg !295
  %sub = sub nsw i32 %4, %5, !dbg !296
  %6 = load i32*, i32** %IntParIO.addr, align 8, !dbg !297
  store i32 %sub, i32* %6, align 4, !dbg !298
  store i32 0, i32* %EnumLoc, align 4, !dbg !299
  br label %if.end, !dbg !300

if.end:                                           ; preds = %if.then, %for.cond
  %7 = load i32, i32* %EnumLoc, align 4, !dbg !301
  %cmp2 = icmp eq i32 %7, 0, !dbg !303
  br i1 %cmp2, label %if.then.4, label %if.end.5, !dbg !304

if.then.4:                                        ; preds = %if.end
  br label %for.end, !dbg !305

if.end.5:                                         ; preds = %if.end
  br label %for.cond, !dbg !306

for.end:                                          ; preds = %if.then.4
  %8 = load i32, i32* %retval, !dbg !307
  ret i32 %8, !dbg !307
}

; Function Attrs: nounwind uwtable
define i32 @Proc3(%struct.Record** %PtrParOut) #0 {
entry:
  %retval = alloca i32, align 4
  %PtrParOut.addr = alloca %struct.Record**, align 8
  store %struct.Record** %PtrParOut, %struct.Record*** %PtrParOut.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Record*** %PtrParOut.addr, metadata !308, metadata !101), !dbg !309
  %0 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !310
  %cmp = icmp ne %struct.Record* %0, null, !dbg !312
  br i1 %cmp, label %if.then, label %if.else, !dbg !313

if.then:                                          ; preds = %entry
  %1 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !314
  %PtrComp = getelementptr inbounds %struct.Record, %struct.Record* %1, i32 0, i32 0, !dbg !315
  %2 = load %struct.Record*, %struct.Record** %PtrComp, align 8, !dbg !315
  %3 = load %struct.Record**, %struct.Record*** %PtrParOut.addr, align 8, !dbg !316
  store %struct.Record* %2, %struct.Record** %3, align 8, !dbg !317
  br label %if.end, !dbg !318

if.else:                                          ; preds = %entry
  store i32 100, i32* @IntGlob, align 4, !dbg !319
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i32, i32* @IntGlob, align 4, !dbg !320
  %5 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !321
  %IntComp = getelementptr inbounds %struct.Record, %struct.Record* %5, i32 0, i32 3, !dbg !322
  %call = call i32 @Proc7(i32 10, i32 %4, i32* %IntComp), !dbg !323
  %6 = load i32, i32* %retval, !dbg !324
  ret i32 %6, !dbg !324
}

; Function Attrs: nounwind uwtable
define i32 @Proc4() #0 {
entry:
  %retval = alloca i32, align 4
  %BoolLoc = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %BoolLoc, metadata !325, metadata !101), !dbg !326
  %0 = load i8, i8* @Char1Glob, align 1, !dbg !327
  %conv = sext i8 %0 to i32, !dbg !327
  %cmp = icmp eq i32 %conv, 65, !dbg !328
  %conv1 = zext i1 %cmp to i32, !dbg !328
  store i32 %conv1, i32* %BoolLoc, align 4, !dbg !329
  %1 = load i32, i32* @BoolGlob, align 4, !dbg !330
  %2 = load i32, i32* %BoolLoc, align 4, !dbg !331
  %or = or i32 %2, %1, !dbg !331
  store i32 %or, i32* %BoolLoc, align 4, !dbg !331
  store i8 66, i8* @Char2Glob, align 1, !dbg !332
  %3 = load i32, i32* %retval, !dbg !333
  ret i32 %3, !dbg !333
}

; Function Attrs: nounwind uwtable
define i32 @Proc5() #0 {
entry:
  %retval = alloca i32, align 4
  store i8 65, i8* @Char1Glob, align 1, !dbg !334
  store i32 0, i32* @BoolGlob, align 4, !dbg !335
  %0 = load i32, i32* %retval, !dbg !336
  ret i32 %0, !dbg !336
}

; Function Attrs: nounwind uwtable
define i32 @Proc6(i32 %EnumParIn, i32* %EnumParOut) #0 {
entry:
  %retval = alloca i32, align 4
  %EnumParIn.addr = alloca i32, align 4
  %EnumParOut.addr = alloca i32*, align 8
  store i32 %EnumParIn, i32* %EnumParIn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %EnumParIn.addr, metadata !337, metadata !101), !dbg !338
  store i32* %EnumParOut, i32** %EnumParOut.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %EnumParOut.addr, metadata !339, metadata !101), !dbg !340
  %0 = load i32, i32* %EnumParIn.addr, align 4, !dbg !341
  %1 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !342
  store i32 %0, i32* %1, align 4, !dbg !343
  %2 = load i32, i32* %EnumParIn.addr, align 4, !dbg !344
  %call = call i32 @Func3(i32 %2), !dbg !346
  %tobool = icmp ne i32 %call, 0, !dbg !346
  br i1 %tobool, label %if.end, label %if.then, !dbg !347

if.then:                                          ; preds = %entry
  %3 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !348
  store i32 10002, i32* %3, align 4, !dbg !349
  br label %if.end, !dbg !350

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %EnumParIn.addr, align 4, !dbg !351
  switch i32 %4, label %sw.epilog [
    i32 0, label %sw.bb
    i32 10000, label %sw.bb.1
    i32 10001, label %sw.bb.4
    i32 10002, label %sw.bb.5
    i32 10003, label %sw.bb.6
  ], !dbg !352

sw.bb:                                            ; preds = %if.end
  %5 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !353
  store i32 0, i32* %5, align 4, !dbg !355
  br label %sw.epilog, !dbg !356

sw.bb.1:                                          ; preds = %if.end
  %6 = load i32, i32* @IntGlob, align 4, !dbg !357
  %cmp = icmp sgt i32 %6, 100, !dbg !359
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !360

if.then.2:                                        ; preds = %sw.bb.1
  %7 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !361
  store i32 0, i32* %7, align 4, !dbg !362
  br label %if.end.3, !dbg !363

if.else:                                          ; preds = %sw.bb.1
  %8 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !364
  store i32 10002, i32* %8, align 4, !dbg !365
  br label %if.end.3

if.end.3:                                         ; preds = %if.else, %if.then.2
  br label %sw.epilog, !dbg !366

sw.bb.4:                                          ; preds = %if.end
  %9 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !367
  store i32 10000, i32* %9, align 4, !dbg !368
  br label %sw.epilog, !dbg !369

sw.bb.5:                                          ; preds = %if.end
  br label %sw.epilog, !dbg !370

sw.bb.6:                                          ; preds = %if.end
  %10 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !371
  store i32 10001, i32* %10, align 4, !dbg !372
  br label %sw.epilog, !dbg !373

sw.epilog:                                        ; preds = %sw.bb.6, %if.end, %sw.bb.5, %sw.bb.4, %if.end.3, %sw.bb
  %11 = load i32, i32* %retval, !dbg !374
  ret i32 %11, !dbg !374
}

; Function Attrs: nounwind uwtable
define i32 @Proc7(i32 %IntParI1, i32 %IntParI2, i32* %IntParOut) #0 {
entry:
  %retval = alloca i32, align 4
  %IntParI1.addr = alloca i32, align 4
  %IntParI2.addr = alloca i32, align 4
  %IntParOut.addr = alloca i32*, align 8
  %IntLoc = alloca i32, align 4
  store i32 %IntParI1, i32* %IntParI1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %IntParI1.addr, metadata !375, metadata !101), !dbg !376
  store i32 %IntParI2, i32* %IntParI2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %IntParI2.addr, metadata !377, metadata !101), !dbg !378
  store i32* %IntParOut, i32** %IntParOut.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %IntParOut.addr, metadata !379, metadata !101), !dbg !380
  call void @llvm.dbg.declare(metadata i32* %IntLoc, metadata !381, metadata !101), !dbg !382
  %0 = load i32, i32* %IntParI1.addr, align 4, !dbg !383
  %add = add nsw i32 %0, 2, !dbg !384
  store i32 %add, i32* %IntLoc, align 4, !dbg !385
  %1 = load i32, i32* %IntParI2.addr, align 4, !dbg !386
  %2 = load i32, i32* %IntLoc, align 4, !dbg !387
  %add1 = add nsw i32 %1, %2, !dbg !388
  %3 = load i32*, i32** %IntParOut.addr, align 8, !dbg !389
  store i32 %add1, i32* %3, align 4, !dbg !390
  %4 = load i32, i32* %retval, !dbg !391
  ret i32 %4, !dbg !391
}

; Function Attrs: nounwind uwtable
define i32 @Proc8(i32* %Array1Par, [51 x i32]* %Array2Par, i32 %IntParI1, i32 %IntParI2) #0 {
entry:
  %retval = alloca i32, align 4
  %Array1Par.addr = alloca i32*, align 8
  %Array2Par.addr = alloca [51 x i32]*, align 8
  %IntParI1.addr = alloca i32, align 4
  %IntParI2.addr = alloca i32, align 4
  %IntLoc = alloca i32, align 4
  %IntIndex = alloca i32, align 4
  store i32* %Array1Par, i32** %Array1Par.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %Array1Par.addr, metadata !392, metadata !101), !dbg !393
  store [51 x i32]* %Array2Par, [51 x i32]** %Array2Par.addr, align 8
  call void @llvm.dbg.declare(metadata [51 x i32]** %Array2Par.addr, metadata !394, metadata !101), !dbg !395
  store i32 %IntParI1, i32* %IntParI1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %IntParI1.addr, metadata !396, metadata !101), !dbg !397
  store i32 %IntParI2, i32* %IntParI2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %IntParI2.addr, metadata !398, metadata !101), !dbg !399
  call void @llvm.dbg.declare(metadata i32* %IntLoc, metadata !400, metadata !101), !dbg !401
  call void @llvm.dbg.declare(metadata i32* %IntIndex, metadata !402, metadata !101), !dbg !403
  %0 = load i32, i32* %IntParI1.addr, align 4, !dbg !404
  %add = add nsw i32 %0, 5, !dbg !405
  store i32 %add, i32* %IntLoc, align 4, !dbg !406
  %1 = load i32, i32* %IntParI2.addr, align 4, !dbg !407
  %2 = load i32, i32* %IntLoc, align 4, !dbg !408
  %idxprom = sext i32 %2 to i64, !dbg !409
  %3 = load i32*, i32** %Array1Par.addr, align 8, !dbg !409
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !409
  store i32 %1, i32* %arrayidx, align 4, !dbg !410
  %4 = load i32, i32* %IntLoc, align 4, !dbg !411
  %idxprom1 = sext i32 %4 to i64, !dbg !412
  %5 = load i32*, i32** %Array1Par.addr, align 8, !dbg !412
  %arrayidx2 = getelementptr inbounds i32, i32* %5, i64 %idxprom1, !dbg !412
  %6 = load i32, i32* %arrayidx2, align 4, !dbg !412
  %7 = load i32, i32* %IntLoc, align 4, !dbg !413
  %add3 = add nsw i32 %7, 1, !dbg !414
  %idxprom4 = sext i32 %add3 to i64, !dbg !415
  %8 = load i32*, i32** %Array1Par.addr, align 8, !dbg !415
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i64 %idxprom4, !dbg !415
  store i32 %6, i32* %arrayidx5, align 4, !dbg !416
  %9 = load i32, i32* %IntLoc, align 4, !dbg !417
  %10 = load i32, i32* %IntLoc, align 4, !dbg !418
  %add6 = add nsw i32 %10, 30, !dbg !419
  %idxprom7 = sext i32 %add6 to i64, !dbg !420
  %11 = load i32*, i32** %Array1Par.addr, align 8, !dbg !420
  %arrayidx8 = getelementptr inbounds i32, i32* %11, i64 %idxprom7, !dbg !420
  store i32 %9, i32* %arrayidx8, align 4, !dbg !421
  %12 = load i32, i32* %IntLoc, align 4, !dbg !422
  store i32 %12, i32* %IntIndex, align 4, !dbg !424
  br label %for.cond, !dbg !425

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %IntIndex, align 4, !dbg !426
  %14 = load i32, i32* %IntLoc, align 4, !dbg !430
  %add9 = add nsw i32 %14, 1, !dbg !431
  %cmp = icmp sle i32 %13, %add9, !dbg !432
  br i1 %cmp, label %for.body, label %for.end, !dbg !433

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %IntLoc, align 4, !dbg !434
  %16 = load i32, i32* %IntIndex, align 4, !dbg !435
  %idxprom10 = sext i32 %16 to i64, !dbg !436
  %17 = load i32, i32* %IntLoc, align 4, !dbg !437
  %idxprom11 = sext i32 %17 to i64, !dbg !436
  %18 = load [51 x i32]*, [51 x i32]** %Array2Par.addr, align 8, !dbg !436
  %arrayidx12 = getelementptr inbounds [51 x i32], [51 x i32]* %18, i64 %idxprom11, !dbg !436
  %arrayidx13 = getelementptr inbounds [51 x i32], [51 x i32]* %arrayidx12, i32 0, i64 %idxprom10, !dbg !436
  store i32 %15, i32* %arrayidx13, align 4, !dbg !438
  br label %for.inc, !dbg !436

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %IntIndex, align 4, !dbg !439
  %inc = add nsw i32 %19, 1, !dbg !439
  store i32 %inc, i32* %IntIndex, align 4, !dbg !439
  br label %for.cond, !dbg !440

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %IntLoc, align 4, !dbg !441
  %sub = sub nsw i32 %20, 1, !dbg !442
  %idxprom14 = sext i32 %sub to i64, !dbg !443
  %21 = load i32, i32* %IntLoc, align 4, !dbg !444
  %idxprom15 = sext i32 %21 to i64, !dbg !443
  %22 = load [51 x i32]*, [51 x i32]** %Array2Par.addr, align 8, !dbg !443
  %arrayidx16 = getelementptr inbounds [51 x i32], [51 x i32]* %22, i64 %idxprom15, !dbg !443
  %arrayidx17 = getelementptr inbounds [51 x i32], [51 x i32]* %arrayidx16, i32 0, i64 %idxprom14, !dbg !443
  %23 = load i32, i32* %arrayidx17, align 4, !dbg !445
  %inc18 = add nsw i32 %23, 1, !dbg !445
  store i32 %inc18, i32* %arrayidx17, align 4, !dbg !445
  %24 = load i32, i32* %IntLoc, align 4, !dbg !446
  %idxprom19 = sext i32 %24 to i64, !dbg !447
  %25 = load i32*, i32** %Array1Par.addr, align 8, !dbg !447
  %arrayidx20 = getelementptr inbounds i32, i32* %25, i64 %idxprom19, !dbg !447
  %26 = load i32, i32* %arrayidx20, align 4, !dbg !447
  %27 = load i32, i32* %IntLoc, align 4, !dbg !448
  %idxprom21 = sext i32 %27 to i64, !dbg !449
  %28 = load i32, i32* %IntLoc, align 4, !dbg !450
  %add22 = add nsw i32 %28, 20, !dbg !451
  %idxprom23 = sext i32 %add22 to i64, !dbg !449
  %29 = load [51 x i32]*, [51 x i32]** %Array2Par.addr, align 8, !dbg !449
  %arrayidx24 = getelementptr inbounds [51 x i32], [51 x i32]* %29, i64 %idxprom23, !dbg !449
  %arrayidx25 = getelementptr inbounds [51 x i32], [51 x i32]* %arrayidx24, i32 0, i64 %idxprom21, !dbg !449
  store i32 %26, i32* %arrayidx25, align 4, !dbg !452
  store i32 5, i32* @IntGlob, align 4, !dbg !453
  %30 = load i32, i32* %retval, !dbg !454
  ret i32 %30, !dbg !454
}

; Function Attrs: nounwind uwtable
define i32 @Func1(i32, i32) #0 {
entry:
  %retval = alloca i32, align 4
  %CharPar1.addr = alloca i8, align 1
  %CharPar2.addr = alloca i8, align 1
  %CharLoc1 = alloca i8, align 1
  %CharLoc2 = alloca i8, align 1
  %CharPar1 = trunc i32 %0 to i8
  %CharPar2 = trunc i32 %1 to i8
  store i8 %CharPar1, i8* %CharPar1.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %CharPar1.addr, metadata !455, metadata !101), !dbg !456
  store i8 %CharPar2, i8* %CharPar2.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %CharPar2.addr, metadata !457, metadata !101), !dbg !458
  call void @llvm.dbg.declare(metadata i8* %CharLoc1, metadata !459, metadata !101), !dbg !460
  call void @llvm.dbg.declare(metadata i8* %CharLoc2, metadata !461, metadata !101), !dbg !462
  %2 = load i8, i8* %CharPar1.addr, align 1, !dbg !463
  store i8 %2, i8* %CharLoc1, align 1, !dbg !464
  %3 = load i8, i8* %CharLoc1, align 1, !dbg !465
  store i8 %3, i8* %CharLoc2, align 1, !dbg !466
  %4 = load i8, i8* %CharLoc2, align 1, !dbg !467
  %conv = sext i8 %4 to i32, !dbg !467
  %5 = load i8, i8* %CharPar2.addr, align 1, !dbg !469
  %conv2 = sext i8 %5 to i32, !dbg !469
  %cmp = icmp ne i32 %conv, %conv2, !dbg !470
  br i1 %cmp, label %if.then, label %if.else, !dbg !471

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !472
  br label %return, !dbg !472

if.else:                                          ; preds = %entry
  store i32 10000, i32* %retval, !dbg !473
  br label %return, !dbg !473

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval, !dbg !474
  ret i32 %6, !dbg !474
}

; Function Attrs: nounwind uwtable
define i32 @Func2(i8* %StrParI1, i8* %StrParI2) #0 {
entry:
  %retval = alloca i32, align 4
  %StrParI1.addr = alloca i8*, align 8
  %StrParI2.addr = alloca i8*, align 8
  %IntLoc = alloca i32, align 4
  %CharLoc = alloca i8, align 1
  store i8* %StrParI1, i8** %StrParI1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %StrParI1.addr, metadata !475, metadata !101), !dbg !476
  store i8* %StrParI2, i8** %StrParI2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %StrParI2.addr, metadata !477, metadata !101), !dbg !478
  call void @llvm.dbg.declare(metadata i32* %IntLoc, metadata !479, metadata !101), !dbg !481
  call void @llvm.dbg.declare(metadata i8* %CharLoc, metadata !482, metadata !101), !dbg !483
  store i32 1, i32* %IntLoc, align 4, !dbg !484
  br label %while.cond, !dbg !485

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* %IntLoc, align 4, !dbg !486
  %cmp = icmp sle i32 %0, 1, !dbg !489
  br i1 %cmp, label %while.body, label %while.end, !dbg !485

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %IntLoc, align 4, !dbg !490
  %idxprom = sext i32 %1 to i64, !dbg !492
  %2 = load i8*, i8** %StrParI1.addr, align 8, !dbg !492
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom, !dbg !492
  %3 = load i8, i8* %arrayidx, align 1, !dbg !492
  %conv = sext i8 %3 to i32, !dbg !492
  %4 = load i32, i32* %IntLoc, align 4, !dbg !493
  %add = add nsw i32 %4, 1, !dbg !494
  %idxprom1 = sext i32 %add to i64, !dbg !495
  %5 = load i8*, i8** %StrParI2.addr, align 8, !dbg !495
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i64 %idxprom1, !dbg !495
  %6 = load i8, i8* %arrayidx2, align 1, !dbg !495
  %conv3 = sext i8 %6 to i32, !dbg !495
  %call = call i32 @Func1(i32 %conv, i32 %conv3), !dbg !496
  %cmp4 = icmp eq i32 %call, 0, !dbg !497
  br i1 %cmp4, label %if.then, label %if.end, !dbg !498

if.then:                                          ; preds = %while.body
  store i8 65, i8* %CharLoc, align 1, !dbg !499
  %7 = load i32, i32* %IntLoc, align 4, !dbg !501
  %inc = add nsw i32 %7, 1, !dbg !501
  store i32 %inc, i32* %IntLoc, align 4, !dbg !501
  br label %if.end, !dbg !502

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond, !dbg !485

while.end:                                        ; preds = %while.cond
  %8 = load i8, i8* %CharLoc, align 1, !dbg !503
  %conv6 = sext i8 %8 to i32, !dbg !503
  %cmp7 = icmp sge i32 %conv6, 87, !dbg !505
  br i1 %cmp7, label %land.lhs.true, label %if.end.13, !dbg !506

land.lhs.true:                                    ; preds = %while.end
  %9 = load i8, i8* %CharLoc, align 1, !dbg !507
  %conv9 = sext i8 %9 to i32, !dbg !507
  %cmp10 = icmp sle i32 %conv9, 90, !dbg !509
  br i1 %cmp10, label %if.then.12, label %if.end.13, !dbg !510

if.then.12:                                       ; preds = %land.lhs.true
  store i32 7, i32* %IntLoc, align 4, !dbg !511
  br label %if.end.13, !dbg !512

if.end.13:                                        ; preds = %if.then.12, %land.lhs.true, %while.end
  %10 = load i8, i8* %CharLoc, align 1, !dbg !513
  %conv14 = sext i8 %10 to i32, !dbg !513
  %cmp15 = icmp eq i32 %conv14, 88, !dbg !515
  br i1 %cmp15, label %if.then.17, label %if.else, !dbg !516

if.then.17:                                       ; preds = %if.end.13
  store i32 1, i32* %retval, !dbg !517
  br label %return, !dbg !517

if.else:                                          ; preds = %if.end.13
  %11 = load i8*, i8** %StrParI1.addr, align 8, !dbg !518
  %12 = load i8*, i8** %StrParI2.addr, align 8, !dbg !521
  %call18 = call i32 @strcmp(i8* %11, i8* %12) #5, !dbg !522
  %cmp19 = icmp sgt i32 %call18, 0, !dbg !523
  br i1 %cmp19, label %if.then.21, label %if.else.23, !dbg !524

if.then.21:                                       ; preds = %if.else
  %13 = load i32, i32* %IntLoc, align 4, !dbg !525
  %add22 = add nsw i32 %13, 7, !dbg !525
  store i32 %add22, i32* %IntLoc, align 4, !dbg !525
  store i32 1, i32* %retval, !dbg !527
  br label %return, !dbg !527

if.else.23:                                       ; preds = %if.else
  store i32 0, i32* %retval, !dbg !528
  br label %return, !dbg !528

return:                                           ; preds = %if.else.23, %if.then.21, %if.then.17
  %14 = load i32, i32* %retval, !dbg !529
  ret i32 %14, !dbg !529
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #3

; Function Attrs: nounwind uwtable
define i32 @Func3(i32 %EnumParIn) #0 {
entry:
  %retval = alloca i32, align 4
  %EnumParIn.addr = alloca i32, align 4
  %EnumLoc = alloca i32, align 4
  store i32 %EnumParIn, i32* %EnumParIn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %EnumParIn.addr, metadata !530, metadata !101), !dbg !531
  call void @llvm.dbg.declare(metadata i32* %EnumLoc, metadata !532, metadata !101), !dbg !533
  %0 = load i32, i32* %EnumParIn.addr, align 4, !dbg !534
  store i32 %0, i32* %EnumLoc, align 4, !dbg !535
  %1 = load i32, i32* %EnumLoc, align 4, !dbg !536
  %cmp = icmp eq i32 %1, 10001, !dbg !538
  br i1 %cmp, label %if.then, label %if.end, !dbg !539

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, !dbg !540
  br label %return, !dbg !540

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval, !dbg !541
  br label %return, !dbg !541

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, !dbg !542
  ret i32 %2, !dbg !542
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!95, !96}
!llvm.ident = !{!97}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !11, subprograms: !32, globals: !78)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Dhrystone/dry")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 134, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Dhrystone/dry/tmp.c", directory: "/home/gleison/tf/Benchmarks/Dhrystone/dry")
!5 = !{!6, !7, !8, !9, !10}
!6 = !DIEnumerator(name: "Ident1", value: 0)
!7 = !DIEnumerator(name: "Ident2", value: 10000)
!8 = !DIEnumerator(name: "Ident3", value: 10001)
!9 = !DIEnumerator(name: "Ident4", value: 10002)
!10 = !DIEnumerator(name: "Ident5", value: 10003)
!11 = !{!12, !31}
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "RecordPtr", file: !4, line: 157, baseType: !13)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!14 = !DIDerivedType(tag: DW_TAG_typedef, name: "RecordType", file: !4, line: 156, baseType: !15)
!15 = !DICompositeType(tag: DW_TAG_structure_type, name: "Record", file: !4, line: 148, size: 448, align: 64, elements: !16)
!16 = !{!17, !19, !21, !22, !25}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "PtrComp", scope: !15, file: !4, line: 149, baseType: !18, size: 64, align: 64)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64, align: 64)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "Discr", scope: !15, file: !4, line: 150, baseType: !20, size: 32, align: 32, offset: 64)
!20 = !DIDerivedType(tag: DW_TAG_typedef, name: "Enumeration", file: !4, line: 138, baseType: !3)
!21 = !DIDerivedType(tag: DW_TAG_member, name: "EnumComp", scope: !15, file: !4, line: 151, baseType: !20, size: 32, align: 32, offset: 96)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "IntComp", scope: !15, file: !4, line: 152, baseType: !23, size: 32, align: 32, offset: 128)
!23 = !DIDerivedType(tag: DW_TAG_typedef, name: "OneToFifty", file: !4, line: 142, baseType: !24)
!24 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "StringComp", scope: !15, file: !4, line: 153, baseType: !26, size: 248, align: 8, offset: 160)
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "String30", file: !4, line: 144, baseType: !27)
!27 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 248, align: 8, elements: !29)
!28 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!29 = !{!30}
!30 = !DISubrange(count: 31)
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!32 = !{!33, !37, !38, !41, !45, !49, !50, !51, !55, !58, !66, !70, !75}
!33 = !DISubprogram(name: "main", scope: !4, file: !4, line: 187, type: !34, isLocal: false, isDefinition: true, scopeLine: 187, isOptimized: false, function: i32 ()* @main, variables: !36)
!34 = !DISubroutineType(types: !35)
!35 = !{!24}
!36 = !{}
!37 = !DISubprogram(name: "Proc0", scope: !4, file: !4, line: 204, type: !34, isLocal: false, isDefinition: true, scopeLine: 204, isOptimized: false, function: i32 ()* @Proc0, variables: !36)
!38 = !DISubprogram(name: "Proc1", scope: !4, file: !4, line: 333, type: !39, isLocal: false, isDefinition: true, scopeLine: 335, isOptimized: false, function: i32 (%struct.Record*)* @Proc1, variables: !36)
!39 = !DISubroutineType(types: !40)
!40 = !{!24, !12}
!41 = !DISubprogram(name: "Proc2", scope: !4, file: !4, line: 357, type: !42, isLocal: false, isDefinition: true, scopeLine: 359, isOptimized: false, function: i32 (i32*)* @Proc2, variables: !36)
!42 = !DISubroutineType(types: !43)
!43 = !{!24, !44}
!44 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64, align: 64)
!45 = !DISubprogram(name: "Proc3", scope: !4, file: !4, line: 375, type: !46, isLocal: false, isDefinition: true, scopeLine: 377, isOptimized: false, function: i32 (%struct.Record**)* @Proc3, variables: !36)
!46 = !DISubroutineType(types: !47)
!47 = !{!24, !48}
!48 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!49 = !DISubprogram(name: "Proc4", scope: !4, file: !4, line: 385, type: !34, isLocal: false, isDefinition: true, scopeLine: 385, isOptimized: false, function: i32 ()* @Proc4, variables: !36)
!50 = !DISubprogram(name: "Proc5", scope: !4, file: !4, line: 393, type: !34, isLocal: false, isDefinition: true, scopeLine: 393, isOptimized: false, function: i32 ()* @Proc5, variables: !36)
!51 = !DISubprogram(name: "Proc6", scope: !4, file: !4, line: 400, type: !52, isLocal: false, isDefinition: true, scopeLine: 403, isOptimized: false, function: i32 (i32, i32*)* @Proc6, variables: !36)
!52 = !DISubroutineType(types: !53)
!53 = !{!24, !20, !54}
!54 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64, align: 64)
!55 = !DISubprogram(name: "Proc7", scope: !4, file: !4, line: 427, type: !56, isLocal: false, isDefinition: true, scopeLine: 431, isOptimized: false, function: i32 (i32, i32, i32*)* @Proc7, variables: !36)
!56 = !DISubroutineType(types: !57)
!57 = !{!24, !23, !23, !44}
!58 = !DISubprogram(name: "Proc8", scope: !4, file: !4, line: 438, type: !59, isLocal: false, isDefinition: true, scopeLine: 443, isOptimized: false, function: i32 (i32*, [51 x i32]*, i32, i32)* @Proc8, variables: !36)
!59 = !DISubroutineType(types: !60)
!60 = !{!24, !61, !62, !23, !23}
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64, align: 64)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !63, size: 64, align: 64)
!63 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 1632, align: 32, elements: !64)
!64 = !{!65}
!65 = !DISubrange(count: 51)
!66 = !DISubprogram(name: "Func1", scope: !4, file: !4, line: 458, type: !67, isLocal: false, isDefinition: true, scopeLine: 461, isOptimized: false, function: i32 (i32, i32)* @Func1, variables: !36)
!67 = !DISubroutineType(types: !68)
!68 = !{!20, !69, !69}
!69 = !DIDerivedType(tag: DW_TAG_typedef, name: "CapitalLetter", file: !4, line: 143, baseType: !28)
!70 = !DISubprogram(name: "Func2", scope: !4, file: !4, line: 473, type: !71, isLocal: false, isDefinition: true, scopeLine: 476, isOptimized: false, function: i32 (i8*, i8*)* @Func2, variables: !36)
!71 = !DISubroutineType(types: !72)
!72 = !{!73, !74, !74}
!73 = !DIDerivedType(tag: DW_TAG_typedef, name: "boolean", file: !4, line: 158, baseType: !24)
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64, align: 64)
!75 = !DISubprogram(name: "Func3", scope: !4, file: !4, line: 499, type: !76, isLocal: false, isDefinition: true, scopeLine: 501, isOptimized: false, function: i32 (i32)* @Func3, variables: !36)
!76 = !DISubroutineType(types: !77)
!77 = !{!73, !20}
!78 = !{!79, !83, !84, !85, !86, !87, !89, !93, !94}
!79 = !DIGlobalVariable(name: "Version", scope: !0, file: !4, line: 117, type: !80, isLocal: false, isDefinition: true, variable: [4 x i8]* @Version)
!80 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 32, align: 8, elements: !81)
!81 = !{!82}
!82 = !DISubrange(count: 4)
!83 = !DIGlobalVariable(name: "IntGlob", scope: !0, file: !4, line: 195, type: !24, isLocal: false, isDefinition: true, variable: i32* @IntGlob)
!84 = !DIGlobalVariable(name: "BoolGlob", scope: !0, file: !4, line: 196, type: !73, isLocal: false, isDefinition: true, variable: i32* @BoolGlob)
!85 = !DIGlobalVariable(name: "Char1Glob", scope: !0, file: !4, line: 197, type: !28, isLocal: false, isDefinition: true, variable: i8* @Char1Glob)
!86 = !DIGlobalVariable(name: "Char2Glob", scope: !0, file: !4, line: 198, type: !28, isLocal: false, isDefinition: true, variable: i8* @Char2Glob)
!87 = !DIGlobalVariable(name: "Array1Glob", scope: !0, file: !4, line: 199, type: !88, isLocal: false, isDefinition: true, variable: [51 x i32]* @Array1Glob)
!88 = !DIDerivedType(tag: DW_TAG_typedef, name: "Array1Dim", file: !4, line: 145, baseType: !63)
!89 = !DIGlobalVariable(name: "Array2Glob", scope: !0, file: !4, line: 200, type: !90, isLocal: false, isDefinition: true, variable: [51 x [51 x i32]]* @Array2Glob)
!90 = !DIDerivedType(tag: DW_TAG_typedef, name: "Array2Dim", file: !4, line: 146, baseType: !91)
!91 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 83232, align: 32, elements: !92)
!92 = !{!65, !65}
!93 = !DIGlobalVariable(name: "PtrGlb", scope: !0, file: !4, line: 201, type: !12, isLocal: false, isDefinition: true, variable: %struct.Record** @PtrGlb)
!94 = !DIGlobalVariable(name: "PtrGlbNext", scope: !0, file: !4, line: 202, type: !12, isLocal: false, isDefinition: true, variable: %struct.Record** @PtrGlbNext)
!95 = !{i32 2, !"Dwarf Version", i32 4}
!96 = !{i32 2, !"Debug Info Version", i32 3}
!97 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!98 = !DILocation(line: 188, column: 3, scope: !33)
!99 = !DILocation(line: 189, column: 3, scope: !33)
!100 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc1", scope: !37, file: !4, line: 205, type: !23)
!101 = !DIExpression()
!102 = !DILocation(line: 205, column: 14, scope: !37)
!103 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc2", scope: !37, file: !4, line: 206, type: !23)
!104 = !DILocation(line: 206, column: 18, scope: !37)
!105 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc3", scope: !37, file: !4, line: 207, type: !23)
!106 = !DILocation(line: 207, column: 14, scope: !37)
!107 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "CharLoc", scope: !37, file: !4, line: 208, type: !28)
!108 = !DILocation(line: 208, column: 12, scope: !37)
!109 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "CharIndex", scope: !37, file: !4, line: 209, type: !28)
!110 = !DILocation(line: 209, column: 12, scope: !37)
!111 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "EnumLoc", scope: !37, file: !4, line: 210, type: !20)
!112 = !DILocation(line: 210, column: 15, scope: !37)
!113 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "String1Loc", scope: !37, file: !4, line: 211, type: !26)
!114 = !DILocation(line: 211, column: 12, scope: !37)
!115 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "String2Loc", scope: !37, file: !4, line: 212, type: !26)
!116 = !DILocation(line: 212, column: 12, scope: !37)
!117 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !37, file: !4, line: 213, type: !118)
!118 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!119 = !DILocation(line: 213, column: 25, scope: !37)
!120 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "starttime", scope: !37, file: !4, line: 216, type: !121)
!121 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!122 = !DILocation(line: 216, column: 8, scope: !37)
!123 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "benchtime", scope: !37, file: !4, line: 217, type: !121)
!124 = !DILocation(line: 217, column: 8, scope: !37)
!125 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "nulltime", scope: !37, file: !4, line: 218, type: !121)
!126 = !DILocation(line: 218, column: 8, scope: !37)
!127 = !DILocation(line: 220, column: 15, scope: !37)
!128 = !DILocation(line: 220, column: 13, scope: !37)
!129 = !DILocation(line: 221, column: 10, scope: !130)
!130 = distinct !DILexicalBlock(scope: !37, file: !4, line: 221, column: 3)
!131 = !DILocation(line: 221, column: 8, scope: !130)
!132 = !DILocation(line: 221, column: 15, scope: !133)
!133 = !DILexicalBlockFile(scope: !134, file: !4, discriminator: 4)
!134 = !DILexicalBlockFile(scope: !135, file: !4, discriminator: 1)
!135 = distinct !DILexicalBlock(scope: !130, file: !4, line: 221, column: 3)
!136 = !DILocation(line: 221, column: 17, scope: !135)
!137 = !DILocation(line: 221, column: 3, scope: !130)
!138 = !DILocation(line: 221, column: 3, scope: !139)
!139 = !DILexicalBlockFile(scope: !130, file: !4, discriminator: 2)
!140 = !DILocation(line: 221, column: 26, scope: !141)
!141 = !DILexicalBlockFile(scope: !135, file: !4, discriminator: 3)
!142 = !DILocation(line: 221, column: 3, scope: !135)
!143 = !DILocation(line: 223, column: 14, scope: !37)
!144 = !DILocation(line: 223, column: 24, scope: !37)
!145 = !DILocation(line: 223, column: 22, scope: !37)
!146 = !DILocation(line: 223, column: 12, scope: !37)
!147 = !DILocation(line: 250, column: 27, scope: !37)
!148 = !DILocation(line: 250, column: 16, scope: !37)
!149 = !DILocation(line: 250, column: 14, scope: !37)
!150 = !DILocation(line: 251, column: 23, scope: !37)
!151 = !DILocation(line: 251, column: 12, scope: !37)
!152 = !DILocation(line: 251, column: 10, scope: !37)
!153 = !DILocation(line: 252, column: 21, scope: !37)
!154 = !DILocation(line: 252, column: 3, scope: !37)
!155 = !DILocation(line: 252, column: 11, scope: !37)
!156 = !DILocation(line: 252, column: 19, scope: !37)
!157 = !DILocation(line: 253, column: 3, scope: !37)
!158 = !DILocation(line: 253, column: 11, scope: !37)
!159 = !DILocation(line: 253, column: 17, scope: !37)
!160 = !DILocation(line: 254, column: 3, scope: !37)
!161 = !DILocation(line: 254, column: 11, scope: !37)
!162 = !DILocation(line: 254, column: 20, scope: !37)
!163 = !DILocation(line: 255, column: 3, scope: !37)
!164 = !DILocation(line: 255, column: 11, scope: !37)
!165 = !DILocation(line: 255, column: 19, scope: !37)
!166 = !DILocation(line: 256, column: 10, scope: !37)
!167 = !DILocation(line: 256, column: 18, scope: !37)
!168 = !DILocation(line: 256, column: 3, scope: !37)
!169 = !DILocation(line: 258, column: 10, scope: !37)
!170 = !DILocation(line: 258, column: 3, scope: !37)
!171 = !DILocation(line: 260, column: 20, scope: !37)
!172 = !DILocation(line: 266, column: 15, scope: !37)
!173 = !DILocation(line: 266, column: 13, scope: !37)
!174 = !DILocation(line: 275, column: 10, scope: !175)
!175 = distinct !DILexicalBlock(scope: !37, file: !4, line: 275, column: 3)
!176 = !DILocation(line: 275, column: 8, scope: !175)
!177 = !DILocation(line: 275, column: 15, scope: !178)
!178 = !DILexicalBlockFile(scope: !179, file: !4, discriminator: 2)
!179 = !DILexicalBlockFile(scope: !180, file: !4, discriminator: 1)
!180 = distinct !DILexicalBlock(scope: !175, file: !4, line: 275, column: 3)
!181 = !DILocation(line: 275, column: 17, scope: !180)
!182 = !DILocation(line: 275, column: 3, scope: !175)
!183 = !DILocation(line: 276, column: 5, scope: !184)
!184 = distinct !DILexicalBlock(scope: !180, file: !4, line: 275, column: 31)
!185 = !DILocation(line: 277, column: 5, scope: !184)
!186 = !DILocation(line: 278, column: 13, scope: !184)
!187 = !DILocation(line: 279, column: 13, scope: !184)
!188 = !DILocation(line: 280, column: 12, scope: !184)
!189 = !DILocation(line: 280, column: 5, scope: !184)
!190 = !DILocation(line: 281, column: 13, scope: !184)
!191 = !DILocation(line: 282, column: 23, scope: !184)
!192 = !DILocation(line: 282, column: 35, scope: !184)
!193 = !DILocation(line: 282, column: 17, scope: !184)
!194 = !DILocation(line: 282, column: 16, scope: !184)
!195 = !DILocation(line: 282, column: 14, scope: !184)
!196 = !DILocation(line: 283, column: 5, scope: !184)
!197 = !DILocation(line: 283, column: 12, scope: !198)
!198 = !DILexicalBlockFile(scope: !199, file: !4, discriminator: 2)
!199 = !DILexicalBlockFile(scope: !184, file: !4, discriminator: 1)
!200 = !DILocation(line: 283, column: 22, scope: !184)
!201 = !DILocation(line: 283, column: 20, scope: !184)
!202 = !DILocation(line: 284, column: 21, scope: !203)
!203 = distinct !DILexicalBlock(scope: !184, file: !4, line: 283, column: 31)
!204 = !DILocation(line: 284, column: 19, scope: !203)
!205 = !DILocation(line: 284, column: 31, scope: !203)
!206 = !DILocation(line: 284, column: 29, scope: !203)
!207 = !DILocation(line: 284, column: 15, scope: !203)
!208 = !DILocation(line: 285, column: 13, scope: !203)
!209 = !DILocation(line: 285, column: 22, scope: !203)
!210 = !DILocation(line: 285, column: 7, scope: !203)
!211 = !DILocation(line: 286, column: 7, scope: !203)
!212 = !DILocation(line: 288, column: 35, scope: !184)
!213 = !DILocation(line: 288, column: 44, scope: !184)
!214 = !DILocation(line: 288, column: 5, scope: !184)
!215 = !DILocation(line: 289, column: 11, scope: !184)
!216 = !DILocation(line: 289, column: 5, scope: !184)
!217 = !DILocation(line: 290, column: 20, scope: !218)
!218 = distinct !DILexicalBlock(scope: !184, file: !4, line: 290, column: 5)
!219 = !DILocation(line: 290, column: 10, scope: !218)
!220 = !DILocation(line: 290, column: 27, scope: !221)
!221 = !DILexicalBlockFile(scope: !222, file: !4, discriminator: 2)
!222 = !DILexicalBlockFile(scope: !223, file: !4, discriminator: 1)
!223 = distinct !DILexicalBlock(scope: !218, file: !4, line: 290, column: 5)
!224 = !DILocation(line: 290, column: 40, scope: !223)
!225 = !DILocation(line: 290, column: 37, scope: !223)
!226 = !DILocation(line: 290, column: 5, scope: !218)
!227 = !DILocation(line: 291, column: 11, scope: !228)
!228 = distinct !DILexicalBlock(scope: !223, file: !4, line: 291, column: 11)
!229 = !DILocation(line: 291, column: 28, scope: !228)
!230 = !DILocation(line: 291, column: 22, scope: !228)
!231 = !DILocation(line: 291, column: 19, scope: !228)
!232 = !DILocation(line: 291, column: 11, scope: !223)
!233 = !DILocation(line: 292, column: 9, scope: !228)
!234 = !DILocation(line: 291, column: 42, scope: !235)
!235 = !DILexicalBlockFile(scope: !228, file: !4, discriminator: 1)
!236 = !DILocation(line: 290, column: 51, scope: !223)
!237 = !DILocation(line: 290, column: 5, scope: !223)
!238 = !DILocation(line: 293, column: 15, scope: !184)
!239 = !DILocation(line: 293, column: 25, scope: !184)
!240 = !DILocation(line: 293, column: 23, scope: !184)
!241 = !DILocation(line: 293, column: 13, scope: !184)
!242 = !DILocation(line: 294, column: 15, scope: !184)
!243 = !DILocation(line: 294, column: 25, scope: !184)
!244 = !DILocation(line: 294, column: 23, scope: !184)
!245 = !DILocation(line: 294, column: 13, scope: !184)
!246 = !DILocation(line: 295, column: 20, scope: !184)
!247 = !DILocation(line: 295, column: 30, scope: !184)
!248 = !DILocation(line: 295, column: 28, scope: !184)
!249 = !DILocation(line: 295, column: 17, scope: !184)
!250 = !DILocation(line: 295, column: 41, scope: !184)
!251 = !DILocation(line: 295, column: 39, scope: !184)
!252 = !DILocation(line: 295, column: 13, scope: !184)
!253 = !DILocation(line: 296, column: 5, scope: !184)
!254 = !DILocation(line: 297, column: 3, scope: !184)
!255 = !DILocation(line: 275, column: 26, scope: !180)
!256 = !DILocation(line: 275, column: 3, scope: !180)
!257 = !DILocation(line: 331, column: 1, scope: !37)
!258 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "PtrParIn", arg: 1, scope: !38, file: !4, line: 334, type: !12)
!259 = !DILocation(line: 334, column: 19, scope: !38)
!260 = !DILocation(line: 339, column: 3, scope: !38)
!261 = !DILocation(line: 339, column: 13, scope: !38)
!262 = !DILocation(line: 339, column: 21, scope: !38)
!263 = !DILocation(line: 340, column: 24, scope: !38)
!264 = !DILocation(line: 340, column: 34, scope: !38)
!265 = !DILocation(line: 340, column: 3, scope: !38)
!266 = !DILocation(line: 340, column: 14, scope: !38)
!267 = !DILocation(line: 340, column: 22, scope: !38)
!268 = !DILocation(line: 341, column: 24, scope: !38)
!269 = !DILocation(line: 341, column: 34, scope: !38)
!270 = !DILocation(line: 341, column: 3, scope: !38)
!271 = !DILocation(line: 341, column: 14, scope: !38)
!272 = !DILocation(line: 341, column: 22, scope: !38)
!273 = !DILocation(line: 355, column: 1, scope: !38)
!274 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParIO", arg: 1, scope: !41, file: !4, line: 358, type: !44)
!275 = !DILocation(line: 358, column: 17, scope: !41)
!276 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc", scope: !41, file: !4, line: 360, type: !23)
!277 = !DILocation(line: 360, column: 18, scope: !41)
!278 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "EnumLoc", scope: !41, file: !4, line: 361, type: !20)
!279 = !DILocation(line: 361, column: 19, scope: !41)
!280 = !DILocation(line: 363, column: 13, scope: !41)
!281 = !DILocation(line: 363, column: 12, scope: !41)
!282 = !DILocation(line: 363, column: 22, scope: !41)
!283 = !DILocation(line: 363, column: 10, scope: !41)
!284 = !DILocation(line: 364, column: 3, scope: !41)
!285 = !DILocation(line: 365, column: 9, scope: !286)
!286 = distinct !DILexicalBlock(scope: !287, file: !4, line: 365, column: 9)
!287 = distinct !DILexicalBlock(scope: !288, file: !4, line: 364, column: 12)
!288 = distinct !DILexicalBlock(scope: !289, file: !4, line: 364, column: 3)
!289 = distinct !DILexicalBlock(scope: !41, file: !4, line: 364, column: 3)
!290 = !DILocation(line: 365, column: 19, scope: !286)
!291 = !DILocation(line: 365, column: 9, scope: !287)
!292 = !DILocation(line: 366, column: 7, scope: !293)
!293 = distinct !DILexicalBlock(scope: !286, file: !4, line: 365, column: 27)
!294 = !DILocation(line: 367, column: 19, scope: !293)
!295 = !DILocation(line: 367, column: 28, scope: !293)
!296 = !DILocation(line: 367, column: 26, scope: !293)
!297 = !DILocation(line: 367, column: 8, scope: !293)
!298 = !DILocation(line: 367, column: 17, scope: !293)
!299 = !DILocation(line: 368, column: 15, scope: !293)
!300 = !DILocation(line: 369, column: 5, scope: !293)
!301 = !DILocation(line: 370, column: 9, scope: !302)
!302 = distinct !DILexicalBlock(scope: !287, file: !4, line: 370, column: 9)
!303 = !DILocation(line: 370, column: 17, scope: !302)
!304 = !DILocation(line: 370, column: 9, scope: !287)
!305 = !DILocation(line: 371, column: 7, scope: !302)
!306 = !DILocation(line: 364, column: 3, scope: !288)
!307 = !DILocation(line: 373, column: 1, scope: !41)
!308 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "PtrParOut", arg: 1, scope: !45, file: !4, line: 376, type: !48)
!309 = !DILocation(line: 376, column: 16, scope: !45)
!310 = !DILocation(line: 378, column: 7, scope: !311)
!311 = distinct !DILexicalBlock(scope: !45, file: !4, line: 378, column: 7)
!312 = !DILocation(line: 378, column: 14, scope: !311)
!313 = !DILocation(line: 378, column: 7, scope: !45)
!314 = !DILocation(line: 379, column: 18, scope: !311)
!315 = !DILocation(line: 379, column: 26, scope: !311)
!316 = !DILocation(line: 379, column: 6, scope: !311)
!317 = !DILocation(line: 379, column: 16, scope: !311)
!318 = !DILocation(line: 379, column: 5, scope: !311)
!319 = !DILocation(line: 381, column: 13, scope: !311)
!320 = !DILocation(line: 382, column: 13, scope: !45)
!321 = !DILocation(line: 382, column: 23, scope: !45)
!322 = !DILocation(line: 382, column: 31, scope: !45)
!323 = !DILocation(line: 382, column: 3, scope: !45)
!324 = !DILocation(line: 383, column: 1, scope: !45)
!325 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "BoolLoc", scope: !49, file: !4, line: 386, type: !73)
!326 = !DILocation(line: 386, column: 15, scope: !49)
!327 = !DILocation(line: 388, column: 13, scope: !49)
!328 = !DILocation(line: 388, column: 23, scope: !49)
!329 = !DILocation(line: 388, column: 11, scope: !49)
!330 = !DILocation(line: 389, column: 14, scope: !49)
!331 = !DILocation(line: 389, column: 11, scope: !49)
!332 = !DILocation(line: 390, column: 13, scope: !49)
!333 = !DILocation(line: 391, column: 1, scope: !49)
!334 = !DILocation(line: 394, column: 13, scope: !50)
!335 = !DILocation(line: 395, column: 12, scope: !50)
!336 = !DILocation(line: 396, column: 1, scope: !50)
!337 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "EnumParIn", arg: 1, scope: !51, file: !4, line: 401, type: !20)
!338 = !DILocation(line: 401, column: 21, scope: !51)
!339 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "EnumParOut", arg: 2, scope: !51, file: !4, line: 402, type: !54)
!340 = !DILocation(line: 402, column: 18, scope: !51)
!341 = !DILocation(line: 404, column: 17, scope: !51)
!342 = !DILocation(line: 404, column: 4, scope: !51)
!343 = !DILocation(line: 404, column: 15, scope: !51)
!344 = !DILocation(line: 405, column: 14, scope: !345)
!345 = distinct !DILexicalBlock(scope: !51, file: !4, line: 405, column: 7)
!346 = !DILocation(line: 405, column: 8, scope: !345)
!347 = !DILocation(line: 405, column: 7, scope: !51)
!348 = !DILocation(line: 406, column: 6, scope: !345)
!349 = !DILocation(line: 406, column: 17, scope: !345)
!350 = !DILocation(line: 406, column: 5, scope: !345)
!351 = !DILocation(line: 407, column: 11, scope: !51)
!352 = !DILocation(line: 407, column: 3, scope: !51)
!353 = !DILocation(line: 409, column: 6, scope: !354)
!354 = distinct !DILexicalBlock(scope: !51, file: !4, line: 407, column: 22)
!355 = !DILocation(line: 409, column: 17, scope: !354)
!356 = !DILocation(line: 410, column: 5, scope: !354)
!357 = !DILocation(line: 412, column: 9, scope: !358)
!358 = distinct !DILexicalBlock(scope: !354, file: !4, line: 412, column: 9)
!359 = !DILocation(line: 412, column: 17, scope: !358)
!360 = !DILocation(line: 412, column: 9, scope: !354)
!361 = !DILocation(line: 413, column: 8, scope: !358)
!362 = !DILocation(line: 413, column: 19, scope: !358)
!363 = !DILocation(line: 413, column: 7, scope: !358)
!364 = !DILocation(line: 415, column: 8, scope: !358)
!365 = !DILocation(line: 415, column: 19, scope: !358)
!366 = !DILocation(line: 416, column: 5, scope: !354)
!367 = !DILocation(line: 418, column: 6, scope: !354)
!368 = !DILocation(line: 418, column: 17, scope: !354)
!369 = !DILocation(line: 419, column: 5, scope: !354)
!370 = !DILocation(line: 421, column: 5, scope: !354)
!371 = !DILocation(line: 423, column: 6, scope: !354)
!372 = !DILocation(line: 423, column: 17, scope: !354)
!373 = !DILocation(line: 424, column: 3, scope: !354)
!374 = !DILocation(line: 425, column: 1, scope: !51)
!375 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParI1", arg: 1, scope: !55, file: !4, line: 428, type: !23)
!376 = !DILocation(line: 428, column: 16, scope: !55)
!377 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParI2", arg: 2, scope: !55, file: !4, line: 429, type: !23)
!378 = !DILocation(line: 429, column: 12, scope: !55)
!379 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParOut", arg: 3, scope: !55, file: !4, line: 430, type: !44)
!380 = !DILocation(line: 430, column: 13, scope: !55)
!381 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc", scope: !55, file: !4, line: 432, type: !23)
!382 = !DILocation(line: 432, column: 18, scope: !55)
!383 = !DILocation(line: 434, column: 12, scope: !55)
!384 = !DILocation(line: 434, column: 21, scope: !55)
!385 = !DILocation(line: 434, column: 10, scope: !55)
!386 = !DILocation(line: 435, column: 16, scope: !55)
!387 = !DILocation(line: 435, column: 27, scope: !55)
!388 = !DILocation(line: 435, column: 25, scope: !55)
!389 = !DILocation(line: 435, column: 4, scope: !55)
!390 = !DILocation(line: 435, column: 14, scope: !55)
!391 = !DILocation(line: 436, column: 1, scope: !55)
!392 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "Array1Par", arg: 1, scope: !58, file: !4, line: 439, type: !61)
!393 = !DILocation(line: 439, column: 15, scope: !58)
!394 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "Array2Par", arg: 2, scope: !58, file: !4, line: 440, type: !62)
!395 = !DILocation(line: 440, column: 11, scope: !58)
!396 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParI1", arg: 3, scope: !58, file: !4, line: 441, type: !23)
!397 = !DILocation(line: 441, column: 12, scope: !58)
!398 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParI2", arg: 4, scope: !58, file: !4, line: 442, type: !23)
!399 = !DILocation(line: 442, column: 12, scope: !58)
!400 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc", scope: !58, file: !4, line: 444, type: !23)
!401 = !DILocation(line: 444, column: 18, scope: !58)
!402 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntIndex", scope: !58, file: !4, line: 445, type: !23)
!403 = !DILocation(line: 445, column: 18, scope: !58)
!404 = !DILocation(line: 447, column: 12, scope: !58)
!405 = !DILocation(line: 447, column: 21, scope: !58)
!406 = !DILocation(line: 447, column: 10, scope: !58)
!407 = !DILocation(line: 448, column: 23, scope: !58)
!408 = !DILocation(line: 448, column: 13, scope: !58)
!409 = !DILocation(line: 448, column: 3, scope: !58)
!410 = !DILocation(line: 448, column: 21, scope: !58)
!411 = !DILocation(line: 449, column: 37, scope: !58)
!412 = !DILocation(line: 449, column: 27, scope: !58)
!413 = !DILocation(line: 449, column: 13, scope: !58)
!414 = !DILocation(line: 449, column: 20, scope: !58)
!415 = !DILocation(line: 449, column: 3, scope: !58)
!416 = !DILocation(line: 449, column: 25, scope: !58)
!417 = !DILocation(line: 450, column: 28, scope: !58)
!418 = !DILocation(line: 450, column: 13, scope: !58)
!419 = !DILocation(line: 450, column: 20, scope: !58)
!420 = !DILocation(line: 450, column: 3, scope: !58)
!421 = !DILocation(line: 450, column: 26, scope: !58)
!422 = !DILocation(line: 451, column: 19, scope: !423)
!423 = distinct !DILexicalBlock(scope: !58, file: !4, line: 451, column: 3)
!424 = !DILocation(line: 451, column: 17, scope: !423)
!425 = !DILocation(line: 451, column: 8, scope: !423)
!426 = !DILocation(line: 451, column: 27, scope: !427)
!427 = !DILexicalBlockFile(scope: !428, file: !4, discriminator: 2)
!428 = !DILexicalBlockFile(scope: !429, file: !4, discriminator: 1)
!429 = distinct !DILexicalBlock(scope: !423, file: !4, line: 451, column: 3)
!430 = !DILocation(line: 451, column: 40, scope: !429)
!431 = !DILocation(line: 451, column: 47, scope: !429)
!432 = !DILocation(line: 451, column: 36, scope: !429)
!433 = !DILocation(line: 451, column: 3, scope: !423)
!434 = !DILocation(line: 452, column: 35, scope: !429)
!435 = !DILocation(line: 452, column: 23, scope: !429)
!436 = !DILocation(line: 452, column: 5, scope: !429)
!437 = !DILocation(line: 452, column: 15, scope: !429)
!438 = !DILocation(line: 452, column: 33, scope: !429)
!439 = !DILocation(line: 451, column: 53, scope: !429)
!440 = !DILocation(line: 451, column: 3, scope: !429)
!441 = !DILocation(line: 453, column: 23, scope: !58)
!442 = !DILocation(line: 453, column: 30, scope: !58)
!443 = !DILocation(line: 453, column: 5, scope: !58)
!444 = !DILocation(line: 453, column: 15, scope: !58)
!445 = !DILocation(line: 453, column: 3, scope: !58)
!446 = !DILocation(line: 454, column: 46, scope: !58)
!447 = !DILocation(line: 454, column: 36, scope: !58)
!448 = !DILocation(line: 454, column: 26, scope: !58)
!449 = !DILocation(line: 454, column: 3, scope: !58)
!450 = !DILocation(line: 454, column: 13, scope: !58)
!451 = !DILocation(line: 454, column: 20, scope: !58)
!452 = !DILocation(line: 454, column: 34, scope: !58)
!453 = !DILocation(line: 455, column: 11, scope: !58)
!454 = !DILocation(line: 456, column: 1, scope: !58)
!455 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "CharPar1", arg: 1, scope: !66, file: !4, line: 459, type: !69)
!456 = !DILocation(line: 459, column: 19, scope: !66)
!457 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "CharPar2", arg: 2, scope: !66, file: !4, line: 460, type: !69)
!458 = !DILocation(line: 460, column: 15, scope: !66)
!459 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "CharLoc1", scope: !66, file: !4, line: 462, type: !69)
!460 = !DILocation(line: 462, column: 21, scope: !66)
!461 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "CharLoc2", scope: !66, file: !4, line: 463, type: !69)
!462 = !DILocation(line: 463, column: 21, scope: !66)
!463 = !DILocation(line: 465, column: 14, scope: !66)
!464 = !DILocation(line: 465, column: 12, scope: !66)
!465 = !DILocation(line: 466, column: 14, scope: !66)
!466 = !DILocation(line: 466, column: 12, scope: !66)
!467 = !DILocation(line: 467, column: 7, scope: !468)
!468 = distinct !DILexicalBlock(scope: !66, file: !4, line: 467, column: 7)
!469 = !DILocation(line: 467, column: 19, scope: !468)
!470 = !DILocation(line: 467, column: 16, scope: !468)
!471 = !DILocation(line: 467, column: 7, scope: !66)
!472 = !DILocation(line: 468, column: 5, scope: !468)
!473 = !DILocation(line: 470, column: 5, scope: !468)
!474 = !DILocation(line: 471, column: 1, scope: !66)
!475 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "StrParI1", arg: 1, scope: !70, file: !4, line: 474, type: !74)
!476 = !DILocation(line: 474, column: 14, scope: !70)
!477 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "StrParI2", arg: 2, scope: !70, file: !4, line: 475, type: !74)
!478 = !DILocation(line: 475, column: 10, scope: !70)
!479 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc", scope: !70, file: !4, line: 477, type: !480)
!480 = !DIDerivedType(tag: DW_TAG_typedef, name: "OneToThirty", file: !4, line: 141, baseType: !24)
!481 = !DILocation(line: 477, column: 19, scope: !70)
!482 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "CharLoc", scope: !70, file: !4, line: 478, type: !69)
!483 = !DILocation(line: 478, column: 21, scope: !70)
!484 = !DILocation(line: 480, column: 10, scope: !70)
!485 = !DILocation(line: 481, column: 3, scope: !70)
!486 = !DILocation(line: 481, column: 10, scope: !487)
!487 = !DILexicalBlockFile(scope: !488, file: !4, discriminator: 2)
!488 = !DILexicalBlockFile(scope: !70, file: !4, discriminator: 1)
!489 = !DILocation(line: 481, column: 17, scope: !70)
!490 = !DILocation(line: 482, column: 24, scope: !491)
!491 = distinct !DILexicalBlock(scope: !70, file: !4, line: 482, column: 9)
!492 = !DILocation(line: 482, column: 15, scope: !491)
!493 = !DILocation(line: 482, column: 42, scope: !491)
!494 = !DILocation(line: 482, column: 49, scope: !491)
!495 = !DILocation(line: 482, column: 33, scope: !491)
!496 = !DILocation(line: 482, column: 9, scope: !491)
!497 = !DILocation(line: 482, column: 55, scope: !491)
!498 = !DILocation(line: 482, column: 9, scope: !70)
!499 = !DILocation(line: 483, column: 15, scope: !500)
!500 = distinct !DILexicalBlock(scope: !491, file: !4, line: 482, column: 66)
!501 = !DILocation(line: 484, column: 7, scope: !500)
!502 = !DILocation(line: 485, column: 5, scope: !500)
!503 = !DILocation(line: 486, column: 7, scope: !504)
!504 = distinct !DILexicalBlock(scope: !70, file: !4, line: 486, column: 7)
!505 = !DILocation(line: 486, column: 15, scope: !504)
!506 = !DILocation(line: 486, column: 22, scope: !504)
!507 = !DILocation(line: 486, column: 25, scope: !508)
!508 = !DILexicalBlockFile(scope: !504, file: !4, discriminator: 1)
!509 = !DILocation(line: 486, column: 33, scope: !504)
!510 = !DILocation(line: 486, column: 7, scope: !70)
!511 = !DILocation(line: 487, column: 12, scope: !504)
!512 = !DILocation(line: 487, column: 5, scope: !504)
!513 = !DILocation(line: 488, column: 7, scope: !514)
!514 = distinct !DILexicalBlock(scope: !70, file: !4, line: 488, column: 7)
!515 = !DILocation(line: 488, column: 15, scope: !514)
!516 = !DILocation(line: 488, column: 7, scope: !70)
!517 = !DILocation(line: 489, column: 5, scope: !514)
!518 = !DILocation(line: 491, column: 16, scope: !519)
!519 = distinct !DILexicalBlock(scope: !520, file: !4, line: 491, column: 9)
!520 = distinct !DILexicalBlock(scope: !514, file: !4, line: 490, column: 8)
!521 = !DILocation(line: 491, column: 26, scope: !519)
!522 = !DILocation(line: 491, column: 9, scope: !519)
!523 = !DILocation(line: 491, column: 36, scope: !519)
!524 = !DILocation(line: 491, column: 9, scope: !520)
!525 = !DILocation(line: 492, column: 14, scope: !526)
!526 = distinct !DILexicalBlock(scope: !519, file: !4, line: 491, column: 41)
!527 = !DILocation(line: 493, column: 7, scope: !526)
!528 = !DILocation(line: 495, column: 7, scope: !519)
!529 = !DILocation(line: 497, column: 1, scope: !70)
!530 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "EnumParIn", arg: 1, scope: !75, file: !4, line: 500, type: !20)
!531 = !DILocation(line: 500, column: 21, scope: !75)
!532 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "EnumLoc", scope: !75, file: !4, line: 502, type: !20)
!533 = !DILocation(line: 502, column: 19, scope: !75)
!534 = !DILocation(line: 504, column: 13, scope: !75)
!535 = !DILocation(line: 504, column: 11, scope: !75)
!536 = !DILocation(line: 505, column: 7, scope: !537)
!537 = distinct !DILexicalBlock(scope: !75, file: !4, line: 505, column: 7)
!538 = !DILocation(line: 505, column: 15, scope: !537)
!539 = !DILocation(line: 505, column: 7, scope: !75)
!540 = !DILocation(line: 506, column: 5, scope: !537)
!541 = !DILocation(line: 507, column: 3, scope: !75)
!542 = !DILocation(line: 508, column: 1, scope: !75)
