; ModuleID = '/home/gleison/tf/Benchmarks/Dhrystone/fldry/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Record = type { %struct.Record*, i32, i32, double, [31 x i8] }

@Version = global [4 x i8] c"1.1\00", align 1
@.str = private unnamed_addr constant [53 x i8] c"calculate floating dhrystones using doubles size %d\0A\00", align 1
@PtrGlbNext = common global %struct.Record* null, align 8
@PtrGlb = common global %struct.Record* null, align 8
@.str.1 = private unnamed_addr constant [31 x i8] c"DHRYSTONE PROGRAM, SOME STRING\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"DHRYSTONE PROGRAM, 1'ST STRING\00", align 1
@Array2Glob = common global [51 x [51 x double]] zeroinitializer, align 16
@.str.3 = private unnamed_addr constant [31 x i8] c"DHRYSTONE PROGRAM, 2'ND STRING\00", align 1
@BoolGlob = common global i32 0, align 4
@Array1Glob = common global [51 x double] zeroinitializer, align 16
@Char2Glob = common global i8 0, align 1
@Char1Glob = common global i8 0, align 1
@IntGlob = common global double 0.000000e+00, align 8

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !102, metadata !103), !dbg !104
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !105, metadata !103), !dbg !106
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i32 0, i32 0), i64 8), !dbg !107
  %call1 = call i32 @Proc0(), !dbg !108
  ret i32 0, !dbg !109
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind uwtable
define i32 @Proc0() #0 {
entry:
  %retval = alloca i32, align 4
  %IntLoc1 = alloca double, align 8
  %IntLoc2 = alloca double, align 8
  %IntLoc3 = alloca double, align 8
  %CharLoc = alloca i8, align 1
  %CharIndex = alloca i8, align 1
  %EnumLoc = alloca i32, align 4
  %String1Loc = alloca [31 x i8], align 16
  %String2Loc = alloca [31 x i8], align 16
  %i = alloca i32, align 4
  %starttime = alloca i64, align 8
  %benchtime = alloca i64, align 8
  %nulltime = alloca i64, align 8
  call void @llvm.dbg.declare(metadata double* %IntLoc1, metadata !110, metadata !103), !dbg !111
  call void @llvm.dbg.declare(metadata double* %IntLoc2, metadata !112, metadata !103), !dbg !113
  call void @llvm.dbg.declare(metadata double* %IntLoc3, metadata !114, metadata !103), !dbg !115
  call void @llvm.dbg.declare(metadata i8* %CharLoc, metadata !116, metadata !103), !dbg !117
  call void @llvm.dbg.declare(metadata i8* %CharIndex, metadata !118, metadata !103), !dbg !119
  call void @llvm.dbg.declare(metadata i32* %EnumLoc, metadata !120, metadata !103), !dbg !121
  call void @llvm.dbg.declare(metadata [31 x i8]* %String1Loc, metadata !122, metadata !103), !dbg !123
  call void @llvm.dbg.declare(metadata [31 x i8]* %String2Loc, metadata !124, metadata !103), !dbg !125
  call void @llvm.dbg.declare(metadata i32* %i, metadata !126, metadata !103), !dbg !128
  call void @llvm.dbg.declare(metadata i64* %starttime, metadata !129, metadata !103), !dbg !131
  call void @llvm.dbg.declare(metadata i64* %benchtime, metadata !132, metadata !103), !dbg !133
  call void @llvm.dbg.declare(metadata i64* %nulltime, metadata !134, metadata !103), !dbg !135
  %call = call i64 @clock() #5, !dbg !136
  store i64 %call, i64* %starttime, align 8, !dbg !137
  store i32 0, i32* %i, align 4, !dbg !138
  br label %for.cond, !dbg !140

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !141
  %cmp = icmp ult i32 %0, 100000000, !dbg !145
  br i1 %cmp, label %for.body, label %for.end, !dbg !146

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !147

for.inc:                                          ; preds = %for.body
  %1 = load i32, i32* %i, align 4, !dbg !149
  %inc = add i32 %1, 1, !dbg !149
  store i32 %inc, i32* %i, align 4, !dbg !149
  br label %for.cond, !dbg !151

for.end:                                          ; preds = %for.cond
  %call1 = call i64 @clock() #5, !dbg !152
  %2 = load i64, i64* %starttime, align 8, !dbg !153
  %sub = sub nsw i64 %call1, %2, !dbg !154
  store i64 %sub, i64* %nulltime, align 8, !dbg !155
  %call2 = call noalias i8* @malloc(i64 56) #5, !dbg !156
  %3 = bitcast i8* %call2 to %struct.Record*, !dbg !157
  store %struct.Record* %3, %struct.Record** @PtrGlbNext, align 8, !dbg !158
  %call3 = call noalias i8* @malloc(i64 56) #5, !dbg !159
  %4 = bitcast i8* %call3 to %struct.Record*, !dbg !160
  store %struct.Record* %4, %struct.Record** @PtrGlb, align 8, !dbg !161
  %5 = load %struct.Record*, %struct.Record** @PtrGlbNext, align 8, !dbg !162
  %6 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !163
  %PtrComp = getelementptr inbounds %struct.Record, %struct.Record* %6, i32 0, i32 0, !dbg !164
  store %struct.Record* %5, %struct.Record** %PtrComp, align 8, !dbg !165
  %7 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !166
  %Discr = getelementptr inbounds %struct.Record, %struct.Record* %7, i32 0, i32 1, !dbg !167
  store i32 0, i32* %Discr, align 4, !dbg !168
  %8 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !169
  %EnumComp = getelementptr inbounds %struct.Record, %struct.Record* %8, i32 0, i32 2, !dbg !170
  store i32 10001, i32* %EnumComp, align 4, !dbg !171
  %9 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !172
  %IntComp = getelementptr inbounds %struct.Record, %struct.Record* %9, i32 0, i32 3, !dbg !173
  store double 4.000000e+01, double* %IntComp, align 8, !dbg !174
  %10 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !175
  %StringComp = getelementptr inbounds %struct.Record, %struct.Record* %10, i32 0, i32 4, !dbg !176
  %arraydecay = getelementptr inbounds [31 x i8], [31 x i8]* %StringComp, i32 0, i32 0, !dbg !175
  %call4 = call i8* @strcpy(i8* %arraydecay, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i32 0, i32 0)) #5, !dbg !177
  %arraydecay5 = getelementptr inbounds [31 x i8], [31 x i8]* %String1Loc, i32 0, i32 0, !dbg !178
  %call6 = call i8* @strcpy(i8* %arraydecay5, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i32 0, i32 0)) #5, !dbg !179
  store double 1.000000e+01, double* getelementptr inbounds ([51 x [51 x double]], [51 x [51 x double]]* @Array2Glob, i32 0, i64 8, i64 7), align 8, !dbg !180
  %call7 = call i64 @clock() #5, !dbg !181
  store i64 %call7, i64* %starttime, align 8, !dbg !182
  store i32 0, i32* %i, align 4, !dbg !183
  br label %for.cond.8, !dbg !185

for.cond.8:                                       ; preds = %for.inc.42, %for.end
  %11 = load i32, i32* %i, align 4, !dbg !186
  %cmp9 = icmp ult i32 %11, 100000000, !dbg !190
  br i1 %cmp9, label %for.body.10, label %for.end.44, !dbg !191

for.body.10:                                      ; preds = %for.cond.8
  %call11 = call i32 @Proc5(), !dbg !192
  %call12 = call i32 @Proc4(), !dbg !194
  store double 2.000000e+00, double* %IntLoc1, align 8, !dbg !195
  store double 3.000000e+00, double* %IntLoc2, align 8, !dbg !196
  %arraydecay13 = getelementptr inbounds [31 x i8], [31 x i8]* %String2Loc, i32 0, i32 0, !dbg !197
  %call14 = call i8* @strcpy(i8* %arraydecay13, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i32 0, i32 0)) #5, !dbg !198
  store i32 10000, i32* %EnumLoc, align 4, !dbg !199
  %arraydecay15 = getelementptr inbounds [31 x i8], [31 x i8]* %String1Loc, i32 0, i32 0, !dbg !200
  %arraydecay16 = getelementptr inbounds [31 x i8], [31 x i8]* %String2Loc, i32 0, i32 0, !dbg !201
  %call17 = call i32 @Func2(i8* %arraydecay15, i8* %arraydecay16), !dbg !202
  %tobool = icmp ne i32 %call17, 0, !dbg !203
  %lnot = xor i1 %tobool, true, !dbg !203
  %lnot.ext = zext i1 %lnot to i32, !dbg !203
  store i32 %lnot.ext, i32* @BoolGlob, align 4, !dbg !204
  br label %while.cond, !dbg !205

while.cond:                                       ; preds = %while.body, %for.body.10
  %12 = load double, double* %IntLoc1, align 8, !dbg !206
  %13 = load double, double* %IntLoc2, align 8, !dbg !209
  %cmp18 = fcmp olt double %12, %13, !dbg !210
  br i1 %cmp18, label %while.body, label %while.end, !dbg !205

while.body:                                       ; preds = %while.cond
  %14 = load double, double* %IntLoc1, align 8, !dbg !211
  %mul = fmul double 5.000000e+00, %14, !dbg !213
  %15 = load double, double* %IntLoc2, align 8, !dbg !214
  %sub19 = fsub double %mul, %15, !dbg !215
  store double %sub19, double* %IntLoc3, align 8, !dbg !216
  %16 = load double, double* %IntLoc1, align 8, !dbg !217
  %17 = load double, double* %IntLoc2, align 8, !dbg !218
  %call20 = call i32 @Proc7(double %16, double %17, double* %IntLoc3), !dbg !219
  %18 = load double, double* %IntLoc1, align 8, !dbg !220
  %inc21 = fadd double %18, 1.000000e+00, !dbg !220
  store double %inc21, double* %IntLoc1, align 8, !dbg !220
  br label %while.cond, !dbg !205

while.end:                                        ; preds = %while.cond
  %19 = load double, double* %IntLoc1, align 8, !dbg !221
  %20 = load double, double* %IntLoc3, align 8, !dbg !222
  %call22 = call i32 @Proc8(double* getelementptr inbounds ([51 x double], [51 x double]* @Array1Glob, i32 0, i32 0), [51 x double]* getelementptr inbounds ([51 x [51 x double]], [51 x [51 x double]]* @Array2Glob, i32 0, i32 0), double %19, double %20), !dbg !223
  %21 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !224
  %call23 = call i32 @Proc1(%struct.Record* %21), !dbg !225
  store i8 65, i8* %CharIndex, align 1, !dbg !226
  br label %for.cond.24, !dbg !228

for.cond.24:                                      ; preds = %for.inc.34, %while.end
  %22 = load i8, i8* %CharIndex, align 1, !dbg !229
  %conv = sext i8 %22 to i32, !dbg !229
  %23 = load i8, i8* @Char2Glob, align 1, !dbg !233
  %conv25 = sext i8 %23 to i32, !dbg !233
  %cmp26 = icmp sle i32 %conv, %conv25, !dbg !234
  br i1 %cmp26, label %for.body.28, label %for.end.36, !dbg !235

for.body.28:                                      ; preds = %for.cond.24
  %24 = load i32, i32* %EnumLoc, align 4, !dbg !236
  %25 = load i8, i8* %CharIndex, align 1, !dbg !238
  %conv29 = sext i8 %25 to i32, !dbg !238
  %call30 = call i32 @Func1(i32 %conv29, i32 67), !dbg !239
  %cmp31 = icmp eq i32 %24, %call30, !dbg !240
  br i1 %cmp31, label %if.then, label %if.end, !dbg !241

if.then:                                          ; preds = %for.body.28
  %call33 = call i32 @Proc6(i32 0, i32* %EnumLoc), !dbg !242
  br label %if.end, !dbg !242

if.end:                                           ; preds = %if.then, %for.body.28
  br label %for.inc.34, !dbg !243

for.inc.34:                                       ; preds = %if.end
  %26 = load i8, i8* %CharIndex, align 1, !dbg !245
  %inc35 = add i8 %26, 1, !dbg !245
  store i8 %inc35, i8* %CharIndex, align 1, !dbg !245
  br label %for.cond.24, !dbg !246

for.end.36:                                       ; preds = %for.cond.24
  %27 = load double, double* %IntLoc2, align 8, !dbg !247
  %28 = load double, double* %IntLoc1, align 8, !dbg !248
  %mul37 = fmul double %27, %28, !dbg !249
  store double %mul37, double* %IntLoc3, align 8, !dbg !250
  %29 = load double, double* %IntLoc3, align 8, !dbg !251
  %30 = load double, double* %IntLoc1, align 8, !dbg !252
  %div = fdiv double %29, %30, !dbg !253
  store double %div, double* %IntLoc2, align 8, !dbg !254
  %31 = load double, double* %IntLoc3, align 8, !dbg !255
  %32 = load double, double* %IntLoc2, align 8, !dbg !256
  %sub38 = fsub double %31, %32, !dbg !257
  %mul39 = fmul double 7.000000e+00, %sub38, !dbg !258
  %33 = load double, double* %IntLoc1, align 8, !dbg !259
  %sub40 = fsub double %mul39, %33, !dbg !260
  store double %sub40, double* %IntLoc2, align 8, !dbg !261
  %call41 = call i32 @Proc2(double* %IntLoc1), !dbg !262
  br label %for.inc.42, !dbg !263

for.inc.42:                                       ; preds = %for.end.36
  %34 = load i32, i32* %i, align 4, !dbg !264
  %inc43 = add i32 %34, 1, !dbg !264
  store i32 %inc43, i32* %i, align 4, !dbg !264
  br label %for.cond.8, !dbg !265

for.end.44:                                       ; preds = %for.cond.8
  %35 = load i32, i32* %retval, !dbg !266
  ret i32 %35, !dbg !266
}

; Function Attrs: nounwind
declare i64 @clock() #3

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #3

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #3

; Function Attrs: nounwind uwtable
define i32 @Proc1(%struct.Record* %PtrParIn) #0 {
entry:
  %retval = alloca i32, align 4
  %PtrParIn.addr = alloca %struct.Record*, align 8
  store %struct.Record* %PtrParIn, %struct.Record** %PtrParIn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Record** %PtrParIn.addr, metadata !267, metadata !103), !dbg !268
  %0 = load %struct.Record*, %struct.Record** %PtrParIn.addr, align 8, !dbg !269
  %IntComp = getelementptr inbounds %struct.Record, %struct.Record* %0, i32 0, i32 3, !dbg !270
  store double 5.000000e+00, double* %IntComp, align 8, !dbg !271
  %1 = load %struct.Record*, %struct.Record** %PtrParIn.addr, align 8, !dbg !272
  %IntComp1 = getelementptr inbounds %struct.Record, %struct.Record* %1, i32 0, i32 3, !dbg !273
  %2 = load double, double* %IntComp1, align 8, !dbg !273
  %3 = load %struct.Record*, %struct.Record** %PtrParIn.addr, align 8, !dbg !274
  %PtrComp = getelementptr inbounds %struct.Record, %struct.Record* %3, i32 0, i32 0, !dbg !274
  %4 = load %struct.Record*, %struct.Record** %PtrComp, align 8, !dbg !274
  %IntComp2 = getelementptr inbounds %struct.Record, %struct.Record* %4, i32 0, i32 3, !dbg !275
  store double %2, double* %IntComp2, align 8, !dbg !276
  %5 = load %struct.Record*, %struct.Record** %PtrParIn.addr, align 8, !dbg !277
  %PtrComp3 = getelementptr inbounds %struct.Record, %struct.Record* %5, i32 0, i32 0, !dbg !278
  %6 = load %struct.Record*, %struct.Record** %PtrComp3, align 8, !dbg !278
  %7 = load %struct.Record*, %struct.Record** %PtrParIn.addr, align 8, !dbg !279
  %PtrComp4 = getelementptr inbounds %struct.Record, %struct.Record* %7, i32 0, i32 0, !dbg !279
  %8 = load %struct.Record*, %struct.Record** %PtrComp4, align 8, !dbg !279
  %PtrComp5 = getelementptr inbounds %struct.Record, %struct.Record* %8, i32 0, i32 0, !dbg !280
  store %struct.Record* %6, %struct.Record** %PtrComp5, align 8, !dbg !281
  %9 = load i32, i32* %retval, !dbg !282
  ret i32 %9, !dbg !282
}

; Function Attrs: nounwind uwtable
define i32 @Proc2(double* %IntParIO) #0 {
entry:
  %retval = alloca i32, align 4
  %IntParIO.addr = alloca double*, align 8
  %IntLoc = alloca double, align 8
  %EnumLoc = alloca i32, align 4
  store double* %IntParIO, double** %IntParIO.addr, align 8
  call void @llvm.dbg.declare(metadata double** %IntParIO.addr, metadata !283, metadata !103), !dbg !284
  call void @llvm.dbg.declare(metadata double* %IntLoc, metadata !285, metadata !103), !dbg !286
  call void @llvm.dbg.declare(metadata i32* %EnumLoc, metadata !287, metadata !103), !dbg !288
  %0 = load double*, double** %IntParIO.addr, align 8, !dbg !289
  %1 = load double, double* %0, align 8, !dbg !290
  %add = fadd double %1, 1.000000e+01, !dbg !291
  store double %add, double* %IntLoc, align 8, !dbg !292
  br label %for.cond, !dbg !293

for.cond:                                         ; preds = %if.end.5, %entry
  %2 = load i8, i8* @Char1Glob, align 1, !dbg !294
  %conv = sext i8 %2 to i32, !dbg !294
  %cmp = icmp eq i32 %conv, 65, !dbg !299
  br i1 %cmp, label %if.then, label %if.end, !dbg !300

if.then:                                          ; preds = %for.cond
  %3 = load double, double* %IntLoc, align 8, !dbg !301
  %dec = fadd double %3, -1.000000e+00, !dbg !301
  store double %dec, double* %IntLoc, align 8, !dbg !301
  %4 = load double, double* %IntLoc, align 8, !dbg !303
  %5 = load double, double* @IntGlob, align 8, !dbg !304
  %sub = fsub double %4, %5, !dbg !305
  %6 = load double*, double** %IntParIO.addr, align 8, !dbg !306
  store double %sub, double* %6, align 8, !dbg !307
  store i32 0, i32* %EnumLoc, align 4, !dbg !308
  br label %if.end, !dbg !309

if.end:                                           ; preds = %if.then, %for.cond
  %7 = load i32, i32* %EnumLoc, align 4, !dbg !310
  %cmp2 = icmp eq i32 %7, 0, !dbg !312
  br i1 %cmp2, label %if.then.4, label %if.end.5, !dbg !313

if.then.4:                                        ; preds = %if.end
  br label %for.end, !dbg !314

if.end.5:                                         ; preds = %if.end
  br label %for.cond, !dbg !315

for.end:                                          ; preds = %if.then.4
  %8 = load i32, i32* %retval, !dbg !316
  ret i32 %8, !dbg !316
}

; Function Attrs: nounwind uwtable
define i32 @Proc3(%struct.Record** %PtrParOut) #0 {
entry:
  %retval = alloca i32, align 4
  %PtrParOut.addr = alloca %struct.Record**, align 8
  store %struct.Record** %PtrParOut, %struct.Record*** %PtrParOut.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Record*** %PtrParOut.addr, metadata !317, metadata !103), !dbg !318
  %0 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !319
  %cmp = icmp ne %struct.Record* %0, null, !dbg !321
  br i1 %cmp, label %if.then, label %if.else, !dbg !322

if.then:                                          ; preds = %entry
  %1 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !323
  %PtrComp = getelementptr inbounds %struct.Record, %struct.Record* %1, i32 0, i32 0, !dbg !324
  %2 = load %struct.Record*, %struct.Record** %PtrComp, align 8, !dbg !324
  %3 = load %struct.Record**, %struct.Record*** %PtrParOut.addr, align 8, !dbg !325
  store %struct.Record* %2, %struct.Record** %3, align 8, !dbg !326
  br label %if.end, !dbg !327

if.else:                                          ; preds = %entry
  store double 1.000000e+02, double* @IntGlob, align 8, !dbg !328
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load double, double* @IntGlob, align 8, !dbg !329
  %5 = load %struct.Record*, %struct.Record** @PtrGlb, align 8, !dbg !330
  %IntComp = getelementptr inbounds %struct.Record, %struct.Record* %5, i32 0, i32 3, !dbg !331
  %call = call i32 (i32, double, double*, ...) bitcast (i32 (double, double, double*)* @Proc7 to i32 (i32, double, double*, ...)*)(i32 10, double %4, double* %IntComp), !dbg !332
  %6 = load i32, i32* %retval, !dbg !333
  ret i32 %6, !dbg !333
}

; Function Attrs: nounwind uwtable
define i32 @Proc4() #0 {
entry:
  %retval = alloca i32, align 4
  %BoolLoc = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %BoolLoc, metadata !334, metadata !103), !dbg !335
  %0 = load i8, i8* @Char1Glob, align 1, !dbg !336
  %conv = sext i8 %0 to i32, !dbg !336
  %cmp = icmp eq i32 %conv, 65, !dbg !337
  %conv1 = zext i1 %cmp to i32, !dbg !337
  store i32 %conv1, i32* %BoolLoc, align 4, !dbg !338
  %1 = load i32, i32* @BoolGlob, align 4, !dbg !339
  %2 = load i32, i32* %BoolLoc, align 4, !dbg !340
  %or = or i32 %2, %1, !dbg !340
  store i32 %or, i32* %BoolLoc, align 4, !dbg !340
  store i8 66, i8* @Char2Glob, align 1, !dbg !341
  %3 = load i32, i32* %retval, !dbg !342
  ret i32 %3, !dbg !342
}

; Function Attrs: nounwind uwtable
define i32 @Proc5() #0 {
entry:
  %retval = alloca i32, align 4
  store i8 65, i8* @Char1Glob, align 1, !dbg !343
  store i32 0, i32* @BoolGlob, align 4, !dbg !344
  %0 = load i32, i32* %retval, !dbg !345
  ret i32 %0, !dbg !345
}

; Function Attrs: nounwind uwtable
define i32 @Proc6(i32 %EnumParIn, i32* %EnumParOut) #0 {
entry:
  %retval = alloca i32, align 4
  %EnumParIn.addr = alloca i32, align 4
  %EnumParOut.addr = alloca i32*, align 8
  store i32 %EnumParIn, i32* %EnumParIn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %EnumParIn.addr, metadata !346, metadata !103), !dbg !347
  store i32* %EnumParOut, i32** %EnumParOut.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %EnumParOut.addr, metadata !348, metadata !103), !dbg !349
  %0 = load i32, i32* %EnumParIn.addr, align 4, !dbg !350
  %1 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !351
  store i32 %0, i32* %1, align 4, !dbg !352
  %2 = load i32, i32* %EnumParIn.addr, align 4, !dbg !353
  %call = call i32 @Func3(i32 %2), !dbg !355
  %tobool = icmp ne i32 %call, 0, !dbg !355
  br i1 %tobool, label %if.end, label %if.then, !dbg !356

if.then:                                          ; preds = %entry
  %3 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !357
  store i32 10002, i32* %3, align 4, !dbg !358
  br label %if.end, !dbg !359

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %EnumParIn.addr, align 4, !dbg !360
  switch i32 %4, label %sw.epilog [
    i32 0, label %sw.bb
    i32 10000, label %sw.bb.1
    i32 10001, label %sw.bb.4
    i32 10002, label %sw.bb.5
    i32 10003, label %sw.bb.6
  ], !dbg !361

sw.bb:                                            ; preds = %if.end
  %5 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !362
  store i32 0, i32* %5, align 4, !dbg !364
  br label %sw.epilog, !dbg !365

sw.bb.1:                                          ; preds = %if.end
  %6 = load double, double* @IntGlob, align 8, !dbg !366
  %cmp = fcmp ogt double %6, 1.000000e+02, !dbg !368
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !369

if.then.2:                                        ; preds = %sw.bb.1
  %7 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !370
  store i32 0, i32* %7, align 4, !dbg !371
  br label %if.end.3, !dbg !372

if.else:                                          ; preds = %sw.bb.1
  %8 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !373
  store i32 10002, i32* %8, align 4, !dbg !374
  br label %if.end.3

if.end.3:                                         ; preds = %if.else, %if.then.2
  br label %sw.epilog, !dbg !375

sw.bb.4:                                          ; preds = %if.end
  %9 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !376
  store i32 10000, i32* %9, align 4, !dbg !377
  br label %sw.epilog, !dbg !378

sw.bb.5:                                          ; preds = %if.end
  br label %sw.epilog, !dbg !379

sw.bb.6:                                          ; preds = %if.end
  %10 = load i32*, i32** %EnumParOut.addr, align 8, !dbg !380
  store i32 10001, i32* %10, align 4, !dbg !381
  br label %sw.epilog, !dbg !382

sw.epilog:                                        ; preds = %sw.bb.6, %if.end, %sw.bb.5, %sw.bb.4, %if.end.3, %sw.bb
  %11 = load i32, i32* %retval, !dbg !383
  ret i32 %11, !dbg !383
}

; Function Attrs: nounwind uwtable
define i32 @Proc7(double %IntParI1, double %IntParI2, double* %IntParOut) #0 {
entry:
  %retval = alloca i32, align 4
  %IntParI1.addr = alloca double, align 8
  %IntParI2.addr = alloca double, align 8
  %IntParOut.addr = alloca double*, align 8
  %IntLoc = alloca double, align 8
  store double %IntParI1, double* %IntParI1.addr, align 8
  call void @llvm.dbg.declare(metadata double* %IntParI1.addr, metadata !384, metadata !103), !dbg !385
  store double %IntParI2, double* %IntParI2.addr, align 8
  call void @llvm.dbg.declare(metadata double* %IntParI2.addr, metadata !386, metadata !103), !dbg !387
  store double* %IntParOut, double** %IntParOut.addr, align 8
  call void @llvm.dbg.declare(metadata double** %IntParOut.addr, metadata !388, metadata !103), !dbg !389
  call void @llvm.dbg.declare(metadata double* %IntLoc, metadata !390, metadata !103), !dbg !391
  %0 = load double, double* %IntParI1.addr, align 8, !dbg !392
  %add = fadd double %0, 2.000000e+00, !dbg !393
  store double %add, double* %IntLoc, align 8, !dbg !394
  %1 = load double, double* %IntParI2.addr, align 8, !dbg !395
  %2 = load double, double* %IntLoc, align 8, !dbg !396
  %add1 = fadd double %1, %2, !dbg !397
  %3 = load double*, double** %IntParOut.addr, align 8, !dbg !398
  store double %add1, double* %3, align 8, !dbg !399
  %4 = load i32, i32* %retval, !dbg !400
  ret i32 %4, !dbg !400
}

; Function Attrs: nounwind uwtable
define i32 @Proc8(double* %Array1Par, [51 x double]* %Array2Par, double %IntParI1, double %IntParI2) #0 {
entry:
  %retval = alloca i32, align 4
  %Array1Par.addr = alloca double*, align 8
  %Array2Par.addr = alloca [51 x double]*, align 8
  %IntParI1.addr = alloca double, align 8
  %IntParI2.addr = alloca double, align 8
  %IntLoc = alloca double, align 8
  %IntIndex = alloca double, align 8
  store double* %Array1Par, double** %Array1Par.addr, align 8
  call void @llvm.dbg.declare(metadata double** %Array1Par.addr, metadata !401, metadata !103), !dbg !402
  store [51 x double]* %Array2Par, [51 x double]** %Array2Par.addr, align 8
  call void @llvm.dbg.declare(metadata [51 x double]** %Array2Par.addr, metadata !403, metadata !103), !dbg !404
  store double %IntParI1, double* %IntParI1.addr, align 8
  call void @llvm.dbg.declare(metadata double* %IntParI1.addr, metadata !405, metadata !103), !dbg !406
  store double %IntParI2, double* %IntParI2.addr, align 8
  call void @llvm.dbg.declare(metadata double* %IntParI2.addr, metadata !407, metadata !103), !dbg !408
  call void @llvm.dbg.declare(metadata double* %IntLoc, metadata !409, metadata !103), !dbg !410
  call void @llvm.dbg.declare(metadata double* %IntIndex, metadata !411, metadata !103), !dbg !412
  %0 = load double, double* %IntParI1.addr, align 8, !dbg !413
  %add = fadd double %0, 5.000000e+00, !dbg !414
  store double %add, double* %IntLoc, align 8, !dbg !415
  %1 = load double, double* %IntParI2.addr, align 8, !dbg !416
  %2 = load double, double* %IntLoc, align 8, !dbg !417
  %conv = fptosi double %2 to i32, !dbg !418
  %idxprom = sext i32 %conv to i64, !dbg !419
  %3 = load double*, double** %Array1Par.addr, align 8, !dbg !419
  %arrayidx = getelementptr inbounds double, double* %3, i64 %idxprom, !dbg !419
  store double %1, double* %arrayidx, align 8, !dbg !420
  %4 = load double, double* %IntLoc, align 8, !dbg !421
  %conv1 = fptosi double %4 to i32, !dbg !422
  %idxprom2 = sext i32 %conv1 to i64, !dbg !423
  %5 = load double*, double** %Array1Par.addr, align 8, !dbg !423
  %arrayidx3 = getelementptr inbounds double, double* %5, i64 %idxprom2, !dbg !423
  %6 = load double, double* %arrayidx3, align 8, !dbg !423
  %7 = load double, double* %IntLoc, align 8, !dbg !424
  %conv4 = fptosi double %7 to i32, !dbg !425
  %add5 = add nsw i32 %conv4, 1, !dbg !426
  %idxprom6 = sext i32 %add5 to i64, !dbg !427
  %8 = load double*, double** %Array1Par.addr, align 8, !dbg !427
  %arrayidx7 = getelementptr inbounds double, double* %8, i64 %idxprom6, !dbg !427
  store double %6, double* %arrayidx7, align 8, !dbg !428
  %9 = load double, double* %IntLoc, align 8, !dbg !429
  %10 = load double, double* %IntLoc, align 8, !dbg !430
  %conv8 = fptosi double %10 to i32, !dbg !431
  %add9 = add nsw i32 %conv8, 30, !dbg !432
  %idxprom10 = sext i32 %add9 to i64, !dbg !433
  %11 = load double*, double** %Array1Par.addr, align 8, !dbg !433
  %arrayidx11 = getelementptr inbounds double, double* %11, i64 %idxprom10, !dbg !433
  store double %9, double* %arrayidx11, align 8, !dbg !434
  %12 = load double, double* %IntLoc, align 8, !dbg !435
  store double %12, double* %IntIndex, align 8, !dbg !437
  br label %for.cond, !dbg !438

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load double, double* %IntIndex, align 8, !dbg !439
  %14 = load double, double* %IntLoc, align 8, !dbg !443
  %add12 = fadd double %14, 1.000000e+00, !dbg !444
  %cmp = fcmp ole double %13, %add12, !dbg !445
  br i1 %cmp, label %for.body, label %for.end, !dbg !446

for.body:                                         ; preds = %for.cond
  %15 = load double, double* %IntLoc, align 8, !dbg !447
  %16 = load double, double* %IntIndex, align 8, !dbg !448
  %conv14 = fptosi double %16 to i32, !dbg !449
  %idxprom15 = sext i32 %conv14 to i64, !dbg !450
  %17 = load double, double* %IntLoc, align 8, !dbg !451
  %conv16 = fptosi double %17 to i32, !dbg !452
  %idxprom17 = sext i32 %conv16 to i64, !dbg !450
  %18 = load [51 x double]*, [51 x double]** %Array2Par.addr, align 8, !dbg !450
  %arrayidx18 = getelementptr inbounds [51 x double], [51 x double]* %18, i64 %idxprom17, !dbg !450
  %arrayidx19 = getelementptr inbounds [51 x double], [51 x double]* %arrayidx18, i32 0, i64 %idxprom15, !dbg !450
  store double %15, double* %arrayidx19, align 8, !dbg !453
  br label %for.inc, !dbg !450

for.inc:                                          ; preds = %for.body
  %19 = load double, double* %IntIndex, align 8, !dbg !454
  %inc = fadd double %19, 1.000000e+00, !dbg !454
  store double %inc, double* %IntIndex, align 8, !dbg !454
  br label %for.cond, !dbg !455

for.end:                                          ; preds = %for.cond
  %20 = load double, double* %IntLoc, align 8, !dbg !456
  %conv20 = fptosi double %20 to i32, !dbg !457
  %sub = sub nsw i32 %conv20, 1, !dbg !458
  %idxprom21 = sext i32 %sub to i64, !dbg !459
  %21 = load double, double* %IntLoc, align 8, !dbg !460
  %conv22 = fptosi double %21 to i32, !dbg !461
  %idxprom23 = sext i32 %conv22 to i64, !dbg !459
  %22 = load [51 x double]*, [51 x double]** %Array2Par.addr, align 8, !dbg !459
  %arrayidx24 = getelementptr inbounds [51 x double], [51 x double]* %22, i64 %idxprom23, !dbg !459
  %arrayidx25 = getelementptr inbounds [51 x double], [51 x double]* %arrayidx24, i32 0, i64 %idxprom21, !dbg !459
  %23 = load double, double* %arrayidx25, align 8, !dbg !462
  %inc26 = fadd double %23, 1.000000e+00, !dbg !462
  store double %inc26, double* %arrayidx25, align 8, !dbg !462
  %24 = load double, double* %IntLoc, align 8, !dbg !463
  %conv27 = fptosi double %24 to i32, !dbg !464
  %idxprom28 = sext i32 %conv27 to i64, !dbg !465
  %25 = load double*, double** %Array1Par.addr, align 8, !dbg !465
  %arrayidx29 = getelementptr inbounds double, double* %25, i64 %idxprom28, !dbg !465
  %26 = load double, double* %arrayidx29, align 8, !dbg !465
  %27 = load double, double* %IntLoc, align 8, !dbg !466
  %conv30 = fptosi double %27 to i32, !dbg !467
  %idxprom31 = sext i32 %conv30 to i64, !dbg !468
  %28 = load double, double* %IntLoc, align 8, !dbg !469
  %conv32 = fptosi double %28 to i32, !dbg !470
  %add33 = add nsw i32 %conv32, 20, !dbg !471
  %idxprom34 = sext i32 %add33 to i64, !dbg !468
  %29 = load [51 x double]*, [51 x double]** %Array2Par.addr, align 8, !dbg !468
  %arrayidx35 = getelementptr inbounds [51 x double], [51 x double]* %29, i64 %idxprom34, !dbg !468
  %arrayidx36 = getelementptr inbounds [51 x double], [51 x double]* %arrayidx35, i32 0, i64 %idxprom31, !dbg !468
  store double %26, double* %arrayidx36, align 8, !dbg !472
  store double 5.000000e+00, double* @IntGlob, align 8, !dbg !473
  %30 = load i32, i32* %retval, !dbg !474
  ret i32 %30, !dbg !474
}

; Function Attrs: nounwind uwtable
define i32 @Func1(i32, i32) #0 {
entry:
  %retval = alloca i32, align 4
  %CharPar1.addr = alloca i8, align 1
  %CharPar2.addr = alloca i8, align 1
  %CharLoc1 = alloca i8, align 1
  %CharLoc2 = alloca i8, align 1
  %CharPar1 = trunc i32 %0 to i8
  %CharPar2 = trunc i32 %1 to i8
  store i8 %CharPar1, i8* %CharPar1.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %CharPar1.addr, metadata !475, metadata !103), !dbg !476
  store i8 %CharPar2, i8* %CharPar2.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %CharPar2.addr, metadata !477, metadata !103), !dbg !478
  call void @llvm.dbg.declare(metadata i8* %CharLoc1, metadata !479, metadata !103), !dbg !480
  call void @llvm.dbg.declare(metadata i8* %CharLoc2, metadata !481, metadata !103), !dbg !482
  %2 = load i8, i8* %CharPar1.addr, align 1, !dbg !483
  store i8 %2, i8* %CharLoc1, align 1, !dbg !484
  %3 = load i8, i8* %CharLoc1, align 1, !dbg !485
  store i8 %3, i8* %CharLoc2, align 1, !dbg !486
  %4 = load i8, i8* %CharLoc2, align 1, !dbg !487
  %conv = sext i8 %4 to i32, !dbg !487
  %5 = load i8, i8* %CharPar2.addr, align 1, !dbg !489
  %conv2 = sext i8 %5 to i32, !dbg !489
  %cmp = icmp ne i32 %conv, %conv2, !dbg !490
  br i1 %cmp, label %if.then, label %if.else, !dbg !491

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !492
  br label %return, !dbg !492

if.else:                                          ; preds = %entry
  store i32 10000, i32* %retval, !dbg !493
  br label %return, !dbg !493

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval, !dbg !494
  ret i32 %6, !dbg !494
}

; Function Attrs: nounwind uwtable
define i32 @Func2(i8* %StrParI1, i8* %StrParI2) #0 {
entry:
  %retval = alloca i32, align 4
  %StrParI1.addr = alloca i8*, align 8
  %StrParI2.addr = alloca i8*, align 8
  %IntLoc = alloca double, align 8
  %CharLoc = alloca i8, align 1
  store i8* %StrParI1, i8** %StrParI1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %StrParI1.addr, metadata !495, metadata !103), !dbg !496
  store i8* %StrParI2, i8** %StrParI2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %StrParI2.addr, metadata !497, metadata !103), !dbg !498
  call void @llvm.dbg.declare(metadata double* %IntLoc, metadata !499, metadata !103), !dbg !501
  call void @llvm.dbg.declare(metadata i8* %CharLoc, metadata !502, metadata !103), !dbg !503
  store double 1.000000e+00, double* %IntLoc, align 8, !dbg !504
  br label %while.cond, !dbg !505

while.cond:                                       ; preds = %if.end, %entry
  %0 = load double, double* %IntLoc, align 8, !dbg !506
  %cmp = fcmp ole double %0, 1.000000e+00, !dbg !509
  br i1 %cmp, label %while.body, label %while.end, !dbg !505

while.body:                                       ; preds = %while.cond
  %1 = load double, double* %IntLoc, align 8, !dbg !510
  %conv = fptosi double %1 to i32, !dbg !512
  %idxprom = sext i32 %conv to i64, !dbg !513
  %2 = load i8*, i8** %StrParI1.addr, align 8, !dbg !513
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom, !dbg !513
  %3 = load i8, i8* %arrayidx, align 1, !dbg !513
  %conv1 = sext i8 %3 to i32, !dbg !513
  %4 = load double, double* %IntLoc, align 8, !dbg !514
  %conv2 = fptosi double %4 to i32, !dbg !515
  %add = add nsw i32 %conv2, 1, !dbg !516
  %idxprom3 = sext i32 %add to i64, !dbg !517
  %5 = load i8*, i8** %StrParI2.addr, align 8, !dbg !517
  %arrayidx4 = getelementptr inbounds i8, i8* %5, i64 %idxprom3, !dbg !517
  %6 = load i8, i8* %arrayidx4, align 1, !dbg !517
  %conv5 = sext i8 %6 to i32, !dbg !517
  %call = call i32 @Func1(i32 %conv1, i32 %conv5), !dbg !518
  %cmp6 = icmp eq i32 %call, 0, !dbg !519
  br i1 %cmp6, label %if.then, label %if.end, !dbg !520

if.then:                                          ; preds = %while.body
  store i8 65, i8* %CharLoc, align 1, !dbg !521
  %7 = load double, double* %IntLoc, align 8, !dbg !523
  %inc = fadd double %7, 1.000000e+00, !dbg !523
  store double %inc, double* %IntLoc, align 8, !dbg !523
  br label %if.end, !dbg !524

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond, !dbg !505

while.end:                                        ; preds = %while.cond
  %8 = load i8, i8* %CharLoc, align 1, !dbg !525
  %conv8 = sext i8 %8 to i32, !dbg !525
  %cmp9 = icmp sge i32 %conv8, 87, !dbg !527
  br i1 %cmp9, label %land.lhs.true, label %if.end.15, !dbg !528

land.lhs.true:                                    ; preds = %while.end
  %9 = load i8, i8* %CharLoc, align 1, !dbg !529
  %conv11 = sext i8 %9 to i32, !dbg !529
  %cmp12 = icmp sle i32 %conv11, 90, !dbg !531
  br i1 %cmp12, label %if.then.14, label %if.end.15, !dbg !532

if.then.14:                                       ; preds = %land.lhs.true
  store double 7.000000e+00, double* %IntLoc, align 8, !dbg !533
  br label %if.end.15, !dbg !534

if.end.15:                                        ; preds = %if.then.14, %land.lhs.true, %while.end
  %10 = load i8, i8* %CharLoc, align 1, !dbg !535
  %conv16 = sext i8 %10 to i32, !dbg !535
  %cmp17 = icmp eq i32 %conv16, 88, !dbg !537
  br i1 %cmp17, label %if.then.19, label %if.else, !dbg !538

if.then.19:                                       ; preds = %if.end.15
  store i32 1, i32* %retval, !dbg !539
  br label %return, !dbg !539

if.else:                                          ; preds = %if.end.15
  %11 = load i8*, i8** %StrParI1.addr, align 8, !dbg !540
  %12 = load i8*, i8** %StrParI2.addr, align 8, !dbg !543
  %call20 = call i32 @strcmp(i8* %11, i8* %12) #6, !dbg !544
  %cmp21 = icmp sgt i32 %call20, 0, !dbg !545
  br i1 %cmp21, label %if.then.23, label %if.else.25, !dbg !546

if.then.23:                                       ; preds = %if.else
  %13 = load double, double* %IntLoc, align 8, !dbg !547
  %add24 = fadd double %13, 7.000000e+00, !dbg !547
  store double %add24, double* %IntLoc, align 8, !dbg !547
  store i32 1, i32* %retval, !dbg !549
  br label %return, !dbg !549

if.else.25:                                       ; preds = %if.else
  store i32 0, i32* %retval, !dbg !550
  br label %return, !dbg !550

return:                                           ; preds = %if.else.25, %if.then.23, %if.then.19
  %14 = load i32, i32* %retval, !dbg !551
  ret i32 %14, !dbg !551
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #4

; Function Attrs: nounwind uwtable
define i32 @Func3(i32 %EnumParIn) #0 {
entry:
  %retval = alloca i32, align 4
  %EnumParIn.addr = alloca i32, align 4
  %EnumLoc = alloca i32, align 4
  store i32 %EnumParIn, i32* %EnumParIn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %EnumParIn.addr, metadata !552, metadata !103), !dbg !553
  call void @llvm.dbg.declare(metadata i32* %EnumLoc, metadata !554, metadata !103), !dbg !555
  %0 = load i32, i32* %EnumParIn.addr, align 4, !dbg !556
  store i32 %0, i32* %EnumLoc, align 4, !dbg !557
  %1 = load i32, i32* %EnumLoc, align 4, !dbg !558
  %cmp = icmp eq i32 %1, 10001, !dbg !560
  br i1 %cmp, label %if.then, label %if.end, !dbg !561

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, !dbg !562
  br label %return, !dbg !562

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval, !dbg !563
  br label %return, !dbg !563

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, !dbg !564
  ret i32 %2, !dbg !564
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!99, !100}
!llvm.ident = !{!101}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !11, subprograms: !33, globals: !82)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Dhrystone/fldry")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 134, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Dhrystone/fldry/tmp.c", directory: "/home/gleison/tf/Benchmarks/Dhrystone/fldry")
!5 = !{!6, !7, !8, !9, !10}
!6 = !DIEnumerator(name: "Ident1", value: 0)
!7 = !DIEnumerator(name: "Ident2", value: 10000)
!8 = !DIEnumerator(name: "Ident3", value: 10001)
!9 = !DIEnumerator(name: "Ident4", value: 10002)
!10 = !DIEnumerator(name: "Ident5", value: 10003)
!11 = !{!12, !31, !32}
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "RecordPtr", file: !4, line: 157, baseType: !13)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!14 = !DIDerivedType(tag: DW_TAG_typedef, name: "RecordType", file: !4, line: 156, baseType: !15)
!15 = !DICompositeType(tag: DW_TAG_structure_type, name: "Record", file: !4, line: 148, size: 448, align: 64, elements: !16)
!16 = !{!17, !19, !21, !22, !25}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "PtrComp", scope: !15, file: !4, line: 149, baseType: !18, size: 64, align: 64)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64, align: 64)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "Discr", scope: !15, file: !4, line: 150, baseType: !20, size: 32, align: 32, offset: 64)
!20 = !DIDerivedType(tag: DW_TAG_typedef, name: "Enumeration", file: !4, line: 138, baseType: !3)
!21 = !DIDerivedType(tag: DW_TAG_member, name: "EnumComp", scope: !15, file: !4, line: 151, baseType: !20, size: 32, align: 32, offset: 96)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "IntComp", scope: !15, file: !4, line: 152, baseType: !23, size: 64, align: 64, offset: 128)
!23 = !DIDerivedType(tag: DW_TAG_typedef, name: "OneToFifty", file: !4, line: 142, baseType: !24)
!24 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "StringComp", scope: !15, file: !4, line: 153, baseType: !26, size: 248, align: 8, offset: 192)
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "String30", file: !4, line: 144, baseType: !27)
!27 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 248, align: 8, elements: !29)
!28 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!29 = !{!30}
!30 = !DISubrange(count: 31)
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!32 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!33 = !{!34, !40, !43, !46, !50, !54, !55, !56, !60, !63, !71, !75, !79}
!34 = !DISubprogram(name: "main", scope: !4, file: !4, line: 190, type: !35, isLocal: false, isDefinition: true, scopeLine: 192, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !39)
!35 = !DISubroutineType(types: !36)
!36 = !{!32, !32, !37}
!37 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !38, size: 64, align: 64)
!38 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64, align: 64)
!39 = !{}
!40 = !DISubprogram(name: "Proc0", scope: !4, file: !4, line: 212, type: !41, isLocal: false, isDefinition: true, scopeLine: 212, isOptimized: false, function: i32 ()* @Proc0, variables: !39)
!41 = !DISubroutineType(types: !42)
!42 = !{!32}
!43 = !DISubprogram(name: "Proc1", scope: !4, file: !4, line: 341, type: !44, isLocal: false, isDefinition: true, scopeLine: 343, isOptimized: false, function: i32 (%struct.Record*)* @Proc1, variables: !39)
!44 = !DISubroutineType(types: !45)
!45 = !{!32, !12}
!46 = !DISubprogram(name: "Proc2", scope: !4, file: !4, line: 365, type: !47, isLocal: false, isDefinition: true, scopeLine: 367, isOptimized: false, function: i32 (double*)* @Proc2, variables: !39)
!47 = !DISubroutineType(types: !48)
!48 = !{!32, !49}
!49 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64, align: 64)
!50 = !DISubprogram(name: "Proc3", scope: !4, file: !4, line: 383, type: !51, isLocal: false, isDefinition: true, scopeLine: 385, isOptimized: false, function: i32 (%struct.Record**)* @Proc3, variables: !39)
!51 = !DISubroutineType(types: !52)
!52 = !{!32, !53}
!53 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!54 = !DISubprogram(name: "Proc4", scope: !4, file: !4, line: 393, type: !41, isLocal: false, isDefinition: true, scopeLine: 393, isOptimized: false, function: i32 ()* @Proc4, variables: !39)
!55 = !DISubprogram(name: "Proc5", scope: !4, file: !4, line: 401, type: !41, isLocal: false, isDefinition: true, scopeLine: 401, isOptimized: false, function: i32 ()* @Proc5, variables: !39)
!56 = !DISubprogram(name: "Proc6", scope: !4, file: !4, line: 408, type: !57, isLocal: false, isDefinition: true, scopeLine: 411, isOptimized: false, function: i32 (i32, i32*)* @Proc6, variables: !39)
!57 = !DISubroutineType(types: !58)
!58 = !{!32, !20, !59}
!59 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64, align: 64)
!60 = !DISubprogram(name: "Proc7", scope: !4, file: !4, line: 435, type: !61, isLocal: false, isDefinition: true, scopeLine: 439, isOptimized: false, function: i32 (double, double, double*)* @Proc7, variables: !39)
!61 = !DISubroutineType(types: !62)
!62 = !{!32, !23, !23, !49}
!63 = !DISubprogram(name: "Proc8", scope: !4, file: !4, line: 446, type: !64, isLocal: false, isDefinition: true, scopeLine: 451, isOptimized: false, function: i32 (double*, [51 x double]*, double, double)* @Proc8, variables: !39)
!64 = !DISubroutineType(types: !65)
!65 = !{!32, !66, !67, !23, !23}
!66 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64, align: 64)
!67 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !68, size: 64, align: 64)
!68 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 3264, align: 64, elements: !69)
!69 = !{!70}
!70 = !DISubrange(count: 51)
!71 = !DISubprogram(name: "Func1", scope: !4, file: !4, line: 466, type: !72, isLocal: false, isDefinition: true, scopeLine: 469, isOptimized: false, function: i32 (i32, i32)* @Func1, variables: !39)
!72 = !DISubroutineType(types: !73)
!73 = !{!20, !74, !74}
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "CapitalLetter", file: !4, line: 143, baseType: !28)
!75 = !DISubprogram(name: "Func2", scope: !4, file: !4, line: 481, type: !76, isLocal: false, isDefinition: true, scopeLine: 484, isOptimized: false, function: i32 (i8*, i8*)* @Func2, variables: !39)
!76 = !DISubroutineType(types: !77)
!77 = !{!78, !38, !38}
!78 = !DIDerivedType(tag: DW_TAG_typedef, name: "boolean", file: !4, line: 158, baseType: !32)
!79 = !DISubprogram(name: "Func3", scope: !4, file: !4, line: 507, type: !80, isLocal: false, isDefinition: true, scopeLine: 509, isOptimized: false, function: i32 (i32)* @Func3, variables: !39)
!80 = !DISubroutineType(types: !81)
!81 = !{!78, !20}
!82 = !{!83, !87, !88, !89, !90, !91, !93, !97, !98}
!83 = !DIGlobalVariable(name: "Version", scope: !0, file: !4, line: 117, type: !84, isLocal: false, isDefinition: true, variable: [4 x i8]* @Version)
!84 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 32, align: 8, elements: !85)
!85 = !{!86}
!86 = !DISubrange(count: 4)
!87 = !DIGlobalVariable(name: "IntGlob", scope: !0, file: !4, line: 203, type: !24, isLocal: false, isDefinition: true, variable: double* @IntGlob)
!88 = !DIGlobalVariable(name: "BoolGlob", scope: !0, file: !4, line: 204, type: !78, isLocal: false, isDefinition: true, variable: i32* @BoolGlob)
!89 = !DIGlobalVariable(name: "Char1Glob", scope: !0, file: !4, line: 205, type: !28, isLocal: false, isDefinition: true, variable: i8* @Char1Glob)
!90 = !DIGlobalVariable(name: "Char2Glob", scope: !0, file: !4, line: 206, type: !28, isLocal: false, isDefinition: true, variable: i8* @Char2Glob)
!91 = !DIGlobalVariable(name: "Array1Glob", scope: !0, file: !4, line: 207, type: !92, isLocal: false, isDefinition: true, variable: [51 x double]* @Array1Glob)
!92 = !DIDerivedType(tag: DW_TAG_typedef, name: "Array1Dim", file: !4, line: 145, baseType: !68)
!93 = !DIGlobalVariable(name: "Array2Glob", scope: !0, file: !4, line: 208, type: !94, isLocal: false, isDefinition: true, variable: [51 x [51 x double]]* @Array2Glob)
!94 = !DIDerivedType(tag: DW_TAG_typedef, name: "Array2Dim", file: !4, line: 146, baseType: !95)
!95 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 166464, align: 64, elements: !96)
!96 = !{!70, !70}
!97 = !DIGlobalVariable(name: "PtrGlb", scope: !0, file: !4, line: 209, type: !12, isLocal: false, isDefinition: true, variable: %struct.Record** @PtrGlb)
!98 = !DIGlobalVariable(name: "PtrGlbNext", scope: !0, file: !4, line: 210, type: !12, isLocal: false, isDefinition: true, variable: %struct.Record** @PtrGlbNext)
!99 = !{i32 2, !"Dwarf Version", i32 4}
!100 = !{i32 2, !"Debug Info Version", i32 3}
!101 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!102 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !34, file: !4, line: 190, type: !32)
!103 = !DIExpression()
!104 = !DILocation(line: 190, column: 26, scope: !34)
!105 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !34, file: !4, line: 191, type: !37)
!106 = !DILocation(line: 191, column: 8, scope: !34)
!107 = !DILocation(line: 193, column: 3, scope: !34)
!108 = !DILocation(line: 196, column: 3, scope: !34)
!109 = !DILocation(line: 197, column: 3, scope: !34)
!110 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc1", scope: !40, file: !4, line: 213, type: !23)
!111 = !DILocation(line: 213, column: 14, scope: !40)
!112 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc2", scope: !40, file: !4, line: 214, type: !23)
!113 = !DILocation(line: 214, column: 18, scope: !40)
!114 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc3", scope: !40, file: !4, line: 215, type: !23)
!115 = !DILocation(line: 215, column: 14, scope: !40)
!116 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "CharLoc", scope: !40, file: !4, line: 216, type: !28)
!117 = !DILocation(line: 216, column: 12, scope: !40)
!118 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "CharIndex", scope: !40, file: !4, line: 217, type: !28)
!119 = !DILocation(line: 217, column: 12, scope: !40)
!120 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "EnumLoc", scope: !40, file: !4, line: 218, type: !20)
!121 = !DILocation(line: 218, column: 15, scope: !40)
!122 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "String1Loc", scope: !40, file: !4, line: 219, type: !26)
!123 = !DILocation(line: 219, column: 12, scope: !40)
!124 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "String2Loc", scope: !40, file: !4, line: 220, type: !26)
!125 = !DILocation(line: 220, column: 12, scope: !40)
!126 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !40, file: !4, line: 221, type: !127)
!127 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!128 = !DILocation(line: 221, column: 25, scope: !40)
!129 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "starttime", scope: !40, file: !4, line: 224, type: !130)
!130 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!131 = !DILocation(line: 224, column: 8, scope: !40)
!132 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "benchtime", scope: !40, file: !4, line: 225, type: !130)
!133 = !DILocation(line: 225, column: 8, scope: !40)
!134 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "nulltime", scope: !40, file: !4, line: 226, type: !130)
!135 = !DILocation(line: 226, column: 8, scope: !40)
!136 = !DILocation(line: 228, column: 15, scope: !40)
!137 = !DILocation(line: 228, column: 13, scope: !40)
!138 = !DILocation(line: 229, column: 10, scope: !139)
!139 = distinct !DILexicalBlock(scope: !40, file: !4, line: 229, column: 3)
!140 = !DILocation(line: 229, column: 8, scope: !139)
!141 = !DILocation(line: 229, column: 15, scope: !142)
!142 = !DILexicalBlockFile(scope: !143, file: !4, discriminator: 4)
!143 = !DILexicalBlockFile(scope: !144, file: !4, discriminator: 1)
!144 = distinct !DILexicalBlock(scope: !139, file: !4, line: 229, column: 3)
!145 = !DILocation(line: 229, column: 17, scope: !144)
!146 = !DILocation(line: 229, column: 3, scope: !139)
!147 = !DILocation(line: 229, column: 3, scope: !148)
!148 = !DILexicalBlockFile(scope: !139, file: !4, discriminator: 2)
!149 = !DILocation(line: 229, column: 26, scope: !150)
!150 = !DILexicalBlockFile(scope: !144, file: !4, discriminator: 3)
!151 = !DILocation(line: 229, column: 3, scope: !144)
!152 = !DILocation(line: 231, column: 14, scope: !40)
!153 = !DILocation(line: 231, column: 24, scope: !40)
!154 = !DILocation(line: 231, column: 22, scope: !40)
!155 = !DILocation(line: 231, column: 12, scope: !40)
!156 = !DILocation(line: 258, column: 27, scope: !40)
!157 = !DILocation(line: 258, column: 16, scope: !40)
!158 = !DILocation(line: 258, column: 14, scope: !40)
!159 = !DILocation(line: 259, column: 23, scope: !40)
!160 = !DILocation(line: 259, column: 12, scope: !40)
!161 = !DILocation(line: 259, column: 10, scope: !40)
!162 = !DILocation(line: 260, column: 21, scope: !40)
!163 = !DILocation(line: 260, column: 3, scope: !40)
!164 = !DILocation(line: 260, column: 11, scope: !40)
!165 = !DILocation(line: 260, column: 19, scope: !40)
!166 = !DILocation(line: 261, column: 3, scope: !40)
!167 = !DILocation(line: 261, column: 11, scope: !40)
!168 = !DILocation(line: 261, column: 17, scope: !40)
!169 = !DILocation(line: 262, column: 3, scope: !40)
!170 = !DILocation(line: 262, column: 11, scope: !40)
!171 = !DILocation(line: 262, column: 20, scope: !40)
!172 = !DILocation(line: 263, column: 3, scope: !40)
!173 = !DILocation(line: 263, column: 11, scope: !40)
!174 = !DILocation(line: 263, column: 19, scope: !40)
!175 = !DILocation(line: 264, column: 10, scope: !40)
!176 = !DILocation(line: 264, column: 18, scope: !40)
!177 = !DILocation(line: 264, column: 3, scope: !40)
!178 = !DILocation(line: 266, column: 10, scope: !40)
!179 = !DILocation(line: 266, column: 3, scope: !40)
!180 = !DILocation(line: 268, column: 20, scope: !40)
!181 = !DILocation(line: 274, column: 15, scope: !40)
!182 = !DILocation(line: 274, column: 13, scope: !40)
!183 = !DILocation(line: 283, column: 10, scope: !184)
!184 = distinct !DILexicalBlock(scope: !40, file: !4, line: 283, column: 3)
!185 = !DILocation(line: 283, column: 8, scope: !184)
!186 = !DILocation(line: 283, column: 15, scope: !187)
!187 = !DILexicalBlockFile(scope: !188, file: !4, discriminator: 2)
!188 = !DILexicalBlockFile(scope: !189, file: !4, discriminator: 1)
!189 = distinct !DILexicalBlock(scope: !184, file: !4, line: 283, column: 3)
!190 = !DILocation(line: 283, column: 17, scope: !189)
!191 = !DILocation(line: 283, column: 3, scope: !184)
!192 = !DILocation(line: 284, column: 5, scope: !193)
!193 = distinct !DILexicalBlock(scope: !189, file: !4, line: 283, column: 31)
!194 = !DILocation(line: 285, column: 5, scope: !193)
!195 = !DILocation(line: 286, column: 13, scope: !193)
!196 = !DILocation(line: 287, column: 13, scope: !193)
!197 = !DILocation(line: 288, column: 12, scope: !193)
!198 = !DILocation(line: 288, column: 5, scope: !193)
!199 = !DILocation(line: 289, column: 13, scope: !193)
!200 = !DILocation(line: 290, column: 23, scope: !193)
!201 = !DILocation(line: 290, column: 35, scope: !193)
!202 = !DILocation(line: 290, column: 17, scope: !193)
!203 = !DILocation(line: 290, column: 16, scope: !193)
!204 = !DILocation(line: 290, column: 14, scope: !193)
!205 = !DILocation(line: 291, column: 5, scope: !193)
!206 = !DILocation(line: 291, column: 12, scope: !207)
!207 = !DILexicalBlockFile(scope: !208, file: !4, discriminator: 2)
!208 = !DILexicalBlockFile(scope: !193, file: !4, discriminator: 1)
!209 = !DILocation(line: 291, column: 22, scope: !193)
!210 = !DILocation(line: 291, column: 20, scope: !193)
!211 = !DILocation(line: 292, column: 23, scope: !212)
!212 = distinct !DILexicalBlock(scope: !193, file: !4, line: 291, column: 31)
!213 = !DILocation(line: 292, column: 21, scope: !212)
!214 = !DILocation(line: 292, column: 33, scope: !212)
!215 = !DILocation(line: 292, column: 31, scope: !212)
!216 = !DILocation(line: 292, column: 15, scope: !212)
!217 = !DILocation(line: 293, column: 13, scope: !212)
!218 = !DILocation(line: 293, column: 22, scope: !212)
!219 = !DILocation(line: 293, column: 7, scope: !212)
!220 = !DILocation(line: 294, column: 7, scope: !212)
!221 = !DILocation(line: 296, column: 35, scope: !193)
!222 = !DILocation(line: 296, column: 44, scope: !193)
!223 = !DILocation(line: 296, column: 5, scope: !193)
!224 = !DILocation(line: 297, column: 11, scope: !193)
!225 = !DILocation(line: 297, column: 5, scope: !193)
!226 = !DILocation(line: 298, column: 20, scope: !227)
!227 = distinct !DILexicalBlock(scope: !193, file: !4, line: 298, column: 5)
!228 = !DILocation(line: 298, column: 10, scope: !227)
!229 = !DILocation(line: 298, column: 27, scope: !230)
!230 = !DILexicalBlockFile(scope: !231, file: !4, discriminator: 2)
!231 = !DILexicalBlockFile(scope: !232, file: !4, discriminator: 1)
!232 = distinct !DILexicalBlock(scope: !227, file: !4, line: 298, column: 5)
!233 = !DILocation(line: 298, column: 40, scope: !232)
!234 = !DILocation(line: 298, column: 37, scope: !232)
!235 = !DILocation(line: 298, column: 5, scope: !227)
!236 = !DILocation(line: 299, column: 11, scope: !237)
!237 = distinct !DILexicalBlock(scope: !232, file: !4, line: 299, column: 11)
!238 = !DILocation(line: 299, column: 28, scope: !237)
!239 = !DILocation(line: 299, column: 22, scope: !237)
!240 = !DILocation(line: 299, column: 19, scope: !237)
!241 = !DILocation(line: 299, column: 11, scope: !232)
!242 = !DILocation(line: 300, column: 9, scope: !237)
!243 = !DILocation(line: 299, column: 42, scope: !244)
!244 = !DILexicalBlockFile(scope: !237, file: !4, discriminator: 1)
!245 = !DILocation(line: 298, column: 51, scope: !232)
!246 = !DILocation(line: 298, column: 5, scope: !232)
!247 = !DILocation(line: 301, column: 15, scope: !193)
!248 = !DILocation(line: 301, column: 25, scope: !193)
!249 = !DILocation(line: 301, column: 23, scope: !193)
!250 = !DILocation(line: 301, column: 13, scope: !193)
!251 = !DILocation(line: 302, column: 15, scope: !193)
!252 = !DILocation(line: 302, column: 25, scope: !193)
!253 = !DILocation(line: 302, column: 23, scope: !193)
!254 = !DILocation(line: 302, column: 13, scope: !193)
!255 = !DILocation(line: 303, column: 22, scope: !193)
!256 = !DILocation(line: 303, column: 32, scope: !193)
!257 = !DILocation(line: 303, column: 30, scope: !193)
!258 = !DILocation(line: 303, column: 19, scope: !193)
!259 = !DILocation(line: 303, column: 43, scope: !193)
!260 = !DILocation(line: 303, column: 41, scope: !193)
!261 = !DILocation(line: 303, column: 13, scope: !193)
!262 = !DILocation(line: 304, column: 5, scope: !193)
!263 = !DILocation(line: 305, column: 3, scope: !193)
!264 = !DILocation(line: 283, column: 26, scope: !189)
!265 = !DILocation(line: 283, column: 3, scope: !189)
!266 = !DILocation(line: 339, column: 1, scope: !40)
!267 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "PtrParIn", arg: 1, scope: !43, file: !4, line: 342, type: !12)
!268 = !DILocation(line: 342, column: 19, scope: !43)
!269 = !DILocation(line: 347, column: 3, scope: !43)
!270 = !DILocation(line: 347, column: 13, scope: !43)
!271 = !DILocation(line: 347, column: 21, scope: !43)
!272 = !DILocation(line: 348, column: 24, scope: !43)
!273 = !DILocation(line: 348, column: 34, scope: !43)
!274 = !DILocation(line: 348, column: 3, scope: !43)
!275 = !DILocation(line: 348, column: 14, scope: !43)
!276 = !DILocation(line: 348, column: 22, scope: !43)
!277 = !DILocation(line: 349, column: 24, scope: !43)
!278 = !DILocation(line: 349, column: 34, scope: !43)
!279 = !DILocation(line: 349, column: 3, scope: !43)
!280 = !DILocation(line: 349, column: 14, scope: !43)
!281 = !DILocation(line: 349, column: 22, scope: !43)
!282 = !DILocation(line: 363, column: 1, scope: !43)
!283 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParIO", arg: 1, scope: !46, file: !4, line: 366, type: !49)
!284 = !DILocation(line: 366, column: 17, scope: !46)
!285 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc", scope: !46, file: !4, line: 368, type: !23)
!286 = !DILocation(line: 368, column: 18, scope: !46)
!287 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "EnumLoc", scope: !46, file: !4, line: 369, type: !20)
!288 = !DILocation(line: 369, column: 19, scope: !46)
!289 = !DILocation(line: 371, column: 13, scope: !46)
!290 = !DILocation(line: 371, column: 12, scope: !46)
!291 = !DILocation(line: 371, column: 22, scope: !46)
!292 = !DILocation(line: 371, column: 10, scope: !46)
!293 = !DILocation(line: 372, column: 3, scope: !46)
!294 = !DILocation(line: 373, column: 9, scope: !295)
!295 = distinct !DILexicalBlock(scope: !296, file: !4, line: 373, column: 9)
!296 = distinct !DILexicalBlock(scope: !297, file: !4, line: 372, column: 12)
!297 = distinct !DILexicalBlock(scope: !298, file: !4, line: 372, column: 3)
!298 = distinct !DILexicalBlock(scope: !46, file: !4, line: 372, column: 3)
!299 = !DILocation(line: 373, column: 19, scope: !295)
!300 = !DILocation(line: 373, column: 9, scope: !296)
!301 = !DILocation(line: 374, column: 7, scope: !302)
!302 = distinct !DILexicalBlock(scope: !295, file: !4, line: 373, column: 27)
!303 = !DILocation(line: 375, column: 19, scope: !302)
!304 = !DILocation(line: 375, column: 28, scope: !302)
!305 = !DILocation(line: 375, column: 26, scope: !302)
!306 = !DILocation(line: 375, column: 8, scope: !302)
!307 = !DILocation(line: 375, column: 17, scope: !302)
!308 = !DILocation(line: 376, column: 15, scope: !302)
!309 = !DILocation(line: 377, column: 5, scope: !302)
!310 = !DILocation(line: 378, column: 9, scope: !311)
!311 = distinct !DILexicalBlock(scope: !296, file: !4, line: 378, column: 9)
!312 = !DILocation(line: 378, column: 17, scope: !311)
!313 = !DILocation(line: 378, column: 9, scope: !296)
!314 = !DILocation(line: 379, column: 7, scope: !311)
!315 = !DILocation(line: 372, column: 3, scope: !297)
!316 = !DILocation(line: 381, column: 1, scope: !46)
!317 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "PtrParOut", arg: 1, scope: !50, file: !4, line: 384, type: !53)
!318 = !DILocation(line: 384, column: 16, scope: !50)
!319 = !DILocation(line: 386, column: 7, scope: !320)
!320 = distinct !DILexicalBlock(scope: !50, file: !4, line: 386, column: 7)
!321 = !DILocation(line: 386, column: 14, scope: !320)
!322 = !DILocation(line: 386, column: 7, scope: !50)
!323 = !DILocation(line: 387, column: 18, scope: !320)
!324 = !DILocation(line: 387, column: 26, scope: !320)
!325 = !DILocation(line: 387, column: 6, scope: !320)
!326 = !DILocation(line: 387, column: 16, scope: !320)
!327 = !DILocation(line: 387, column: 5, scope: !320)
!328 = !DILocation(line: 389, column: 13, scope: !320)
!329 = !DILocation(line: 390, column: 13, scope: !50)
!330 = !DILocation(line: 390, column: 23, scope: !50)
!331 = !DILocation(line: 390, column: 31, scope: !50)
!332 = !DILocation(line: 390, column: 3, scope: !50)
!333 = !DILocation(line: 391, column: 1, scope: !50)
!334 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "BoolLoc", scope: !54, file: !4, line: 394, type: !78)
!335 = !DILocation(line: 394, column: 15, scope: !54)
!336 = !DILocation(line: 396, column: 13, scope: !54)
!337 = !DILocation(line: 396, column: 23, scope: !54)
!338 = !DILocation(line: 396, column: 11, scope: !54)
!339 = !DILocation(line: 397, column: 14, scope: !54)
!340 = !DILocation(line: 397, column: 11, scope: !54)
!341 = !DILocation(line: 398, column: 13, scope: !54)
!342 = !DILocation(line: 399, column: 1, scope: !54)
!343 = !DILocation(line: 402, column: 13, scope: !55)
!344 = !DILocation(line: 403, column: 12, scope: !55)
!345 = !DILocation(line: 404, column: 1, scope: !55)
!346 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "EnumParIn", arg: 1, scope: !56, file: !4, line: 409, type: !20)
!347 = !DILocation(line: 409, column: 21, scope: !56)
!348 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "EnumParOut", arg: 2, scope: !56, file: !4, line: 410, type: !59)
!349 = !DILocation(line: 410, column: 18, scope: !56)
!350 = !DILocation(line: 412, column: 17, scope: !56)
!351 = !DILocation(line: 412, column: 4, scope: !56)
!352 = !DILocation(line: 412, column: 15, scope: !56)
!353 = !DILocation(line: 413, column: 14, scope: !354)
!354 = distinct !DILexicalBlock(scope: !56, file: !4, line: 413, column: 7)
!355 = !DILocation(line: 413, column: 8, scope: !354)
!356 = !DILocation(line: 413, column: 7, scope: !56)
!357 = !DILocation(line: 414, column: 6, scope: !354)
!358 = !DILocation(line: 414, column: 17, scope: !354)
!359 = !DILocation(line: 414, column: 5, scope: !354)
!360 = !DILocation(line: 415, column: 11, scope: !56)
!361 = !DILocation(line: 415, column: 3, scope: !56)
!362 = !DILocation(line: 417, column: 6, scope: !363)
!363 = distinct !DILexicalBlock(scope: !56, file: !4, line: 415, column: 22)
!364 = !DILocation(line: 417, column: 17, scope: !363)
!365 = !DILocation(line: 418, column: 5, scope: !363)
!366 = !DILocation(line: 420, column: 9, scope: !367)
!367 = distinct !DILexicalBlock(scope: !363, file: !4, line: 420, column: 9)
!368 = !DILocation(line: 420, column: 17, scope: !367)
!369 = !DILocation(line: 420, column: 9, scope: !363)
!370 = !DILocation(line: 421, column: 8, scope: !367)
!371 = !DILocation(line: 421, column: 19, scope: !367)
!372 = !DILocation(line: 421, column: 7, scope: !367)
!373 = !DILocation(line: 423, column: 8, scope: !367)
!374 = !DILocation(line: 423, column: 19, scope: !367)
!375 = !DILocation(line: 424, column: 5, scope: !363)
!376 = !DILocation(line: 426, column: 6, scope: !363)
!377 = !DILocation(line: 426, column: 17, scope: !363)
!378 = !DILocation(line: 427, column: 5, scope: !363)
!379 = !DILocation(line: 429, column: 5, scope: !363)
!380 = !DILocation(line: 431, column: 6, scope: !363)
!381 = !DILocation(line: 431, column: 17, scope: !363)
!382 = !DILocation(line: 432, column: 3, scope: !363)
!383 = !DILocation(line: 433, column: 1, scope: !56)
!384 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParI1", arg: 1, scope: !60, file: !4, line: 436, type: !23)
!385 = !DILocation(line: 436, column: 16, scope: !60)
!386 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParI2", arg: 2, scope: !60, file: !4, line: 437, type: !23)
!387 = !DILocation(line: 437, column: 12, scope: !60)
!388 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParOut", arg: 3, scope: !60, file: !4, line: 438, type: !49)
!389 = !DILocation(line: 438, column: 13, scope: !60)
!390 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc", scope: !60, file: !4, line: 440, type: !23)
!391 = !DILocation(line: 440, column: 18, scope: !60)
!392 = !DILocation(line: 442, column: 12, scope: !60)
!393 = !DILocation(line: 442, column: 21, scope: !60)
!394 = !DILocation(line: 442, column: 10, scope: !60)
!395 = !DILocation(line: 443, column: 16, scope: !60)
!396 = !DILocation(line: 443, column: 27, scope: !60)
!397 = !DILocation(line: 443, column: 25, scope: !60)
!398 = !DILocation(line: 443, column: 4, scope: !60)
!399 = !DILocation(line: 443, column: 14, scope: !60)
!400 = !DILocation(line: 444, column: 1, scope: !60)
!401 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "Array1Par", arg: 1, scope: !63, file: !4, line: 447, type: !66)
!402 = !DILocation(line: 447, column: 15, scope: !63)
!403 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "Array2Par", arg: 2, scope: !63, file: !4, line: 448, type: !67)
!404 = !DILocation(line: 448, column: 11, scope: !63)
!405 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParI1", arg: 3, scope: !63, file: !4, line: 449, type: !23)
!406 = !DILocation(line: 449, column: 12, scope: !63)
!407 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "IntParI2", arg: 4, scope: !63, file: !4, line: 450, type: !23)
!408 = !DILocation(line: 450, column: 12, scope: !63)
!409 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc", scope: !63, file: !4, line: 452, type: !23)
!410 = !DILocation(line: 452, column: 18, scope: !63)
!411 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntIndex", scope: !63, file: !4, line: 453, type: !23)
!412 = !DILocation(line: 453, column: 18, scope: !63)
!413 = !DILocation(line: 455, column: 12, scope: !63)
!414 = !DILocation(line: 455, column: 21, scope: !63)
!415 = !DILocation(line: 455, column: 10, scope: !63)
!416 = !DILocation(line: 456, column: 28, scope: !63)
!417 = !DILocation(line: 456, column: 18, scope: !63)
!418 = !DILocation(line: 456, column: 13, scope: !63)
!419 = !DILocation(line: 456, column: 3, scope: !63)
!420 = !DILocation(line: 456, column: 26, scope: !63)
!421 = !DILocation(line: 457, column: 47, scope: !63)
!422 = !DILocation(line: 457, column: 42, scope: !63)
!423 = !DILocation(line: 457, column: 32, scope: !63)
!424 = !DILocation(line: 457, column: 18, scope: !63)
!425 = !DILocation(line: 457, column: 13, scope: !63)
!426 = !DILocation(line: 457, column: 25, scope: !63)
!427 = !DILocation(line: 457, column: 3, scope: !63)
!428 = !DILocation(line: 457, column: 30, scope: !63)
!429 = !DILocation(line: 458, column: 33, scope: !63)
!430 = !DILocation(line: 458, column: 18, scope: !63)
!431 = !DILocation(line: 458, column: 13, scope: !63)
!432 = !DILocation(line: 458, column: 25, scope: !63)
!433 = !DILocation(line: 458, column: 3, scope: !63)
!434 = !DILocation(line: 458, column: 31, scope: !63)
!435 = !DILocation(line: 459, column: 19, scope: !436)
!436 = distinct !DILexicalBlock(scope: !63, file: !4, line: 459, column: 3)
!437 = !DILocation(line: 459, column: 17, scope: !436)
!438 = !DILocation(line: 459, column: 8, scope: !436)
!439 = !DILocation(line: 459, column: 27, scope: !440)
!440 = !DILexicalBlockFile(scope: !441, file: !4, discriminator: 2)
!441 = !DILexicalBlockFile(scope: !442, file: !4, discriminator: 1)
!442 = distinct !DILexicalBlock(scope: !436, file: !4, line: 459, column: 3)
!443 = !DILocation(line: 459, column: 40, scope: !442)
!444 = !DILocation(line: 459, column: 47, scope: !442)
!445 = !DILocation(line: 459, column: 36, scope: !442)
!446 = !DILocation(line: 459, column: 3, scope: !436)
!447 = !DILocation(line: 460, column: 45, scope: !442)
!448 = !DILocation(line: 460, column: 33, scope: !442)
!449 = !DILocation(line: 460, column: 28, scope: !442)
!450 = !DILocation(line: 460, column: 5, scope: !442)
!451 = !DILocation(line: 460, column: 20, scope: !442)
!452 = !DILocation(line: 460, column: 15, scope: !442)
!453 = !DILocation(line: 460, column: 43, scope: !442)
!454 = !DILocation(line: 459, column: 53, scope: !442)
!455 = !DILocation(line: 459, column: 3, scope: !442)
!456 = !DILocation(line: 461, column: 33, scope: !63)
!457 = !DILocation(line: 461, column: 28, scope: !63)
!458 = !DILocation(line: 461, column: 40, scope: !63)
!459 = !DILocation(line: 461, column: 5, scope: !63)
!460 = !DILocation(line: 461, column: 20, scope: !63)
!461 = !DILocation(line: 461, column: 15, scope: !63)
!462 = !DILocation(line: 461, column: 3, scope: !63)
!463 = !DILocation(line: 462, column: 61, scope: !63)
!464 = !DILocation(line: 462, column: 56, scope: !63)
!465 = !DILocation(line: 462, column: 46, scope: !63)
!466 = !DILocation(line: 462, column: 36, scope: !63)
!467 = !DILocation(line: 462, column: 31, scope: !63)
!468 = !DILocation(line: 462, column: 3, scope: !63)
!469 = !DILocation(line: 462, column: 18, scope: !63)
!470 = !DILocation(line: 462, column: 13, scope: !63)
!471 = !DILocation(line: 462, column: 25, scope: !63)
!472 = !DILocation(line: 462, column: 44, scope: !63)
!473 = !DILocation(line: 463, column: 11, scope: !63)
!474 = !DILocation(line: 464, column: 1, scope: !63)
!475 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "CharPar1", arg: 1, scope: !71, file: !4, line: 467, type: !74)
!476 = !DILocation(line: 467, column: 19, scope: !71)
!477 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "CharPar2", arg: 2, scope: !71, file: !4, line: 468, type: !74)
!478 = !DILocation(line: 468, column: 15, scope: !71)
!479 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "CharLoc1", scope: !71, file: !4, line: 470, type: !74)
!480 = !DILocation(line: 470, column: 21, scope: !71)
!481 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "CharLoc2", scope: !71, file: !4, line: 471, type: !74)
!482 = !DILocation(line: 471, column: 21, scope: !71)
!483 = !DILocation(line: 473, column: 14, scope: !71)
!484 = !DILocation(line: 473, column: 12, scope: !71)
!485 = !DILocation(line: 474, column: 14, scope: !71)
!486 = !DILocation(line: 474, column: 12, scope: !71)
!487 = !DILocation(line: 475, column: 7, scope: !488)
!488 = distinct !DILexicalBlock(scope: !71, file: !4, line: 475, column: 7)
!489 = !DILocation(line: 475, column: 19, scope: !488)
!490 = !DILocation(line: 475, column: 16, scope: !488)
!491 = !DILocation(line: 475, column: 7, scope: !71)
!492 = !DILocation(line: 476, column: 5, scope: !488)
!493 = !DILocation(line: 478, column: 5, scope: !488)
!494 = !DILocation(line: 479, column: 1, scope: !71)
!495 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "StrParI1", arg: 1, scope: !75, file: !4, line: 482, type: !38)
!496 = !DILocation(line: 482, column: 14, scope: !75)
!497 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "StrParI2", arg: 2, scope: !75, file: !4, line: 483, type: !38)
!498 = !DILocation(line: 483, column: 10, scope: !75)
!499 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "IntLoc", scope: !75, file: !4, line: 485, type: !500)
!500 = !DIDerivedType(tag: DW_TAG_typedef, name: "OneToThirty", file: !4, line: 141, baseType: !24)
!501 = !DILocation(line: 485, column: 19, scope: !75)
!502 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "CharLoc", scope: !75, file: !4, line: 486, type: !74)
!503 = !DILocation(line: 486, column: 21, scope: !75)
!504 = !DILocation(line: 488, column: 10, scope: !75)
!505 = !DILocation(line: 489, column: 3, scope: !75)
!506 = !DILocation(line: 489, column: 10, scope: !507)
!507 = !DILexicalBlockFile(scope: !508, file: !4, discriminator: 2)
!508 = !DILexicalBlockFile(scope: !75, file: !4, discriminator: 1)
!509 = !DILocation(line: 489, column: 17, scope: !75)
!510 = !DILocation(line: 490, column: 29, scope: !511)
!511 = distinct !DILexicalBlock(scope: !75, file: !4, line: 490, column: 9)
!512 = !DILocation(line: 490, column: 24, scope: !511)
!513 = !DILocation(line: 490, column: 15, scope: !511)
!514 = !DILocation(line: 490, column: 52, scope: !511)
!515 = !DILocation(line: 490, column: 47, scope: !511)
!516 = !DILocation(line: 490, column: 59, scope: !511)
!517 = !DILocation(line: 490, column: 38, scope: !511)
!518 = !DILocation(line: 490, column: 9, scope: !511)
!519 = !DILocation(line: 490, column: 65, scope: !511)
!520 = !DILocation(line: 490, column: 9, scope: !75)
!521 = !DILocation(line: 491, column: 15, scope: !522)
!522 = distinct !DILexicalBlock(scope: !511, file: !4, line: 490, column: 76)
!523 = !DILocation(line: 492, column: 7, scope: !522)
!524 = !DILocation(line: 493, column: 5, scope: !522)
!525 = !DILocation(line: 494, column: 7, scope: !526)
!526 = distinct !DILexicalBlock(scope: !75, file: !4, line: 494, column: 7)
!527 = !DILocation(line: 494, column: 15, scope: !526)
!528 = !DILocation(line: 494, column: 22, scope: !526)
!529 = !DILocation(line: 494, column: 25, scope: !530)
!530 = !DILexicalBlockFile(scope: !526, file: !4, discriminator: 1)
!531 = !DILocation(line: 494, column: 33, scope: !526)
!532 = !DILocation(line: 494, column: 7, scope: !75)
!533 = !DILocation(line: 495, column: 12, scope: !526)
!534 = !DILocation(line: 495, column: 5, scope: !526)
!535 = !DILocation(line: 496, column: 7, scope: !536)
!536 = distinct !DILexicalBlock(scope: !75, file: !4, line: 496, column: 7)
!537 = !DILocation(line: 496, column: 15, scope: !536)
!538 = !DILocation(line: 496, column: 7, scope: !75)
!539 = !DILocation(line: 497, column: 5, scope: !536)
!540 = !DILocation(line: 499, column: 16, scope: !541)
!541 = distinct !DILexicalBlock(scope: !542, file: !4, line: 499, column: 9)
!542 = distinct !DILexicalBlock(scope: !536, file: !4, line: 498, column: 8)
!543 = !DILocation(line: 499, column: 26, scope: !541)
!544 = !DILocation(line: 499, column: 9, scope: !541)
!545 = !DILocation(line: 499, column: 36, scope: !541)
!546 = !DILocation(line: 499, column: 9, scope: !542)
!547 = !DILocation(line: 500, column: 14, scope: !548)
!548 = distinct !DILexicalBlock(scope: !541, file: !4, line: 499, column: 41)
!549 = !DILocation(line: 501, column: 7, scope: !548)
!550 = !DILocation(line: 503, column: 7, scope: !541)
!551 = !DILocation(line: 505, column: 1, scope: !75)
!552 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "EnumParIn", arg: 1, scope: !79, file: !4, line: 508, type: !20)
!553 = !DILocation(line: 508, column: 21, scope: !79)
!554 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "EnumLoc", scope: !79, file: !4, line: 510, type: !20)
!555 = !DILocation(line: 510, column: 19, scope: !79)
!556 = !DILocation(line: 512, column: 13, scope: !79)
!557 = !DILocation(line: 512, column: 11, scope: !79)
!558 = !DILocation(line: 513, column: 7, scope: !559)
!559 = distinct !DILexicalBlock(scope: !79, file: !4, line: 513, column: 7)
!560 = !DILocation(line: 513, column: 15, scope: !559)
!561 = !DILocation(line: 513, column: 7, scope: !79)
!562 = !DILocation(line: 514, column: 5, scope: !559)
!563 = !DILocation(line: 515, column: 3, scope: !79)
!564 = !DILocation(line: 516, column: 1, scope: !79)
