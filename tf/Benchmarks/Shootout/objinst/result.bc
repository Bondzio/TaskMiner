; ModuleID = '/home/gleison/tf/Benchmarks/Shootout/objinst/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Toggle = type { i8, {}*, %struct.Toggle* (%struct.Toggle*)* }
%struct.NthToggle = type { %struct.Toggle, i32, i32 }

@.str = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind uwtable
define signext i8 @toggle_value(%struct.Toggle* %this) #0 {
entry:
  %this.addr = alloca %struct.Toggle*, align 8
  store %struct.Toggle* %this, %struct.Toggle** %this.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Toggle** %this.addr, metadata !64, metadata !65), !dbg !66
  %0 = load %struct.Toggle*, %struct.Toggle** %this.addr, align 8, !dbg !67
  %state = getelementptr inbounds %struct.Toggle, %struct.Toggle* %0, i32 0, i32 0, !dbg !68
  %1 = load i8, i8* %state, align 1, !dbg !68
  ret i8 %1, !dbg !69
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define %struct.Toggle* @toggle_activate(%struct.Toggle* %this) #0 {
entry:
  %this.addr = alloca %struct.Toggle*, align 8
  store %struct.Toggle* %this, %struct.Toggle** %this.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Toggle** %this.addr, metadata !70, metadata !65), !dbg !71
  %0 = load %struct.Toggle*, %struct.Toggle** %this.addr, align 8, !dbg !72
  %state = getelementptr inbounds %struct.Toggle, %struct.Toggle* %0, i32 0, i32 0, !dbg !73
  %1 = load i8, i8* %state, align 1, !dbg !73
  %tobool = icmp ne i8 %1, 0, !dbg !74
  %lnot = xor i1 %tobool, true, !dbg !74
  %lnot.ext = zext i1 %lnot to i32, !dbg !74
  %conv = trunc i32 %lnot.ext to i8, !dbg !74
  %2 = load %struct.Toggle*, %struct.Toggle** %this.addr, align 8, !dbg !75
  %state1 = getelementptr inbounds %struct.Toggle, %struct.Toggle* %2, i32 0, i32 0, !dbg !76
  store i8 %conv, i8* %state1, align 1, !dbg !77
  %3 = load %struct.Toggle*, %struct.Toggle** %this.addr, align 8, !dbg !78
  ret %struct.Toggle* %3, !dbg !79
}

; Function Attrs: nounwind uwtable
define %struct.Toggle* @init_Toggle(%struct.Toggle* %this, i8 signext %start_state) #0 {
entry:
  %this.addr = alloca %struct.Toggle*, align 8
  %start_state.addr = alloca i8, align 1
  store %struct.Toggle* %this, %struct.Toggle** %this.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Toggle** %this.addr, metadata !80, metadata !65), !dbg !81
  store i8 %start_state, i8* %start_state.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %start_state.addr, metadata !82, metadata !65), !dbg !83
  %0 = load i8, i8* %start_state.addr, align 1, !dbg !84
  %1 = load %struct.Toggle*, %struct.Toggle** %this.addr, align 8, !dbg !85
  %state = getelementptr inbounds %struct.Toggle, %struct.Toggle* %1, i32 0, i32 0, !dbg !86
  store i8 %0, i8* %state, align 1, !dbg !87
  %2 = load %struct.Toggle*, %struct.Toggle** %this.addr, align 8, !dbg !88
  %value = getelementptr inbounds %struct.Toggle, %struct.Toggle* %2, i32 0, i32 1, !dbg !89
  %value1 = bitcast {}** %value to i8 (%struct.Toggle*)**, !dbg !89
  store i8 (%struct.Toggle*)* @toggle_value, i8 (%struct.Toggle*)** %value1, align 8, !dbg !90
  %3 = load %struct.Toggle*, %struct.Toggle** %this.addr, align 8, !dbg !91
  %activate = getelementptr inbounds %struct.Toggle, %struct.Toggle* %3, i32 0, i32 2, !dbg !92
  store %struct.Toggle* (%struct.Toggle*)* @toggle_activate, %struct.Toggle* (%struct.Toggle*)** %activate, align 8, !dbg !93
  %4 = load %struct.Toggle*, %struct.Toggle** %this.addr, align 8, !dbg !94
  ret %struct.Toggle* %4, !dbg !95
}

; Function Attrs: nounwind uwtable
define %struct.Toggle* @new_Toggle(i8 signext %start_state) #0 {
entry:
  %start_state.addr = alloca i8, align 1
  %this = alloca %struct.Toggle*, align 8
  store i8 %start_state, i8* %start_state.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %start_state.addr, metadata !96, metadata !65), !dbg !97
  call void @llvm.dbg.declare(metadata %struct.Toggle** %this, metadata !98, metadata !65), !dbg !99
  %call = call noalias i8* @malloc(i64 24) #5, !dbg !100
  %0 = bitcast i8* %call to %struct.Toggle*, !dbg !101
  store %struct.Toggle* %0, %struct.Toggle** %this, align 8, !dbg !99
  %1 = load %struct.Toggle*, %struct.Toggle** %this, align 8, !dbg !102
  %2 = load i8, i8* %start_state.addr, align 1, !dbg !103
  %call1 = call %struct.Toggle* @init_Toggle(%struct.Toggle* %1, i8 signext %2), !dbg !104
  ret %struct.Toggle* %call1, !dbg !105
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind uwtable
define %struct.NthToggle* @nth_toggle_activate(%struct.NthToggle* %this) #0 {
entry:
  %this.addr = alloca %struct.NthToggle*, align 8
  store %struct.NthToggle* %this, %struct.NthToggle** %this.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.NthToggle** %this.addr, metadata !106, metadata !65), !dbg !107
  %0 = load %struct.NthToggle*, %struct.NthToggle** %this.addr, align 8, !dbg !108
  %counter = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %0, i32 0, i32 2, !dbg !110
  %1 = load i32, i32* %counter, align 4, !dbg !111
  %inc = add nsw i32 %1, 1, !dbg !111
  store i32 %inc, i32* %counter, align 4, !dbg !111
  %2 = load %struct.NthToggle*, %struct.NthToggle** %this.addr, align 8, !dbg !112
  %count_max = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %2, i32 0, i32 1, !dbg !113
  %3 = load i32, i32* %count_max, align 4, !dbg !113
  %cmp = icmp sge i32 %inc, %3, !dbg !114
  br i1 %cmp, label %if.then, label %if.end, !dbg !115

if.then:                                          ; preds = %entry
  %4 = load %struct.NthToggle*, %struct.NthToggle** %this.addr, align 8, !dbg !116
  %base = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %4, i32 0, i32 0, !dbg !118
  %state = getelementptr inbounds %struct.Toggle, %struct.Toggle* %base, i32 0, i32 0, !dbg !119
  %5 = load i8, i8* %state, align 1, !dbg !119
  %tobool = icmp ne i8 %5, 0, !dbg !120
  %lnot = xor i1 %tobool, true, !dbg !120
  %lnot.ext = zext i1 %lnot to i32, !dbg !120
  %conv = trunc i32 %lnot.ext to i8, !dbg !120
  %6 = load %struct.NthToggle*, %struct.NthToggle** %this.addr, align 8, !dbg !121
  %base1 = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %6, i32 0, i32 0, !dbg !122
  %state2 = getelementptr inbounds %struct.Toggle, %struct.Toggle* %base1, i32 0, i32 0, !dbg !123
  store i8 %conv, i8* %state2, align 1, !dbg !124
  %7 = load %struct.NthToggle*, %struct.NthToggle** %this.addr, align 8, !dbg !125
  %counter3 = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %7, i32 0, i32 2, !dbg !126
  store i32 0, i32* %counter3, align 4, !dbg !127
  br label %if.end, !dbg !128

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.NthToggle*, %struct.NthToggle** %this.addr, align 8, !dbg !129
  ret %struct.NthToggle* %8, !dbg !130
}

; Function Attrs: nounwind uwtable
define %struct.NthToggle* @init_NthToggle(%struct.NthToggle* %this, i32 %max_count) #0 {
entry:
  %this.addr = alloca %struct.NthToggle*, align 8
  %max_count.addr = alloca i32, align 4
  store %struct.NthToggle* %this, %struct.NthToggle** %this.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.NthToggle** %this.addr, metadata !131, metadata !65), !dbg !132
  store i32 %max_count, i32* %max_count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_count.addr, metadata !133, metadata !65), !dbg !134
  %0 = load i32, i32* %max_count.addr, align 4, !dbg !135
  %1 = load %struct.NthToggle*, %struct.NthToggle** %this.addr, align 8, !dbg !136
  %count_max = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %1, i32 0, i32 1, !dbg !137
  store i32 %0, i32* %count_max, align 4, !dbg !138
  %2 = load %struct.NthToggle*, %struct.NthToggle** %this.addr, align 8, !dbg !139
  %counter = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %2, i32 0, i32 2, !dbg !140
  store i32 0, i32* %counter, align 4, !dbg !141
  %3 = load %struct.NthToggle*, %struct.NthToggle** %this.addr, align 8, !dbg !142
  %base = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %3, i32 0, i32 0, !dbg !143
  %activate = getelementptr inbounds %struct.Toggle, %struct.Toggle* %base, i32 0, i32 2, !dbg !144
  store %struct.Toggle* (%struct.Toggle*)* bitcast (%struct.NthToggle* (%struct.NthToggle*)* @nth_toggle_activate to %struct.Toggle* (%struct.Toggle*)*), %struct.Toggle* (%struct.Toggle*)** %activate, align 8, !dbg !145
  %4 = load %struct.NthToggle*, %struct.NthToggle** %this.addr, align 8, !dbg !146
  ret %struct.NthToggle* %4, !dbg !147
}

; Function Attrs: nounwind uwtable
define %struct.NthToggle* @new_NthToggle(i8 signext %start_state, i32 %max_count) #0 {
entry:
  %start_state.addr = alloca i8, align 1
  %max_count.addr = alloca i32, align 4
  %this = alloca %struct.NthToggle*, align 8
  store i8 %start_state, i8* %start_state.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %start_state.addr, metadata !148, metadata !65), !dbg !149
  store i32 %max_count, i32* %max_count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_count.addr, metadata !150, metadata !65), !dbg !151
  call void @llvm.dbg.declare(metadata %struct.NthToggle** %this, metadata !152, metadata !65), !dbg !153
  %call = call noalias i8* @malloc(i64 32) #5, !dbg !154
  %0 = bitcast i8* %call to %struct.NthToggle*, !dbg !155
  store %struct.NthToggle* %0, %struct.NthToggle** %this, align 8, !dbg !153
  %1 = load %struct.NthToggle*, %struct.NthToggle** %this, align 8, !dbg !156
  %2 = bitcast %struct.NthToggle* %1 to %struct.Toggle*, !dbg !157
  %3 = load i8, i8* %start_state.addr, align 1, !dbg !158
  %call1 = call %struct.Toggle* @init_Toggle(%struct.Toggle* %2, i8 signext %3), !dbg !159
  %4 = bitcast %struct.Toggle* %call1 to %struct.NthToggle*, !dbg !160
  store %struct.NthToggle* %4, %struct.NthToggle** %this, align 8, !dbg !161
  %5 = load %struct.NthToggle*, %struct.NthToggle** %this, align 8, !dbg !162
  %6 = load i32, i32* %max_count.addr, align 4, !dbg !163
  %call2 = call %struct.NthToggle* @init_NthToggle(%struct.NthToggle* %5, i32 %6), !dbg !164
  ret %struct.NthToggle* %call2, !dbg !165
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %tog = alloca %struct.Toggle*, align 8
  %ntog = alloca %struct.NthToggle*, align 8
  %Msg = alloca i8*, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !166, metadata !65), !dbg !167
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !168, metadata !65), !dbg !169
  call void @llvm.dbg.declare(metadata i32* %i, metadata !170, metadata !65), !dbg !171
  call void @llvm.dbg.declare(metadata i32* %n, metadata !172, metadata !65), !dbg !173
  %0 = load i32, i32* %argc.addr, align 4, !dbg !174
  %cmp = icmp eq i32 %0, 2, !dbg !175
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !176

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !177
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 1, !dbg !177
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !177
  %call = call i32 @atoi(i8* %2) #6, !dbg !179
  br label %cond.end, !dbg !176

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !180

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 70000000, %cond.false ], !dbg !176
  store i32 %cond, i32* %n, align 4, !dbg !182
  call void @llvm.dbg.declare(metadata %struct.Toggle** %tog, metadata !185, metadata !65), !dbg !186
  call void @llvm.dbg.declare(metadata %struct.NthToggle** %ntog, metadata !187, metadata !65), !dbg !188
  %call1 = call %struct.Toggle* @new_Toggle(i8 signext 1), !dbg !189
  store %struct.Toggle* %call1, %struct.Toggle** %tog, align 8, !dbg !190
  store i32 0, i32* %i, align 4, !dbg !191
  br label %for.cond, !dbg !193

for.cond:                                         ; preds = %for.inc, %cond.end
  %3 = load i32, i32* %i, align 4, !dbg !194
  %cmp2 = icmp slt i32 %3, 5, !dbg !198
  br i1 %cmp2, label %for.body, label %for.end, !dbg !199

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Toggle*, %struct.Toggle** %tog, align 8, !dbg !200
  %activate = getelementptr inbounds %struct.Toggle, %struct.Toggle* %4, i32 0, i32 2, !dbg !202
  %5 = load %struct.Toggle* (%struct.Toggle*)*, %struct.Toggle* (%struct.Toggle*)** %activate, align 8, !dbg !202
  %6 = load %struct.Toggle*, %struct.Toggle** %tog, align 8, !dbg !203
  %call3 = call %struct.Toggle* %5(%struct.Toggle* %6), !dbg !200
  %value = getelementptr inbounds %struct.Toggle, %struct.Toggle* %call3, i32 0, i32 1, !dbg !204
  %value4 = bitcast {}** %value to i8 (%struct.Toggle*)**, !dbg !204
  %7 = load i8 (%struct.Toggle*)*, i8 (%struct.Toggle*)** %value4, align 8, !dbg !204
  %8 = load %struct.Toggle*, %struct.Toggle** %tog, align 8, !dbg !205
  %call5 = call signext i8 %7(%struct.Toggle* %8), !dbg !200
  %conv = sext i8 %call5 to i32, !dbg !206
  %tobool = icmp ne i32 %conv, 0, !dbg !206
  %cond6 = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), !dbg !206
  %call7 = call i32 @puts(i8* %cond6), !dbg !207
  br label %for.inc, !dbg !208

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !209
  %inc = add nsw i32 %9, 1, !dbg !209
  store i32 %inc, i32* %i, align 4, !dbg !209
  br label %for.cond, !dbg !210

for.end:                                          ; preds = %for.cond
  %10 = load %struct.Toggle*, %struct.Toggle** %tog, align 8, !dbg !211
  %11 = bitcast %struct.Toggle* %10 to i8*, !dbg !211
  call void @free(i8* %11) #5, !dbg !212
  store i32 0, i32* %i, align 4, !dbg !213
  br label %for.cond.8, !dbg !215

for.cond.8:                                       ; preds = %for.inc.13, %for.end
  %12 = load i32, i32* %i, align 4, !dbg !216
  %13 = load i32, i32* %n, align 4, !dbg !220
  %cmp9 = icmp slt i32 %12, %13, !dbg !221
  br i1 %cmp9, label %for.body.11, label %for.end.15, !dbg !222

for.body.11:                                      ; preds = %for.cond.8
  %call12 = call %struct.Toggle* @new_Toggle(i8 signext 1), !dbg !223
  store %struct.Toggle* %call12, %struct.Toggle** %tog, align 8, !dbg !225
  %14 = load %struct.Toggle*, %struct.Toggle** %tog, align 8, !dbg !226
  %15 = bitcast %struct.Toggle* %14 to i8*, !dbg !226
  call void @free(i8* %15) #5, !dbg !227
  br label %for.inc.13, !dbg !228

for.inc.13:                                       ; preds = %for.body.11
  %16 = load i32, i32* %i, align 4, !dbg !229
  %inc14 = add nsw i32 %16, 1, !dbg !229
  store i32 %inc14, i32* %i, align 4, !dbg !229
  br label %for.cond.8, !dbg !230

for.end.15:                                       ; preds = %for.cond.8
  %call16 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)), !dbg !231
  %call17 = call %struct.NthToggle* @new_NthToggle(i8 signext 1, i32 3), !dbg !232
  store %struct.NthToggle* %call17, %struct.NthToggle** %ntog, align 8, !dbg !233
  store i32 0, i32* %i, align 4, !dbg !234
  br label %for.cond.18, !dbg !236

for.cond.18:                                      ; preds = %for.inc.29, %for.end.15
  %17 = load i32, i32* %i, align 4, !dbg !237
  %cmp19 = icmp slt i32 %17, 8, !dbg !241
  br i1 %cmp19, label %for.body.21, label %for.end.31, !dbg !242

for.body.21:                                      ; preds = %for.cond.18
  call void @llvm.dbg.declare(metadata i8** %Msg, metadata !243, metadata !65), !dbg !247
  %18 = load %struct.NthToggle*, %struct.NthToggle** %ntog, align 8, !dbg !248
  %base = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %18, i32 0, i32 0, !dbg !250
  %activate22 = getelementptr inbounds %struct.Toggle, %struct.Toggle* %base, i32 0, i32 2, !dbg !251
  %19 = load %struct.Toggle* (%struct.Toggle*)*, %struct.Toggle* (%struct.Toggle*)** %activate22, align 8, !dbg !251
  %20 = load %struct.NthToggle*, %struct.NthToggle** %ntog, align 8, !dbg !252
  %21 = bitcast %struct.NthToggle* %20 to %struct.Toggle*, !dbg !253
  %call23 = call %struct.Toggle* %19(%struct.Toggle* %21), !dbg !248
  %value24 = getelementptr inbounds %struct.Toggle, %struct.Toggle* %call23, i32 0, i32 1, !dbg !254
  %value25 = bitcast {}** %value24 to i8 (%struct.Toggle*)**, !dbg !254
  %22 = load i8 (%struct.Toggle*)*, i8 (%struct.Toggle*)** %value25, align 8, !dbg !254
  %23 = load %struct.NthToggle*, %struct.NthToggle** %ntog, align 8, !dbg !255
  %24 = bitcast %struct.NthToggle* %23 to %struct.Toggle*, !dbg !256
  %call26 = call signext i8 %22(%struct.Toggle* %24), !dbg !248
  %tobool27 = icmp ne i8 %call26, 0, !dbg !248
  br i1 %tobool27, label %if.then, label %if.else, !dbg !257

if.then:                                          ; preds = %for.body.21
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8** %Msg, align 8, !dbg !258
  br label %if.end, !dbg !259

if.else:                                          ; preds = %for.body.21
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8** %Msg, align 8, !dbg !260
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %25 = load i8*, i8** %Msg, align 8, !dbg !261
  %call28 = call i32 @puts(i8* %25), !dbg !262
  br label %for.inc.29, !dbg !263

for.inc.29:                                       ; preds = %if.end
  %26 = load i32, i32* %i, align 4, !dbg !264
  %inc30 = add nsw i32 %26, 1, !dbg !264
  store i32 %inc30, i32* %i, align 4, !dbg !264
  br label %for.cond.18, !dbg !265

for.end.31:                                       ; preds = %for.cond.18
  %27 = load %struct.NthToggle*, %struct.NthToggle** %ntog, align 8, !dbg !266
  %28 = bitcast %struct.NthToggle* %27 to i8*, !dbg !266
  call void @free(i8* %28) #5, !dbg !267
  store i32 0, i32* %i, align 4, !dbg !268
  br label %for.cond.32, !dbg !270

for.cond.32:                                      ; preds = %for.inc.37, %for.end.31
  %29 = load i32, i32* %i, align 4, !dbg !271
  %30 = load i32, i32* %n, align 4, !dbg !275
  %cmp33 = icmp slt i32 %29, %30, !dbg !276
  br i1 %cmp33, label %for.body.35, label %for.end.39, !dbg !277

for.body.35:                                      ; preds = %for.cond.32
  %call36 = call %struct.NthToggle* @new_NthToggle(i8 signext 1, i32 3), !dbg !278
  store %struct.NthToggle* %call36, %struct.NthToggle** %ntog, align 8, !dbg !280
  %31 = load %struct.NthToggle*, %struct.NthToggle** %ntog, align 8, !dbg !281
  %32 = bitcast %struct.NthToggle* %31 to i8*, !dbg !281
  call void @free(i8* %32) #5, !dbg !282
  br label %for.inc.37, !dbg !283

for.inc.37:                                       ; preds = %for.body.35
  %33 = load i32, i32* %i, align 4, !dbg !284
  %inc38 = add nsw i32 %33, 1, !dbg !284
  store i32 %inc38, i32* %i, align 4, !dbg !284
  br label %for.cond.32, !dbg !285

for.end.39:                                       ; preds = %for.cond.32
  ret i32 0, !dbg !286
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #3

declare i32 @puts(i8*) #4

; Function Attrs: nounwind
declare void @free(i8*) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!61, !62}
!llvm.ident = !{!63}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !8, subprograms: !35)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/objinst")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 9, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Shootout/objinst/tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/objinst")
!5 = !{!6, !7}
!6 = !DIEnumerator(name: "false", value: 0)
!7 = !DIEnumerator(name: "true", value: 1)
!8 = !{!9, !24, !27}
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_typedef, name: "Toggle", file: !4, line: 21, baseType: !11)
!11 = !DICompositeType(tag: DW_TAG_structure_type, name: "Toggle", file: !4, line: 19, size: 192, align: 64, elements: !12)
!12 = !{!13, !15, !20}
!13 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !11, file: !4, line: 20, baseType: !14, size: 8, align: 8)
!14 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!15 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !11, file: !4, line: 20, baseType: !16, size: 64, align: 64, offset: 64)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, align: 64)
!17 = !DISubroutineType(types: !18)
!18 = !{!14, !19}
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "activate", scope: !11, file: !4, line: 20, baseType: !21, size: 64, align: 64, offset: 128)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64, align: 64)
!22 = !DISubroutineType(types: !23)
!23 = !{!19, !19}
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64, align: 64)
!25 = !DISubroutineType(types: !26)
!26 = !{!9, !9}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64, align: 64)
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "NthToggle", file: !4, line: 45, baseType: !29)
!29 = !DICompositeType(tag: DW_TAG_structure_type, name: "NthToggle", file: !4, line: 41, size: 256, align: 64, elements: !30)
!30 = !{!31, !32, !34}
!31 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !29, file: !4, line: 42, baseType: !10, size: 192, align: 64)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "count_max", scope: !29, file: !4, line: 43, baseType: !33, size: 32, align: 32, offset: 192)
!33 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "counter", scope: !29, file: !4, line: 44, baseType: !33, size: 32, align: 32, offset: 224)
!35 = !{!36, !40, !41, !44, !47, !50, !53, !56}
!36 = !DISubprogram(name: "toggle_value", scope: !4, file: !4, line: 23, type: !37, isLocal: false, isDefinition: true, scopeLine: 23, flags: DIFlagPrototyped, isOptimized: false, function: i8 (%struct.Toggle*)* @toggle_value, variables: !39)
!37 = !DISubroutineType(types: !38)
!38 = !{!14, !9}
!39 = !{}
!40 = !DISubprogram(name: "toggle_activate", scope: !4, file: !4, line: 26, type: !25, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, function: %struct.Toggle* (%struct.Toggle*)* @toggle_activate, variables: !39)
!41 = !DISubprogram(name: "init_Toggle", scope: !4, file: !4, line: 30, type: !42, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagPrototyped, isOptimized: false, function: %struct.Toggle* (%struct.Toggle*, i8)* @init_Toggle, variables: !39)
!42 = !DISubroutineType(types: !43)
!43 = !{!9, !9, !14}
!44 = !DISubprogram(name: "new_Toggle", scope: !4, file: !4, line: 36, type: !45, isLocal: false, isDefinition: true, scopeLine: 36, flags: DIFlagPrototyped, isOptimized: false, function: %struct.Toggle* (i8)* @new_Toggle, variables: !39)
!45 = !DISubroutineType(types: !46)
!46 = !{!9, !14}
!47 = !DISubprogram(name: "nth_toggle_activate", scope: !4, file: !4, line: 47, type: !48, isLocal: false, isDefinition: true, scopeLine: 47, flags: DIFlagPrototyped, isOptimized: false, function: %struct.NthToggle* (%struct.NthToggle*)* @nth_toggle_activate, variables: !39)
!48 = !DISubroutineType(types: !49)
!49 = !{!27, !27}
!50 = !DISubprogram(name: "init_NthToggle", scope: !4, file: !4, line: 54, type: !51, isLocal: false, isDefinition: true, scopeLine: 54, flags: DIFlagPrototyped, isOptimized: false, function: %struct.NthToggle* (%struct.NthToggle*, i32)* @init_NthToggle, variables: !39)
!51 = !DISubroutineType(types: !52)
!52 = !{!27, !27, !33}
!53 = !DISubprogram(name: "new_NthToggle", scope: !4, file: !4, line: 60, type: !54, isLocal: false, isDefinition: true, scopeLine: 60, flags: DIFlagPrototyped, isOptimized: false, function: %struct.NthToggle* (i8, i32)* @new_NthToggle, variables: !39)
!54 = !DISubroutineType(types: !55)
!55 = !{!27, !14, !33}
!56 = !DISubprogram(name: "main", scope: !4, file: !4, line: 66, type: !57, isLocal: false, isDefinition: true, scopeLine: 66, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !39)
!57 = !DISubroutineType(types: !58)
!58 = !{!33, !33, !59}
!59 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !60, size: 64, align: 64)
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!61 = !{i32 2, !"Dwarf Version", i32 4}
!62 = !{i32 2, !"Debug Info Version", i32 3}
!63 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!64 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "this", arg: 1, scope: !36, file: !4, line: 23, type: !9)
!65 = !DIExpression()
!66 = !DILocation(line: 23, column: 27, scope: !36)
!67 = !DILocation(line: 24, column: 11, scope: !36)
!68 = !DILocation(line: 24, column: 17, scope: !36)
!69 = !DILocation(line: 24, column: 3, scope: !36)
!70 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "this", arg: 1, scope: !40, file: !4, line: 26, type: !9)
!71 = !DILocation(line: 26, column: 33, scope: !40)
!72 = !DILocation(line: 27, column: 18, scope: !40)
!73 = !DILocation(line: 27, column: 24, scope: !40)
!74 = !DILocation(line: 27, column: 17, scope: !40)
!75 = !DILocation(line: 27, column: 3, scope: !40)
!76 = !DILocation(line: 27, column: 9, scope: !40)
!77 = !DILocation(line: 27, column: 15, scope: !40)
!78 = !DILocation(line: 28, column: 11, scope: !40)
!79 = !DILocation(line: 28, column: 3, scope: !40)
!80 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "this", arg: 1, scope: !41, file: !4, line: 30, type: !9)
!81 = !DILocation(line: 30, column: 29, scope: !41)
!82 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "start_state", arg: 2, scope: !41, file: !4, line: 30, type: !14)
!83 = !DILocation(line: 30, column: 40, scope: !41)
!84 = !DILocation(line: 31, column: 17, scope: !41)
!85 = !DILocation(line: 31, column: 3, scope: !41)
!86 = !DILocation(line: 31, column: 9, scope: !41)
!87 = !DILocation(line: 31, column: 15, scope: !41)
!88 = !DILocation(line: 32, column: 3, scope: !41)
!89 = !DILocation(line: 32, column: 9, scope: !41)
!90 = !DILocation(line: 32, column: 15, scope: !41)
!91 = !DILocation(line: 33, column: 3, scope: !41)
!92 = !DILocation(line: 33, column: 9, scope: !41)
!93 = !DILocation(line: 33, column: 18, scope: !41)
!94 = !DILocation(line: 34, column: 11, scope: !41)
!95 = !DILocation(line: 34, column: 3, scope: !41)
!96 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "start_state", arg: 1, scope: !44, file: !4, line: 36, type: !14)
!97 = !DILocation(line: 36, column: 25, scope: !44)
!98 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "this", scope: !44, file: !4, line: 37, type: !9)
!99 = !DILocation(line: 37, column: 11, scope: !44)
!100 = !DILocation(line: 37, column: 28, scope: !44)
!101 = !DILocation(line: 37, column: 18, scope: !44)
!102 = !DILocation(line: 38, column: 23, scope: !44)
!103 = !DILocation(line: 38, column: 29, scope: !44)
!104 = !DILocation(line: 38, column: 11, scope: !44)
!105 = !DILocation(line: 38, column: 3, scope: !44)
!106 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "this", arg: 1, scope: !47, file: !4, line: 47, type: !27)
!107 = !DILocation(line: 47, column: 43, scope: !47)
!108 = !DILocation(line: 48, column: 9, scope: !109)
!109 = distinct !DILexicalBlock(scope: !47, file: !4, line: 48, column: 7)
!110 = !DILocation(line: 48, column: 15, scope: !109)
!111 = !DILocation(line: 48, column: 7, scope: !109)
!112 = !DILocation(line: 48, column: 26, scope: !109)
!113 = !DILocation(line: 48, column: 32, scope: !109)
!114 = !DILocation(line: 48, column: 23, scope: !109)
!115 = !DILocation(line: 48, column: 7, scope: !47)
!116 = !DILocation(line: 49, column: 25, scope: !117)
!117 = distinct !DILexicalBlock(scope: !109, file: !4, line: 48, column: 43)
!118 = !DILocation(line: 49, column: 31, scope: !117)
!119 = !DILocation(line: 49, column: 36, scope: !117)
!120 = !DILocation(line: 49, column: 24, scope: !117)
!121 = !DILocation(line: 49, column: 5, scope: !117)
!122 = !DILocation(line: 49, column: 11, scope: !117)
!123 = !DILocation(line: 49, column: 16, scope: !117)
!124 = !DILocation(line: 49, column: 22, scope: !117)
!125 = !DILocation(line: 50, column: 5, scope: !117)
!126 = !DILocation(line: 50, column: 11, scope: !117)
!127 = !DILocation(line: 50, column: 19, scope: !117)
!128 = !DILocation(line: 51, column: 3, scope: !117)
!129 = !DILocation(line: 52, column: 11, scope: !47)
!130 = !DILocation(line: 52, column: 3, scope: !47)
!131 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "this", arg: 1, scope: !50, file: !4, line: 54, type: !27)
!132 = !DILocation(line: 54, column: 38, scope: !50)
!133 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "max_count", arg: 2, scope: !50, file: !4, line: 54, type: !33)
!134 = !DILocation(line: 54, column: 48, scope: !50)
!135 = !DILocation(line: 55, column: 21, scope: !50)
!136 = !DILocation(line: 55, column: 3, scope: !50)
!137 = !DILocation(line: 55, column: 9, scope: !50)
!138 = !DILocation(line: 55, column: 19, scope: !50)
!139 = !DILocation(line: 56, column: 3, scope: !50)
!140 = !DILocation(line: 56, column: 9, scope: !50)
!141 = !DILocation(line: 56, column: 17, scope: !50)
!142 = !DILocation(line: 57, column: 3, scope: !50)
!143 = !DILocation(line: 57, column: 9, scope: !50)
!144 = !DILocation(line: 57, column: 14, scope: !50)
!145 = !DILocation(line: 57, column: 23, scope: !50)
!146 = !DILocation(line: 58, column: 11, scope: !50)
!147 = !DILocation(line: 58, column: 3, scope: !50)
!148 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "start_state", arg: 1, scope: !53, file: !4, line: 60, type: !14)
!149 = !DILocation(line: 60, column: 31, scope: !53)
!150 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "max_count", arg: 2, scope: !53, file: !4, line: 60, type: !33)
!151 = !DILocation(line: 60, column: 48, scope: !53)
!152 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "this", scope: !53, file: !4, line: 61, type: !27)
!153 = !DILocation(line: 61, column: 14, scope: !53)
!154 = !DILocation(line: 61, column: 34, scope: !53)
!155 = !DILocation(line: 61, column: 21, scope: !53)
!156 = !DILocation(line: 62, column: 45, scope: !53)
!157 = !DILocation(line: 62, column: 35, scope: !53)
!158 = !DILocation(line: 62, column: 51, scope: !53)
!159 = !DILocation(line: 62, column: 23, scope: !53)
!160 = !DILocation(line: 62, column: 10, scope: !53)
!161 = !DILocation(line: 62, column: 8, scope: !53)
!162 = !DILocation(line: 63, column: 26, scope: !53)
!163 = !DILocation(line: 63, column: 32, scope: !53)
!164 = !DILocation(line: 63, column: 11, scope: !53)
!165 = !DILocation(line: 63, column: 3, scope: !53)
!166 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !56, file: !4, line: 66, type: !33)
!167 = !DILocation(line: 66, column: 14, scope: !56)
!168 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !56, file: !4, line: 66, type: !59)
!169 = !DILocation(line: 66, column: 26, scope: !56)
!170 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !56, file: !4, line: 72, type: !33)
!171 = !DILocation(line: 72, column: 7, scope: !56)
!172 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !56, file: !4, line: 72, type: !33)
!173 = !DILocation(line: 72, column: 10, scope: !56)
!174 = !DILocation(line: 72, column: 16, scope: !56)
!175 = !DILocation(line: 72, column: 21, scope: !56)
!176 = !DILocation(line: 72, column: 15, scope: !56)
!177 = !DILocation(line: 72, column: 34, scope: !178)
!178 = !DILexicalBlockFile(scope: !56, file: !4, discriminator: 1)
!179 = !DILocation(line: 72, column: 29, scope: !56)
!180 = !DILocation(line: 72, column: 15, scope: !181)
!181 = !DILexicalBlockFile(scope: !56, file: !4, discriminator: 2)
!182 = !DILocation(line: 72, column: 10, scope: !183)
!183 = !DILexicalBlockFile(scope: !184, file: !4, discriminator: 4)
!184 = !DILexicalBlockFile(scope: !56, file: !4, discriminator: 3)
!185 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tog", scope: !56, file: !4, line: 73, type: !9)
!186 = !DILocation(line: 73, column: 11, scope: !56)
!187 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ntog", scope: !56, file: !4, line: 74, type: !27)
!188 = !DILocation(line: 74, column: 14, scope: !56)
!189 = !DILocation(line: 76, column: 9, scope: !56)
!190 = !DILocation(line: 76, column: 7, scope: !56)
!191 = !DILocation(line: 77, column: 10, scope: !192)
!192 = distinct !DILexicalBlock(scope: !56, file: !4, line: 77, column: 3)
!193 = !DILocation(line: 77, column: 8, scope: !192)
!194 = !DILocation(line: 77, column: 15, scope: !195)
!195 = !DILexicalBlockFile(scope: !196, file: !4, discriminator: 2)
!196 = !DILexicalBlockFile(scope: !197, file: !4, discriminator: 1)
!197 = distinct !DILexicalBlock(scope: !192, file: !4, line: 77, column: 3)
!198 = !DILocation(line: 77, column: 17, scope: !197)
!199 = !DILocation(line: 77, column: 3, scope: !192)
!200 = !DILocation(line: 78, column: 11, scope: !201)
!201 = distinct !DILexicalBlock(scope: !197, file: !4, line: 77, column: 27)
!202 = !DILocation(line: 78, column: 16, scope: !201)
!203 = !DILocation(line: 78, column: 25, scope: !201)
!204 = !DILocation(line: 78, column: 31, scope: !201)
!205 = !DILocation(line: 78, column: 37, scope: !201)
!206 = !DILocation(line: 78, column: 10, scope: !201)
!207 = !DILocation(line: 78, column: 5, scope: !201)
!208 = !DILocation(line: 79, column: 3, scope: !201)
!209 = !DILocation(line: 77, column: 23, scope: !197)
!210 = !DILocation(line: 77, column: 3, scope: !197)
!211 = !DILocation(line: 80, column: 11, scope: !56)
!212 = !DILocation(line: 80, column: 3, scope: !56)
!213 = !DILocation(line: 81, column: 10, scope: !214)
!214 = distinct !DILexicalBlock(scope: !56, file: !4, line: 81, column: 3)
!215 = !DILocation(line: 81, column: 8, scope: !214)
!216 = !DILocation(line: 81, column: 15, scope: !217)
!217 = !DILexicalBlockFile(scope: !218, file: !4, discriminator: 2)
!218 = !DILexicalBlockFile(scope: !219, file: !4, discriminator: 1)
!219 = distinct !DILexicalBlock(scope: !214, file: !4, line: 81, column: 3)
!220 = !DILocation(line: 81, column: 19, scope: !219)
!221 = !DILocation(line: 81, column: 17, scope: !219)
!222 = !DILocation(line: 81, column: 3, scope: !214)
!223 = !DILocation(line: 82, column: 11, scope: !224)
!224 = distinct !DILexicalBlock(scope: !219, file: !4, line: 81, column: 27)
!225 = !DILocation(line: 82, column: 9, scope: !224)
!226 = !DILocation(line: 83, column: 13, scope: !224)
!227 = !DILocation(line: 83, column: 5, scope: !224)
!228 = !DILocation(line: 84, column: 3, scope: !224)
!229 = !DILocation(line: 81, column: 23, scope: !219)
!230 = !DILocation(line: 81, column: 3, scope: !219)
!231 = !DILocation(line: 86, column: 3, scope: !56)
!232 = !DILocation(line: 88, column: 10, scope: !56)
!233 = !DILocation(line: 88, column: 8, scope: !56)
!234 = !DILocation(line: 89, column: 10, scope: !235)
!235 = distinct !DILexicalBlock(scope: !56, file: !4, line: 89, column: 3)
!236 = !DILocation(line: 89, column: 8, scope: !235)
!237 = !DILocation(line: 89, column: 15, scope: !238)
!238 = !DILexicalBlockFile(scope: !239, file: !4, discriminator: 2)
!239 = !DILexicalBlockFile(scope: !240, file: !4, discriminator: 1)
!240 = distinct !DILexicalBlock(scope: !235, file: !4, line: 89, column: 3)
!241 = !DILocation(line: 89, column: 17, scope: !240)
!242 = !DILocation(line: 89, column: 3, scope: !235)
!243 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Msg", scope: !244, file: !4, line: 90, type: !245)
!244 = distinct !DILexicalBlock(scope: !240, file: !4, line: 89, column: 27)
!245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !246, size: 64, align: 64)
!246 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !14)
!247 = !DILocation(line: 90, column: 17, scope: !244)
!248 = !DILocation(line: 91, column: 9, scope: !249)
!249 = distinct !DILexicalBlock(scope: !244, file: !4, line: 91, column: 9)
!250 = !DILocation(line: 91, column: 15, scope: !249)
!251 = !DILocation(line: 91, column: 20, scope: !249)
!252 = !DILocation(line: 91, column: 39, scope: !249)
!253 = !DILocation(line: 91, column: 29, scope: !249)
!254 = !DILocation(line: 91, column: 46, scope: !249)
!255 = !DILocation(line: 91, column: 62, scope: !249)
!256 = !DILocation(line: 91, column: 52, scope: !249)
!257 = !DILocation(line: 91, column: 9, scope: !244)
!258 = !DILocation(line: 92, column: 11, scope: !249)
!259 = !DILocation(line: 92, column: 7, scope: !249)
!260 = !DILocation(line: 94, column: 11, scope: !249)
!261 = !DILocation(line: 95, column: 10, scope: !244)
!262 = !DILocation(line: 95, column: 5, scope: !244)
!263 = !DILocation(line: 96, column: 3, scope: !244)
!264 = !DILocation(line: 89, column: 23, scope: !240)
!265 = !DILocation(line: 89, column: 3, scope: !240)
!266 = !DILocation(line: 97, column: 11, scope: !56)
!267 = !DILocation(line: 97, column: 3, scope: !56)
!268 = !DILocation(line: 98, column: 10, scope: !269)
!269 = distinct !DILexicalBlock(scope: !56, file: !4, line: 98, column: 3)
!270 = !DILocation(line: 98, column: 8, scope: !269)
!271 = !DILocation(line: 98, column: 15, scope: !272)
!272 = !DILexicalBlockFile(scope: !273, file: !4, discriminator: 2)
!273 = !DILexicalBlockFile(scope: !274, file: !4, discriminator: 1)
!274 = distinct !DILexicalBlock(scope: !269, file: !4, line: 98, column: 3)
!275 = !DILocation(line: 98, column: 19, scope: !274)
!276 = !DILocation(line: 98, column: 17, scope: !274)
!277 = !DILocation(line: 98, column: 3, scope: !269)
!278 = !DILocation(line: 99, column: 12, scope: !279)
!279 = distinct !DILexicalBlock(scope: !274, file: !4, line: 98, column: 27)
!280 = !DILocation(line: 99, column: 10, scope: !279)
!281 = !DILocation(line: 100, column: 13, scope: !279)
!282 = !DILocation(line: 100, column: 5, scope: !279)
!283 = !DILocation(line: 101, column: 3, scope: !279)
!284 = !DILocation(line: 98, column: 23, scope: !274)
!285 = !DILocation(line: 98, column: 3, scope: !274)
!286 = !DILocation(line: 102, column: 3, scope: !56)
