; ModuleID = '/home/gleison/tf/Benchmarks/Shootout/lists/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.DLL = type { i32, %struct.DLL*, %struct.DLL* }

@.str = private unnamed_addr constant [12 x i8] c"length: %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"i:%3d  v:%3d  n:%3d  p:%3d\0A\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"[last entry points to list head]\0A\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"[val of next of tail is:  %d]\0A\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"li2 and li1 are not equal\0A\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"li2 should be empty now\0A\00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c"li3 should be empty now\0A\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"li1 first value wrong, wanted %d, got %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [37 x i8] c"last value wrong, wanted %d, got %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [42 x i8] c"li2 first value wrong, wanted %d, got %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c"li1 size wrong, wanted %d, got %d\0A\00", align 1
@.str.11 = private unnamed_addr constant [27 x i8] c"li1 and li2 are not equal\0A\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nounwind uwtable
define void @list_push_tail(%struct.DLL* %head, %struct.DLL* %item) #0 {
entry:
  %head.addr = alloca %struct.DLL*, align 8
  %item.addr = alloca %struct.DLL*, align 8
  %tail = alloca %struct.DLL*, align 8
  store %struct.DLL* %head, %struct.DLL** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %head.addr, metadata !56, metadata !57), !dbg !58
  store %struct.DLL* %item, %struct.DLL** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %item.addr, metadata !59, metadata !57), !dbg !60
  call void @llvm.dbg.declare(metadata %struct.DLL** %tail, metadata !61, metadata !57), !dbg !62
  %0 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !63
  %prev = getelementptr inbounds %struct.DLL, %struct.DLL* %0, i32 0, i32 2, !dbg !64
  %1 = load %struct.DLL*, %struct.DLL** %prev, align 8, !dbg !64
  store %struct.DLL* %1, %struct.DLL** %tail, align 8, !dbg !62
  %2 = load %struct.DLL*, %struct.DLL** %item.addr, align 8, !dbg !65
  %3 = load %struct.DLL*, %struct.DLL** %tail, align 8, !dbg !66
  %next = getelementptr inbounds %struct.DLL, %struct.DLL* %3, i32 0, i32 1, !dbg !67
  store %struct.DLL* %2, %struct.DLL** %next, align 8, !dbg !68
  %4 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !69
  %5 = load %struct.DLL*, %struct.DLL** %item.addr, align 8, !dbg !70
  %next1 = getelementptr inbounds %struct.DLL, %struct.DLL* %5, i32 0, i32 1, !dbg !71
  store %struct.DLL* %4, %struct.DLL** %next1, align 8, !dbg !72
  %6 = load %struct.DLL*, %struct.DLL** %item.addr, align 8, !dbg !73
  %7 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !74
  %prev2 = getelementptr inbounds %struct.DLL, %struct.DLL* %7, i32 0, i32 2, !dbg !75
  store %struct.DLL* %6, %struct.DLL** %prev2, align 8, !dbg !76
  %8 = load %struct.DLL*, %struct.DLL** %tail, align 8, !dbg !77
  %9 = load %struct.DLL*, %struct.DLL** %item.addr, align 8, !dbg !78
  %prev3 = getelementptr inbounds %struct.DLL, %struct.DLL* %9, i32 0, i32 2, !dbg !79
  store %struct.DLL* %8, %struct.DLL** %prev3, align 8, !dbg !80
  %10 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !81
  %val = getelementptr inbounds %struct.DLL, %struct.DLL* %10, i32 0, i32 0, !dbg !82
  %11 = load i32, i32* %val, align 4, !dbg !83
  %inc = add nsw i32 %11, 1, !dbg !83
  store i32 %inc, i32* %val, align 4, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define %struct.DLL* @list_pop_tail(%struct.DLL* %head) #0 {
entry:
  %retval = alloca %struct.DLL*, align 8
  %head.addr = alloca %struct.DLL*, align 8
  %prev = alloca %struct.DLL*, align 8
  %tail = alloca %struct.DLL*, align 8
  store %struct.DLL* %head, %struct.DLL** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %head.addr, metadata !85, metadata !57), !dbg !86
  call void @llvm.dbg.declare(metadata %struct.DLL** %prev, metadata !87, metadata !57), !dbg !88
  call void @llvm.dbg.declare(metadata %struct.DLL** %tail, metadata !89, metadata !57), !dbg !90
  %0 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !91
  %call = call i32 @list_empty(%struct.DLL* %0), !dbg !93
  %tobool = icmp ne i32 %call, 0, !dbg !93
  br i1 %tobool, label %if.then, label %if.end, !dbg !94

if.then:                                          ; preds = %entry
  store %struct.DLL* null, %struct.DLL** %retval, !dbg !95
  br label %return, !dbg !95

if.end:                                           ; preds = %entry
  %1 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !96
  %prev1 = getelementptr inbounds %struct.DLL, %struct.DLL* %1, i32 0, i32 2, !dbg !97
  %2 = load %struct.DLL*, %struct.DLL** %prev1, align 8, !dbg !97
  store %struct.DLL* %2, %struct.DLL** %tail, align 8, !dbg !98
  %3 = load %struct.DLL*, %struct.DLL** %tail, align 8, !dbg !99
  %prev2 = getelementptr inbounds %struct.DLL, %struct.DLL* %3, i32 0, i32 2, !dbg !100
  %4 = load %struct.DLL*, %struct.DLL** %prev2, align 8, !dbg !100
  store %struct.DLL* %4, %struct.DLL** %prev, align 8, !dbg !101
  %5 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !102
  %6 = load %struct.DLL*, %struct.DLL** %prev, align 8, !dbg !103
  %next = getelementptr inbounds %struct.DLL, %struct.DLL* %6, i32 0, i32 1, !dbg !104
  store %struct.DLL* %5, %struct.DLL** %next, align 8, !dbg !105
  %7 = load %struct.DLL*, %struct.DLL** %prev, align 8, !dbg !106
  %8 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !107
  %prev3 = getelementptr inbounds %struct.DLL, %struct.DLL* %8, i32 0, i32 2, !dbg !108
  store %struct.DLL* %7, %struct.DLL** %prev3, align 8, !dbg !109
  %9 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !110
  %val = getelementptr inbounds %struct.DLL, %struct.DLL* %9, i32 0, i32 0, !dbg !111
  %10 = load i32, i32* %val, align 4, !dbg !112
  %dec = add nsw i32 %10, -1, !dbg !112
  store i32 %dec, i32* %val, align 4, !dbg !112
  %11 = load %struct.DLL*, %struct.DLL** %tail, align 8, !dbg !113
  store %struct.DLL* %11, %struct.DLL** %retval, !dbg !114
  br label %return, !dbg !114

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.DLL*, %struct.DLL** %retval, !dbg !115
  ret %struct.DLL* %12, !dbg !115
}

; Function Attrs: nounwind uwtable
define internal i32 @list_empty(%struct.DLL* %head) #0 {
entry:
  %head.addr = alloca %struct.DLL*, align 8
  store %struct.DLL* %head, %struct.DLL** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %head.addr, metadata !116, metadata !57), !dbg !117
  %0 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !118
  %call = call i32 @list_length(%struct.DLL* %0), !dbg !119
  %cmp = icmp eq i32 %call, 0, !dbg !120
  %conv = zext i1 %cmp to i32, !dbg !120
  ret i32 %conv, !dbg !121
}

; Function Attrs: nounwind uwtable
define void @list_push_head(%struct.DLL* %head, %struct.DLL* %item) #0 {
entry:
  %head.addr = alloca %struct.DLL*, align 8
  %item.addr = alloca %struct.DLL*, align 8
  %next = alloca %struct.DLL*, align 8
  store %struct.DLL* %head, %struct.DLL** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %head.addr, metadata !122, metadata !57), !dbg !123
  store %struct.DLL* %item, %struct.DLL** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %item.addr, metadata !124, metadata !57), !dbg !125
  call void @llvm.dbg.declare(metadata %struct.DLL** %next, metadata !126, metadata !57), !dbg !127
  %0 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !128
  %next1 = getelementptr inbounds %struct.DLL, %struct.DLL* %0, i32 0, i32 1, !dbg !129
  %1 = load %struct.DLL*, %struct.DLL** %next1, align 8, !dbg !129
  store %struct.DLL* %1, %struct.DLL** %next, align 8, !dbg !127
  %2 = load %struct.DLL*, %struct.DLL** %item.addr, align 8, !dbg !130
  %3 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !131
  %next2 = getelementptr inbounds %struct.DLL, %struct.DLL* %3, i32 0, i32 1, !dbg !132
  store %struct.DLL* %2, %struct.DLL** %next2, align 8, !dbg !133
  %4 = load %struct.DLL*, %struct.DLL** %item.addr, align 8, !dbg !134
  %5 = load %struct.DLL*, %struct.DLL** %next, align 8, !dbg !135
  %prev = getelementptr inbounds %struct.DLL, %struct.DLL* %5, i32 0, i32 2, !dbg !136
  store %struct.DLL* %4, %struct.DLL** %prev, align 8, !dbg !137
  %6 = load %struct.DLL*, %struct.DLL** %next, align 8, !dbg !138
  %7 = load %struct.DLL*, %struct.DLL** %item.addr, align 8, !dbg !139
  %next3 = getelementptr inbounds %struct.DLL, %struct.DLL* %7, i32 0, i32 1, !dbg !140
  store %struct.DLL* %6, %struct.DLL** %next3, align 8, !dbg !141
  %8 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !142
  %9 = load %struct.DLL*, %struct.DLL** %item.addr, align 8, !dbg !143
  %prev4 = getelementptr inbounds %struct.DLL, %struct.DLL* %9, i32 0, i32 2, !dbg !144
  store %struct.DLL* %8, %struct.DLL** %prev4, align 8, !dbg !145
  %10 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !146
  %val = getelementptr inbounds %struct.DLL, %struct.DLL* %10, i32 0, i32 0, !dbg !147
  %11 = load i32, i32* %val, align 4, !dbg !148
  %inc = add nsw i32 %11, 1, !dbg !148
  store i32 %inc, i32* %val, align 4, !dbg !148
  ret void, !dbg !149
}

; Function Attrs: nounwind uwtable
define %struct.DLL* @list_pop_head(%struct.DLL* %head) #0 {
entry:
  %retval = alloca %struct.DLL*, align 8
  %head.addr = alloca %struct.DLL*, align 8
  %next = alloca %struct.DLL*, align 8
  store %struct.DLL* %head, %struct.DLL** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %head.addr, metadata !150, metadata !57), !dbg !151
  call void @llvm.dbg.declare(metadata %struct.DLL** %next, metadata !152, metadata !57), !dbg !153
  %0 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !154
  %call = call i32 @list_empty(%struct.DLL* %0), !dbg !156
  %tobool = icmp ne i32 %call, 0, !dbg !156
  br i1 %tobool, label %if.then, label %if.end, !dbg !157

if.then:                                          ; preds = %entry
  store %struct.DLL* null, %struct.DLL** %retval, !dbg !158
  br label %return, !dbg !158

if.end:                                           ; preds = %entry
  %1 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !159
  %next1 = getelementptr inbounds %struct.DLL, %struct.DLL* %1, i32 0, i32 1, !dbg !160
  %2 = load %struct.DLL*, %struct.DLL** %next1, align 8, !dbg !160
  store %struct.DLL* %2, %struct.DLL** %next, align 8, !dbg !161
  %3 = load %struct.DLL*, %struct.DLL** %next, align 8, !dbg !162
  %next2 = getelementptr inbounds %struct.DLL, %struct.DLL* %3, i32 0, i32 1, !dbg !163
  %4 = load %struct.DLL*, %struct.DLL** %next2, align 8, !dbg !163
  %5 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !164
  %next3 = getelementptr inbounds %struct.DLL, %struct.DLL* %5, i32 0, i32 1, !dbg !165
  store %struct.DLL* %4, %struct.DLL** %next3, align 8, !dbg !166
  %6 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !167
  %7 = load %struct.DLL*, %struct.DLL** %next, align 8, !dbg !168
  %next4 = getelementptr inbounds %struct.DLL, %struct.DLL* %7, i32 0, i32 1, !dbg !169
  %8 = load %struct.DLL*, %struct.DLL** %next4, align 8, !dbg !169
  %prev = getelementptr inbounds %struct.DLL, %struct.DLL* %8, i32 0, i32 2, !dbg !170
  store %struct.DLL* %6, %struct.DLL** %prev, align 8, !dbg !171
  %9 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !172
  %val = getelementptr inbounds %struct.DLL, %struct.DLL* %9, i32 0, i32 0, !dbg !173
  %10 = load i32, i32* %val, align 4, !dbg !174
  %dec = add nsw i32 %10, -1, !dbg !174
  store i32 %dec, i32* %val, align 4, !dbg !174
  %11 = load %struct.DLL*, %struct.DLL** %next, align 8, !dbg !175
  store %struct.DLL* %11, %struct.DLL** %retval, !dbg !176
  br label %return, !dbg !176

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.DLL*, %struct.DLL** %retval, !dbg !177
  ret %struct.DLL* %12, !dbg !177
}

; Function Attrs: nounwind uwtable
define i32 @list_equal(%struct.DLL* %x, %struct.DLL* %y) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.DLL*, align 8
  %y.addr = alloca %struct.DLL*, align 8
  %xp = alloca %struct.DLL*, align 8
  %yp = alloca %struct.DLL*, align 8
  store %struct.DLL* %x, %struct.DLL** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %x.addr, metadata !178, metadata !57), !dbg !179
  store %struct.DLL* %y, %struct.DLL** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %y.addr, metadata !180, metadata !57), !dbg !181
  call void @llvm.dbg.declare(metadata %struct.DLL** %xp, metadata !182, metadata !57), !dbg !183
  call void @llvm.dbg.declare(metadata %struct.DLL** %yp, metadata !184, metadata !57), !dbg !185
  %0 = load %struct.DLL*, %struct.DLL** %x.addr, align 8, !dbg !186
  store %struct.DLL* %0, %struct.DLL** %xp, align 8, !dbg !188
  %1 = load %struct.DLL*, %struct.DLL** %y.addr, align 8, !dbg !189
  store %struct.DLL* %1, %struct.DLL** %yp, align 8, !dbg !190
  br label %for.cond, !dbg !191

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !192
  %next = getelementptr inbounds %struct.DLL, %struct.DLL* %2, i32 0, i32 1, !dbg !196
  %3 = load %struct.DLL*, %struct.DLL** %next, align 8, !dbg !196
  %4 = load %struct.DLL*, %struct.DLL** %x.addr, align 8, !dbg !197
  %cmp = icmp ne %struct.DLL* %3, %4, !dbg !198
  br i1 %cmp, label %for.body, label %for.end, !dbg !199

for.body:                                         ; preds = %for.cond
  %5 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !200
  %val = getelementptr inbounds %struct.DLL, %struct.DLL* %5, i32 0, i32 0, !dbg !203
  %6 = load i32, i32* %val, align 4, !dbg !203
  %7 = load %struct.DLL*, %struct.DLL** %yp, align 8, !dbg !204
  %val1 = getelementptr inbounds %struct.DLL, %struct.DLL* %7, i32 0, i32 0, !dbg !205
  %8 = load i32, i32* %val1, align 4, !dbg !205
  %cmp2 = icmp ne i32 %6, %8, !dbg !206
  br i1 %cmp2, label %if.then, label %if.end, !dbg !207

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, !dbg !208
  br label %return, !dbg !208

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !209

for.inc:                                          ; preds = %if.end
  %9 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !210
  %next3 = getelementptr inbounds %struct.DLL, %struct.DLL* %9, i32 0, i32 1, !dbg !211
  %10 = load %struct.DLL*, %struct.DLL** %next3, align 8, !dbg !211
  store %struct.DLL* %10, %struct.DLL** %xp, align 8, !dbg !212
  %11 = load %struct.DLL*, %struct.DLL** %yp, align 8, !dbg !213
  %next4 = getelementptr inbounds %struct.DLL, %struct.DLL* %11, i32 0, i32 1, !dbg !214
  %12 = load %struct.DLL*, %struct.DLL** %next4, align 8, !dbg !214
  store %struct.DLL* %12, %struct.DLL** %yp, align 8, !dbg !215
  br label %for.cond, !dbg !216

for.end:                                          ; preds = %for.cond
  %13 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !217
  %val5 = getelementptr inbounds %struct.DLL, %struct.DLL* %13, i32 0, i32 0, !dbg !219
  %14 = load i32, i32* %val5, align 4, !dbg !219
  %15 = load %struct.DLL*, %struct.DLL** %yp, align 8, !dbg !220
  %val6 = getelementptr inbounds %struct.DLL, %struct.DLL* %15, i32 0, i32 0, !dbg !221
  %16 = load i32, i32* %val6, align 4, !dbg !221
  %cmp7 = icmp ne i32 %14, %16, !dbg !222
  br i1 %cmp7, label %if.then.8, label %if.end.9, !dbg !223

if.then.8:                                        ; preds = %for.end
  store i32 0, i32* %retval, !dbg !224
  br label %return, !dbg !224

if.end.9:                                         ; preds = %for.end
  %17 = load %struct.DLL*, %struct.DLL** %yp, align 8, !dbg !225
  %next10 = getelementptr inbounds %struct.DLL, %struct.DLL* %17, i32 0, i32 1, !dbg !226
  %18 = load %struct.DLL*, %struct.DLL** %next10, align 8, !dbg !226
  %19 = load %struct.DLL*, %struct.DLL** %y.addr, align 8, !dbg !227
  %cmp11 = icmp eq %struct.DLL* %18, %19, !dbg !228
  %conv = zext i1 %cmp11 to i32, !dbg !228
  store i32 %conv, i32* %retval, !dbg !229
  br label %return, !dbg !229

return:                                           ; preds = %if.end.9, %if.then.8, %if.then
  %20 = load i32, i32* %retval, !dbg !230
  ret i32 %20, !dbg !230
}

; Function Attrs: nounwind uwtable
define void @list_print(i8* %msg, %struct.DLL* %x) #0 {
entry:
  %msg.addr = alloca i8*, align 8
  %x.addr = alloca %struct.DLL*, align 8
  %xp = alloca %struct.DLL*, align 8
  %first = alloca %struct.DLL*, align 8
  %i = alloca i32, align 4
  store i8* %msg, i8** %msg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msg.addr, metadata !231, metadata !57), !dbg !232
  store %struct.DLL* %x, %struct.DLL** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %x.addr, metadata !233, metadata !57), !dbg !234
  call void @llvm.dbg.declare(metadata %struct.DLL** %xp, metadata !235, metadata !57), !dbg !236
  call void @llvm.dbg.declare(metadata %struct.DLL** %first, metadata !237, metadata !57), !dbg !238
  %0 = load %struct.DLL*, %struct.DLL** %x.addr, align 8, !dbg !239
  %next = getelementptr inbounds %struct.DLL, %struct.DLL* %0, i32 0, i32 1, !dbg !240
  %1 = load %struct.DLL*, %struct.DLL** %next, align 8, !dbg !240
  store %struct.DLL* %1, %struct.DLL** %first, align 8, !dbg !238
  call void @llvm.dbg.declare(metadata i32* %i, metadata !241, metadata !57), !dbg !242
  store i32 0, i32* %i, align 4, !dbg !242
  %2 = load i8*, i8** %msg.addr, align 8, !dbg !243
  %call = call i32 @puts(i8* %2), !dbg !244
  %3 = load %struct.DLL*, %struct.DLL** %x.addr, align 8, !dbg !245
  %call1 = call i32 @list_length(%struct.DLL* %3), !dbg !246
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32 %call1), !dbg !247
  %4 = load %struct.DLL*, %struct.DLL** %x.addr, align 8, !dbg !248
  %next3 = getelementptr inbounds %struct.DLL, %struct.DLL* %4, i32 0, i32 1, !dbg !250
  %5 = load %struct.DLL*, %struct.DLL** %next3, align 8, !dbg !250
  store %struct.DLL* %5, %struct.DLL** %xp, align 8, !dbg !251
  br label %for.cond, !dbg !252

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !253
  %next4 = getelementptr inbounds %struct.DLL, %struct.DLL* %6, i32 0, i32 1, !dbg !257
  %7 = load %struct.DLL*, %struct.DLL** %next4, align 8, !dbg !257
  %8 = load %struct.DLL*, %struct.DLL** %first, align 8, !dbg !258
  %cmp = icmp ne %struct.DLL* %7, %8, !dbg !259
  br i1 %cmp, label %for.body, label %for.end, !dbg !260

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4, !dbg !261
  %inc = add nsw i32 %9, 1, !dbg !261
  store i32 %inc, i32* %i, align 4, !dbg !261
  %10 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !263
  %val = getelementptr inbounds %struct.DLL, %struct.DLL* %10, i32 0, i32 0, !dbg !264
  %11 = load i32, i32* %val, align 4, !dbg !264
  %12 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !265
  %next5 = getelementptr inbounds %struct.DLL, %struct.DLL* %12, i32 0, i32 1, !dbg !266
  %13 = load %struct.DLL*, %struct.DLL** %next5, align 8, !dbg !266
  %val6 = getelementptr inbounds %struct.DLL, %struct.DLL* %13, i32 0, i32 0, !dbg !267
  %14 = load i32, i32* %val6, align 4, !dbg !267
  %15 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !268
  %prev = getelementptr inbounds %struct.DLL, %struct.DLL* %15, i32 0, i32 2, !dbg !269
  %16 = load %struct.DLL*, %struct.DLL** %prev, align 8, !dbg !269
  %val7 = getelementptr inbounds %struct.DLL, %struct.DLL* %16, i32 0, i32 0, !dbg !270
  %17 = load i32, i32* %val7, align 4, !dbg !270
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i32 0, i32 0), i32 %inc, i32 %11, i32 %14, i32 %17), !dbg !271
  br label %for.inc, !dbg !272

for.inc:                                          ; preds = %for.body
  %18 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !273
  %next9 = getelementptr inbounds %struct.DLL, %struct.DLL* %18, i32 0, i32 1, !dbg !274
  %19 = load %struct.DLL*, %struct.DLL** %next9, align 8, !dbg !274
  store %struct.DLL* %19, %struct.DLL** %xp, align 8, !dbg !275
  br label %for.cond, !dbg !276

for.end:                                          ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i32 0, i32 0)), !dbg !277
  %20 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !278
  %next11 = getelementptr inbounds %struct.DLL, %struct.DLL* %20, i32 0, i32 1, !dbg !279
  %21 = load %struct.DLL*, %struct.DLL** %next11, align 8, !dbg !279
  %val12 = getelementptr inbounds %struct.DLL, %struct.DLL* %21, i32 0, i32 0, !dbg !280
  %22 = load i32, i32* %val12, align 4, !dbg !280
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i32 0, i32 0), i32 %22), !dbg !281
  ret void, !dbg !282
}

declare i32 @puts(i8*) #2

declare i32 @printf(i8*, ...) #2

; Function Attrs: nounwind uwtable
define internal i32 @list_length(%struct.DLL* %head) #0 {
entry:
  %head.addr = alloca %struct.DLL*, align 8
  store %struct.DLL* %head, %struct.DLL** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %head.addr, metadata !283, metadata !57), !dbg !284
  %0 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !285
  %val = getelementptr inbounds %struct.DLL, %struct.DLL* %0, i32 0, i32 0, !dbg !286
  %1 = load i32, i32* %val, align 4, !dbg !286
  ret i32 %1, !dbg !287
}

; Function Attrs: nounwind uwtable
define %struct.DLL* @list_new() #0 {
entry:
  %l = alloca %struct.DLL*, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %l, metadata !288, metadata !57), !dbg !289
  %call = call noalias i8* @malloc(i64 24) #6, !dbg !290
  %0 = bitcast i8* %call to %struct.DLL*, !dbg !291
  store %struct.DLL* %0, %struct.DLL** %l, align 8, !dbg !289
  %1 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !292
  %2 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !293
  %next = getelementptr inbounds %struct.DLL, %struct.DLL* %2, i32 0, i32 1, !dbg !294
  store %struct.DLL* %1, %struct.DLL** %next, align 8, !dbg !295
  %3 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !296
  %4 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !297
  %prev = getelementptr inbounds %struct.DLL, %struct.DLL* %4, i32 0, i32 2, !dbg !298
  store %struct.DLL* %3, %struct.DLL** %prev, align 8, !dbg !299
  %5 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !300
  %val = getelementptr inbounds %struct.DLL, %struct.DLL* %5, i32 0, i32 0, !dbg !301
  store i32 0, i32* %val, align 4, !dbg !302
  %6 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !303
  ret %struct.DLL* %6, !dbg !304
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #3

; Function Attrs: nounwind uwtable
define %struct.DLL* @list_sequence(i32 %from, i32 %to) #0 {
entry:
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %tmp = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca %struct.DLL*, align 8
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !305, metadata !57), !dbg !306
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !307, metadata !57), !dbg !308
  call void @llvm.dbg.declare(metadata i32* %size, metadata !309, metadata !57), !dbg !310
  call void @llvm.dbg.declare(metadata i32* %tmp, metadata !311, metadata !57), !dbg !312
  call void @llvm.dbg.declare(metadata i32* %i, metadata !313, metadata !57), !dbg !314
  call void @llvm.dbg.declare(metadata i32* %j, metadata !315, metadata !57), !dbg !316
  call void @llvm.dbg.declare(metadata %struct.DLL** %l, metadata !317, metadata !57), !dbg !318
  %0 = load i32, i32* %from.addr, align 4, !dbg !319
  %1 = load i32, i32* %to.addr, align 4, !dbg !321
  %cmp = icmp sgt i32 %0, %1, !dbg !322
  br i1 %cmp, label %if.then, label %if.end, !dbg !323

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %from.addr, align 4, !dbg !324
  store i32 %2, i32* %tmp, align 4, !dbg !326
  %3 = load i32, i32* %to.addr, align 4, !dbg !327
  store i32 %3, i32* %from.addr, align 4, !dbg !328
  %4 = load i32, i32* %tmp, align 4, !dbg !329
  store i32 %4, i32* %to.addr, align 4, !dbg !330
  br label %if.end, !dbg !331

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %to.addr, align 4, !dbg !332
  %6 = load i32, i32* %from.addr, align 4, !dbg !333
  %sub = sub nsw i32 %5, %6, !dbg !334
  %add = add nsw i32 %sub, 1, !dbg !335
  store i32 %add, i32* %size, align 4, !dbg !336
  %7 = load i32, i32* %size, align 4, !dbg !337
  %add4 = add nsw i32 %7, 1, !dbg !338
  %conv = sext i32 %add4 to i64, !dbg !339
  %mul = mul i64 %conv, 24, !dbg !340
  %call = call noalias i8* @malloc(i64 %mul) #6, !dbg !341
  %8 = bitcast i8* %call to %struct.DLL*, !dbg !342
  store %struct.DLL* %8, %struct.DLL** %l, align 8, !dbg !343
  %9 = load i32, i32* %from.addr, align 4, !dbg !344
  %dec = add nsw i32 %9, -1, !dbg !344
  store i32 %dec, i32* %from.addr, align 4, !dbg !344
  store i32 0, i32* %i, align 4, !dbg !345
  store i32 1, i32* %j, align 4, !dbg !347
  br label %for.cond, !dbg !348

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4, !dbg !349
  %11 = load i32, i32* %size, align 4, !dbg !353
  %cmp5 = icmp slt i32 %10, %11, !dbg !354
  br i1 %cmp5, label %for.body, label %for.end, !dbg !355

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4, !dbg !356
  %add7 = add nsw i32 %12, 1, !dbg !358
  %idxprom = sext i32 %add7 to i64, !dbg !359
  %13 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !359
  %arrayidx = getelementptr inbounds %struct.DLL, %struct.DLL* %13, i64 %idxprom, !dbg !359
  %14 = load i32, i32* %i, align 4, !dbg !360
  %idxprom8 = sext i32 %14 to i64, !dbg !361
  %15 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !361
  %arrayidx9 = getelementptr inbounds %struct.DLL, %struct.DLL* %15, i64 %idxprom8, !dbg !361
  %next = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx9, i32 0, i32 1, !dbg !362
  store %struct.DLL* %arrayidx, %struct.DLL** %next, align 8, !dbg !363
  %16 = load i32, i32* %j, align 4, !dbg !364
  %sub10 = sub nsw i32 %16, 1, !dbg !365
  %idxprom11 = sext i32 %sub10 to i64, !dbg !366
  %17 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !366
  %arrayidx12 = getelementptr inbounds %struct.DLL, %struct.DLL* %17, i64 %idxprom11, !dbg !366
  %18 = load i32, i32* %j, align 4, !dbg !367
  %idxprom13 = sext i32 %18 to i64, !dbg !368
  %19 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !368
  %arrayidx14 = getelementptr inbounds %struct.DLL, %struct.DLL* %19, i64 %idxprom13, !dbg !368
  %prev = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx14, i32 0, i32 2, !dbg !369
  store %struct.DLL* %arrayidx12, %struct.DLL** %prev, align 8, !dbg !370
  %20 = load i32, i32* %from.addr, align 4, !dbg !371
  %inc = add nsw i32 %20, 1, !dbg !371
  store i32 %inc, i32* %from.addr, align 4, !dbg !371
  %21 = load i32, i32* %i, align 4, !dbg !372
  %idxprom15 = sext i32 %21 to i64, !dbg !373
  %22 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !373
  %arrayidx16 = getelementptr inbounds %struct.DLL, %struct.DLL* %22, i64 %idxprom15, !dbg !373
  %val = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx16, i32 0, i32 0, !dbg !374
  store i32 %20, i32* %val, align 4, !dbg !375
  br label %for.inc, !dbg !376

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %i, align 4, !dbg !377
  %inc17 = add nsw i32 %23, 1, !dbg !377
  store i32 %inc17, i32* %i, align 4, !dbg !377
  %24 = load i32, i32* %j, align 4, !dbg !378
  %inc18 = add nsw i32 %24, 1, !dbg !378
  store i32 %inc18, i32* %j, align 4, !dbg !378
  br label %for.cond, !dbg !379

for.end:                                          ; preds = %for.cond
  %25 = load i32, i32* %size, align 4, !dbg !380
  %idxprom19 = sext i32 %25 to i64, !dbg !381
  %26 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !381
  %arrayidx20 = getelementptr inbounds %struct.DLL, %struct.DLL* %26, i64 %idxprom19, !dbg !381
  %27 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !382
  %arrayidx21 = getelementptr inbounds %struct.DLL, %struct.DLL* %27, i64 0, !dbg !382
  %prev22 = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx21, i32 0, i32 2, !dbg !383
  store %struct.DLL* %arrayidx20, %struct.DLL** %prev22, align 8, !dbg !384
  %28 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !385
  %arrayidx23 = getelementptr inbounds %struct.DLL, %struct.DLL* %28, i64 0, !dbg !385
  %29 = load i32, i32* %size, align 4, !dbg !386
  %idxprom24 = sext i32 %29 to i64, !dbg !387
  %30 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !387
  %arrayidx25 = getelementptr inbounds %struct.DLL, %struct.DLL* %30, i64 %idxprom24, !dbg !387
  %next26 = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx25, i32 0, i32 1, !dbg !388
  store %struct.DLL* %arrayidx23, %struct.DLL** %next26, align 8, !dbg !389
  %31 = load i32, i32* %size, align 4, !dbg !390
  %sub27 = sub nsw i32 %31, 1, !dbg !391
  %idxprom28 = sext i32 %sub27 to i64, !dbg !392
  %32 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !392
  %arrayidx29 = getelementptr inbounds %struct.DLL, %struct.DLL* %32, i64 %idxprom28, !dbg !392
  %33 = load i32, i32* %size, align 4, !dbg !393
  %idxprom30 = sext i32 %33 to i64, !dbg !394
  %34 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !394
  %arrayidx31 = getelementptr inbounds %struct.DLL, %struct.DLL* %34, i64 %idxprom30, !dbg !394
  %prev32 = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx31, i32 0, i32 2, !dbg !395
  store %struct.DLL* %arrayidx29, %struct.DLL** %prev32, align 8, !dbg !396
  %35 = load i32, i32* %from.addr, align 4, !dbg !397
  %36 = load i32, i32* %size, align 4, !dbg !398
  %idxprom33 = sext i32 %36 to i64, !dbg !399
  %37 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !399
  %arrayidx34 = getelementptr inbounds %struct.DLL, %struct.DLL* %37, i64 %idxprom33, !dbg !399
  %val35 = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx34, i32 0, i32 0, !dbg !400
  store i32 %35, i32* %val35, align 4, !dbg !401
  %38 = load i32, i32* %size, align 4, !dbg !402
  %39 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !403
  %arrayidx36 = getelementptr inbounds %struct.DLL, %struct.DLL* %39, i64 0, !dbg !403
  %val37 = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx36, i32 0, i32 0, !dbg !404
  store i32 %38, i32* %val37, align 4, !dbg !405
  %40 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !406
  ret %struct.DLL* %40, !dbg !407
}

; Function Attrs: nounwind uwtable
define %struct.DLL* @list_copy(%struct.DLL* %x) #0 {
entry:
  %x.addr = alloca %struct.DLL*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %size = alloca i32, align 4
  %xp = alloca %struct.DLL*, align 8
  %l = alloca %struct.DLL*, align 8
  store %struct.DLL* %x, %struct.DLL** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %x.addr, metadata !408, metadata !57), !dbg !409
  call void @llvm.dbg.declare(metadata i32* %i, metadata !410, metadata !57), !dbg !411
  call void @llvm.dbg.declare(metadata i32* %j, metadata !412, metadata !57), !dbg !413
  call void @llvm.dbg.declare(metadata i32* %size, metadata !414, metadata !57), !dbg !415
  %0 = load %struct.DLL*, %struct.DLL** %x.addr, align 8, !dbg !416
  %call = call i32 @list_length(%struct.DLL* %0), !dbg !417
  store i32 %call, i32* %size, align 4, !dbg !415
  call void @llvm.dbg.declare(metadata %struct.DLL** %xp, metadata !418, metadata !57), !dbg !419
  call void @llvm.dbg.declare(metadata %struct.DLL** %l, metadata !420, metadata !57), !dbg !421
  %1 = load i32, i32* %size, align 4, !dbg !422
  %add = add nsw i32 %1, 1, !dbg !423
  %conv = sext i32 %add to i64, !dbg !424
  %mul = mul i64 %conv, 24, !dbg !425
  %call1 = call noalias i8* @malloc(i64 %mul) #6, !dbg !426
  %2 = bitcast i8* %call1 to %struct.DLL*, !dbg !427
  store %struct.DLL* %2, %struct.DLL** %l, align 8, !dbg !421
  store i32 0, i32* %i, align 4, !dbg !428
  store i32 1, i32* %j, align 4, !dbg !430
  %3 = load %struct.DLL*, %struct.DLL** %x.addr, align 8, !dbg !431
  store %struct.DLL* %3, %struct.DLL** %xp, align 8, !dbg !432
  br label %for.cond, !dbg !433

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !434
  %5 = load i32, i32* %size, align 4, !dbg !438
  %cmp = icmp slt i32 %4, %5, !dbg !439
  br i1 %cmp, label %for.body, label %for.end, !dbg !440

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %j, align 4, !dbg !441
  %idxprom = sext i32 %6 to i64, !dbg !443
  %7 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !443
  %arrayidx = getelementptr inbounds %struct.DLL, %struct.DLL* %7, i64 %idxprom, !dbg !443
  %8 = load i32, i32* %i, align 4, !dbg !444
  %idxprom3 = sext i32 %8 to i64, !dbg !445
  %9 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !445
  %arrayidx4 = getelementptr inbounds %struct.DLL, %struct.DLL* %9, i64 %idxprom3, !dbg !445
  %next = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx4, i32 0, i32 1, !dbg !446
  store %struct.DLL* %arrayidx, %struct.DLL** %next, align 8, !dbg !447
  %10 = load i32, i32* %i, align 4, !dbg !448
  %idxprom5 = sext i32 %10 to i64, !dbg !449
  %11 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !449
  %arrayidx6 = getelementptr inbounds %struct.DLL, %struct.DLL* %11, i64 %idxprom5, !dbg !449
  %12 = load i32, i32* %j, align 4, !dbg !450
  %idxprom7 = sext i32 %12 to i64, !dbg !451
  %13 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !451
  %arrayidx8 = getelementptr inbounds %struct.DLL, %struct.DLL* %13, i64 %idxprom7, !dbg !451
  %prev = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx8, i32 0, i32 2, !dbg !452
  store %struct.DLL* %arrayidx6, %struct.DLL** %prev, align 8, !dbg !453
  %14 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !454
  %val = getelementptr inbounds %struct.DLL, %struct.DLL* %14, i32 0, i32 0, !dbg !455
  %15 = load i32, i32* %val, align 4, !dbg !455
  %16 = load i32, i32* %i, align 4, !dbg !456
  %idxprom9 = sext i32 %16 to i64, !dbg !457
  %17 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !457
  %arrayidx10 = getelementptr inbounds %struct.DLL, %struct.DLL* %17, i64 %idxprom9, !dbg !457
  %val11 = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx10, i32 0, i32 0, !dbg !458
  store i32 %15, i32* %val11, align 4, !dbg !459
  br label %for.inc, !dbg !460

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !461
  %inc = add nsw i32 %18, 1, !dbg !461
  store i32 %inc, i32* %i, align 4, !dbg !461
  %19 = load i32, i32* %j, align 4, !dbg !462
  %inc12 = add nsw i32 %19, 1, !dbg !462
  store i32 %inc12, i32* %j, align 4, !dbg !462
  %20 = load %struct.DLL*, %struct.DLL** %xp, align 8, !dbg !463
  %next13 = getelementptr inbounds %struct.DLL, %struct.DLL* %20, i32 0, i32 1, !dbg !464
  %21 = load %struct.DLL*, %struct.DLL** %next13, align 8, !dbg !464
  store %struct.DLL* %21, %struct.DLL** %xp, align 8, !dbg !465
  br label %for.cond, !dbg !466

for.end:                                          ; preds = %for.cond
  %22 = load i32, i32* %size, align 4, !dbg !467
  %idxprom14 = sext i32 %22 to i64, !dbg !468
  %23 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !468
  %arrayidx15 = getelementptr inbounds %struct.DLL, %struct.DLL* %23, i64 %idxprom14, !dbg !468
  %24 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !469
  %arrayidx16 = getelementptr inbounds %struct.DLL, %struct.DLL* %24, i64 0, !dbg !469
  %prev17 = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx16, i32 0, i32 2, !dbg !470
  store %struct.DLL* %arrayidx15, %struct.DLL** %prev17, align 8, !dbg !471
  %25 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !472
  %arrayidx18 = getelementptr inbounds %struct.DLL, %struct.DLL* %25, i64 0, !dbg !472
  %26 = load i32, i32* %size, align 4, !dbg !473
  %idxprom19 = sext i32 %26 to i64, !dbg !474
  %27 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !474
  %arrayidx20 = getelementptr inbounds %struct.DLL, %struct.DLL* %27, i64 %idxprom19, !dbg !474
  %next21 = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx20, i32 0, i32 1, !dbg !475
  store %struct.DLL* %arrayidx18, %struct.DLL** %next21, align 8, !dbg !476
  %28 = load %struct.DLL*, %struct.DLL** %x.addr, align 8, !dbg !477
  %call22 = call %struct.DLL* @list_last(%struct.DLL* %28), !dbg !478
  %val23 = getelementptr inbounds %struct.DLL, %struct.DLL* %call22, i32 0, i32 0, !dbg !479
  %29 = load i32, i32* %val23, align 4, !dbg !479
  %30 = load i32, i32* %size, align 4, !dbg !480
  %idxprom24 = sext i32 %30 to i64, !dbg !481
  %31 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !481
  %arrayidx25 = getelementptr inbounds %struct.DLL, %struct.DLL* %31, i64 %idxprom24, !dbg !481
  %val26 = getelementptr inbounds %struct.DLL, %struct.DLL* %arrayidx25, i32 0, i32 0, !dbg !482
  store i32 %29, i32* %val26, align 4, !dbg !483
  %32 = load %struct.DLL*, %struct.DLL** %l, align 8, !dbg !484
  ret %struct.DLL* %32, !dbg !485
}

; Function Attrs: nounwind uwtable
define internal %struct.DLL* @list_last(%struct.DLL* %head) #0 {
entry:
  %head.addr = alloca %struct.DLL*, align 8
  store %struct.DLL* %head, %struct.DLL** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %head.addr, metadata !486, metadata !57), !dbg !487
  %0 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !488
  %prev = getelementptr inbounds %struct.DLL, %struct.DLL* %0, i32 0, i32 2, !dbg !489
  %1 = load %struct.DLL*, %struct.DLL** %prev, align 8, !dbg !489
  ret %struct.DLL* %1, !dbg !490
}

; Function Attrs: nounwind uwtable
define void @list_reverse(%struct.DLL* %head) #0 {
entry:
  %head.addr = alloca %struct.DLL*, align 8
  %tmp = alloca %struct.DLL*, align 8
  %p = alloca %struct.DLL*, align 8
  store %struct.DLL* %head, %struct.DLL** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %head.addr, metadata !491, metadata !57), !dbg !492
  call void @llvm.dbg.declare(metadata %struct.DLL** %tmp, metadata !493, metadata !57), !dbg !494
  call void @llvm.dbg.declare(metadata %struct.DLL** %p, metadata !495, metadata !57), !dbg !496
  %0 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !497
  store %struct.DLL* %0, %struct.DLL** %p, align 8, !dbg !496
  br label %do.body, !dbg !498

do.body:                                          ; preds = %do.cond, %entry
  %1 = load %struct.DLL*, %struct.DLL** %p, align 8, !dbg !499
  %next = getelementptr inbounds %struct.DLL, %struct.DLL* %1, i32 0, i32 1, !dbg !501
  %2 = load %struct.DLL*, %struct.DLL** %next, align 8, !dbg !501
  store %struct.DLL* %2, %struct.DLL** %tmp, align 8, !dbg !502
  %3 = load %struct.DLL*, %struct.DLL** %p, align 8, !dbg !503
  %prev = getelementptr inbounds %struct.DLL, %struct.DLL* %3, i32 0, i32 2, !dbg !504
  %4 = load %struct.DLL*, %struct.DLL** %prev, align 8, !dbg !504
  %5 = load %struct.DLL*, %struct.DLL** %p, align 8, !dbg !505
  %next2 = getelementptr inbounds %struct.DLL, %struct.DLL* %5, i32 0, i32 1, !dbg !506
  store %struct.DLL* %4, %struct.DLL** %next2, align 8, !dbg !507
  %6 = load %struct.DLL*, %struct.DLL** %tmp, align 8, !dbg !508
  %7 = load %struct.DLL*, %struct.DLL** %p, align 8, !dbg !509
  %prev3 = getelementptr inbounds %struct.DLL, %struct.DLL* %7, i32 0, i32 2, !dbg !510
  store %struct.DLL* %6, %struct.DLL** %prev3, align 8, !dbg !511
  %8 = load %struct.DLL*, %struct.DLL** %tmp, align 8, !dbg !512
  store %struct.DLL* %8, %struct.DLL** %p, align 8, !dbg !513
  br label %do.cond, !dbg !514

do.cond:                                          ; preds = %do.body
  %9 = load %struct.DLL*, %struct.DLL** %p, align 8, !dbg !515
  %10 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !517
  %cmp = icmp ne %struct.DLL* %9, %10, !dbg !518
  br i1 %cmp, label %do.body, label %do.end, !dbg !514

do.end:                                           ; preds = %do.cond
  ret void, !dbg !519
}

; Function Attrs: nounwind uwtable
define i32 @test_lists() #0 {
entry:
  %len = alloca i32, align 4
  %li1 = alloca %struct.DLL*, align 8
  %li2 = alloca %struct.DLL*, align 8
  %li3 = alloca %struct.DLL*, align 8
  call void @llvm.dbg.declare(metadata i32* %len, metadata !520, metadata !57), !dbg !521
  store i32 0, i32* %len, align 4, !dbg !521
  call void @llvm.dbg.declare(metadata %struct.DLL** %li1, metadata !522, metadata !57), !dbg !523
  %call = call %struct.DLL* @list_sequence(i32 1, i32 100), !dbg !524
  store %struct.DLL* %call, %struct.DLL** %li1, align 8, !dbg !523
  call void @llvm.dbg.declare(metadata %struct.DLL** %li2, metadata !525, metadata !57), !dbg !526
  %0 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !527
  %call1 = call %struct.DLL* @list_copy(%struct.DLL* %0), !dbg !528
  store %struct.DLL* %call1, %struct.DLL** %li2, align 8, !dbg !526
  call void @llvm.dbg.declare(metadata %struct.DLL** %li3, metadata !529, metadata !57), !dbg !530
  %call2 = call %struct.DLL* @list_new(), !dbg !531
  store %struct.DLL* %call2, %struct.DLL** %li3, align 8, !dbg !530
  %1 = load %struct.DLL*, %struct.DLL** %li2, align 8, !dbg !532
  %2 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !534
  %call3 = call i32 @list_equal(%struct.DLL* %1, %struct.DLL* %2), !dbg !535
  %tobool = icmp ne i32 %call3, 0, !dbg !535
  br i1 %tobool, label %if.end, label %if.then, !dbg !536

if.then:                                          ; preds = %entry
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i32 0, i32 0)), !dbg !537
  call void @exit(i32 1) #7, !dbg !539
  unreachable, !dbg !539

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !540

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load %struct.DLL*, %struct.DLL** %li2, align 8, !dbg !541
  %call5 = call i32 @list_empty(%struct.DLL* %3), !dbg !544
  %tobool6 = icmp ne i32 %call5, 0, !dbg !545
  %lnot = xor i1 %tobool6, true, !dbg !545
  br i1 %lnot, label %while.body, label %while.end, !dbg !540

while.body:                                       ; preds = %while.cond
  %4 = load %struct.DLL*, %struct.DLL** %li3, align 8, !dbg !546
  %5 = load %struct.DLL*, %struct.DLL** %li2, align 8, !dbg !548
  %call7 = call %struct.DLL* @list_pop_head(%struct.DLL* %5), !dbg !549
  call void @list_push_tail(%struct.DLL* %4, %struct.DLL* %call7), !dbg !550
  br label %while.cond, !dbg !540

while.end:                                        ; preds = %while.cond
  %6 = load %struct.DLL*, %struct.DLL** %li2, align 8, !dbg !551
  %call8 = call i32 @list_empty(%struct.DLL* %6), !dbg !553
  %tobool9 = icmp ne i32 %call8, 0, !dbg !553
  br i1 %tobool9, label %if.end.12, label %if.then.10, !dbg !554

if.then.10:                                       ; preds = %while.end
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i32 0, i32 0)), !dbg !555
  call void @exit(i32 1) #7, !dbg !557
  unreachable, !dbg !557

if.end.12:                                        ; preds = %while.end
  br label %while.cond.13, !dbg !558

while.cond.13:                                    ; preds = %while.body.17, %if.end.12
  %7 = load %struct.DLL*, %struct.DLL** %li3, align 8, !dbg !559
  %call14 = call i32 @list_empty(%struct.DLL* %7), !dbg !560
  %tobool15 = icmp ne i32 %call14, 0, !dbg !561
  %lnot16 = xor i1 %tobool15, true, !dbg !561
  br i1 %lnot16, label %while.body.17, label %while.end.19, !dbg !558

while.body.17:                                    ; preds = %while.cond.13
  %8 = load %struct.DLL*, %struct.DLL** %li2, align 8, !dbg !562
  %9 = load %struct.DLL*, %struct.DLL** %li3, align 8, !dbg !564
  %call18 = call %struct.DLL* @list_pop_tail(%struct.DLL* %9), !dbg !565
  call void @list_push_tail(%struct.DLL* %8, %struct.DLL* %call18), !dbg !566
  br label %while.cond.13, !dbg !558

while.end.19:                                     ; preds = %while.cond.13
  %10 = load %struct.DLL*, %struct.DLL** %li3, align 8, !dbg !567
  %call20 = call i32 @list_empty(%struct.DLL* %10), !dbg !569
  %tobool21 = icmp ne i32 %call20, 0, !dbg !569
  br i1 %tobool21, label %if.end.24, label %if.then.22, !dbg !570

if.then.22:                                       ; preds = %while.end.19
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i32 0, i32 0)), !dbg !571
  call void @exit(i32 1) #7, !dbg !573
  unreachable, !dbg !573

if.end.24:                                        ; preds = %while.end.19
  %11 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !574
  call void @list_reverse(%struct.DLL* %11), !dbg !575
  %12 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !576
  %call25 = call %struct.DLL* @list_first(%struct.DLL* %12), !dbg !578
  %val = getelementptr inbounds %struct.DLL, %struct.DLL* %call25, i32 0, i32 0, !dbg !579
  %13 = load i32, i32* %val, align 4, !dbg !579
  %cmp = icmp ne i32 %13, 100, !dbg !580
  br i1 %cmp, label %if.then.26, label %if.end.30, !dbg !581

if.then.26:                                       ; preds = %if.end.24
  %14 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !582
  %call27 = call %struct.DLL* @list_first(%struct.DLL* %14), !dbg !584
  %val28 = getelementptr inbounds %struct.DLL, %struct.DLL* %call27, i32 0, i32 0, !dbg !585
  %15 = load i32, i32* %val28, align 4, !dbg !585
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0), i32 100, i32 %15), !dbg !586
  call void @exit(i32 1) #7, !dbg !587
  unreachable, !dbg !587

if.end.30:                                        ; preds = %if.end.24
  %16 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !588
  %call31 = call %struct.DLL* @list_last(%struct.DLL* %16), !dbg !590
  %val32 = getelementptr inbounds %struct.DLL, %struct.DLL* %call31, i32 0, i32 0, !dbg !591
  %17 = load i32, i32* %val32, align 4, !dbg !591
  %cmp33 = icmp ne i32 %17, 1, !dbg !592
  br i1 %cmp33, label %if.then.34, label %if.end.38, !dbg !593

if.then.34:                                       ; preds = %if.end.30
  %18 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !594
  %call35 = call %struct.DLL* @list_last(%struct.DLL* %18), !dbg !596
  %val36 = getelementptr inbounds %struct.DLL, %struct.DLL* %call35, i32 0, i32 0, !dbg !597
  %19 = load i32, i32* %val36, align 4, !dbg !597
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i32 0, i32 0), i32 100, i32 %19), !dbg !598
  call void @exit(i32 1) #7, !dbg !599
  unreachable, !dbg !599

if.end.38:                                        ; preds = %if.end.30
  %20 = load %struct.DLL*, %struct.DLL** %li2, align 8, !dbg !600
  %call39 = call %struct.DLL* @list_first(%struct.DLL* %20), !dbg !602
  %val40 = getelementptr inbounds %struct.DLL, %struct.DLL* %call39, i32 0, i32 0, !dbg !603
  %21 = load i32, i32* %val40, align 4, !dbg !603
  %cmp41 = icmp ne i32 %21, 100, !dbg !604
  br i1 %cmp41, label %if.then.42, label %if.end.46, !dbg !605

if.then.42:                                       ; preds = %if.end.38
  %22 = load %struct.DLL*, %struct.DLL** %li2, align 8, !dbg !606
  %call43 = call %struct.DLL* @list_first(%struct.DLL* %22), !dbg !608
  %val44 = getelementptr inbounds %struct.DLL, %struct.DLL* %call43, i32 0, i32 0, !dbg !609
  %23 = load i32, i32* %val44, align 4, !dbg !609
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.9, i32 0, i32 0), i32 100, i32 %23), !dbg !610
  call void @exit(i32 1) #7, !dbg !611
  unreachable, !dbg !611

if.end.46:                                        ; preds = %if.end.38
  %24 = load %struct.DLL*, %struct.DLL** %li2, align 8, !dbg !612
  %call47 = call %struct.DLL* @list_last(%struct.DLL* %24), !dbg !614
  %val48 = getelementptr inbounds %struct.DLL, %struct.DLL* %call47, i32 0, i32 0, !dbg !615
  %25 = load i32, i32* %val48, align 4, !dbg !615
  %cmp49 = icmp ne i32 %25, 1, !dbg !616
  br i1 %cmp49, label %if.then.50, label %if.end.54, !dbg !617

if.then.50:                                       ; preds = %if.end.46
  %26 = load %struct.DLL*, %struct.DLL** %li2, align 8, !dbg !618
  %call51 = call %struct.DLL* @list_last(%struct.DLL* %26), !dbg !620
  %val52 = getelementptr inbounds %struct.DLL, %struct.DLL* %call51, i32 0, i32 0, !dbg !621
  %27 = load i32, i32* %val52, align 4, !dbg !621
  %call53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8, i32 0, i32 0), i32 100, i32 %27), !dbg !622
  call void @exit(i32 1) #7, !dbg !623
  unreachable, !dbg !623

if.end.54:                                        ; preds = %if.end.46
  %28 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !624
  %call55 = call i32 @list_length(%struct.DLL* %28), !dbg !626
  %cmp56 = icmp ne i32 %call55, 100, !dbg !627
  br i1 %cmp56, label %if.then.57, label %if.end.60, !dbg !628

if.then.57:                                       ; preds = %if.end.54
  %29 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !629
  %call58 = call i32 @list_length(%struct.DLL* %29), !dbg !631
  %call59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i32 0, i32 0), i32 100, i32 %call58), !dbg !632
  call void @exit(i32 1) #7, !dbg !633
  unreachable, !dbg !633

if.end.60:                                        ; preds = %if.end.54
  %30 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !634
  %31 = load %struct.DLL*, %struct.DLL** %li2, align 8, !dbg !636
  %call61 = call i32 @list_equal(%struct.DLL* %30, %struct.DLL* %31), !dbg !637
  %tobool62 = icmp ne i32 %call61, 0, !dbg !637
  br i1 %tobool62, label %if.end.65, label %if.then.63, !dbg !638

if.then.63:                                       ; preds = %if.end.60
  %call64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i32 0, i32 0)), !dbg !639
  call void @exit(i32 1) #7, !dbg !641
  unreachable, !dbg !641

if.end.65:                                        ; preds = %if.end.60
  %32 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !642
  %call66 = call i32 @list_length(%struct.DLL* %32), !dbg !643
  store i32 %call66, i32* %len, align 4, !dbg !644
  %33 = load %struct.DLL*, %struct.DLL** %li1, align 8, !dbg !645
  %34 = bitcast %struct.DLL* %33 to i8*, !dbg !645
  call void @free(i8* %34) #6, !dbg !646
  %35 = load %struct.DLL*, %struct.DLL** %li2, align 8, !dbg !647
  %36 = bitcast %struct.DLL* %35 to i8*, !dbg !647
  call void @free(i8* %36) #6, !dbg !648
  %37 = load %struct.DLL*, %struct.DLL** %li3, align 8, !dbg !649
  %38 = bitcast %struct.DLL* %37 to i8*, !dbg !649
  call void @free(i8* %38) #6, !dbg !650
  %39 = load i32, i32* %len, align 4, !dbg !651
  ret i32 %39, !dbg !652
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

; Function Attrs: nounwind uwtable
define internal %struct.DLL* @list_first(%struct.DLL* %head) #0 {
entry:
  %head.addr = alloca %struct.DLL*, align 8
  store %struct.DLL* %head, %struct.DLL** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DLL** %head.addr, metadata !653, metadata !57), !dbg !654
  %0 = load %struct.DLL*, %struct.DLL** %head.addr, align 8, !dbg !655
  %next = getelementptr inbounds %struct.DLL, %struct.DLL* %0, i32 0, i32 1, !dbg !656
  %1 = load %struct.DLL*, %struct.DLL** %next, align 8, !dbg !656
  ret %struct.DLL* %1, !dbg !657
}

; Function Attrs: nounwind
declare void @free(i8*) #3

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %n = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !658, metadata !57), !dbg !659
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !660, metadata !57), !dbg !661
  call void @llvm.dbg.declare(metadata i32* %n, metadata !662, metadata !57), !dbg !663
  %0 = load i32, i32* %argc.addr, align 4, !dbg !664
  %cmp = icmp eq i32 %0, 2, !dbg !665
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !666

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !667
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 1, !dbg !667
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !667
  %call = call i32 @atoi(i8* %2) #8, !dbg !669
  br label %cond.end, !dbg !666

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !670

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 3000000, %cond.false ], !dbg !666
  store i32 %cond, i32* %n, align 4, !dbg !672
  call void @llvm.dbg.declare(metadata i32* %result, metadata !675, metadata !57), !dbg !676
  store i32 0, i32* %result, align 4, !dbg !676
  br label %while.cond, !dbg !677

while.cond:                                       ; preds = %while.body, %cond.end
  %3 = load i32, i32* %n, align 4, !dbg !678
  %dec = add nsw i32 %3, -1, !dbg !678
  store i32 %dec, i32* %n, align 4, !dbg !678
  %tobool = icmp ne i32 %3, 0, !dbg !677
  br i1 %tobool, label %while.body, label %while.end, !dbg !677

while.body:                                       ; preds = %while.cond
  %call1 = call i32 @test_lists(), !dbg !680
  store i32 %call1, i32* %result, align 4, !dbg !681
  br label %while.cond, !dbg !677

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %result, align 4, !dbg !682
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0), i32 %4), !dbg !683
  ret i32 0, !dbg !684
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #5

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!53, !54}
!llvm.ident = !{!55}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !14)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/lists")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIDerivedType(tag: DW_TAG_typedef, name: "DLL", file: !6, line: 19, baseType: !7)
!6 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Shootout/lists/tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/lists")
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "DLL", file: !6, line: 15, size: 192, align: 64, elements: !8)
!8 = !{!9, !11, !13}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !7, file: !6, line: 16, baseType: !10, size: 32, align: 32)
!10 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7, file: !6, line: 17, baseType: !12, size: 64, align: 64, offset: 64)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!13 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !7, file: !6, line: 18, baseType: !12, size: 64, align: 64, offset: 128)
!14 = !{!15, !18, !21, !22, !23, !26, !31, !33, !36, !37, !40, !43, !47, !50, !51, !52}
!15 = !DISubprogram(name: "list_push_tail", scope: !6, file: !6, line: 26, type: !16, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.DLL*, %struct.DLL*)* @list_push_tail, variables: !2)
!16 = !DISubroutineType(types: !17)
!17 = !{null, !4, !4}
!18 = !DISubprogram(name: "list_pop_tail", scope: !6, file: !6, line: 35, type: !19, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, function: %struct.DLL* (%struct.DLL*)* @list_pop_tail, variables: !2)
!19 = !DISubroutineType(types: !20)
!20 = !{!4, !4}
!21 = !DISubprogram(name: "list_push_head", scope: !6, file: !6, line: 47, type: !16, isLocal: false, isDefinition: true, scopeLine: 47, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.DLL*, %struct.DLL*)* @list_push_head, variables: !2)
!22 = !DISubprogram(name: "list_pop_head", scope: !6, file: !6, line: 56, type: !19, isLocal: false, isDefinition: true, scopeLine: 56, flags: DIFlagPrototyped, isOptimized: false, function: %struct.DLL* (%struct.DLL*)* @list_pop_head, variables: !2)
!23 = !DISubprogram(name: "list_equal", scope: !6, file: !6, line: 67, type: !24, isLocal: false, isDefinition: true, scopeLine: 67, flags: DIFlagPrototyped, isOptimized: false, function: i32 (%struct.DLL*, %struct.DLL*)* @list_equal, variables: !2)
!24 = !DISubroutineType(types: !25)
!25 = !{!10, !4, !4}
!26 = !DISubprogram(name: "list_print", scope: !6, file: !6, line: 79, type: !27, isLocal: false, isDefinition: true, scopeLine: 79, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*, %struct.DLL*)* @list_print, variables: !2)
!27 = !DISubroutineType(types: !28)
!28 = !{null, !29, !4}
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64, align: 64)
!30 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!31 = !DISubprogram(name: "list_new", scope: !6, file: !6, line: 92, type: !32, isLocal: false, isDefinition: true, scopeLine: 92, isOptimized: false, function: %struct.DLL* ()* @list_new, variables: !2)
!32 = !DISubroutineType(types: !3)
!33 = !DISubprogram(name: "list_sequence", scope: !6, file: !6, line: 101, type: !34, isLocal: false, isDefinition: true, scopeLine: 101, flags: DIFlagPrototyped, isOptimized: false, function: %struct.DLL* (i32, i32)* @list_sequence, variables: !2)
!34 = !DISubroutineType(types: !35)
!35 = !{!4, !10, !10}
!36 = !DISubprogram(name: "list_copy", scope: !6, file: !6, line: 124, type: !19, isLocal: false, isDefinition: true, scopeLine: 124, flags: DIFlagPrototyped, isOptimized: false, function: %struct.DLL* (%struct.DLL*)* @list_copy, variables: !2)
!37 = !DISubprogram(name: "list_reverse", scope: !6, file: !6, line: 138, type: !38, isLocal: false, isDefinition: true, scopeLine: 138, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.DLL*)* @list_reverse, variables: !2)
!38 = !DISubroutineType(types: !39)
!39 = !{null, !4}
!40 = !DISubprogram(name: "test_lists", scope: !6, file: !6, line: 148, type: !41, isLocal: false, isDefinition: true, scopeLine: 148, isOptimized: false, function: i32 ()* @test_lists, variables: !2)
!41 = !DISubroutineType(types: !42)
!42 = !{!10}
!43 = !DISubprogram(name: "main", scope: !6, file: !6, line: 225, type: !44, isLocal: false, isDefinition: true, scopeLine: 225, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!44 = !DISubroutineType(types: !45)
!45 = !{!10, !10, !46}
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64, align: 64)
!47 = !DISubprogram(name: "list_empty", scope: !6, file: !6, line: 22, type: !48, isLocal: true, isDefinition: true, scopeLine: 22, flags: DIFlagPrototyped, isOptimized: false, function: i32 (%struct.DLL*)* @list_empty, variables: !2)
!48 = !DISubroutineType(types: !49)
!49 = !{!10, !4}
!50 = !DISubprogram(name: "list_length", scope: !6, file: !6, line: 21, type: !48, isLocal: true, isDefinition: true, scopeLine: 21, flags: DIFlagPrototyped, isOptimized: false, function: i32 (%struct.DLL*)* @list_length, variables: !2)
!51 = !DISubprogram(name: "list_last", scope: !6, file: !6, line: 24, type: !19, isLocal: true, isDefinition: true, scopeLine: 24, flags: DIFlagPrototyped, isOptimized: false, function: %struct.DLL* (%struct.DLL*)* @list_last, variables: !2)
!52 = !DISubprogram(name: "list_first", scope: !6, file: !6, line: 23, type: !19, isLocal: true, isDefinition: true, scopeLine: 23, flags: DIFlagPrototyped, isOptimized: false, function: %struct.DLL* (%struct.DLL*)* @list_first, variables: !2)
!53 = !{i32 2, !"Dwarf Version", i32 4}
!54 = !{i32 2, !"Debug Info Version", i32 3}
!55 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!56 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "head", arg: 1, scope: !15, file: !6, line: 26, type: !4)
!57 = !DIExpression()
!58 = !DILocation(line: 26, column: 26, scope: !15)
!59 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "item", arg: 2, scope: !15, file: !6, line: 26, type: !4)
!60 = !DILocation(line: 26, column: 37, scope: !15)
!61 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tail", scope: !15, file: !6, line: 27, type: !4)
!62 = !DILocation(line: 27, column: 8, scope: !15)
!63 = !DILocation(line: 27, column: 15, scope: !15)
!64 = !DILocation(line: 27, column: 21, scope: !15)
!65 = !DILocation(line: 28, column: 16, scope: !15)
!66 = !DILocation(line: 28, column: 3, scope: !15)
!67 = !DILocation(line: 28, column: 9, scope: !15)
!68 = !DILocation(line: 28, column: 14, scope: !15)
!69 = !DILocation(line: 29, column: 16, scope: !15)
!70 = !DILocation(line: 29, column: 3, scope: !15)
!71 = !DILocation(line: 29, column: 9, scope: !15)
!72 = !DILocation(line: 29, column: 14, scope: !15)
!73 = !DILocation(line: 30, column: 16, scope: !15)
!74 = !DILocation(line: 30, column: 3, scope: !15)
!75 = !DILocation(line: 30, column: 9, scope: !15)
!76 = !DILocation(line: 30, column: 14, scope: !15)
!77 = !DILocation(line: 31, column: 16, scope: !15)
!78 = !DILocation(line: 31, column: 3, scope: !15)
!79 = !DILocation(line: 31, column: 9, scope: !15)
!80 = !DILocation(line: 31, column: 14, scope: !15)
!81 = !DILocation(line: 32, column: 3, scope: !15)
!82 = !DILocation(line: 32, column: 9, scope: !15)
!83 = !DILocation(line: 32, column: 12, scope: !15)
!84 = !DILocation(line: 33, column: 1, scope: !15)
!85 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "head", arg: 1, scope: !18, file: !6, line: 35, type: !4)
!86 = !DILocation(line: 35, column: 25, scope: !18)
!87 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "prev", scope: !18, file: !6, line: 36, type: !4)
!88 = !DILocation(line: 36, column: 8, scope: !18)
!89 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tail", scope: !18, file: !6, line: 36, type: !4)
!90 = !DILocation(line: 36, column: 15, scope: !18)
!91 = !DILocation(line: 37, column: 18, scope: !92)
!92 = distinct !DILexicalBlock(scope: !18, file: !6, line: 37, column: 7)
!93 = !DILocation(line: 37, column: 7, scope: !92)
!94 = !DILocation(line: 37, column: 7, scope: !18)
!95 = !DILocation(line: 38, column: 5, scope: !92)
!96 = !DILocation(line: 39, column: 10, scope: !18)
!97 = !DILocation(line: 39, column: 16, scope: !18)
!98 = !DILocation(line: 39, column: 8, scope: !18)
!99 = !DILocation(line: 40, column: 10, scope: !18)
!100 = !DILocation(line: 40, column: 16, scope: !18)
!101 = !DILocation(line: 40, column: 8, scope: !18)
!102 = !DILocation(line: 41, column: 16, scope: !18)
!103 = !DILocation(line: 41, column: 3, scope: !18)
!104 = !DILocation(line: 41, column: 9, scope: !18)
!105 = !DILocation(line: 41, column: 14, scope: !18)
!106 = !DILocation(line: 42, column: 16, scope: !18)
!107 = !DILocation(line: 42, column: 3, scope: !18)
!108 = !DILocation(line: 42, column: 9, scope: !18)
!109 = !DILocation(line: 42, column: 14, scope: !18)
!110 = !DILocation(line: 43, column: 3, scope: !18)
!111 = !DILocation(line: 43, column: 9, scope: !18)
!112 = !DILocation(line: 43, column: 12, scope: !18)
!113 = !DILocation(line: 44, column: 11, scope: !18)
!114 = !DILocation(line: 44, column: 3, scope: !18)
!115 = !DILocation(line: 45, column: 1, scope: !18)
!116 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "head", arg: 1, scope: !47, file: !6, line: 22, type: !4)
!117 = !DILocation(line: 22, column: 28, scope: !47)
!118 = !DILocation(line: 22, column: 56, scope: !47)
!119 = !DILocation(line: 22, column: 44, scope: !47)
!120 = !DILocation(line: 22, column: 62, scope: !47)
!121 = !DILocation(line: 22, column: 36, scope: !47)
!122 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "head", arg: 1, scope: !21, file: !6, line: 47, type: !4)
!123 = !DILocation(line: 47, column: 26, scope: !21)
!124 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "item", arg: 2, scope: !21, file: !6, line: 47, type: !4)
!125 = !DILocation(line: 47, column: 37, scope: !21)
!126 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "next", scope: !21, file: !6, line: 48, type: !4)
!127 = !DILocation(line: 48, column: 8, scope: !21)
!128 = !DILocation(line: 48, column: 15, scope: !21)
!129 = !DILocation(line: 48, column: 21, scope: !21)
!130 = !DILocation(line: 49, column: 16, scope: !21)
!131 = !DILocation(line: 49, column: 3, scope: !21)
!132 = !DILocation(line: 49, column: 9, scope: !21)
!133 = !DILocation(line: 49, column: 14, scope: !21)
!134 = !DILocation(line: 50, column: 16, scope: !21)
!135 = !DILocation(line: 50, column: 3, scope: !21)
!136 = !DILocation(line: 50, column: 9, scope: !21)
!137 = !DILocation(line: 50, column: 14, scope: !21)
!138 = !DILocation(line: 51, column: 16, scope: !21)
!139 = !DILocation(line: 51, column: 3, scope: !21)
!140 = !DILocation(line: 51, column: 9, scope: !21)
!141 = !DILocation(line: 51, column: 14, scope: !21)
!142 = !DILocation(line: 52, column: 16, scope: !21)
!143 = !DILocation(line: 52, column: 3, scope: !21)
!144 = !DILocation(line: 52, column: 9, scope: !21)
!145 = !DILocation(line: 52, column: 14, scope: !21)
!146 = !DILocation(line: 53, column: 3, scope: !21)
!147 = !DILocation(line: 53, column: 9, scope: !21)
!148 = !DILocation(line: 53, column: 12, scope: !21)
!149 = !DILocation(line: 54, column: 1, scope: !21)
!150 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "head", arg: 1, scope: !22, file: !6, line: 56, type: !4)
!151 = !DILocation(line: 56, column: 25, scope: !22)
!152 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "next", scope: !22, file: !6, line: 57, type: !4)
!153 = !DILocation(line: 57, column: 8, scope: !22)
!154 = !DILocation(line: 58, column: 18, scope: !155)
!155 = distinct !DILexicalBlock(scope: !22, file: !6, line: 58, column: 7)
!156 = !DILocation(line: 58, column: 7, scope: !155)
!157 = !DILocation(line: 58, column: 7, scope: !22)
!158 = !DILocation(line: 59, column: 5, scope: !155)
!159 = !DILocation(line: 60, column: 10, scope: !22)
!160 = !DILocation(line: 60, column: 16, scope: !22)
!161 = !DILocation(line: 60, column: 8, scope: !22)
!162 = !DILocation(line: 61, column: 16, scope: !22)
!163 = !DILocation(line: 61, column: 22, scope: !22)
!164 = !DILocation(line: 61, column: 3, scope: !22)
!165 = !DILocation(line: 61, column: 9, scope: !22)
!166 = !DILocation(line: 61, column: 14, scope: !22)
!167 = !DILocation(line: 62, column: 22, scope: !22)
!168 = !DILocation(line: 62, column: 3, scope: !22)
!169 = !DILocation(line: 62, column: 9, scope: !22)
!170 = !DILocation(line: 62, column: 15, scope: !22)
!171 = !DILocation(line: 62, column: 20, scope: !22)
!172 = !DILocation(line: 63, column: 3, scope: !22)
!173 = !DILocation(line: 63, column: 9, scope: !22)
!174 = !DILocation(line: 63, column: 12, scope: !22)
!175 = !DILocation(line: 64, column: 11, scope: !22)
!176 = !DILocation(line: 64, column: 3, scope: !22)
!177 = !DILocation(line: 65, column: 1, scope: !22)
!178 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 1, scope: !23, file: !6, line: 67, type: !4)
!179 = !DILocation(line: 67, column: 21, scope: !23)
!180 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "y", arg: 2, scope: !23, file: !6, line: 67, type: !4)
!181 = !DILocation(line: 67, column: 29, scope: !23)
!182 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "xp", scope: !23, file: !6, line: 68, type: !4)
!183 = !DILocation(line: 68, column: 8, scope: !23)
!184 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "yp", scope: !23, file: !6, line: 68, type: !4)
!185 = !DILocation(line: 68, column: 13, scope: !23)
!186 = !DILocation(line: 70, column: 13, scope: !187)
!187 = distinct !DILexicalBlock(scope: !23, file: !6, line: 70, column: 3)
!188 = !DILocation(line: 70, column: 11, scope: !187)
!189 = !DILocation(line: 70, column: 21, scope: !187)
!190 = !DILocation(line: 70, column: 19, scope: !187)
!191 = !DILocation(line: 70, column: 8, scope: !187)
!192 = !DILocation(line: 70, column: 24, scope: !193)
!193 = !DILexicalBlockFile(scope: !194, file: !6, discriminator: 2)
!194 = !DILexicalBlockFile(scope: !195, file: !6, discriminator: 1)
!195 = distinct !DILexicalBlock(scope: !187, file: !6, line: 70, column: 3)
!196 = !DILocation(line: 70, column: 28, scope: !195)
!197 = !DILocation(line: 70, column: 36, scope: !195)
!198 = !DILocation(line: 70, column: 33, scope: !195)
!199 = !DILocation(line: 70, column: 3, scope: !187)
!200 = !DILocation(line: 71, column: 9, scope: !201)
!201 = distinct !DILexicalBlock(scope: !202, file: !6, line: 71, column: 9)
!202 = distinct !DILexicalBlock(scope: !195, file: !6, line: 70, column: 69)
!203 = !DILocation(line: 71, column: 13, scope: !201)
!204 = !DILocation(line: 71, column: 20, scope: !201)
!205 = !DILocation(line: 71, column: 24, scope: !201)
!206 = !DILocation(line: 71, column: 17, scope: !201)
!207 = !DILocation(line: 71, column: 9, scope: !202)
!208 = !DILocation(line: 72, column: 7, scope: !201)
!209 = !DILocation(line: 73, column: 3, scope: !202)
!210 = !DILocation(line: 70, column: 44, scope: !195)
!211 = !DILocation(line: 70, column: 48, scope: !195)
!212 = !DILocation(line: 70, column: 42, scope: !195)
!213 = !DILocation(line: 70, column: 59, scope: !195)
!214 = !DILocation(line: 70, column: 63, scope: !195)
!215 = !DILocation(line: 70, column: 57, scope: !195)
!216 = !DILocation(line: 70, column: 3, scope: !195)
!217 = !DILocation(line: 74, column: 7, scope: !218)
!218 = distinct !DILexicalBlock(scope: !23, file: !6, line: 74, column: 7)
!219 = !DILocation(line: 74, column: 11, scope: !218)
!220 = !DILocation(line: 74, column: 18, scope: !218)
!221 = !DILocation(line: 74, column: 22, scope: !218)
!222 = !DILocation(line: 74, column: 15, scope: !218)
!223 = !DILocation(line: 74, column: 7, scope: !23)
!224 = !DILocation(line: 75, column: 5, scope: !218)
!225 = !DILocation(line: 76, column: 11, scope: !23)
!226 = !DILocation(line: 76, column: 15, scope: !23)
!227 = !DILocation(line: 76, column: 23, scope: !23)
!228 = !DILocation(line: 76, column: 20, scope: !23)
!229 = !DILocation(line: 76, column: 3, scope: !23)
!230 = !DILocation(line: 77, column: 1, scope: !23)
!231 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "msg", arg: 1, scope: !26, file: !6, line: 79, type: !29)
!232 = !DILocation(line: 79, column: 23, scope: !26)
!233 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 2, scope: !26, file: !6, line: 79, type: !4)
!234 = !DILocation(line: 79, column: 33, scope: !26)
!235 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "xp", scope: !26, file: !6, line: 80, type: !4)
!236 = !DILocation(line: 80, column: 8, scope: !26)
!237 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "first", scope: !26, file: !6, line: 80, type: !4)
!238 = !DILocation(line: 80, column: 13, scope: !26)
!239 = !DILocation(line: 80, column: 21, scope: !26)
!240 = !DILocation(line: 80, column: 24, scope: !26)
!241 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !6, line: 81, type: !10)
!242 = !DILocation(line: 81, column: 7, scope: !26)
!243 = !DILocation(line: 82, column: 8, scope: !26)
!244 = !DILocation(line: 82, column: 3, scope: !26)
!245 = !DILocation(line: 83, column: 38, scope: !26)
!246 = !DILocation(line: 83, column: 26, scope: !26)
!247 = !DILocation(line: 83, column: 3, scope: !26)
!248 = !DILocation(line: 84, column: 13, scope: !249)
!249 = distinct !DILexicalBlock(scope: !26, file: !6, line: 84, column: 3)
!250 = !DILocation(line: 84, column: 16, scope: !249)
!251 = !DILocation(line: 84, column: 11, scope: !249)
!252 = !DILocation(line: 84, column: 8, scope: !249)
!253 = !DILocation(line: 84, column: 22, scope: !254)
!254 = !DILexicalBlockFile(scope: !255, file: !6, discriminator: 2)
!255 = !DILexicalBlockFile(scope: !256, file: !6, discriminator: 1)
!256 = distinct !DILexicalBlock(scope: !249, file: !6, line: 84, column: 3)
!257 = !DILocation(line: 84, column: 26, scope: !256)
!258 = !DILocation(line: 84, column: 34, scope: !256)
!259 = !DILocation(line: 84, column: 31, scope: !256)
!260 = !DILocation(line: 84, column: 3, scope: !249)
!261 = !DILocation(line: 85, column: 44, scope: !262)
!262 = distinct !DILexicalBlock(scope: !256, file: !6, line: 84, column: 56)
!263 = !DILocation(line: 86, column: 12, scope: !262)
!264 = !DILocation(line: 86, column: 16, scope: !262)
!265 = !DILocation(line: 86, column: 21, scope: !262)
!266 = !DILocation(line: 86, column: 25, scope: !262)
!267 = !DILocation(line: 86, column: 31, scope: !262)
!268 = !DILocation(line: 86, column: 36, scope: !262)
!269 = !DILocation(line: 86, column: 40, scope: !262)
!270 = !DILocation(line: 86, column: 46, scope: !262)
!271 = !DILocation(line: 85, column: 5, scope: !262)
!272 = !DILocation(line: 87, column: 3, scope: !262)
!273 = !DILocation(line: 84, column: 46, scope: !256)
!274 = !DILocation(line: 84, column: 50, scope: !256)
!275 = !DILocation(line: 84, column: 44, scope: !256)
!276 = !DILocation(line: 84, column: 3, scope: !256)
!277 = !DILocation(line: 88, column: 3, scope: !26)
!278 = !DILocation(line: 89, column: 45, scope: !26)
!279 = !DILocation(line: 89, column: 49, scope: !26)
!280 = !DILocation(line: 89, column: 55, scope: !26)
!281 = !DILocation(line: 89, column: 3, scope: !26)
!282 = !DILocation(line: 90, column: 1, scope: !26)
!283 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "head", arg: 1, scope: !50, file: !6, line: 21, type: !4)
!284 = !DILocation(line: 21, column: 29, scope: !50)
!285 = !DILocation(line: 21, column: 45, scope: !50)
!286 = !DILocation(line: 21, column: 51, scope: !50)
!287 = !DILocation(line: 21, column: 37, scope: !50)
!288 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "l", scope: !31, file: !6, line: 93, type: !4)
!289 = !DILocation(line: 93, column: 8, scope: !31)
!290 = !DILocation(line: 93, column: 19, scope: !31)
!291 = !DILocation(line: 93, column: 12, scope: !31)
!292 = !DILocation(line: 94, column: 13, scope: !31)
!293 = !DILocation(line: 94, column: 3, scope: !31)
!294 = !DILocation(line: 94, column: 6, scope: !31)
!295 = !DILocation(line: 94, column: 11, scope: !31)
!296 = !DILocation(line: 95, column: 13, scope: !31)
!297 = !DILocation(line: 95, column: 3, scope: !31)
!298 = !DILocation(line: 95, column: 6, scope: !31)
!299 = !DILocation(line: 95, column: 11, scope: !31)
!300 = !DILocation(line: 96, column: 3, scope: !31)
!301 = !DILocation(line: 96, column: 6, scope: !31)
!302 = !DILocation(line: 96, column: 10, scope: !31)
!303 = !DILocation(line: 97, column: 11, scope: !31)
!304 = !DILocation(line: 97, column: 3, scope: !31)
!305 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from", arg: 1, scope: !33, file: !6, line: 101, type: !10)
!306 = !DILocation(line: 101, column: 24, scope: !33)
!307 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to", arg: 2, scope: !33, file: !6, line: 101, type: !10)
!308 = !DILocation(line: 101, column: 34, scope: !33)
!309 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !33, file: !6, line: 102, type: !10)
!310 = !DILocation(line: 102, column: 7, scope: !33)
!311 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !33, file: !6, line: 102, type: !10)
!312 = !DILocation(line: 102, column: 13, scope: !33)
!313 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !33, file: !6, line: 102, type: !10)
!314 = !DILocation(line: 102, column: 18, scope: !33)
!315 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !33, file: !6, line: 102, type: !10)
!316 = !DILocation(line: 102, column: 21, scope: !33)
!317 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "l", scope: !33, file: !6, line: 103, type: !4)
!318 = !DILocation(line: 103, column: 8, scope: !33)
!319 = !DILocation(line: 104, column: 7, scope: !320)
!320 = distinct !DILexicalBlock(scope: !33, file: !6, line: 104, column: 7)
!321 = !DILocation(line: 104, column: 14, scope: !320)
!322 = !DILocation(line: 104, column: 12, scope: !320)
!323 = !DILocation(line: 104, column: 7, scope: !33)
!324 = !DILocation(line: 105, column: 11, scope: !325)
!325 = distinct !DILexicalBlock(scope: !320, file: !6, line: 104, column: 18)
!326 = !DILocation(line: 105, column: 9, scope: !325)
!327 = !DILocation(line: 106, column: 12, scope: !325)
!328 = !DILocation(line: 106, column: 10, scope: !325)
!329 = !DILocation(line: 107, column: 10, scope: !325)
!330 = !DILocation(line: 107, column: 8, scope: !325)
!331 = !DILocation(line: 108, column: 3, scope: !325)
!332 = !DILocation(line: 109, column: 10, scope: !33)
!333 = !DILocation(line: 109, column: 15, scope: !33)
!334 = !DILocation(line: 109, column: 13, scope: !33)
!335 = !DILocation(line: 109, column: 20, scope: !33)
!336 = !DILocation(line: 109, column: 8, scope: !33)
!337 = !DILocation(line: 110, column: 22, scope: !33)
!338 = !DILocation(line: 110, column: 27, scope: !33)
!339 = !DILocation(line: 110, column: 21, scope: !33)
!340 = !DILocation(line: 110, column: 32, scope: !33)
!341 = !DILocation(line: 110, column: 14, scope: !33)
!342 = !DILocation(line: 110, column: 7, scope: !33)
!343 = !DILocation(line: 110, column: 5, scope: !33)
!344 = !DILocation(line: 111, column: 7, scope: !33)
!345 = !DILocation(line: 112, column: 10, scope: !346)
!346 = distinct !DILexicalBlock(scope: !33, file: !6, line: 112, column: 3)
!347 = !DILocation(line: 112, column: 17, scope: !346)
!348 = !DILocation(line: 112, column: 8, scope: !346)
!349 = !DILocation(line: 112, column: 22, scope: !350)
!350 = !DILexicalBlockFile(scope: !351, file: !6, discriminator: 2)
!351 = !DILexicalBlockFile(scope: !352, file: !6, discriminator: 1)
!352 = distinct !DILexicalBlock(scope: !346, file: !6, line: 112, column: 3)
!353 = !DILocation(line: 112, column: 26, scope: !352)
!354 = !DILocation(line: 112, column: 24, scope: !352)
!355 = !DILocation(line: 112, column: 3, scope: !346)
!356 = !DILocation(line: 113, column: 20, scope: !357)
!357 = distinct !DILexicalBlock(scope: !352, file: !6, line: 112, column: 42)
!358 = !DILocation(line: 113, column: 22, scope: !357)
!359 = !DILocation(line: 113, column: 18, scope: !357)
!360 = !DILocation(line: 113, column: 7, scope: !357)
!361 = !DILocation(line: 113, column: 5, scope: !357)
!362 = !DILocation(line: 113, column: 10, scope: !357)
!363 = !DILocation(line: 113, column: 15, scope: !357)
!364 = !DILocation(line: 114, column: 20, scope: !357)
!365 = !DILocation(line: 114, column: 22, scope: !357)
!366 = !DILocation(line: 114, column: 18, scope: !357)
!367 = !DILocation(line: 114, column: 7, scope: !357)
!368 = !DILocation(line: 114, column: 5, scope: !357)
!369 = !DILocation(line: 114, column: 10, scope: !357)
!370 = !DILocation(line: 114, column: 15, scope: !357)
!371 = !DILocation(line: 115, column: 20, scope: !357)
!372 = !DILocation(line: 115, column: 7, scope: !357)
!373 = !DILocation(line: 115, column: 5, scope: !357)
!374 = !DILocation(line: 115, column: 10, scope: !357)
!375 = !DILocation(line: 115, column: 14, scope: !357)
!376 = !DILocation(line: 116, column: 3, scope: !357)
!377 = !DILocation(line: 112, column: 32, scope: !352)
!378 = !DILocation(line: 112, column: 37, scope: !352)
!379 = !DILocation(line: 112, column: 3, scope: !352)
!380 = !DILocation(line: 117, column: 18, scope: !33)
!381 = !DILocation(line: 117, column: 16, scope: !33)
!382 = !DILocation(line: 117, column: 3, scope: !33)
!383 = !DILocation(line: 117, column: 8, scope: !33)
!384 = !DILocation(line: 117, column: 13, scope: !33)
!385 = !DILocation(line: 118, column: 19, scope: !33)
!386 = !DILocation(line: 118, column: 5, scope: !33)
!387 = !DILocation(line: 118, column: 3, scope: !33)
!388 = !DILocation(line: 118, column: 11, scope: !33)
!389 = !DILocation(line: 118, column: 16, scope: !33)
!390 = !DILocation(line: 119, column: 21, scope: !33)
!391 = !DILocation(line: 119, column: 26, scope: !33)
!392 = !DILocation(line: 119, column: 19, scope: !33)
!393 = !DILocation(line: 119, column: 5, scope: !33)
!394 = !DILocation(line: 119, column: 3, scope: !33)
!395 = !DILocation(line: 119, column: 11, scope: !33)
!396 = !DILocation(line: 119, column: 16, scope: !33)
!397 = !DILocation(line: 120, column: 17, scope: !33)
!398 = !DILocation(line: 120, column: 5, scope: !33)
!399 = !DILocation(line: 120, column: 3, scope: !33)
!400 = !DILocation(line: 120, column: 11, scope: !33)
!401 = !DILocation(line: 120, column: 15, scope: !33)
!402 = !DILocation(line: 121, column: 14, scope: !33)
!403 = !DILocation(line: 121, column: 3, scope: !33)
!404 = !DILocation(line: 121, column: 8, scope: !33)
!405 = !DILocation(line: 121, column: 12, scope: !33)
!406 = !DILocation(line: 122, column: 11, scope: !33)
!407 = !DILocation(line: 122, column: 3, scope: !33)
!408 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 1, scope: !36, file: !6, line: 124, type: !4)
!409 = !DILocation(line: 124, column: 21, scope: !36)
!410 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !36, file: !6, line: 125, type: !10)
!411 = !DILocation(line: 125, column: 7, scope: !36)
!412 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !36, file: !6, line: 125, type: !10)
!413 = !DILocation(line: 125, column: 10, scope: !36)
!414 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !36, file: !6, line: 125, type: !10)
!415 = !DILocation(line: 125, column: 13, scope: !36)
!416 = !DILocation(line: 125, column: 32, scope: !36)
!417 = !DILocation(line: 125, column: 20, scope: !36)
!418 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "xp", scope: !36, file: !6, line: 126, type: !4)
!419 = !DILocation(line: 126, column: 8, scope: !36)
!420 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "l", scope: !36, file: !6, line: 126, type: !4)
!421 = !DILocation(line: 126, column: 13, scope: !36)
!422 = !DILocation(line: 126, column: 32, scope: !36)
!423 = !DILocation(line: 126, column: 37, scope: !36)
!424 = !DILocation(line: 126, column: 31, scope: !36)
!425 = !DILocation(line: 126, column: 42, scope: !36)
!426 = !DILocation(line: 126, column: 24, scope: !36)
!427 = !DILocation(line: 126, column: 17, scope: !36)
!428 = !DILocation(line: 127, column: 10, scope: !429)
!429 = distinct !DILexicalBlock(scope: !36, file: !6, line: 127, column: 3)
!430 = !DILocation(line: 127, column: 17, scope: !429)
!431 = !DILocation(line: 127, column: 27, scope: !429)
!432 = !DILocation(line: 127, column: 25, scope: !429)
!433 = !DILocation(line: 127, column: 8, scope: !429)
!434 = !DILocation(line: 127, column: 30, scope: !435)
!435 = !DILexicalBlockFile(scope: !436, file: !6, discriminator: 2)
!436 = !DILexicalBlockFile(scope: !437, file: !6, discriminator: 1)
!437 = distinct !DILexicalBlock(scope: !429, file: !6, line: 127, column: 3)
!438 = !DILocation(line: 127, column: 34, scope: !437)
!439 = !DILocation(line: 127, column: 32, scope: !437)
!440 = !DILocation(line: 127, column: 3, scope: !429)
!441 = !DILocation(line: 128, column: 20, scope: !442)
!442 = distinct !DILexicalBlock(scope: !437, file: !6, line: 127, column: 65)
!443 = !DILocation(line: 128, column: 18, scope: !442)
!444 = !DILocation(line: 128, column: 7, scope: !442)
!445 = !DILocation(line: 128, column: 5, scope: !442)
!446 = !DILocation(line: 128, column: 10, scope: !442)
!447 = !DILocation(line: 128, column: 15, scope: !442)
!448 = !DILocation(line: 129, column: 20, scope: !442)
!449 = !DILocation(line: 129, column: 18, scope: !442)
!450 = !DILocation(line: 129, column: 7, scope: !442)
!451 = !DILocation(line: 129, column: 5, scope: !442)
!452 = !DILocation(line: 129, column: 10, scope: !442)
!453 = !DILocation(line: 129, column: 15, scope: !442)
!454 = !DILocation(line: 130, column: 16, scope: !442)
!455 = !DILocation(line: 130, column: 20, scope: !442)
!456 = !DILocation(line: 130, column: 7, scope: !442)
!457 = !DILocation(line: 130, column: 5, scope: !442)
!458 = !DILocation(line: 130, column: 10, scope: !442)
!459 = !DILocation(line: 130, column: 14, scope: !442)
!460 = !DILocation(line: 131, column: 3, scope: !442)
!461 = !DILocation(line: 127, column: 41, scope: !437)
!462 = !DILocation(line: 127, column: 46, scope: !437)
!463 = !DILocation(line: 127, column: 55, scope: !437)
!464 = !DILocation(line: 127, column: 59, scope: !437)
!465 = !DILocation(line: 127, column: 53, scope: !437)
!466 = !DILocation(line: 127, column: 3, scope: !437)
!467 = !DILocation(line: 132, column: 18, scope: !36)
!468 = !DILocation(line: 132, column: 16, scope: !36)
!469 = !DILocation(line: 132, column: 3, scope: !36)
!470 = !DILocation(line: 132, column: 8, scope: !36)
!471 = !DILocation(line: 132, column: 13, scope: !36)
!472 = !DILocation(line: 133, column: 19, scope: !36)
!473 = !DILocation(line: 133, column: 5, scope: !36)
!474 = !DILocation(line: 133, column: 3, scope: !36)
!475 = !DILocation(line: 133, column: 11, scope: !36)
!476 = !DILocation(line: 133, column: 16, scope: !36)
!477 = !DILocation(line: 134, column: 27, scope: !36)
!478 = !DILocation(line: 134, column: 17, scope: !36)
!479 = !DILocation(line: 134, column: 31, scope: !36)
!480 = !DILocation(line: 134, column: 5, scope: !36)
!481 = !DILocation(line: 134, column: 3, scope: !36)
!482 = !DILocation(line: 134, column: 11, scope: !36)
!483 = !DILocation(line: 134, column: 15, scope: !36)
!484 = !DILocation(line: 135, column: 11, scope: !36)
!485 = !DILocation(line: 135, column: 3, scope: !36)
!486 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "head", arg: 1, scope: !51, file: !6, line: 24, type: !4)
!487 = !DILocation(line: 24, column: 28, scope: !51)
!488 = !DILocation(line: 24, column: 44, scope: !51)
!489 = !DILocation(line: 24, column: 50, scope: !51)
!490 = !DILocation(line: 24, column: 36, scope: !51)
!491 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "head", arg: 1, scope: !37, file: !6, line: 138, type: !4)
!492 = !DILocation(line: 138, column: 24, scope: !37)
!493 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !37, file: !6, line: 139, type: !4)
!494 = !DILocation(line: 139, column: 8, scope: !37)
!495 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !37, file: !6, line: 139, type: !4)
!496 = !DILocation(line: 139, column: 14, scope: !37)
!497 = !DILocation(line: 139, column: 18, scope: !37)
!498 = !DILocation(line: 140, column: 3, scope: !37)
!499 = !DILocation(line: 141, column: 11, scope: !500)
!500 = distinct !DILexicalBlock(scope: !37, file: !6, line: 140, column: 6)
!501 = !DILocation(line: 141, column: 14, scope: !500)
!502 = !DILocation(line: 141, column: 9, scope: !500)
!503 = !DILocation(line: 142, column: 15, scope: !500)
!504 = !DILocation(line: 142, column: 18, scope: !500)
!505 = !DILocation(line: 142, column: 5, scope: !500)
!506 = !DILocation(line: 142, column: 8, scope: !500)
!507 = !DILocation(line: 142, column: 13, scope: !500)
!508 = !DILocation(line: 143, column: 15, scope: !500)
!509 = !DILocation(line: 143, column: 5, scope: !500)
!510 = !DILocation(line: 143, column: 8, scope: !500)
!511 = !DILocation(line: 143, column: 13, scope: !500)
!512 = !DILocation(line: 144, column: 9, scope: !500)
!513 = !DILocation(line: 144, column: 7, scope: !500)
!514 = !DILocation(line: 145, column: 3, scope: !500)
!515 = !DILocation(line: 145, column: 12, scope: !516)
!516 = !DILexicalBlockFile(scope: !37, file: !6, discriminator: 1)
!517 = !DILocation(line: 145, column: 17, scope: !37)
!518 = !DILocation(line: 145, column: 14, scope: !37)
!519 = !DILocation(line: 146, column: 1, scope: !37)
!520 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !40, file: !6, line: 149, type: !10)
!521 = !DILocation(line: 149, column: 7, scope: !40)
!522 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "li1", scope: !40, file: !6, line: 151, type: !4)
!523 = !DILocation(line: 151, column: 8, scope: !40)
!524 = !DILocation(line: 151, column: 14, scope: !40)
!525 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "li2", scope: !40, file: !6, line: 153, type: !4)
!526 = !DILocation(line: 153, column: 8, scope: !40)
!527 = !DILocation(line: 153, column: 24, scope: !40)
!528 = !DILocation(line: 153, column: 14, scope: !40)
!529 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "li3", scope: !40, file: !6, line: 156, type: !4)
!530 = !DILocation(line: 156, column: 8, scope: !40)
!531 = !DILocation(line: 156, column: 14, scope: !40)
!532 = !DILocation(line: 158, column: 19, scope: !533)
!533 = distinct !DILexicalBlock(scope: !40, file: !6, line: 158, column: 7)
!534 = !DILocation(line: 158, column: 24, scope: !533)
!535 = !DILocation(line: 158, column: 8, scope: !533)
!536 = !DILocation(line: 158, column: 7, scope: !40)
!537 = !DILocation(line: 159, column: 5, scope: !538)
!538 = distinct !DILexicalBlock(scope: !533, file: !6, line: 158, column: 30)
!539 = !DILocation(line: 160, column: 5, scope: !538)
!540 = !DILocation(line: 162, column: 3, scope: !40)
!541 = !DILocation(line: 162, column: 22, scope: !542)
!542 = !DILexicalBlockFile(scope: !543, file: !6, discriminator: 2)
!543 = !DILexicalBlockFile(scope: !40, file: !6, discriminator: 1)
!544 = !DILocation(line: 162, column: 11, scope: !40)
!545 = !DILocation(line: 162, column: 10, scope: !40)
!546 = !DILocation(line: 163, column: 20, scope: !547)
!547 = distinct !DILexicalBlock(scope: !40, file: !6, line: 162, column: 28)
!548 = !DILocation(line: 163, column: 39, scope: !547)
!549 = !DILocation(line: 163, column: 25, scope: !547)
!550 = !DILocation(line: 163, column: 5, scope: !547)
!551 = !DILocation(line: 166, column: 19, scope: !552)
!552 = distinct !DILexicalBlock(scope: !40, file: !6, line: 166, column: 7)
!553 = !DILocation(line: 166, column: 8, scope: !552)
!554 = !DILocation(line: 166, column: 7, scope: !40)
!555 = !DILocation(line: 167, column: 5, scope: !556)
!556 = distinct !DILexicalBlock(scope: !552, file: !6, line: 166, column: 25)
!557 = !DILocation(line: 168, column: 5, scope: !556)
!558 = !DILocation(line: 172, column: 3, scope: !40)
!559 = !DILocation(line: 172, column: 22, scope: !542)
!560 = !DILocation(line: 172, column: 11, scope: !40)
!561 = !DILocation(line: 172, column: 10, scope: !40)
!562 = !DILocation(line: 173, column: 20, scope: !563)
!563 = distinct !DILexicalBlock(scope: !40, file: !6, line: 172, column: 28)
!564 = !DILocation(line: 173, column: 39, scope: !563)
!565 = !DILocation(line: 173, column: 25, scope: !563)
!566 = !DILocation(line: 173, column: 5, scope: !563)
!567 = !DILocation(line: 176, column: 19, scope: !568)
!568 = distinct !DILexicalBlock(scope: !40, file: !6, line: 176, column: 7)
!569 = !DILocation(line: 176, column: 8, scope: !568)
!570 = !DILocation(line: 176, column: 7, scope: !40)
!571 = !DILocation(line: 177, column: 5, scope: !572)
!572 = distinct !DILexicalBlock(scope: !568, file: !6, line: 176, column: 25)
!573 = !DILocation(line: 178, column: 5, scope: !572)
!574 = !DILocation(line: 181, column: 16, scope: !40)
!575 = !DILocation(line: 181, column: 3, scope: !40)
!576 = !DILocation(line: 183, column: 18, scope: !577)
!577 = distinct !DILexicalBlock(scope: !40, file: !6, line: 183, column: 7)
!578 = !DILocation(line: 183, column: 7, scope: !577)
!579 = !DILocation(line: 183, column: 24, scope: !577)
!580 = !DILocation(line: 183, column: 28, scope: !577)
!581 = !DILocation(line: 183, column: 7, scope: !40)
!582 = !DILocation(line: 185, column: 29, scope: !583)
!583 = distinct !DILexicalBlock(scope: !577, file: !6, line: 183, column: 37)
!584 = !DILocation(line: 185, column: 18, scope: !583)
!585 = !DILocation(line: 185, column: 35, scope: !583)
!586 = !DILocation(line: 184, column: 5, scope: !583)
!587 = !DILocation(line: 186, column: 5, scope: !583)
!588 = !DILocation(line: 189, column: 17, scope: !589)
!589 = distinct !DILexicalBlock(scope: !40, file: !6, line: 189, column: 7)
!590 = !DILocation(line: 189, column: 7, scope: !589)
!591 = !DILocation(line: 189, column: 23, scope: !589)
!592 = !DILocation(line: 189, column: 27, scope: !589)
!593 = !DILocation(line: 189, column: 7, scope: !40)
!594 = !DILocation(line: 191, column: 28, scope: !595)
!595 = distinct !DILexicalBlock(scope: !589, file: !6, line: 189, column: 33)
!596 = !DILocation(line: 191, column: 18, scope: !595)
!597 = !DILocation(line: 191, column: 34, scope: !595)
!598 = !DILocation(line: 190, column: 5, scope: !595)
!599 = !DILocation(line: 192, column: 5, scope: !595)
!600 = !DILocation(line: 195, column: 18, scope: !601)
!601 = distinct !DILexicalBlock(scope: !40, file: !6, line: 195, column: 7)
!602 = !DILocation(line: 195, column: 7, scope: !601)
!603 = !DILocation(line: 195, column: 24, scope: !601)
!604 = !DILocation(line: 195, column: 28, scope: !601)
!605 = !DILocation(line: 195, column: 7, scope: !40)
!606 = !DILocation(line: 197, column: 29, scope: !607)
!607 = distinct !DILexicalBlock(scope: !601, file: !6, line: 195, column: 37)
!608 = !DILocation(line: 197, column: 18, scope: !607)
!609 = !DILocation(line: 197, column: 35, scope: !607)
!610 = !DILocation(line: 196, column: 5, scope: !607)
!611 = !DILocation(line: 198, column: 5, scope: !607)
!612 = !DILocation(line: 201, column: 17, scope: !613)
!613 = distinct !DILexicalBlock(scope: !40, file: !6, line: 201, column: 7)
!614 = !DILocation(line: 201, column: 7, scope: !613)
!615 = !DILocation(line: 201, column: 23, scope: !613)
!616 = !DILocation(line: 201, column: 27, scope: !613)
!617 = !DILocation(line: 201, column: 7, scope: !40)
!618 = !DILocation(line: 203, column: 28, scope: !619)
!619 = distinct !DILexicalBlock(scope: !613, file: !6, line: 201, column: 33)
!620 = !DILocation(line: 203, column: 18, scope: !619)
!621 = !DILocation(line: 203, column: 34, scope: !619)
!622 = !DILocation(line: 202, column: 5, scope: !619)
!623 = !DILocation(line: 204, column: 5, scope: !619)
!624 = !DILocation(line: 207, column: 19, scope: !625)
!625 = distinct !DILexicalBlock(scope: !40, file: !6, line: 207, column: 7)
!626 = !DILocation(line: 207, column: 7, scope: !625)
!627 = !DILocation(line: 207, column: 24, scope: !625)
!628 = !DILocation(line: 207, column: 7, scope: !40)
!629 = !DILocation(line: 209, column: 30, scope: !630)
!630 = distinct !DILexicalBlock(scope: !625, file: !6, line: 207, column: 33)
!631 = !DILocation(line: 209, column: 18, scope: !630)
!632 = !DILocation(line: 208, column: 5, scope: !630)
!633 = !DILocation(line: 210, column: 5, scope: !630)
!634 = !DILocation(line: 213, column: 19, scope: !635)
!635 = distinct !DILexicalBlock(scope: !40, file: !6, line: 213, column: 7)
!636 = !DILocation(line: 213, column: 24, scope: !635)
!637 = !DILocation(line: 213, column: 8, scope: !635)
!638 = !DILocation(line: 213, column: 7, scope: !40)
!639 = !DILocation(line: 214, column: 5, scope: !640)
!640 = distinct !DILexicalBlock(scope: !635, file: !6, line: 213, column: 30)
!641 = !DILocation(line: 215, column: 5, scope: !640)
!642 = !DILocation(line: 217, column: 21, scope: !40)
!643 = !DILocation(line: 217, column: 9, scope: !40)
!644 = !DILocation(line: 217, column: 7, scope: !40)
!645 = !DILocation(line: 218, column: 8, scope: !40)
!646 = !DILocation(line: 218, column: 3, scope: !40)
!647 = !DILocation(line: 219, column: 8, scope: !40)
!648 = !DILocation(line: 219, column: 3, scope: !40)
!649 = !DILocation(line: 220, column: 8, scope: !40)
!650 = !DILocation(line: 220, column: 3, scope: !40)
!651 = !DILocation(line: 222, column: 11, scope: !40)
!652 = !DILocation(line: 222, column: 3, scope: !40)
!653 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "head", arg: 1, scope: !52, file: !6, line: 23, type: !4)
!654 = !DILocation(line: 23, column: 29, scope: !52)
!655 = !DILocation(line: 23, column: 45, scope: !52)
!656 = !DILocation(line: 23, column: 51, scope: !52)
!657 = !DILocation(line: 23, column: 37, scope: !52)
!658 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !43, file: !6, line: 225, type: !10)
!659 = !DILocation(line: 225, column: 14, scope: !43)
!660 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !43, file: !6, line: 225, type: !46)
!661 = !DILocation(line: 225, column: 26, scope: !43)
!662 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !43, file: !6, line: 231, type: !10)
!663 = !DILocation(line: 231, column: 7, scope: !43)
!664 = !DILocation(line: 231, column: 13, scope: !43)
!665 = !DILocation(line: 231, column: 18, scope: !43)
!666 = !DILocation(line: 231, column: 12, scope: !43)
!667 = !DILocation(line: 231, column: 31, scope: !668)
!668 = !DILexicalBlockFile(scope: !43, file: !6, discriminator: 1)
!669 = !DILocation(line: 231, column: 26, scope: !43)
!670 = !DILocation(line: 231, column: 12, scope: !671)
!671 = !DILexicalBlockFile(scope: !43, file: !6, discriminator: 2)
!672 = !DILocation(line: 231, column: 7, scope: !673)
!673 = !DILexicalBlockFile(scope: !674, file: !6, discriminator: 4)
!674 = !DILexicalBlockFile(scope: !43, file: !6, discriminator: 3)
!675 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !43, file: !6, line: 232, type: !10)
!676 = !DILocation(line: 232, column: 7, scope: !43)
!677 = !DILocation(line: 233, column: 3, scope: !43)
!678 = !DILocation(line: 233, column: 11, scope: !679)
!679 = !DILexicalBlockFile(scope: !668, file: !6, discriminator: 2)
!680 = !DILocation(line: 234, column: 14, scope: !43)
!681 = !DILocation(line: 234, column: 12, scope: !43)
!682 = !DILocation(line: 235, column: 18, scope: !43)
!683 = !DILocation(line: 235, column: 3, scope: !43)
!684 = !DILocation(line: 236, column: 3, scope: !43)
