; ModuleID = '/home/gleison/tf/Benchmarks/Shootout/random/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [6 x i8] c"%.9f\0A\00", align 1
@gen_random.last = internal global i64 42, align 8

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %N = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !22, metadata !23), !dbg !24
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !25, metadata !23), !dbg !26
  call void @llvm.dbg.declare(metadata i32* %N, metadata !27, metadata !23), !dbg !28
  %0 = load i32, i32* %argc.addr, align 4, !dbg !29
  %cmp = icmp eq i32 %0, 2, !dbg !30
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !31

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !32
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 1, !dbg !32
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !32
  %call = call i32 @atoi(i8* %2) #4, !dbg !34
  br label %cond.end, !dbg !31

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !35

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 400000000, %cond.false ], !dbg !31
  %sub = sub nsw i32 %cond, 1, !dbg !37
  store i32 %sub, i32* %N, align 4, !dbg !28
  br label %while.cond, !dbg !40

while.cond:                                       ; preds = %while.body, %cond.end
  %3 = load i32, i32* %N, align 4, !dbg !41
  %dec = add nsw i32 %3, -1, !dbg !41
  store i32 %dec, i32* %N, align 4, !dbg !41
  %tobool = icmp ne i32 %3, 0, !dbg !40
  br i1 %tobool, label %while.body, label %while.end, !dbg !40

while.body:                                       ; preds = %while.cond
  %call1 = call double @gen_random(double 1.000000e+02), !dbg !43
  br label %while.cond, !dbg !40

while.end:                                        ; preds = %while.cond
  %call2 = call double @gen_random(double 1.000000e+02), !dbg !45
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), double %call2), !dbg !46
  ret i32 0, !dbg !47
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #2

; Function Attrs: nounwind uwtable
define internal double @gen_random(double %max) #0 {
entry:
  %max.addr = alloca double, align 8
  store double %max, double* %max.addr, align 8
  call void @llvm.dbg.declare(metadata double* %max.addr, metadata !48, metadata !23), !dbg !49
  %0 = load i64, i64* @gen_random.last, align 8, !dbg !50
  %mul = mul nsw i64 %0, 3877, !dbg !51
  %add = add nsw i64 %mul, 29573, !dbg !52
  %rem = srem i64 %add, 139968, !dbg !53
  store i64 %rem, i64* @gen_random.last, align 8, !dbg !54
  %1 = load double, double* %max.addr, align 8, !dbg !55
  %2 = load i64, i64* @gen_random.last, align 8, !dbg !56
  %conv = sitofp i64 %2 to double, !dbg !56
  %mul1 = fmul double %1, %conv, !dbg !57
  %div = fdiv double %mul1, 1.399680e+05, !dbg !58
  ret double %div, !dbg !59
}

declare i32 @printf(i8*, ...) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!19, !20}
!llvm.ident = !{!21}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3, globals: !16)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/random")
!2 = !{}
!3 = !{!4, !12}
!4 = !DISubprogram(name: "main", scope: !5, file: !5, line: 23, type: !6, isLocal: false, isDefinition: true, scopeLine: 23, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Shootout/random/tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/random")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8, !9}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!12 = !DISubprogram(name: "gen_random", scope: !5, file: !5, line: 16, type: !13, isLocal: true, isDefinition: true, scopeLine: 16, flags: DIFlagPrototyped, isOptimized: false, function: double (double)* @gen_random, variables: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{!15, !15}
!15 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!16 = !{!17}
!17 = !DIGlobalVariable(name: "last", scope: !12, file: !5, line: 17, type: !18, isLocal: true, isDefinition: true, variable: i64* @gen_random.last)
!18 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!19 = !{i32 2, !"Dwarf Version", i32 4}
!20 = !{i32 2, !"Debug Info Version", i32 3}
!21 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!22 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !4, file: !5, line: 23, type: !8)
!23 = !DIExpression()
!24 = !DILocation(line: 23, column: 14, scope: !4)
!25 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !4, file: !5, line: 23, type: !9)
!26 = !DILocation(line: 23, column: 26, scope: !4)
!27 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "N", scope: !4, file: !5, line: 29, type: !8)
!28 = !DILocation(line: 29, column: 7, scope: !4)
!29 = !DILocation(line: 29, column: 13, scope: !4)
!30 = !DILocation(line: 29, column: 18, scope: !4)
!31 = !DILocation(line: 29, column: 12, scope: !4)
!32 = !DILocation(line: 29, column: 31, scope: !33)
!33 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 1)
!34 = !DILocation(line: 29, column: 26, scope: !4)
!35 = !DILocation(line: 29, column: 12, scope: !36)
!36 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 2)
!37 = !DILocation(line: 29, column: 50, scope: !38)
!38 = !DILexicalBlockFile(scope: !39, file: !5, discriminator: 4)
!39 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 3)
!40 = !DILocation(line: 31, column: 3, scope: !4)
!41 = !DILocation(line: 31, column: 11, scope: !42)
!42 = !DILexicalBlockFile(scope: !33, file: !5, discriminator: 2)
!43 = !DILocation(line: 32, column: 5, scope: !44)
!44 = distinct !DILexicalBlock(scope: !4, file: !5, line: 31, column: 15)
!45 = !DILocation(line: 34, column: 20, scope: !4)
!46 = !DILocation(line: 34, column: 3, scope: !4)
!47 = !DILocation(line: 35, column: 3, scope: !4)
!48 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "max", arg: 1, scope: !12, file: !5, line: 16, type: !15)
!49 = !DILocation(line: 16, column: 33, scope: !12)
!50 = !DILocation(line: 19, column: 11, scope: !12)
!51 = !DILocation(line: 19, column: 16, scope: !12)
!52 = !DILocation(line: 19, column: 21, scope: !12)
!53 = !DILocation(line: 19, column: 27, scope: !12)
!54 = !DILocation(line: 19, column: 8, scope: !12)
!55 = !DILocation(line: 20, column: 11, scope: !12)
!56 = !DILocation(line: 20, column: 17, scope: !12)
!57 = !DILocation(line: 20, column: 15, scope: !12)
!58 = !DILocation(line: 20, column: 22, scope: !12)
!59 = !DILocation(line: 20, column: 3, scope: !12)
