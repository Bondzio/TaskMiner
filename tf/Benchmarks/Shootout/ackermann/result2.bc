; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [15 x i8] c"Ack(3,%d): %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @Ack(i32 %M, i32 %N) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %M, i64 0, metadata !18, metadata !19), !dbg !20
  call void @llvm.dbg.value(metadata i32 %N, i64 0, metadata !21, metadata !19), !dbg !22
  %cmp = icmp eq i32 %M, 0, !dbg !23
  br i1 %cmp, label %if.then, label %if.end, !dbg !25

if.then:                                          ; preds = %entry
  %add = add nsw i32 %N, 1, !dbg !26
  br label %return, !dbg !27

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq i32 %N, 0, !dbg !28
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !30

if.then.2:                                        ; preds = %if.end
  %sub = sub nsw i32 %M, 1, !dbg !31
  %call = call i32 @Ack(i32 %sub, i32 1), !dbg !32
  br label %return, !dbg !33

if.end.3:                                         ; preds = %if.end
  %sub4 = sub nsw i32 %M, 1, !dbg !34
  %sub5 = sub nsw i32 %N, 1, !dbg !35
  %call6 = call i32 @Ack(i32 %M, i32 %sub5), !dbg !36
  %call7 = call i32 @Ack(i32 %sub4, i32 %call6), !dbg !37
  br label %return, !dbg !38

return:                                           ; preds = %if.end.3, %if.then.2, %if.then
  %retval.0 = phi i32 [ %add, %if.then ], [ %call, %if.then.2 ], [ %call7, %if.end.3 ]
  ret i32 %retval.0, !dbg !39
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !40, metadata !19), !dbg !41
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !42, metadata !19), !dbg !43
  %cmp = icmp eq i32 %argc, 2, !dbg !44
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !45

cond.true:                                        ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !46
  %tmp2 = load i8*, i8** %arrayidx, align 8, !dbg !46
  %call = call i32 @atoi(i8* %tmp2) #4, !dbg !48
  br label %cond.end, !dbg !45

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !49

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 8, %cond.false ], !dbg !45
  call void @llvm.dbg.value(metadata i32 %cond, i64 0, metadata !51, metadata !19), !dbg !52
  %call1 = call i32 @Ack(i32 3, i32 %cond), !dbg !53
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0), i32 %cond, i32 %call1), !dbg !54
  ret i32 0, !dbg !55
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #2

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!15, !16}
!llvm.ident = !{!17}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/ackermann")
!2 = !{}
!3 = !{!4, !9}
!4 = !DISubprogram(name: "Ack", scope: !5, file: !5, line: 9, type: !6, isLocal: false, isDefinition: true, scopeLine: 9, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i32)* @Ack, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Shootout/ackermann/tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/ackermann")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8, !8}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DISubprogram(name: "main", scope: !5, file: !5, line: 17, type: !10, isLocal: false, isDefinition: true, scopeLine: 17, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!10 = !DISubroutineType(types: !11)
!11 = !{!8, !8, !12}
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64, align: 64)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!14 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!15 = !{i32 2, !"Dwarf Version", i32 4}
!16 = !{i32 2, !"Debug Info Version", i32 3}
!17 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!18 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "M", arg: 1, scope: !4, file: !5, line: 9, type: !8)
!19 = !DIExpression()
!20 = !DILocation(line: 9, column: 13, scope: !4)
!21 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "N", arg: 2, scope: !4, file: !5, line: 9, type: !8)
!22 = !DILocation(line: 9, column: 20, scope: !4)
!23 = !DILocation(line: 10, column: 9, scope: !24)
!24 = distinct !DILexicalBlock(scope: !4, file: !5, line: 10, column: 7)
!25 = !DILocation(line: 10, column: 7, scope: !4)
!26 = !DILocation(line: 11, column: 15, scope: !24)
!27 = !DILocation(line: 11, column: 5, scope: !24)
!28 = !DILocation(line: 12, column: 9, scope: !29)
!29 = distinct !DILexicalBlock(scope: !4, file: !5, line: 12, column: 7)
!30 = !DILocation(line: 12, column: 7, scope: !4)
!31 = !DILocation(line: 13, column: 19, scope: !29)
!32 = !DILocation(line: 13, column: 13, scope: !29)
!33 = !DILocation(line: 13, column: 5, scope: !29)
!34 = !DILocation(line: 14, column: 17, scope: !4)
!35 = !DILocation(line: 14, column: 32, scope: !4)
!36 = !DILocation(line: 14, column: 22, scope: !4)
!37 = !DILocation(line: 14, column: 11, scope: !4)
!38 = !DILocation(line: 14, column: 3, scope: !4)
!39 = !DILocation(line: 15, column: 1, scope: !4)
!40 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !9, file: !5, line: 17, type: !8)
!41 = !DILocation(line: 17, column: 14, scope: !9)
!42 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !9, file: !5, line: 17, type: !12)
!43 = !DILocation(line: 17, column: 26, scope: !9)
!44 = !DILocation(line: 18, column: 18, scope: !9)
!45 = !DILocation(line: 18, column: 12, scope: !9)
!46 = !DILocation(line: 18, column: 31, scope: !47)
!47 = !DILexicalBlockFile(scope: !9, file: !5, discriminator: 1)
!48 = !DILocation(line: 18, column: 26, scope: !9)
!49 = !DILocation(line: 18, column: 12, scope: !50)
!50 = !DILexicalBlockFile(scope: !9, file: !5, discriminator: 2)
!51 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !9, file: !5, line: 18, type: !8)
!52 = !DILocation(line: 18, column: 7, scope: !9)
!53 = !DILocation(line: 20, column: 32, scope: !9)
!54 = !DILocation(line: 20, column: 3, scope: !9)
!55 = !DILocation(line: 21, column: 3, scope: !9)
