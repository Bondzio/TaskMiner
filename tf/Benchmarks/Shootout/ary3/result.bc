; ModuleID = '/home/gleison/tf/Benchmarks/Shootout/ary3/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %x = alloca i32*, align 8
  %y = alloca i32*, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !17, metadata !18), !dbg !19
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !20, metadata !18), !dbg !21
  call void @llvm.dbg.declare(metadata i32* %n, metadata !22, metadata !18), !dbg !23
  %0 = load i32, i32* %argc.addr, align 4, !dbg !24
  %cmp = icmp eq i32 %0, 2, !dbg !25
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !26

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !27
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 1, !dbg !27
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !27
  %call = call i32 @atoi(i8* %2) #5, !dbg !29
  br label %cond.end, !dbg !26

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !30

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 1500000, %cond.false ], !dbg !26
  store i32 %cond, i32* %n, align 4, !dbg !32
  call void @llvm.dbg.declare(metadata i32* %i, metadata !35, metadata !18), !dbg !36
  call void @llvm.dbg.declare(metadata i32* %k, metadata !37, metadata !18), !dbg !38
  call void @llvm.dbg.declare(metadata i32** %x, metadata !39, metadata !18), !dbg !40
  call void @llvm.dbg.declare(metadata i32** %y, metadata !41, metadata !18), !dbg !42
  %3 = load i32, i32* %n, align 4, !dbg !43
  %conv = sext i32 %3 to i64, !dbg !43
  %call1 = call noalias i8* @calloc(i64 %conv, i64 4) #6, !dbg !44
  %4 = bitcast i8* %call1 to i32*, !dbg !45
  store i32* %4, i32** %x, align 8, !dbg !46
  %5 = load i32, i32* %n, align 4, !dbg !47
  %conv2 = sext i32 %5 to i64, !dbg !47
  %call3 = call noalias i8* @calloc(i64 %conv2, i64 4) #6, !dbg !48
  %6 = bitcast i8* %call3 to i32*, !dbg !49
  store i32* %6, i32** %y, align 8, !dbg !50
  store i32 0, i32* %i, align 4, !dbg !51
  br label %for.cond, !dbg !53

for.cond:                                         ; preds = %for.inc, %cond.end
  %7 = load i32, i32* %i, align 4, !dbg !54
  %8 = load i32, i32* %n, align 4, !dbg !58
  %cmp4 = icmp slt i32 %7, %8, !dbg !59
  br i1 %cmp4, label %for.body, label %for.end, !dbg !60

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4, !dbg !61
  %add = add nsw i32 %9, 1, !dbg !63
  %10 = load i32, i32* %i, align 4, !dbg !64
  %idxprom = sext i32 %10 to i64, !dbg !65
  %11 = load i32*, i32** %x, align 8, !dbg !65
  %arrayidx6 = getelementptr inbounds i32, i32* %11, i64 %idxprom, !dbg !65
  store i32 %add, i32* %arrayidx6, align 4, !dbg !66
  br label %for.inc, !dbg !67

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !68
  %inc = add nsw i32 %12, 1, !dbg !68
  store i32 %inc, i32* %i, align 4, !dbg !68
  br label %for.cond, !dbg !69

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %k, align 4, !dbg !70
  br label %for.cond.7, !dbg !72

for.cond.7:                                       ; preds = %for.inc.22, %for.end
  %13 = load i32, i32* %k, align 4, !dbg !73
  %cmp8 = icmp slt i32 %13, 1000, !dbg !77
  br i1 %cmp8, label %for.body.10, label %for.end.24, !dbg !78

for.body.10:                                      ; preds = %for.cond.7
  %14 = load i32, i32* %n, align 4, !dbg !79
  %sub = sub nsw i32 %14, 1, !dbg !82
  store i32 %sub, i32* %i, align 4, !dbg !83
  br label %for.cond.11, !dbg !84

for.cond.11:                                      ; preds = %for.inc.20, %for.body.10
  %15 = load i32, i32* %i, align 4, !dbg !85
  %cmp12 = icmp sge i32 %15, 0, !dbg !89
  br i1 %cmp12, label %for.body.14, label %for.end.21, !dbg !90

for.body.14:                                      ; preds = %for.cond.11
  %16 = load i32, i32* %i, align 4, !dbg !91
  %idxprom15 = sext i32 %16 to i64, !dbg !93
  %17 = load i32*, i32** %x, align 8, !dbg !93
  %arrayidx16 = getelementptr inbounds i32, i32* %17, i64 %idxprom15, !dbg !93
  %18 = load i32, i32* %arrayidx16, align 4, !dbg !93
  %19 = load i32, i32* %i, align 4, !dbg !94
  %idxprom17 = sext i32 %19 to i64, !dbg !95
  %20 = load i32*, i32** %y, align 8, !dbg !95
  %arrayidx18 = getelementptr inbounds i32, i32* %20, i64 %idxprom17, !dbg !95
  %21 = load i32, i32* %arrayidx18, align 4, !dbg !96
  %add19 = add nsw i32 %21, %18, !dbg !96
  store i32 %add19, i32* %arrayidx18, align 4, !dbg !96
  br label %for.inc.20, !dbg !97

for.inc.20:                                       ; preds = %for.body.14
  %22 = load i32, i32* %i, align 4, !dbg !98
  %dec = add nsw i32 %22, -1, !dbg !98
  store i32 %dec, i32* %i, align 4, !dbg !98
  br label %for.cond.11, !dbg !99

for.end.21:                                       ; preds = %for.cond.11
  br label %for.inc.22, !dbg !100

for.inc.22:                                       ; preds = %for.end.21
  %23 = load i32, i32* %k, align 4, !dbg !101
  %inc23 = add nsw i32 %23, 1, !dbg !101
  store i32 %inc23, i32* %k, align 4, !dbg !101
  br label %for.cond.7, !dbg !102

for.end.24:                                       ; preds = %for.cond.7
  %24 = load i32*, i32** %y, align 8, !dbg !103
  %arrayidx25 = getelementptr inbounds i32, i32* %24, i64 0, !dbg !103
  %25 = load i32, i32* %arrayidx25, align 4, !dbg !103
  %26 = load i32, i32* %n, align 4, !dbg !104
  %sub26 = sub nsw i32 %26, 1, !dbg !105
  %idxprom27 = sext i32 %sub26 to i64, !dbg !106
  %27 = load i32*, i32** %y, align 8, !dbg !106
  %arrayidx28 = getelementptr inbounds i32, i32* %27, i64 %idxprom27, !dbg !106
  %28 = load i32, i32* %arrayidx28, align 4, !dbg !106
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 %25, i32 %28), !dbg !107
  %29 = load i32*, i32** %x, align 8, !dbg !108
  %30 = bitcast i32* %29 to i8*, !dbg !108
  call void @free(i8* %30) #6, !dbg !109
  %31 = load i32*, i32** %y, align 8, !dbg !110
  %32 = bitcast i32* %31 to i8*, !dbg !110
  call void @free(i8* %32) #6, !dbg !111
  ret i32 0, !dbg !112
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #2

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #3

declare i32 @printf(i8*, ...) #4

; Function Attrs: nounwind
declare void @free(i8*) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14, !15}
!llvm.ident = !{!16}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !6)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/ary3")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!6 = !{!7}
!7 = !DISubprogram(name: "main", scope: !8, file: !8, line: 17, type: !9, isLocal: false, isDefinition: true, scopeLine: 17, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!8 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Shootout/ary3/tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/ary3")
!9 = !DISubroutineType(types: !10)
!10 = !{!5, !5, !11}
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64, align: 64)
!13 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!14 = !{i32 2, !"Dwarf Version", i32 4}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!17 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !7, file: !8, line: 17, type: !5)
!18 = !DIExpression()
!19 = !DILocation(line: 17, column: 14, scope: !7)
!20 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !7, file: !8, line: 17, type: !11)
!21 = !DILocation(line: 17, column: 26, scope: !7)
!22 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !7, file: !8, line: 23, type: !5)
!23 = !DILocation(line: 23, column: 7, scope: !7)
!24 = !DILocation(line: 23, column: 13, scope: !7)
!25 = !DILocation(line: 23, column: 18, scope: !7)
!26 = !DILocation(line: 23, column: 12, scope: !7)
!27 = !DILocation(line: 23, column: 31, scope: !28)
!28 = !DILexicalBlockFile(scope: !7, file: !8, discriminator: 1)
!29 = !DILocation(line: 23, column: 26, scope: !7)
!30 = !DILocation(line: 23, column: 12, scope: !31)
!31 = !DILexicalBlockFile(scope: !7, file: !8, discriminator: 2)
!32 = !DILocation(line: 23, column: 7, scope: !33)
!33 = !DILexicalBlockFile(scope: !34, file: !8, discriminator: 4)
!34 = !DILexicalBlockFile(scope: !7, file: !8, discriminator: 3)
!35 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !7, file: !8, line: 24, type: !5)
!36 = !DILocation(line: 24, column: 7, scope: !7)
!37 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !7, file: !8, line: 24, type: !5)
!38 = !DILocation(line: 24, column: 10, scope: !7)
!39 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !7, file: !8, line: 24, type: !4)
!40 = !DILocation(line: 24, column: 14, scope: !7)
!41 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "y", scope: !7, file: !8, line: 24, type: !4)
!42 = !DILocation(line: 24, column: 18, scope: !7)
!43 = !DILocation(line: 26, column: 21, scope: !7)
!44 = !DILocation(line: 26, column: 14, scope: !7)
!45 = !DILocation(line: 26, column: 7, scope: !7)
!46 = !DILocation(line: 26, column: 5, scope: !7)
!47 = !DILocation(line: 27, column: 21, scope: !7)
!48 = !DILocation(line: 27, column: 14, scope: !7)
!49 = !DILocation(line: 27, column: 7, scope: !7)
!50 = !DILocation(line: 27, column: 5, scope: !7)
!51 = !DILocation(line: 29, column: 10, scope: !52)
!52 = distinct !DILexicalBlock(scope: !7, file: !8, line: 29, column: 3)
!53 = !DILocation(line: 29, column: 8, scope: !52)
!54 = !DILocation(line: 29, column: 15, scope: !55)
!55 = !DILexicalBlockFile(scope: !56, file: !8, discriminator: 2)
!56 = !DILexicalBlockFile(scope: !57, file: !8, discriminator: 1)
!57 = distinct !DILexicalBlock(scope: !52, file: !8, line: 29, column: 3)
!58 = !DILocation(line: 29, column: 19, scope: !57)
!59 = !DILocation(line: 29, column: 17, scope: !57)
!60 = !DILocation(line: 29, column: 3, scope: !52)
!61 = !DILocation(line: 30, column: 12, scope: !62)
!62 = distinct !DILexicalBlock(scope: !57, file: !8, line: 29, column: 27)
!63 = !DILocation(line: 30, column: 14, scope: !62)
!64 = !DILocation(line: 30, column: 7, scope: !62)
!65 = !DILocation(line: 30, column: 5, scope: !62)
!66 = !DILocation(line: 30, column: 10, scope: !62)
!67 = !DILocation(line: 31, column: 3, scope: !62)
!68 = !DILocation(line: 29, column: 23, scope: !57)
!69 = !DILocation(line: 29, column: 3, scope: !57)
!70 = !DILocation(line: 33, column: 10, scope: !71)
!71 = distinct !DILexicalBlock(scope: !7, file: !8, line: 33, column: 3)
!72 = !DILocation(line: 33, column: 8, scope: !71)
!73 = !DILocation(line: 33, column: 15, scope: !74)
!74 = !DILexicalBlockFile(scope: !75, file: !8, discriminator: 2)
!75 = !DILexicalBlockFile(scope: !76, file: !8, discriminator: 1)
!76 = distinct !DILexicalBlock(scope: !71, file: !8, line: 33, column: 3)
!77 = !DILocation(line: 33, column: 17, scope: !76)
!78 = !DILocation(line: 33, column: 3, scope: !71)
!79 = !DILocation(line: 34, column: 14, scope: !80)
!80 = distinct !DILexicalBlock(scope: !81, file: !8, line: 34, column: 5)
!81 = distinct !DILexicalBlock(scope: !76, file: !8, line: 33, column: 30)
!82 = !DILocation(line: 34, column: 16, scope: !80)
!83 = !DILocation(line: 34, column: 12, scope: !80)
!84 = !DILocation(line: 34, column: 10, scope: !80)
!85 = !DILocation(line: 34, column: 21, scope: !86)
!86 = !DILexicalBlockFile(scope: !87, file: !8, discriminator: 2)
!87 = !DILexicalBlockFile(scope: !88, file: !8, discriminator: 1)
!88 = distinct !DILexicalBlock(scope: !80, file: !8, line: 34, column: 5)
!89 = !DILocation(line: 34, column: 23, scope: !88)
!90 = !DILocation(line: 34, column: 5, scope: !80)
!91 = !DILocation(line: 35, column: 17, scope: !92)
!92 = distinct !DILexicalBlock(scope: !88, file: !8, line: 34, column: 34)
!93 = !DILocation(line: 35, column: 15, scope: !92)
!94 = !DILocation(line: 35, column: 9, scope: !92)
!95 = !DILocation(line: 35, column: 7, scope: !92)
!96 = !DILocation(line: 35, column: 12, scope: !92)
!97 = !DILocation(line: 36, column: 5, scope: !92)
!98 = !DILocation(line: 34, column: 30, scope: !88)
!99 = !DILocation(line: 34, column: 5, scope: !88)
!100 = !DILocation(line: 37, column: 3, scope: !81)
!101 = !DILocation(line: 33, column: 26, scope: !76)
!102 = !DILocation(line: 33, column: 3, scope: !76)
!103 = !DILocation(line: 39, column: 21, scope: !7)
!104 = !DILocation(line: 39, column: 29, scope: !7)
!105 = !DILocation(line: 39, column: 31, scope: !7)
!106 = !DILocation(line: 39, column: 27, scope: !7)
!107 = !DILocation(line: 39, column: 3, scope: !7)
!108 = !DILocation(line: 41, column: 8, scope: !7)
!109 = !DILocation(line: 41, column: 3, scope: !7)
!110 = !DILocation(line: 42, column: 8, scope: !7)
!111 = !DILocation(line: 42, column: 3, scope: !7)
!112 = !DILocation(line: 44, column: 3, scope: !7)
