; ModuleID = '/home/gleison/tf/Benchmarks/Shootout/fib2/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1

; Function Attrs: nounwind uwtable
define i64 @fib(i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %n.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !19, metadata !20), !dbg !21
  %0 = load i64, i64* %n.addr, align 8, !dbg !22
  %cmp = icmp ult i64 %0, 2, !dbg !24
  br i1 %cmp, label %if.then, label %if.else, !dbg !25

if.then:                                          ; preds = %entry
  store i64 1, i64* %retval, !dbg !26
  br label %return, !dbg !26

if.else:                                          ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8, !dbg !27
  %sub = sub i64 %1, 2, !dbg !28
  %call = call i64 @fib(i64 %sub), !dbg !29
  %2 = load i64, i64* %n.addr, align 8, !dbg !30
  %sub1 = sub i64 %2, 1, !dbg !31
  %call2 = call i64 @fib(i64 %sub1), !dbg !32
  %add = add i64 %call, %call2, !dbg !33
  store i64 %add, i64* %retval, !dbg !34
  br label %return, !dbg !34

return:                                           ; preds = %if.else, %if.then
  %3 = load i64, i64* %retval, !dbg !35
  ret i64 %3, !dbg !35
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %N = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !36, metadata !20), !dbg !37
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !38, metadata !20), !dbg !39
  call void @llvm.dbg.declare(metadata i32* %N, metadata !40, metadata !20), !dbg !41
  %0 = load i32, i32* %argc.addr, align 4, !dbg !42
  %cmp = icmp eq i32 %0, 2, !dbg !43
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !44

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !45
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 1, !dbg !45
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !45
  %call = call i32 @atoi(i8* %2), !dbg !47
  br label %cond.end, !dbg !44

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !48

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 43, %cond.false ], !dbg !44
  store i32 %cond, i32* %N, align 4, !dbg !50
  %3 = load i32, i32* %N, align 4, !dbg !53
  %conv = sext i32 %3 to i64, !dbg !53
  %call1 = call i64 @fib(i64 %conv), !dbg !54
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i64 %call1), !dbg !55
  ret i32 0, !dbg !56
}

declare i32 @atoi(i8*) #2

declare i32 @printf(i8*, ...) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!16, !17}
!llvm.ident = !{!18}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/fib2")
!2 = !{}
!3 = !{!4, !9}
!4 = !DISubprogram(name: "fib", scope: !5, file: !5, line: 10, type: !6, isLocal: false, isDefinition: true, scopeLine: 10, flags: DIFlagPrototyped, isOptimized: false, function: i64 (i64)* @fib, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Shootout/fib2/tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/fib2")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8}
!8 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!9 = !DISubprogram(name: "main", scope: !5, file: !5, line: 17, type: !10, isLocal: false, isDefinition: true, scopeLine: 17, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!10 = !DISubroutineType(types: !11)
!11 = !{!12, !12, !13}
!12 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64, align: 64)
!15 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!16 = !{i32 2, !"Dwarf Version", i32 4}
!17 = !{i32 2, !"Debug Info Version", i32 3}
!18 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!19 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !4, file: !5, line: 10, type: !8)
!20 = !DIExpression()
!21 = !DILocation(line: 10, column: 19, scope: !4)
!22 = !DILocation(line: 11, column: 7, scope: !23)
!23 = distinct !DILexicalBlock(scope: !4, file: !5, line: 11, column: 7)
!24 = !DILocation(line: 11, column: 9, scope: !23)
!25 = !DILocation(line: 11, column: 7, scope: !4)
!26 = !DILocation(line: 12, column: 5, scope: !23)
!27 = !DILocation(line: 14, column: 17, scope: !23)
!28 = !DILocation(line: 14, column: 19, scope: !23)
!29 = !DILocation(line: 14, column: 13, scope: !23)
!30 = !DILocation(line: 14, column: 30, scope: !23)
!31 = !DILocation(line: 14, column: 32, scope: !23)
!32 = !DILocation(line: 14, column: 26, scope: !23)
!33 = !DILocation(line: 14, column: 24, scope: !23)
!34 = !DILocation(line: 14, column: 5, scope: !23)
!35 = !DILocation(line: 15, column: 1, scope: !4)
!36 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !9, file: !5, line: 17, type: !12)
!37 = !DILocation(line: 17, column: 14, scope: !9)
!38 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !9, file: !5, line: 17, type: !13)
!39 = !DILocation(line: 17, column: 26, scope: !9)
!40 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "N", scope: !9, file: !5, line: 23, type: !12)
!41 = !DILocation(line: 23, column: 7, scope: !9)
!42 = !DILocation(line: 23, column: 13, scope: !9)
!43 = !DILocation(line: 23, column: 18, scope: !9)
!44 = !DILocation(line: 23, column: 12, scope: !9)
!45 = !DILocation(line: 23, column: 31, scope: !46)
!46 = !DILexicalBlockFile(scope: !9, file: !5, discriminator: 1)
!47 = !DILocation(line: 23, column: 26, scope: !9)
!48 = !DILocation(line: 23, column: 12, scope: !49)
!49 = !DILexicalBlockFile(scope: !9, file: !5, discriminator: 2)
!50 = !DILocation(line: 23, column: 7, scope: !51)
!51 = !DILexicalBlockFile(scope: !52, file: !5, discriminator: 4)
!52 = !DILexicalBlockFile(scope: !9, file: !5, discriminator: 3)
!53 = !DILocation(line: 24, column: 23, scope: !9)
!54 = !DILocation(line: 24, column: 19, scope: !9)
!55 = !DILocation(line: 24, column: 3, scope: !9)
!56 = !DILocation(line: 25, column: 3, scope: !9)
