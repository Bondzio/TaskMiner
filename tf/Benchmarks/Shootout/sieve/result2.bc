; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@main.flags = internal global [8193 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [11 x i8] c"Count: %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !20, metadata !21), !dbg !22
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !23, metadata !21), !dbg !24
  %cmp = icmp eq i32 %argc, 2, !dbg !25
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !26

cond.true:                                        ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !27
  %tmp2 = load i8*, i8** %arrayidx, align 8, !dbg !27
  %call = call i32 @atoi(i8* %tmp2) #4, !dbg !29
  br label %cond.end, !dbg !26

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !30

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 170000, %cond.false ], !dbg !26
  call void @llvm.dbg.value(metadata i32 %cond, i64 0, metadata !32, metadata !21), !dbg !33
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !34, metadata !21), !dbg !35
  br label %while.cond, !dbg !36

while.cond:                                       ; preds = %for.end.18, %cond.end
  %NUM.0 = phi i32 [ %cond, %cond.end ], [ %dec, %for.end.18 ]
  %count.0 = phi i32 [ 0, %cond.end ], [ %count.1.lcssa, %for.end.18 ]
  %dec = add nsw i32 %NUM.0, -1, !dbg !37
  call void @llvm.dbg.value(metadata i32 %dec, i64 0, metadata !32, metadata !21), !dbg !33
  %tobool = icmp ne i32 %NUM.0, 0, !dbg !36
  br i1 %tobool, label %while.body, label %while.end, !dbg !36

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !34, metadata !21), !dbg !35
  call void @llvm.dbg.value(metadata i64 2, i64 0, metadata !39, metadata !21), !dbg !41
  br label %for.cond, !dbg !42

for.cond:                                         ; preds = %for.inc, %while.body
  %i.0 = phi i64 [ 2, %while.body ], [ %inc, %for.inc ]
  %cmp1 = icmp sle i64 %i.0, 8192, !dbg !45
  br i1 %cmp1, label %for.body, label %for.end, !dbg !47

for.body:                                         ; preds = %for.cond
  %arrayidx2 = getelementptr inbounds [8193 x i8], [8193 x i8]* @main.flags, i32 0, i64 %i.0, !dbg !48
  store i8 1, i8* %arrayidx2, align 1, !dbg !50
  br label %for.inc, !dbg !51

for.inc:                                          ; preds = %for.body
  %inc = add nsw i64 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i64 %inc, i64 0, metadata !39, metadata !21), !dbg !41
  br label %for.cond, !dbg !53

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 2, i64 0, metadata !39, metadata !21), !dbg !41
  br label %for.cond.3, !dbg !54

for.cond.3:                                       ; preds = %for.inc.16, %for.end
  %i.1 = phi i64 [ 2, %for.end ], [ %inc17, %for.inc.16 ]
  %count.1 = phi i32 [ 0, %for.end ], [ %count.2, %for.inc.16 ]
  %cmp4 = icmp sle i64 %i.1, 8192, !dbg !56
  br i1 %cmp4, label %for.body.5, label %for.end.18, !dbg !58

for.body.5:                                       ; preds = %for.cond.3
  %arrayidx6 = getelementptr inbounds [8193 x i8], [8193 x i8]* @main.flags, i32 0, i64 %i.1, !dbg !59
  %tmp9 = load i8, i8* %arrayidx6, align 1, !dbg !59
  %tobool7 = icmp ne i8 %tmp9, 0, !dbg !59
  br i1 %tobool7, label %if.then, label %if.end, !dbg !62

if.then:                                          ; preds = %for.body.5
  %add = add nsw i64 %i.1, %i.1, !dbg !63
  call void @llvm.dbg.value(metadata i64 %add, i64 0, metadata !66, metadata !21), !dbg !67
  br label %for.cond.8, !dbg !68

for.cond.8:                                       ; preds = %for.inc.12, %if.then
  %k.0 = phi i64 [ %add, %if.then ], [ %add13, %for.inc.12 ]
  %cmp9 = icmp sle i64 %k.0, 8192, !dbg !69
  br i1 %cmp9, label %for.body.10, label %for.end.14, !dbg !71

for.body.10:                                      ; preds = %for.cond.8
  %arrayidx11 = getelementptr inbounds [8193 x i8], [8193 x i8]* @main.flags, i32 0, i64 %k.0, !dbg !72
  store i8 0, i8* %arrayidx11, align 1, !dbg !74
  br label %for.inc.12, !dbg !75

for.inc.12:                                       ; preds = %for.body.10
  %add13 = add nsw i64 %k.0, %i.1, !dbg !76
  call void @llvm.dbg.value(metadata i64 %add13, i64 0, metadata !66, metadata !21), !dbg !67
  br label %for.cond.8, !dbg !77

for.end.14:                                       ; preds = %for.cond.8
  %inc15 = add nsw i32 %count.1, 1, !dbg !78
  call void @llvm.dbg.value(metadata i32 %inc15, i64 0, metadata !34, metadata !21), !dbg !35
  br label %if.end, !dbg !79

if.end:                                           ; preds = %for.end.14, %for.body.5
  %count.2 = phi i32 [ %inc15, %for.end.14 ], [ %count.1, %for.body.5 ]
  br label %for.inc.16, !dbg !80

for.inc.16:                                       ; preds = %if.end
  %inc17 = add nsw i64 %i.1, 1, !dbg !81
  call void @llvm.dbg.value(metadata i64 %inc17, i64 0, metadata !39, metadata !21), !dbg !41
  br label %for.cond.3, !dbg !82

for.end.18:                                       ; preds = %for.cond.3
  %count.1.lcssa = phi i32 [ %count.1, %for.cond.3 ]
  br label %while.cond, !dbg !36

while.end:                                        ; preds = %while.cond
  %count.0.lcssa = phi i32 [ %count.0, %while.cond ]
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 %count.0.lcssa), !dbg !83
  ret i32 0, !dbg !84
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #2

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!17, !18}
!llvm.ident = !{!19}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3, globals: !12)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/sieve")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "main", scope: !5, file: !5, line: 9, type: !6, isLocal: false, isDefinition: true, scopeLine: 9, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Shootout/sieve/tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/sieve")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8, !9}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!12 = !{!13}
!13 = !DIGlobalVariable(name: "flags", scope: !4, file: !5, line: 16, type: !14, isLocal: true, isDefinition: true, variable: [8193 x i8]* @main.flags)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 65544, align: 8, elements: !15)
!15 = !{!16}
!16 = !DISubrange(count: 8193)
!17 = !{i32 2, !"Dwarf Version", i32 4}
!18 = !{i32 2, !"Debug Info Version", i32 3}
!19 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!20 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !4, file: !5, line: 9, type: !8)
!21 = !DIExpression()
!22 = !DILocation(line: 9, column: 14, scope: !4)
!23 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !4, file: !5, line: 9, type: !9)
!24 = !DILocation(line: 9, column: 26, scope: !4)
!25 = !DILocation(line: 15, column: 20, scope: !4)
!26 = !DILocation(line: 15, column: 14, scope: !4)
!27 = !DILocation(line: 15, column: 33, scope: !28)
!28 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 1)
!29 = !DILocation(line: 15, column: 28, scope: !4)
!30 = !DILocation(line: 15, column: 14, scope: !31)
!31 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 2)
!32 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "NUM", scope: !4, file: !5, line: 15, type: !8)
!33 = !DILocation(line: 15, column: 7, scope: !4)
!34 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !4, file: !5, line: 18, type: !8)
!35 = !DILocation(line: 18, column: 7, scope: !4)
!36 = !DILocation(line: 20, column: 3, scope: !4)
!37 = !DILocation(line: 20, column: 13, scope: !38)
!38 = !DILexicalBlockFile(scope: !28, file: !5, discriminator: 2)
!39 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !4, file: !5, line: 17, type: !40)
!40 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!41 = !DILocation(line: 17, column: 8, scope: !4)
!42 = !DILocation(line: 22, column: 10, scope: !43)
!43 = distinct !DILexicalBlock(scope: !44, file: !5, line: 22, column: 5)
!44 = distinct !DILexicalBlock(scope: !4, file: !5, line: 20, column: 17)
!45 = !DILocation(line: 22, column: 19, scope: !46)
!46 = distinct !DILexicalBlock(scope: !43, file: !5, line: 22, column: 5)
!47 = !DILocation(line: 22, column: 5, scope: !43)
!48 = !DILocation(line: 23, column: 7, scope: !49)
!49 = distinct !DILexicalBlock(scope: !46, file: !5, line: 22, column: 33)
!50 = !DILocation(line: 23, column: 16, scope: !49)
!51 = !DILocation(line: 24, column: 5, scope: !49)
!52 = !DILocation(line: 22, column: 29, scope: !46)
!53 = !DILocation(line: 22, column: 5, scope: !46)
!54 = !DILocation(line: 25, column: 10, scope: !55)
!55 = distinct !DILexicalBlock(scope: !44, file: !5, line: 25, column: 5)
!56 = !DILocation(line: 25, column: 19, scope: !57)
!57 = distinct !DILexicalBlock(scope: !55, file: !5, line: 25, column: 5)
!58 = !DILocation(line: 25, column: 5, scope: !55)
!59 = !DILocation(line: 26, column: 11, scope: !60)
!60 = distinct !DILexicalBlock(scope: !61, file: !5, line: 26, column: 11)
!61 = distinct !DILexicalBlock(scope: !57, file: !5, line: 25, column: 33)
!62 = !DILocation(line: 26, column: 11, scope: !61)
!63 = !DILocation(line: 28, column: 20, scope: !64)
!64 = distinct !DILexicalBlock(scope: !65, file: !5, line: 28, column: 9)
!65 = distinct !DILexicalBlock(scope: !60, file: !5, line: 26, column: 21)
!66 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !4, file: !5, line: 17, type: !40)
!67 = !DILocation(line: 17, column: 11, scope: !4)
!68 = !DILocation(line: 28, column: 14, scope: !64)
!69 = !DILocation(line: 28, column: 27, scope: !70)
!70 = distinct !DILexicalBlock(scope: !64, file: !5, line: 28, column: 9)
!71 = !DILocation(line: 28, column: 9, scope: !64)
!72 = !DILocation(line: 29, column: 11, scope: !73)
!73 = distinct !DILexicalBlock(scope: !70, file: !5, line: 28, column: 44)
!74 = !DILocation(line: 29, column: 20, scope: !73)
!75 = !DILocation(line: 30, column: 9, scope: !73)
!76 = !DILocation(line: 28, column: 38, scope: !70)
!77 = !DILocation(line: 28, column: 9, scope: !70)
!78 = !DILocation(line: 31, column: 14, scope: !65)
!79 = !DILocation(line: 32, column: 7, scope: !65)
!80 = !DILocation(line: 33, column: 5, scope: !61)
!81 = !DILocation(line: 25, column: 29, scope: !57)
!82 = !DILocation(line: 25, column: 5, scope: !57)
!83 = !DILocation(line: 35, column: 3, scope: !4)
!84 = !DILocation(line: 36, column: 3, scope: !4)
