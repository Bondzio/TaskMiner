; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Toggle = type { i8, {}*, %struct.Toggle* (%struct.Toggle*)* }
%struct.NthToggle = type { i8, i8 (%struct.Toggle*)*, %struct.Toggle* (%struct.Toggle*)*, i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"true\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"false\0A\00", align 1

; Function Attrs: nounwind uwtable
define signext i8 @toggle_value(%struct.Toggle* %this) #0 {
entry:
  call void @llvm.dbg.value(metadata %struct.Toggle* %this, i64 0, metadata !66, metadata !67), !dbg !68
  %state = getelementptr inbounds %struct.Toggle, %struct.Toggle* %this, i32 0, i32 0, !dbg !69
  %tmp1 = load i8, i8* %state, align 1, !dbg !69
  ret i8 %tmp1, !dbg !70
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define %struct.Toggle* @toggle_activate(%struct.Toggle* %this) #0 {
entry:
  call void @llvm.dbg.value(metadata %struct.Toggle* %this, i64 0, metadata !71, metadata !67), !dbg !72
  %state = getelementptr inbounds %struct.Toggle, %struct.Toggle* %this, i32 0, i32 0, !dbg !73
  %tmp1 = load i8, i8* %state, align 1, !dbg !73
  %tobool = icmp ne i8 %tmp1, 0, !dbg !74
  %lnot = xor i1 %tobool, true, !dbg !74
  %lnot.ext = zext i1 %lnot to i32, !dbg !74
  %conv = trunc i32 %lnot.ext to i8, !dbg !74
  %state1 = getelementptr inbounds %struct.Toggle, %struct.Toggle* %this, i32 0, i32 0, !dbg !75
  store i8 %conv, i8* %state1, align 1, !dbg !76
  ret %struct.Toggle* %this, !dbg !77
}

; Function Attrs: nounwind uwtable
define %struct.Toggle* @init_Toggle(%struct.Toggle* %this, i8 signext %start_state) #0 {
entry:
  call void @llvm.dbg.value(metadata %struct.Toggle* %this, i64 0, metadata !78, metadata !67), !dbg !79
  call void @llvm.dbg.value(metadata i8 %start_state, i64 0, metadata !80, metadata !67), !dbg !81
  %state = getelementptr inbounds %struct.Toggle, %struct.Toggle* %this, i32 0, i32 0, !dbg !82
  store i8 %start_state, i8* %state, align 1, !dbg !83
  %value = getelementptr inbounds %struct.Toggle, %struct.Toggle* %this, i32 0, i32 1, !dbg !84
  %value1 = bitcast {}** %value to i8 (%struct.Toggle*)**, !dbg !84
  store i8 (%struct.Toggle*)* @toggle_value, i8 (%struct.Toggle*)** %value1, align 8, !dbg !85
  %activate = getelementptr inbounds %struct.Toggle, %struct.Toggle* %this, i32 0, i32 2, !dbg !86
  store %struct.Toggle* (%struct.Toggle*)* @toggle_activate, %struct.Toggle* (%struct.Toggle*)** %activate, align 8, !dbg !87
  ret %struct.Toggle* %this, !dbg !88
}

; Function Attrs: nounwind uwtable
define %struct.Toggle* @new_Toggle(i8 signext %start_state) #0 {
entry:
  call void @llvm.dbg.value(metadata i8 %start_state, i64 0, metadata !89, metadata !67), !dbg !90
  %call = call noalias i8* @malloc(i64 24) #5, !dbg !91
  %tmp = bitcast i8* %call to %struct.Toggle*, !dbg !92
  call void @llvm.dbg.value(metadata %struct.Toggle* %tmp, i64 0, metadata !93, metadata !67), !dbg !94
  %call1 = call %struct.Toggle* @init_Toggle(%struct.Toggle* %tmp, i8 signext %start_state), !dbg !95
  ret %struct.Toggle* %call1, !dbg !96
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind uwtable
define %struct.NthToggle* @nth_toggle_activate(%struct.NthToggle* %this) #0 {
entry:
  call void @llvm.dbg.value(metadata %struct.NthToggle* %this, i64 0, metadata !97, metadata !67), !dbg !98
  %counter = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %this, i32 0, i32 4, !dbg !99
  %tmp1 = load i32, i32* %counter, align 4, !dbg !101
  %inc = add nsw i32 %tmp1, 1, !dbg !101
  store i32 %inc, i32* %counter, align 4, !dbg !101
  %count_max = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %this, i32 0, i32 3, !dbg !102
  %tmp3 = load i32, i32* %count_max, align 4, !dbg !102
  %cmp = icmp sge i32 %inc, %tmp3, !dbg !103
  br i1 %cmp, label %if.then, label %if.end, !dbg !104

if.then:                                          ; preds = %entry
  %state = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %this, i32 0, i32 0, !dbg !105
  %tmp5 = load i8, i8* %state, align 1, !dbg !105
  %tobool = icmp ne i8 %tmp5, 0, !dbg !107
  %lnot = xor i1 %tobool, true, !dbg !107
  %lnot.ext = zext i1 %lnot to i32, !dbg !107
  %conv = trunc i32 %lnot.ext to i8, !dbg !107
  %state1 = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %this, i32 0, i32 0, !dbg !108
  store i8 %conv, i8* %state1, align 1, !dbg !109
  %counter2 = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %this, i32 0, i32 4, !dbg !110
  store i32 0, i32* %counter2, align 4, !dbg !111
  br label %if.end, !dbg !112

if.end:                                           ; preds = %if.then, %entry
  ret %struct.NthToggle* %this, !dbg !113
}

; Function Attrs: nounwind uwtable
define %struct.NthToggle* @init_NthToggle(%struct.NthToggle* %this, i32 %max_count) #0 {
entry:
  call void @llvm.dbg.value(metadata %struct.NthToggle* %this, i64 0, metadata !114, metadata !67), !dbg !115
  call void @llvm.dbg.value(metadata i32 %max_count, i64 0, metadata !116, metadata !67), !dbg !117
  %count_max = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %this, i32 0, i32 3, !dbg !118
  store i32 %max_count, i32* %count_max, align 4, !dbg !119
  %counter = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %this, i32 0, i32 4, !dbg !120
  store i32 0, i32* %counter, align 4, !dbg !121
  %activate = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %this, i32 0, i32 2, !dbg !122
  store %struct.Toggle* (%struct.Toggle*)* bitcast (%struct.NthToggle* (%struct.NthToggle*)* @nth_toggle_activate to %struct.Toggle* (%struct.Toggle*)*), %struct.Toggle* (%struct.Toggle*)** %activate, align 8, !dbg !123
  ret %struct.NthToggle* %this, !dbg !124
}

; Function Attrs: nounwind uwtable
define %struct.NthToggle* @new_NthToggle(i8 signext %start_state, i32 %max_count) #0 {
entry:
  call void @llvm.dbg.value(metadata i8 %start_state, i64 0, metadata !125, metadata !67), !dbg !126
  call void @llvm.dbg.value(metadata i32 %max_count, i64 0, metadata !127, metadata !67), !dbg !128
  %call = call noalias i8* @malloc(i64 32) #5, !dbg !129
  %tmp = bitcast i8* %call to %struct.NthToggle*, !dbg !130
  call void @llvm.dbg.value(metadata %struct.NthToggle* %tmp, i64 0, metadata !131, metadata !67), !dbg !132
  %tmp2 = bitcast %struct.NthToggle* %tmp to %struct.Toggle*, !dbg !133
  %call1 = call %struct.Toggle* @init_Toggle(%struct.Toggle* %tmp2, i8 signext %start_state), !dbg !134
  %tmp4 = bitcast %struct.Toggle* %call1 to %struct.NthToggle*, !dbg !135
  call void @llvm.dbg.value(metadata %struct.NthToggle* %tmp4, i64 0, metadata !131, metadata !67), !dbg !132
  %call2 = call %struct.NthToggle* @init_NthToggle(%struct.NthToggle* %tmp4, i32 %max_count), !dbg !136
  ret %struct.NthToggle* %call2, !dbg !137
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !138, metadata !67), !dbg !139
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !140, metadata !67), !dbg !141
  %cmp = icmp eq i32 %argc, 2, !dbg !142
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !143

cond.true:                                        ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !144
  %tmp2 = load i8*, i8** %arrayidx, align 8, !dbg !144
  %call = call i32 @atoi(i8* %tmp2) #6, !dbg !146
  br label %cond.end, !dbg !143

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !147

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 500000000, %cond.false ], !dbg !143
  call void @llvm.dbg.value(metadata i32 %cond, i64 0, metadata !149, metadata !67), !dbg !150
  call void @llvm.dbg.value(metadata i8 1, i64 0, metadata !151, metadata !67), !dbg !152
  %call1 = call %struct.Toggle* @new_Toggle(i8 signext 1), !dbg !153
  call void @llvm.dbg.value(metadata %struct.Toggle* %call1, i64 0, metadata !154, metadata !67), !dbg !155
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !156, metadata !67), !dbg !157
  br label %for.cond, !dbg !158

for.cond:                                         ; preds = %for.inc, %cond.end
  %i.0 = phi i32 [ 0, %cond.end ], [ %inc, %for.inc ]
  %val.0 = phi i8 [ 1, %cond.end ], [ %call5, %for.inc ]
  %cmp2 = icmp slt i32 %i.0, %cond, !dbg !160
  br i1 %cmp2, label %for.body, label %for.end, !dbg !162

for.body:                                         ; preds = %for.cond
  %activate = getelementptr inbounds %struct.Toggle, %struct.Toggle* %call1, i32 0, i32 2, !dbg !163
  %tmp6 = load %struct.Toggle* (%struct.Toggle*)*, %struct.Toggle* (%struct.Toggle*)** %activate, align 8, !dbg !163
  %call3 = call %struct.Toggle* %tmp6(%struct.Toggle* %call1), !dbg !165
  %value = getelementptr inbounds %struct.Toggle, %struct.Toggle* %call3, i32 0, i32 1, !dbg !166
  %value4 = bitcast {}** %value to i8 (%struct.Toggle*)**, !dbg !166
  %tmp8 = load i8 (%struct.Toggle*)*, i8 (%struct.Toggle*)** %value4, align 8, !dbg !166
  %call5 = call signext i8 %tmp8(%struct.Toggle* %call1), !dbg !165
  call void @llvm.dbg.value(metadata i8 %call5, i64 0, metadata !151, metadata !67), !dbg !152
  br label %for.inc, !dbg !167

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1, !dbg !168
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !156, metadata !67), !dbg !157
  br label %for.cond, !dbg !169

for.end:                                          ; preds = %for.cond
  %val.0.lcssa = phi i8 [ %val.0, %for.cond ]
  %conv = sext i8 %val.0.lcssa to i32, !dbg !170
  %tobool = icmp ne i32 %conv, 0, !dbg !170
  %cond6 = select i1 %tobool, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), !dbg !170
  %call7 = call i32 @puts(i8* %cond6), !dbg !171
  %tmp13 = bitcast %struct.Toggle* %call1 to i8*, !dbg !172
  call void @free(i8* %tmp13) #5, !dbg !173
  call void @llvm.dbg.value(metadata i8 1, i64 0, metadata !151, metadata !67), !dbg !152
  %call8 = call %struct.NthToggle* @new_NthToggle(i8 signext 1, i32 3), !dbg !174
  call void @llvm.dbg.value(metadata %struct.NthToggle* %call8, i64 0, metadata !175, metadata !67), !dbg !176
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !156, metadata !67), !dbg !157
  br label %for.cond.9, !dbg !177

for.cond.9:                                       ; preds = %for.inc.18, %for.end
  %i.1 = phi i32 [ 0, %for.end ], [ %inc19, %for.inc.18 ]
  %val.1 = phi i8 [ 1, %for.end ], [ %call17, %for.inc.18 ]
  %cmp10 = icmp slt i32 %i.1, %cond, !dbg !179
  br i1 %cmp10, label %for.body.12, label %for.end.20, !dbg !181

for.body.12:                                      ; preds = %for.cond.9
  %activate13 = getelementptr inbounds %struct.NthToggle, %struct.NthToggle* %call8, i32 0, i32 2, !dbg !182
  %tmp18 = load %struct.Toggle* (%struct.Toggle*)*, %struct.Toggle* (%struct.Toggle*)** %activate13, align 8, !dbg !182
  %tmp20 = bitcast %struct.NthToggle* %call8 to %struct.Toggle*, !dbg !184
  %call14 = call %struct.Toggle* %tmp18(%struct.Toggle* %tmp20), !dbg !185
  %value15 = getelementptr inbounds %struct.Toggle, %struct.Toggle* %call14, i32 0, i32 1, !dbg !186
  %value16 = bitcast {}** %value15 to i8 (%struct.Toggle*)**, !dbg !186
  %tmp21 = load i8 (%struct.Toggle*)*, i8 (%struct.Toggle*)** %value16, align 8, !dbg !186
  %tmp23 = bitcast %struct.NthToggle* %call8 to %struct.Toggle*, !dbg !187
  %call17 = call signext i8 %tmp21(%struct.Toggle* %tmp23), !dbg !185
  call void @llvm.dbg.value(metadata i8 %call17, i64 0, metadata !151, metadata !67), !dbg !152
  br label %for.inc.18, !dbg !188

for.inc.18:                                       ; preds = %for.body.12
  %inc19 = add nsw i32 %i.1, 1, !dbg !189
  call void @llvm.dbg.value(metadata i32 %inc19, i64 0, metadata !156, metadata !67), !dbg !157
  br label %for.cond.9, !dbg !190

for.end.20:                                       ; preds = %for.cond.9
  %val.1.lcssa = phi i8 [ %val.1, %for.cond.9 ]
  %conv21 = sext i8 %val.1.lcssa to i32, !dbg !191
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !191
  %cond23 = select i1 %tobool22, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), !dbg !191
  %call24 = call i32 @puts(i8* %cond23), !dbg !192
  %tmp27 = bitcast %struct.NthToggle* %call8 to i8*, !dbg !193
  call void @free(i8* %tmp27) #5, !dbg !194
  ret i32 0, !dbg !195
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #3

declare i32 @puts(i8*) #4

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!63, !64}
!llvm.ident = !{!65}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !8, subprograms: !37)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/methcall")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 9, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Shootout/methcall/tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/methcall")
!5 = !{!6, !7}
!6 = !DIEnumerator(name: "false", value: 0)
!7 = !DIEnumerator(name: "true", value: 1)
!8 = !{!9, !24, !27}
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_typedef, name: "Toggle", file: !4, line: 21, baseType: !11)
!11 = !DICompositeType(tag: DW_TAG_structure_type, name: "Toggle", file: !4, line: 19, size: 192, align: 64, elements: !12)
!12 = !{!13, !15, !20}
!13 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !11, file: !4, line: 20, baseType: !14, size: 8, align: 8)
!14 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!15 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !11, file: !4, line: 20, baseType: !16, size: 64, align: 64, offset: 64)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, align: 64)
!17 = !DISubroutineType(types: !18)
!18 = !{!14, !19}
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "activate", scope: !11, file: !4, line: 20, baseType: !21, size: 64, align: 64, offset: 128)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64, align: 64)
!22 = !DISubroutineType(types: !23)
!23 = !{!19, !19}
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64, align: 64)
!25 = !DISubroutineType(types: !26)
!26 = !{!9, !9}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64, align: 64)
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "NthToggle", file: !4, line: 45, baseType: !29)
!29 = !DICompositeType(tag: DW_TAG_structure_type, name: "NthToggle", file: !4, line: 41, size: 256, align: 64, elements: !30)
!30 = !{!31, !32, !33, !34, !36}
!31 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !29, file: !4, line: 42, baseType: !14, size: 8, align: 8)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !29, file: !4, line: 42, baseType: !16, size: 64, align: 64, offset: 64)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "activate", scope: !29, file: !4, line: 42, baseType: !21, size: 64, align: 64, offset: 128)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "count_max", scope: !29, file: !4, line: 43, baseType: !35, size: 32, align: 32, offset: 192)
!35 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!36 = !DIDerivedType(tag: DW_TAG_member, name: "counter", scope: !29, file: !4, line: 44, baseType: !35, size: 32, align: 32, offset: 224)
!37 = !{!38, !42, !43, !46, !49, !52, !55, !58}
!38 = !DISubprogram(name: "toggle_value", scope: !4, file: !4, line: 23, type: !39, isLocal: false, isDefinition: true, scopeLine: 23, flags: DIFlagPrototyped, isOptimized: false, function: i8 (%struct.Toggle*)* @toggle_value, variables: !41)
!39 = !DISubroutineType(types: !40)
!40 = !{!14, !9}
!41 = !{}
!42 = !DISubprogram(name: "toggle_activate", scope: !4, file: !4, line: 26, type: !25, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, function: %struct.Toggle* (%struct.Toggle*)* @toggle_activate, variables: !41)
!43 = !DISubprogram(name: "init_Toggle", scope: !4, file: !4, line: 30, type: !44, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagPrototyped, isOptimized: false, function: %struct.Toggle* (%struct.Toggle*, i8)* @init_Toggle, variables: !41)
!44 = !DISubroutineType(types: !45)
!45 = !{!9, !9, !14}
!46 = !DISubprogram(name: "new_Toggle", scope: !4, file: !4, line: 36, type: !47, isLocal: false, isDefinition: true, scopeLine: 36, flags: DIFlagPrototyped, isOptimized: false, function: %struct.Toggle* (i8)* @new_Toggle, variables: !41)
!47 = !DISubroutineType(types: !48)
!48 = !{!9, !14}
!49 = !DISubprogram(name: "nth_toggle_activate", scope: !4, file: !4, line: 47, type: !50, isLocal: false, isDefinition: true, scopeLine: 47, flags: DIFlagPrototyped, isOptimized: false, function: %struct.NthToggle* (%struct.NthToggle*)* @nth_toggle_activate, variables: !41)
!50 = !DISubroutineType(types: !51)
!51 = !{!27, !27}
!52 = !DISubprogram(name: "init_NthToggle", scope: !4, file: !4, line: 54, type: !53, isLocal: false, isDefinition: true, scopeLine: 54, flags: DIFlagPrototyped, isOptimized: false, function: %struct.NthToggle* (%struct.NthToggle*, i32)* @init_NthToggle, variables: !41)
!53 = !DISubroutineType(types: !54)
!54 = !{!27, !27, !35}
!55 = !DISubprogram(name: "new_NthToggle", scope: !4, file: !4, line: 60, type: !56, isLocal: false, isDefinition: true, scopeLine: 60, flags: DIFlagPrototyped, isOptimized: false, function: %struct.NthToggle* (i8, i32)* @new_NthToggle, variables: !41)
!56 = !DISubroutineType(types: !57)
!57 = !{!27, !14, !35}
!58 = !DISubprogram(name: "main", scope: !4, file: !4, line: 66, type: !59, isLocal: false, isDefinition: true, scopeLine: 66, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !41)
!59 = !DISubroutineType(types: !60)
!60 = !{!35, !35, !61}
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !62, size: 64, align: 64)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!63 = !{i32 2, !"Dwarf Version", i32 4}
!64 = !{i32 2, !"Debug Info Version", i32 3}
!65 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!66 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "this", arg: 1, scope: !38, file: !4, line: 23, type: !9)
!67 = !DIExpression()
!68 = !DILocation(line: 23, column: 27, scope: !38)
!69 = !DILocation(line: 24, column: 17, scope: !38)
!70 = !DILocation(line: 24, column: 3, scope: !38)
!71 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "this", arg: 1, scope: !42, file: !4, line: 26, type: !9)
!72 = !DILocation(line: 26, column: 33, scope: !42)
!73 = !DILocation(line: 27, column: 24, scope: !42)
!74 = !DILocation(line: 27, column: 17, scope: !42)
!75 = !DILocation(line: 27, column: 9, scope: !42)
!76 = !DILocation(line: 27, column: 15, scope: !42)
!77 = !DILocation(line: 28, column: 3, scope: !42)
!78 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "this", arg: 1, scope: !43, file: !4, line: 30, type: !9)
!79 = !DILocation(line: 30, column: 29, scope: !43)
!80 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "start_state", arg: 2, scope: !43, file: !4, line: 30, type: !14)
!81 = !DILocation(line: 30, column: 40, scope: !43)
!82 = !DILocation(line: 31, column: 9, scope: !43)
!83 = !DILocation(line: 31, column: 15, scope: !43)
!84 = !DILocation(line: 32, column: 9, scope: !43)
!85 = !DILocation(line: 32, column: 15, scope: !43)
!86 = !DILocation(line: 33, column: 9, scope: !43)
!87 = !DILocation(line: 33, column: 18, scope: !43)
!88 = !DILocation(line: 34, column: 3, scope: !43)
!89 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "start_state", arg: 1, scope: !46, file: !4, line: 36, type: !14)
!90 = !DILocation(line: 36, column: 25, scope: !46)
!91 = !DILocation(line: 37, column: 28, scope: !46)
!92 = !DILocation(line: 37, column: 18, scope: !46)
!93 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "this", scope: !46, file: !4, line: 37, type: !9)
!94 = !DILocation(line: 37, column: 11, scope: !46)
!95 = !DILocation(line: 38, column: 11, scope: !46)
!96 = !DILocation(line: 38, column: 3, scope: !46)
!97 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "this", arg: 1, scope: !49, file: !4, line: 47, type: !27)
!98 = !DILocation(line: 47, column: 43, scope: !49)
!99 = !DILocation(line: 48, column: 15, scope: !100)
!100 = distinct !DILexicalBlock(scope: !49, file: !4, line: 48, column: 7)
!101 = !DILocation(line: 48, column: 7, scope: !100)
!102 = !DILocation(line: 48, column: 32, scope: !100)
!103 = !DILocation(line: 48, column: 23, scope: !100)
!104 = !DILocation(line: 48, column: 7, scope: !49)
!105 = !DILocation(line: 49, column: 26, scope: !106)
!106 = distinct !DILexicalBlock(scope: !100, file: !4, line: 48, column: 43)
!107 = !DILocation(line: 49, column: 19, scope: !106)
!108 = !DILocation(line: 49, column: 11, scope: !106)
!109 = !DILocation(line: 49, column: 17, scope: !106)
!110 = !DILocation(line: 50, column: 11, scope: !106)
!111 = !DILocation(line: 50, column: 19, scope: !106)
!112 = !DILocation(line: 51, column: 3, scope: !106)
!113 = !DILocation(line: 52, column: 3, scope: !49)
!114 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "this", arg: 1, scope: !52, file: !4, line: 54, type: !27)
!115 = !DILocation(line: 54, column: 38, scope: !52)
!116 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "max_count", arg: 2, scope: !52, file: !4, line: 54, type: !35)
!117 = !DILocation(line: 54, column: 48, scope: !52)
!118 = !DILocation(line: 55, column: 9, scope: !52)
!119 = !DILocation(line: 55, column: 19, scope: !52)
!120 = !DILocation(line: 56, column: 9, scope: !52)
!121 = !DILocation(line: 56, column: 17, scope: !52)
!122 = !DILocation(line: 57, column: 9, scope: !52)
!123 = !DILocation(line: 57, column: 18, scope: !52)
!124 = !DILocation(line: 58, column: 3, scope: !52)
!125 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "start_state", arg: 1, scope: !55, file: !4, line: 60, type: !14)
!126 = !DILocation(line: 60, column: 31, scope: !55)
!127 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "max_count", arg: 2, scope: !55, file: !4, line: 60, type: !35)
!128 = !DILocation(line: 60, column: 48, scope: !55)
!129 = !DILocation(line: 61, column: 34, scope: !55)
!130 = !DILocation(line: 61, column: 21, scope: !55)
!131 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "this", scope: !55, file: !4, line: 61, type: !27)
!132 = !DILocation(line: 61, column: 14, scope: !55)
!133 = !DILocation(line: 62, column: 35, scope: !55)
!134 = !DILocation(line: 62, column: 23, scope: !55)
!135 = !DILocation(line: 62, column: 10, scope: !55)
!136 = !DILocation(line: 63, column: 11, scope: !55)
!137 = !DILocation(line: 63, column: 3, scope: !55)
!138 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !58, file: !4, line: 66, type: !35)
!139 = !DILocation(line: 66, column: 14, scope: !58)
!140 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !58, file: !4, line: 66, type: !61)
!141 = !DILocation(line: 66, column: 26, scope: !58)
!142 = !DILocation(line: 72, column: 21, scope: !58)
!143 = !DILocation(line: 72, column: 15, scope: !58)
!144 = !DILocation(line: 72, column: 34, scope: !145)
!145 = !DILexicalBlockFile(scope: !58, file: !4, discriminator: 1)
!146 = !DILocation(line: 72, column: 29, scope: !58)
!147 = !DILocation(line: 72, column: 15, scope: !148)
!148 = !DILexicalBlockFile(scope: !58, file: !4, discriminator: 2)
!149 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !58, file: !4, line: 72, type: !35)
!150 = !DILocation(line: 72, column: 10, scope: !58)
!151 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "val", scope: !58, file: !4, line: 75, type: !14)
!152 = !DILocation(line: 75, column: 8, scope: !58)
!153 = !DILocation(line: 77, column: 9, scope: !58)
!154 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tog", scope: !58, file: !4, line: 73, type: !9)
!155 = !DILocation(line: 73, column: 11, scope: !58)
!156 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !58, file: !4, line: 72, type: !35)
!157 = !DILocation(line: 72, column: 7, scope: !58)
!158 = !DILocation(line: 78, column: 8, scope: !159)
!159 = distinct !DILexicalBlock(scope: !58, file: !4, line: 78, column: 3)
!160 = !DILocation(line: 78, column: 17, scope: !161)
!161 = distinct !DILexicalBlock(scope: !159, file: !4, line: 78, column: 3)
!162 = !DILocation(line: 78, column: 3, scope: !159)
!163 = !DILocation(line: 79, column: 16, scope: !164)
!164 = distinct !DILexicalBlock(scope: !161, file: !4, line: 78, column: 27)
!165 = !DILocation(line: 79, column: 11, scope: !164)
!166 = !DILocation(line: 79, column: 31, scope: !164)
!167 = !DILocation(line: 80, column: 3, scope: !164)
!168 = !DILocation(line: 78, column: 23, scope: !161)
!169 = !DILocation(line: 78, column: 3, scope: !161)
!170 = !DILocation(line: 81, column: 8, scope: !58)
!171 = !DILocation(line: 81, column: 3, scope: !58)
!172 = !DILocation(line: 82, column: 11, scope: !58)
!173 = !DILocation(line: 82, column: 3, scope: !58)
!174 = !DILocation(line: 85, column: 10, scope: !58)
!175 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ntog", scope: !58, file: !4, line: 74, type: !27)
!176 = !DILocation(line: 74, column: 14, scope: !58)
!177 = !DILocation(line: 86, column: 8, scope: !178)
!178 = distinct !DILexicalBlock(scope: !58, file: !4, line: 86, column: 3)
!179 = !DILocation(line: 86, column: 17, scope: !180)
!180 = distinct !DILexicalBlock(scope: !178, file: !4, line: 86, column: 3)
!181 = !DILocation(line: 86, column: 3, scope: !178)
!182 = !DILocation(line: 87, column: 17, scope: !183)
!183 = distinct !DILexicalBlock(scope: !180, file: !4, line: 86, column: 27)
!184 = !DILocation(line: 87, column: 26, scope: !183)
!185 = !DILocation(line: 87, column: 11, scope: !183)
!186 = !DILocation(line: 87, column: 33, scope: !183)
!187 = !DILocation(line: 87, column: 39, scope: !183)
!188 = !DILocation(line: 88, column: 3, scope: !183)
!189 = !DILocation(line: 86, column: 23, scope: !180)
!190 = !DILocation(line: 86, column: 3, scope: !180)
!191 = !DILocation(line: 89, column: 8, scope: !58)
!192 = !DILocation(line: 89, column: 3, scope: !58)
!193 = !DILocation(line: 90, column: 11, scope: !58)
!194 = !DILocation(line: 90, column: 3, scope: !58)
!195 = !DILocation(line: 91, column: 3, scope: !58)
