; ModuleID = '/home/gleison/tf/Benchmarks/Shootout/matrix/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"%d %d %d %d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32** @mkmatrix(i32 %rows, i32 %cols) #0 {
entry:
  %rows.addr = alloca i32, align 4
  %cols.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %count = alloca i32, align 4
  %m = alloca i32**, align 8
  store i32 %rows, i32* %rows.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rows.addr, metadata !30, metadata !31), !dbg !32
  store i32 %cols, i32* %cols.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cols.addr, metadata !33, metadata !31), !dbg !34
  call void @llvm.dbg.declare(metadata i32* %i, metadata !35, metadata !31), !dbg !36
  call void @llvm.dbg.declare(metadata i32* %j, metadata !37, metadata !31), !dbg !38
  call void @llvm.dbg.declare(metadata i32* %count, metadata !39, metadata !31), !dbg !40
  store i32 1, i32* %count, align 4, !dbg !40
  call void @llvm.dbg.declare(metadata i32*** %m, metadata !41, metadata !31), !dbg !42
  %0 = load i32, i32* %rows.addr, align 4, !dbg !43
  %conv = sext i32 %0 to i64, !dbg !43
  %mul = mul i64 %conv, 8, !dbg !44
  %call = call noalias i8* @malloc(i64 %mul) #5, !dbg !45
  %1 = bitcast i8* %call to i32**, !dbg !46
  store i32** %1, i32*** %m, align 8, !dbg !42
  store i32 0, i32* %i, align 4, !dbg !47
  br label %for.cond, !dbg !49

for.cond:                                         ; preds = %for.inc.14, %entry
  %2 = load i32, i32* %i, align 4, !dbg !50
  %3 = load i32, i32* %rows.addr, align 4, !dbg !54
  %cmp = icmp slt i32 %2, %3, !dbg !55
  br i1 %cmp, label %for.body, label %for.end.16, !dbg !56

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %cols.addr, align 4, !dbg !57
  %conv2 = sext i32 %4 to i64, !dbg !57
  %mul3 = mul i64 %conv2, 4, !dbg !59
  %call4 = call noalias i8* @malloc(i64 %mul3) #5, !dbg !60
  %5 = bitcast i8* %call4 to i32*, !dbg !61
  %6 = load i32, i32* %i, align 4, !dbg !62
  %idxprom = sext i32 %6 to i64, !dbg !63
  %7 = load i32**, i32*** %m, align 8, !dbg !63
  %arrayidx = getelementptr inbounds i32*, i32** %7, i64 %idxprom, !dbg !63
  store i32* %5, i32** %arrayidx, align 8, !dbg !64
  store i32 0, i32* %j, align 4, !dbg !65
  br label %for.cond.5, !dbg !67

for.cond.5:                                       ; preds = %for.inc, %for.body
  %8 = load i32, i32* %j, align 4, !dbg !68
  %9 = load i32, i32* %cols.addr, align 4, !dbg !72
  %cmp6 = icmp slt i32 %8, %9, !dbg !73
  br i1 %cmp6, label %for.body.8, label %for.end, !dbg !74

for.body.8:                                       ; preds = %for.cond.5
  %10 = load i32, i32* %count, align 4, !dbg !75
  %inc = add nsw i32 %10, 1, !dbg !75
  store i32 %inc, i32* %count, align 4, !dbg !75
  %11 = load i32, i32* %j, align 4, !dbg !77
  %idxprom9 = sext i32 %11 to i64, !dbg !78
  %12 = load i32, i32* %i, align 4, !dbg !79
  %idxprom10 = sext i32 %12 to i64, !dbg !78
  %13 = load i32**, i32*** %m, align 8, !dbg !78
  %arrayidx11 = getelementptr inbounds i32*, i32** %13, i64 %idxprom10, !dbg !78
  %14 = load i32*, i32** %arrayidx11, align 8, !dbg !78
  %arrayidx12 = getelementptr inbounds i32, i32* %14, i64 %idxprom9, !dbg !78
  store i32 %10, i32* %arrayidx12, align 4, !dbg !80
  br label %for.inc, !dbg !81

for.inc:                                          ; preds = %for.body.8
  %15 = load i32, i32* %j, align 4, !dbg !82
  %inc13 = add nsw i32 %15, 1, !dbg !82
  store i32 %inc13, i32* %j, align 4, !dbg !82
  br label %for.cond.5, !dbg !83

for.end:                                          ; preds = %for.cond.5
  br label %for.inc.14, !dbg !84

for.inc.14:                                       ; preds = %for.end
  %16 = load i32, i32* %i, align 4, !dbg !85
  %inc15 = add nsw i32 %16, 1, !dbg !85
  store i32 %inc15, i32* %i, align 4, !dbg !85
  br label %for.cond, !dbg !86

for.end.16:                                       ; preds = %for.cond
  %17 = load i32**, i32*** %m, align 8, !dbg !87
  ret i32** %17, !dbg !88
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind uwtable
define void @zeromatrix(i32 %rows, i32 %cols, i32** %m) #0 {
entry:
  %rows.addr = alloca i32, align 4
  %cols.addr = alloca i32, align 4
  %m.addr = alloca i32**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %rows, i32* %rows.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rows.addr, metadata !89, metadata !31), !dbg !90
  store i32 %cols, i32* %cols.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cols.addr, metadata !91, metadata !31), !dbg !92
  store i32** %m, i32*** %m.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %m.addr, metadata !93, metadata !31), !dbg !94
  call void @llvm.dbg.declare(metadata i32* %i, metadata !95, metadata !31), !dbg !96
  call void @llvm.dbg.declare(metadata i32* %j, metadata !97, metadata !31), !dbg !98
  store i32 0, i32* %i, align 4, !dbg !99
  br label %for.cond, !dbg !101

for.cond:                                         ; preds = %for.inc.6, %entry
  %0 = load i32, i32* %i, align 4, !dbg !102
  %1 = load i32, i32* %rows.addr, align 4, !dbg !106
  %cmp = icmp slt i32 %0, %1, !dbg !107
  br i1 %cmp, label %for.body, label %for.end.8, !dbg !108

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !109
  br label %for.cond.1, !dbg !111

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !112
  %3 = load i32, i32* %cols.addr, align 4, !dbg !116
  %cmp2 = icmp slt i32 %2, %3, !dbg !117
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !118

for.body.3:                                       ; preds = %for.cond.1
  %4 = load i32, i32* %j, align 4, !dbg !119
  %idxprom = sext i32 %4 to i64, !dbg !120
  %5 = load i32, i32* %i, align 4, !dbg !121
  %idxprom4 = sext i32 %5 to i64, !dbg !120
  %6 = load i32**, i32*** %m.addr, align 8, !dbg !120
  %arrayidx = getelementptr inbounds i32*, i32** %6, i64 %idxprom4, !dbg !120
  %7 = load i32*, i32** %arrayidx, align 8, !dbg !120
  %arrayidx5 = getelementptr inbounds i32, i32* %7, i64 %idxprom, !dbg !120
  store i32 0, i32* %arrayidx5, align 4, !dbg !122
  br label %for.inc, !dbg !120

for.inc:                                          ; preds = %for.body.3
  %8 = load i32, i32* %j, align 4, !dbg !123
  %inc = add nsw i32 %8, 1, !dbg !123
  store i32 %inc, i32* %j, align 4, !dbg !123
  br label %for.cond.1, !dbg !124

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.6, !dbg !125

for.inc.6:                                        ; preds = %for.end
  %9 = load i32, i32* %i, align 4, !dbg !126
  %inc7 = add nsw i32 %9, 1, !dbg !126
  store i32 %inc7, i32* %i, align 4, !dbg !126
  br label %for.cond, !dbg !127

for.end.8:                                        ; preds = %for.cond
  ret void, !dbg !128
}

; Function Attrs: nounwind uwtable
define void @freematrix(i32 %rows, i32** %m) #0 {
entry:
  %rows.addr = alloca i32, align 4
  %m.addr = alloca i32**, align 8
  store i32 %rows, i32* %rows.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rows.addr, metadata !129, metadata !31), !dbg !130
  store i32** %m, i32*** %m.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %m.addr, metadata !131, metadata !31), !dbg !132
  br label %while.cond, !dbg !133

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %rows.addr, align 4, !dbg !134
  %dec = add nsw i32 %0, -1, !dbg !134
  store i32 %dec, i32* %rows.addr, align 4, !dbg !134
  %cmp = icmp sgt i32 %dec, -1, !dbg !137
  br i1 %cmp, label %while.body, label %while.end, !dbg !133

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %rows.addr, align 4, !dbg !138
  %idxprom = sext i32 %1 to i64, !dbg !140
  %2 = load i32**, i32*** %m.addr, align 8, !dbg !140
  %arrayidx = getelementptr inbounds i32*, i32** %2, i64 %idxprom, !dbg !140
  %3 = load i32*, i32** %arrayidx, align 8, !dbg !140
  %4 = bitcast i32* %3 to i8*, !dbg !140
  call void @free(i8* %4) #5, !dbg !141
  br label %while.cond, !dbg !133

while.end:                                        ; preds = %while.cond
  %5 = load i32**, i32*** %m.addr, align 8, !dbg !142
  %6 = bitcast i32** %5 to i8*, !dbg !142
  call void @free(i8* %6) #5, !dbg !143
  ret void, !dbg !144
}

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: nounwind uwtable
define i32** @mmult(i32 %rows, i32 %cols, i32** %m1, i32** %m2, i32** %m3) #0 {
entry:
  %rows.addr = alloca i32, align 4
  %cols.addr = alloca i32, align 4
  %m1.addr = alloca i32**, align 8
  %m2.addr = alloca i32**, align 8
  %m3.addr = alloca i32**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %val = alloca i32, align 4
  store i32 %rows, i32* %rows.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rows.addr, metadata !145, metadata !31), !dbg !146
  store i32 %cols, i32* %cols.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cols.addr, metadata !147, metadata !31), !dbg !148
  store i32** %m1, i32*** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %m1.addr, metadata !149, metadata !31), !dbg !150
  store i32** %m2, i32*** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %m2.addr, metadata !151, metadata !31), !dbg !152
  store i32** %m3, i32*** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %m3.addr, metadata !153, metadata !31), !dbg !154
  call void @llvm.dbg.declare(metadata i32* %i, metadata !155, metadata !31), !dbg !156
  call void @llvm.dbg.declare(metadata i32* %j, metadata !157, metadata !31), !dbg !158
  call void @llvm.dbg.declare(metadata i32* %k, metadata !159, metadata !31), !dbg !160
  call void @llvm.dbg.declare(metadata i32* %val, metadata !161, metadata !31), !dbg !162
  store i32 0, i32* %i, align 4, !dbg !163
  br label %for.cond, !dbg !165

for.cond:                                         ; preds = %for.inc.20, %entry
  %0 = load i32, i32* %i, align 4, !dbg !166
  %1 = load i32, i32* %rows.addr, align 4, !dbg !170
  %cmp = icmp slt i32 %0, %1, !dbg !171
  br i1 %cmp, label %for.body, label %for.end.22, !dbg !172

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !173
  br label %for.cond.1, !dbg !176

for.cond.1:                                       ; preds = %for.inc.17, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !177
  %3 = load i32, i32* %cols.addr, align 4, !dbg !181
  %cmp2 = icmp slt i32 %2, %3, !dbg !182
  br i1 %cmp2, label %for.body.3, label %for.end.19, !dbg !183

for.body.3:                                       ; preds = %for.cond.1
  store i32 0, i32* %val, align 4, !dbg !184
  store i32 0, i32* %k, align 4, !dbg !186
  br label %for.cond.4, !dbg !188

for.cond.4:                                       ; preds = %for.inc, %for.body.3
  %4 = load i32, i32* %k, align 4, !dbg !189
  %5 = load i32, i32* %cols.addr, align 4, !dbg !193
  %cmp5 = icmp slt i32 %4, %5, !dbg !194
  br i1 %cmp5, label %for.body.6, label %for.end, !dbg !195

for.body.6:                                       ; preds = %for.cond.4
  %6 = load i32, i32* %k, align 4, !dbg !196
  %idxprom = sext i32 %6 to i64, !dbg !198
  %7 = load i32, i32* %i, align 4, !dbg !199
  %idxprom7 = sext i32 %7 to i64, !dbg !198
  %8 = load i32**, i32*** %m1.addr, align 8, !dbg !198
  %arrayidx = getelementptr inbounds i32*, i32** %8, i64 %idxprom7, !dbg !198
  %9 = load i32*, i32** %arrayidx, align 8, !dbg !198
  %arrayidx8 = getelementptr inbounds i32, i32* %9, i64 %idxprom, !dbg !198
  %10 = load i32, i32* %arrayidx8, align 4, !dbg !198
  %11 = load i32, i32* %j, align 4, !dbg !200
  %idxprom9 = sext i32 %11 to i64, !dbg !201
  %12 = load i32, i32* %k, align 4, !dbg !202
  %idxprom10 = sext i32 %12 to i64, !dbg !201
  %13 = load i32**, i32*** %m2.addr, align 8, !dbg !201
  %arrayidx11 = getelementptr inbounds i32*, i32** %13, i64 %idxprom10, !dbg !201
  %14 = load i32*, i32** %arrayidx11, align 8, !dbg !201
  %arrayidx12 = getelementptr inbounds i32, i32* %14, i64 %idxprom9, !dbg !201
  %15 = load i32, i32* %arrayidx12, align 4, !dbg !201
  %mul = mul nsw i32 %10, %15, !dbg !203
  %16 = load i32, i32* %val, align 4, !dbg !204
  %add = add nsw i32 %16, %mul, !dbg !204
  store i32 %add, i32* %val, align 4, !dbg !204
  br label %for.inc, !dbg !205

for.inc:                                          ; preds = %for.body.6
  %17 = load i32, i32* %k, align 4, !dbg !206
  %inc = add nsw i32 %17, 1, !dbg !206
  store i32 %inc, i32* %k, align 4, !dbg !206
  br label %for.cond.4, !dbg !207

for.end:                                          ; preds = %for.cond.4
  %18 = load i32, i32* %val, align 4, !dbg !208
  %19 = load i32, i32* %j, align 4, !dbg !209
  %idxprom13 = sext i32 %19 to i64, !dbg !210
  %20 = load i32, i32* %i, align 4, !dbg !211
  %idxprom14 = sext i32 %20 to i64, !dbg !210
  %21 = load i32**, i32*** %m3.addr, align 8, !dbg !210
  %arrayidx15 = getelementptr inbounds i32*, i32** %21, i64 %idxprom14, !dbg !210
  %22 = load i32*, i32** %arrayidx15, align 8, !dbg !210
  %arrayidx16 = getelementptr inbounds i32, i32* %22, i64 %idxprom13, !dbg !210
  store i32 %18, i32* %arrayidx16, align 4, !dbg !212
  br label %for.inc.17, !dbg !213

for.inc.17:                                       ; preds = %for.end
  %23 = load i32, i32* %j, align 4, !dbg !214
  %inc18 = add nsw i32 %23, 1, !dbg !214
  store i32 %inc18, i32* %j, align 4, !dbg !214
  br label %for.cond.1, !dbg !215

for.end.19:                                       ; preds = %for.cond.1
  br label %for.inc.20, !dbg !216

for.inc.20:                                       ; preds = %for.end.19
  %24 = load i32, i32* %i, align 4, !dbg !217
  %inc21 = add nsw i32 %24, 1, !dbg !217
  store i32 %inc21, i32* %i, align 4, !dbg !217
  br label %for.cond, !dbg !218

for.end.22:                                       ; preds = %for.cond
  %25 = load i32**, i32*** %m3.addr, align 8, !dbg !219
  ret i32** %25, !dbg !220
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %m1 = alloca i32**, align 8
  %m2 = alloca i32**, align 8
  %mm = alloca i32**, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !221, metadata !31), !dbg !222
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !223, metadata !31), !dbg !224
  call void @llvm.dbg.declare(metadata i32* %i, metadata !225, metadata !31), !dbg !226
  call void @llvm.dbg.declare(metadata i32* %n, metadata !227, metadata !31), !dbg !228
  %0 = load i32, i32* %argc.addr, align 4, !dbg !229
  %cmp = icmp eq i32 %0, 2, !dbg !230
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !231

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !232
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 1, !dbg !232
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !232
  %call = call i32 @atoi(i8* %2) #6, !dbg !234
  br label %cond.end, !dbg !231

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !235

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 3000000, %cond.false ], !dbg !231
  store i32 %cond, i32* %n, align 4, !dbg !237
  call void @llvm.dbg.declare(metadata i32*** %m1, metadata !240, metadata !31), !dbg !241
  %call1 = call i32** @mkmatrix(i32 10, i32 10), !dbg !242
  store i32** %call1, i32*** %m1, align 8, !dbg !241
  call void @llvm.dbg.declare(metadata i32*** %m2, metadata !243, metadata !31), !dbg !244
  %call2 = call i32** @mkmatrix(i32 10, i32 10), !dbg !245
  store i32** %call2, i32*** %m2, align 8, !dbg !244
  call void @llvm.dbg.declare(metadata i32*** %mm, metadata !246, metadata !31), !dbg !247
  %call3 = call i32** @mkmatrix(i32 10, i32 10), !dbg !248
  store i32** %call3, i32*** %mm, align 8, !dbg !247
  store i32 0, i32* %i, align 4, !dbg !249
  br label %for.cond, !dbg !251

for.cond:                                         ; preds = %for.inc, %cond.end
  %3 = load i32, i32* %i, align 4, !dbg !252
  %4 = load i32, i32* %n, align 4, !dbg !256
  %cmp4 = icmp slt i32 %3, %4, !dbg !257
  br i1 %cmp4, label %for.body, label %for.end, !dbg !258

for.body:                                         ; preds = %for.cond
  %5 = load i32**, i32*** %m1, align 8, !dbg !259
  %6 = load i32**, i32*** %m2, align 8, !dbg !261
  %7 = load i32**, i32*** %mm, align 8, !dbg !262
  %call5 = call i32** @mmult(i32 10, i32 10, i32** %5, i32** %6, i32** %7), !dbg !263
  store i32** %call5, i32*** %mm, align 8, !dbg !264
  br label %for.inc, !dbg !265

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !266
  %inc = add nsw i32 %8, 1, !dbg !266
  store i32 %inc, i32* %i, align 4, !dbg !266
  br label %for.cond, !dbg !267

for.end:                                          ; preds = %for.cond
  %9 = load i32**, i32*** %mm, align 8, !dbg !268
  %arrayidx6 = getelementptr inbounds i32*, i32** %9, i64 0, !dbg !268
  %10 = load i32*, i32** %arrayidx6, align 8, !dbg !268
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i64 0, !dbg !268
  %11 = load i32, i32* %arrayidx7, align 4, !dbg !268
  %12 = load i32**, i32*** %mm, align 8, !dbg !269
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i64 2, !dbg !269
  %13 = load i32*, i32** %arrayidx8, align 8, !dbg !269
  %arrayidx9 = getelementptr inbounds i32, i32* %13, i64 3, !dbg !269
  %14 = load i32, i32* %arrayidx9, align 4, !dbg !269
  %15 = load i32**, i32*** %mm, align 8, !dbg !270
  %arrayidx10 = getelementptr inbounds i32*, i32** %15, i64 3, !dbg !270
  %16 = load i32*, i32** %arrayidx10, align 8, !dbg !270
  %arrayidx11 = getelementptr inbounds i32, i32* %16, i64 2, !dbg !270
  %17 = load i32, i32* %arrayidx11, align 4, !dbg !270
  %18 = load i32**, i32*** %mm, align 8, !dbg !271
  %arrayidx12 = getelementptr inbounds i32*, i32** %18, i64 4, !dbg !271
  %19 = load i32*, i32** %arrayidx12, align 8, !dbg !271
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i64 4, !dbg !271
  %20 = load i32, i32* %arrayidx13, align 4, !dbg !271
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i32 %11, i32 %14, i32 %17, i32 %20), !dbg !272
  %21 = load i32**, i32*** %m1, align 8, !dbg !273
  call void @freematrix(i32 10, i32** %21), !dbg !274
  %22 = load i32**, i32*** %m2, align 8, !dbg !275
  call void @freematrix(i32 10, i32** %22), !dbg !276
  %23 = load i32**, i32*** %mm, align 8, !dbg !277
  call void @freematrix(i32 10, i32** %23), !dbg !278
  ret i32 0, !dbg !279
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #3

declare i32 @printf(i8*, ...) #4

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!27, !28}
!llvm.ident = !{!29}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !7)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/matrix")
!2 = !{}
!3 = !{!4, !5}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!6 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!7 = !{!8, !12, !15, !18, !21}
!8 = !DISubprogram(name: "mkmatrix", scope: !9, file: !9, line: 12, type: !10, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, function: i32** (i32, i32)* @mkmatrix, variables: !2)
!9 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Shootout/matrix/tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/matrix")
!10 = !DISubroutineType(types: !11)
!11 = !{!4, !6, !6}
!12 = !DISubprogram(name: "zeromatrix", scope: !9, file: !9, line: 24, type: !13, isLocal: false, isDefinition: true, scopeLine: 24, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, i32**)* @zeromatrix, variables: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{null, !6, !6, !4}
!15 = !DISubprogram(name: "freematrix", scope: !9, file: !9, line: 31, type: !16, isLocal: false, isDefinition: true, scopeLine: 31, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32**)* @freematrix, variables: !2)
!16 = !DISubroutineType(types: !17)
!17 = !{null, !6, !4}
!18 = !DISubprogram(name: "mmult", scope: !9, file: !9, line: 38, type: !19, isLocal: false, isDefinition: true, scopeLine: 38, flags: DIFlagPrototyped, isOptimized: false, function: i32** (i32, i32, i32**, i32**, i32**)* @mmult, variables: !2)
!19 = !DISubroutineType(types: !20)
!20 = !{!4, !6, !6, !4, !4, !4}
!21 = !DISubprogram(name: "main", scope: !9, file: !9, line: 52, type: !22, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{!6, !6, !24}
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64, align: 64)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64, align: 64)
!26 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!27 = !{i32 2, !"Dwarf Version", i32 4}
!28 = !{i32 2, !"Debug Info Version", i32 3}
!29 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!30 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "rows", arg: 1, scope: !8, file: !9, line: 12, type: !6)
!31 = !DIExpression()
!32 = !DILocation(line: 12, column: 20, scope: !8)
!33 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cols", arg: 2, scope: !8, file: !9, line: 12, type: !6)
!34 = !DILocation(line: 12, column: 30, scope: !8)
!35 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !8, file: !9, line: 13, type: !6)
!36 = !DILocation(line: 13, column: 7, scope: !8)
!37 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !8, file: !9, line: 13, type: !6)
!38 = !DILocation(line: 13, column: 10, scope: !8)
!39 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !8, file: !9, line: 13, type: !6)
!40 = !DILocation(line: 13, column: 13, scope: !8)
!41 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !8, file: !9, line: 14, type: !4)
!42 = !DILocation(line: 14, column: 9, scope: !8)
!43 = !DILocation(line: 14, column: 28, scope: !8)
!44 = !DILocation(line: 14, column: 33, scope: !8)
!45 = !DILocation(line: 14, column: 21, scope: !8)
!46 = !DILocation(line: 14, column: 13, scope: !8)
!47 = !DILocation(line: 15, column: 10, scope: !48)
!48 = distinct !DILexicalBlock(scope: !8, file: !9, line: 15, column: 3)
!49 = !DILocation(line: 15, column: 8, scope: !48)
!50 = !DILocation(line: 15, column: 15, scope: !51)
!51 = !DILexicalBlockFile(scope: !52, file: !9, discriminator: 2)
!52 = !DILexicalBlockFile(scope: !53, file: !9, discriminator: 1)
!53 = distinct !DILexicalBlock(scope: !48, file: !9, line: 15, column: 3)
!54 = !DILocation(line: 15, column: 19, scope: !53)
!55 = !DILocation(line: 15, column: 17, scope: !53)
!56 = !DILocation(line: 15, column: 3, scope: !48)
!57 = !DILocation(line: 16, column: 26, scope: !58)
!58 = distinct !DILexicalBlock(scope: !53, file: !9, line: 15, column: 30)
!59 = !DILocation(line: 16, column: 31, scope: !58)
!60 = !DILocation(line: 16, column: 19, scope: !58)
!61 = !DILocation(line: 16, column: 12, scope: !58)
!62 = !DILocation(line: 16, column: 7, scope: !58)
!63 = !DILocation(line: 16, column: 5, scope: !58)
!64 = !DILocation(line: 16, column: 10, scope: !58)
!65 = !DILocation(line: 17, column: 12, scope: !66)
!66 = distinct !DILexicalBlock(scope: !58, file: !9, line: 17, column: 5)
!67 = !DILocation(line: 17, column: 10, scope: !66)
!68 = !DILocation(line: 17, column: 17, scope: !69)
!69 = !DILexicalBlockFile(scope: !70, file: !9, discriminator: 2)
!70 = !DILexicalBlockFile(scope: !71, file: !9, discriminator: 1)
!71 = distinct !DILexicalBlock(scope: !66, file: !9, line: 17, column: 5)
!72 = !DILocation(line: 17, column: 21, scope: !71)
!73 = !DILocation(line: 17, column: 19, scope: !71)
!74 = !DILocation(line: 17, column: 5, scope: !66)
!75 = !DILocation(line: 18, column: 22, scope: !76)
!76 = distinct !DILexicalBlock(scope: !71, file: !9, line: 17, column: 32)
!77 = !DILocation(line: 18, column: 12, scope: !76)
!78 = !DILocation(line: 18, column: 7, scope: !76)
!79 = !DILocation(line: 18, column: 9, scope: !76)
!80 = !DILocation(line: 18, column: 15, scope: !76)
!81 = !DILocation(line: 19, column: 5, scope: !76)
!82 = !DILocation(line: 17, column: 28, scope: !71)
!83 = !DILocation(line: 17, column: 5, scope: !71)
!84 = !DILocation(line: 20, column: 3, scope: !58)
!85 = !DILocation(line: 15, column: 26, scope: !53)
!86 = !DILocation(line: 15, column: 3, scope: !53)
!87 = !DILocation(line: 21, column: 11, scope: !8)
!88 = !DILocation(line: 21, column: 3, scope: !8)
!89 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "rows", arg: 1, scope: !12, file: !9, line: 24, type: !6)
!90 = !DILocation(line: 24, column: 21, scope: !12)
!91 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cols", arg: 2, scope: !12, file: !9, line: 24, type: !6)
!92 = !DILocation(line: 24, column: 31, scope: !12)
!93 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 3, scope: !12, file: !9, line: 24, type: !4)
!94 = !DILocation(line: 24, column: 43, scope: !12)
!95 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !12, file: !9, line: 25, type: !6)
!96 = !DILocation(line: 25, column: 7, scope: !12)
!97 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !12, file: !9, line: 25, type: !6)
!98 = !DILocation(line: 25, column: 10, scope: !12)
!99 = !DILocation(line: 26, column: 10, scope: !100)
!100 = distinct !DILexicalBlock(scope: !12, file: !9, line: 26, column: 3)
!101 = !DILocation(line: 26, column: 8, scope: !100)
!102 = !DILocation(line: 26, column: 15, scope: !103)
!103 = !DILexicalBlockFile(scope: !104, file: !9, discriminator: 2)
!104 = !DILexicalBlockFile(scope: !105, file: !9, discriminator: 1)
!105 = distinct !DILexicalBlock(scope: !100, file: !9, line: 26, column: 3)
!106 = !DILocation(line: 26, column: 19, scope: !105)
!107 = !DILocation(line: 26, column: 17, scope: !105)
!108 = !DILocation(line: 26, column: 3, scope: !100)
!109 = !DILocation(line: 27, column: 12, scope: !110)
!110 = distinct !DILexicalBlock(scope: !105, file: !9, line: 27, column: 5)
!111 = !DILocation(line: 27, column: 10, scope: !110)
!112 = !DILocation(line: 27, column: 17, scope: !113)
!113 = !DILexicalBlockFile(scope: !114, file: !9, discriminator: 2)
!114 = !DILexicalBlockFile(scope: !115, file: !9, discriminator: 1)
!115 = distinct !DILexicalBlock(scope: !110, file: !9, line: 27, column: 5)
!116 = !DILocation(line: 27, column: 21, scope: !115)
!117 = !DILocation(line: 27, column: 19, scope: !115)
!118 = !DILocation(line: 27, column: 5, scope: !110)
!119 = !DILocation(line: 28, column: 12, scope: !115)
!120 = !DILocation(line: 28, column: 7, scope: !115)
!121 = !DILocation(line: 28, column: 9, scope: !115)
!122 = !DILocation(line: 28, column: 15, scope: !115)
!123 = !DILocation(line: 27, column: 28, scope: !115)
!124 = !DILocation(line: 27, column: 5, scope: !115)
!125 = !DILocation(line: 28, column: 17, scope: !110)
!126 = !DILocation(line: 26, column: 26, scope: !105)
!127 = !DILocation(line: 26, column: 3, scope: !105)
!128 = !DILocation(line: 29, column: 1, scope: !12)
!129 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "rows", arg: 1, scope: !15, file: !9, line: 31, type: !6)
!130 = !DILocation(line: 31, column: 21, scope: !15)
!131 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 2, scope: !15, file: !9, line: 31, type: !4)
!132 = !DILocation(line: 31, column: 33, scope: !15)
!133 = !DILocation(line: 32, column: 3, scope: !15)
!134 = !DILocation(line: 32, column: 10, scope: !135)
!135 = !DILexicalBlockFile(scope: !136, file: !9, discriminator: 2)
!136 = !DILexicalBlockFile(scope: !15, file: !9, discriminator: 1)
!137 = !DILocation(line: 32, column: 17, scope: !15)
!138 = !DILocation(line: 33, column: 12, scope: !139)
!139 = distinct !DILexicalBlock(scope: !15, file: !9, line: 32, column: 23)
!140 = !DILocation(line: 33, column: 10, scope: !139)
!141 = !DILocation(line: 33, column: 5, scope: !139)
!142 = !DILocation(line: 35, column: 8, scope: !15)
!143 = !DILocation(line: 35, column: 3, scope: !15)
!144 = !DILocation(line: 36, column: 1, scope: !15)
!145 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "rows", arg: 1, scope: !18, file: !9, line: 38, type: !6)
!146 = !DILocation(line: 38, column: 17, scope: !18)
!147 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cols", arg: 2, scope: !18, file: !9, line: 38, type: !6)
!148 = !DILocation(line: 38, column: 27, scope: !18)
!149 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m1", arg: 3, scope: !18, file: !9, line: 38, type: !4)
!150 = !DILocation(line: 38, column: 39, scope: !18)
!151 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m2", arg: 4, scope: !18, file: !9, line: 38, type: !4)
!152 = !DILocation(line: 38, column: 49, scope: !18)
!153 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m3", arg: 5, scope: !18, file: !9, line: 38, type: !4)
!154 = !DILocation(line: 38, column: 59, scope: !18)
!155 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !18, file: !9, line: 39, type: !6)
!156 = !DILocation(line: 39, column: 7, scope: !18)
!157 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !18, file: !9, line: 39, type: !6)
!158 = !DILocation(line: 39, column: 10, scope: !18)
!159 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !18, file: !9, line: 39, type: !6)
!160 = !DILocation(line: 39, column: 13, scope: !18)
!161 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "val", scope: !18, file: !9, line: 39, type: !6)
!162 = !DILocation(line: 39, column: 16, scope: !18)
!163 = !DILocation(line: 40, column: 10, scope: !164)
!164 = distinct !DILexicalBlock(scope: !18, file: !9, line: 40, column: 3)
!165 = !DILocation(line: 40, column: 8, scope: !164)
!166 = !DILocation(line: 40, column: 15, scope: !167)
!167 = !DILexicalBlockFile(scope: !168, file: !9, discriminator: 2)
!168 = !DILexicalBlockFile(scope: !169, file: !9, discriminator: 1)
!169 = distinct !DILexicalBlock(scope: !164, file: !9, line: 40, column: 3)
!170 = !DILocation(line: 40, column: 19, scope: !169)
!171 = !DILocation(line: 40, column: 17, scope: !169)
!172 = !DILocation(line: 40, column: 3, scope: !164)
!173 = !DILocation(line: 41, column: 12, scope: !174)
!174 = distinct !DILexicalBlock(scope: !175, file: !9, line: 41, column: 5)
!175 = distinct !DILexicalBlock(scope: !169, file: !9, line: 40, column: 30)
!176 = !DILocation(line: 41, column: 10, scope: !174)
!177 = !DILocation(line: 41, column: 17, scope: !178)
!178 = !DILexicalBlockFile(scope: !179, file: !9, discriminator: 2)
!179 = !DILexicalBlockFile(scope: !180, file: !9, discriminator: 1)
!180 = distinct !DILexicalBlock(scope: !174, file: !9, line: 41, column: 5)
!181 = !DILocation(line: 41, column: 21, scope: !180)
!182 = !DILocation(line: 41, column: 19, scope: !180)
!183 = !DILocation(line: 41, column: 5, scope: !174)
!184 = !DILocation(line: 42, column: 11, scope: !185)
!185 = distinct !DILexicalBlock(scope: !180, file: !9, line: 41, column: 32)
!186 = !DILocation(line: 43, column: 14, scope: !187)
!187 = distinct !DILexicalBlock(scope: !185, file: !9, line: 43, column: 7)
!188 = !DILocation(line: 43, column: 12, scope: !187)
!189 = !DILocation(line: 43, column: 19, scope: !190)
!190 = !DILexicalBlockFile(scope: !191, file: !9, discriminator: 2)
!191 = !DILexicalBlockFile(scope: !192, file: !9, discriminator: 1)
!192 = distinct !DILexicalBlock(scope: !187, file: !9, line: 43, column: 7)
!193 = !DILocation(line: 43, column: 23, scope: !192)
!194 = !DILocation(line: 43, column: 21, scope: !192)
!195 = !DILocation(line: 43, column: 7, scope: !187)
!196 = !DILocation(line: 44, column: 22, scope: !197)
!197 = distinct !DILexicalBlock(scope: !192, file: !9, line: 43, column: 34)
!198 = !DILocation(line: 44, column: 16, scope: !197)
!199 = !DILocation(line: 44, column: 19, scope: !197)
!200 = !DILocation(line: 44, column: 33, scope: !197)
!201 = !DILocation(line: 44, column: 27, scope: !197)
!202 = !DILocation(line: 44, column: 30, scope: !197)
!203 = !DILocation(line: 44, column: 25, scope: !197)
!204 = !DILocation(line: 44, column: 13, scope: !197)
!205 = !DILocation(line: 45, column: 7, scope: !197)
!206 = !DILocation(line: 43, column: 30, scope: !192)
!207 = !DILocation(line: 43, column: 7, scope: !192)
!208 = !DILocation(line: 46, column: 18, scope: !185)
!209 = !DILocation(line: 46, column: 13, scope: !185)
!210 = !DILocation(line: 46, column: 7, scope: !185)
!211 = !DILocation(line: 46, column: 10, scope: !185)
!212 = !DILocation(line: 46, column: 16, scope: !185)
!213 = !DILocation(line: 47, column: 5, scope: !185)
!214 = !DILocation(line: 41, column: 28, scope: !180)
!215 = !DILocation(line: 41, column: 5, scope: !180)
!216 = !DILocation(line: 48, column: 3, scope: !175)
!217 = !DILocation(line: 40, column: 26, scope: !169)
!218 = !DILocation(line: 40, column: 3, scope: !169)
!219 = !DILocation(line: 49, column: 11, scope: !18)
!220 = !DILocation(line: 49, column: 3, scope: !18)
!221 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !21, file: !9, line: 52, type: !6)
!222 = !DILocation(line: 52, column: 14, scope: !21)
!223 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !21, file: !9, line: 52, type: !24)
!224 = !DILocation(line: 52, column: 26, scope: !21)
!225 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !21, file: !9, line: 58, type: !6)
!226 = !DILocation(line: 58, column: 7, scope: !21)
!227 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !21, file: !9, line: 58, type: !6)
!228 = !DILocation(line: 58, column: 10, scope: !21)
!229 = !DILocation(line: 58, column: 16, scope: !21)
!230 = !DILocation(line: 58, column: 21, scope: !21)
!231 = !DILocation(line: 58, column: 15, scope: !21)
!232 = !DILocation(line: 58, column: 34, scope: !233)
!233 = !DILexicalBlockFile(scope: !21, file: !9, discriminator: 1)
!234 = !DILocation(line: 58, column: 29, scope: !21)
!235 = !DILocation(line: 58, column: 15, scope: !236)
!236 = !DILexicalBlockFile(scope: !21, file: !9, discriminator: 2)
!237 = !DILocation(line: 58, column: 10, scope: !238)
!238 = !DILexicalBlockFile(scope: !239, file: !9, discriminator: 4)
!239 = !DILexicalBlockFile(scope: !21, file: !9, discriminator: 3)
!240 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m1", scope: !21, file: !9, line: 60, type: !4)
!241 = !DILocation(line: 60, column: 9, scope: !21)
!242 = !DILocation(line: 60, column: 14, scope: !21)
!243 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m2", scope: !21, file: !9, line: 61, type: !4)
!244 = !DILocation(line: 61, column: 9, scope: !21)
!245 = !DILocation(line: 61, column: 14, scope: !21)
!246 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mm", scope: !21, file: !9, line: 62, type: !4)
!247 = !DILocation(line: 62, column: 9, scope: !21)
!248 = !DILocation(line: 62, column: 14, scope: !21)
!249 = !DILocation(line: 64, column: 10, scope: !250)
!250 = distinct !DILexicalBlock(scope: !21, file: !9, line: 64, column: 3)
!251 = !DILocation(line: 64, column: 8, scope: !250)
!252 = !DILocation(line: 64, column: 15, scope: !253)
!253 = !DILexicalBlockFile(scope: !254, file: !9, discriminator: 2)
!254 = !DILexicalBlockFile(scope: !255, file: !9, discriminator: 1)
!255 = distinct !DILexicalBlock(scope: !250, file: !9, line: 64, column: 3)
!256 = !DILocation(line: 64, column: 19, scope: !255)
!257 = !DILocation(line: 64, column: 17, scope: !255)
!258 = !DILocation(line: 64, column: 3, scope: !250)
!259 = !DILocation(line: 65, column: 28, scope: !260)
!260 = distinct !DILexicalBlock(scope: !255, file: !9, line: 64, column: 27)
!261 = !DILocation(line: 65, column: 32, scope: !260)
!262 = !DILocation(line: 65, column: 36, scope: !260)
!263 = !DILocation(line: 65, column: 10, scope: !260)
!264 = !DILocation(line: 65, column: 8, scope: !260)
!265 = !DILocation(line: 66, column: 3, scope: !260)
!266 = !DILocation(line: 64, column: 23, scope: !255)
!267 = !DILocation(line: 64, column: 3, scope: !255)
!268 = !DILocation(line: 67, column: 27, scope: !21)
!269 = !DILocation(line: 67, column: 37, scope: !21)
!270 = !DILocation(line: 67, column: 47, scope: !21)
!271 = !DILocation(line: 67, column: 57, scope: !21)
!272 = !DILocation(line: 67, column: 3, scope: !21)
!273 = !DILocation(line: 69, column: 20, scope: !21)
!274 = !DILocation(line: 69, column: 3, scope: !21)
!275 = !DILocation(line: 70, column: 20, scope: !21)
!276 = !DILocation(line: 70, column: 3, scope: !21)
!277 = !DILocation(line: 71, column: 20, scope: !21)
!278 = !DILocation(line: 71, column: 3, scope: !21)
!279 = !DILocation(line: 72, column: 3, scope: !21)
