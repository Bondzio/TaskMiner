; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !15, metadata !16), !dbg !17
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !18, metadata !16), !dbg !19
  %cmp = icmp eq i32 %argc, 2, !dbg !20
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !21

cond.true:                                        ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 1, !dbg !22
  %tmp2 = load i8*, i8** %arrayidx, align 8, !dbg !22
  %call = call i32 @atoi(i8* %tmp2) #4, !dbg !24
  br label %cond.end, !dbg !21

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !25

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 46, %cond.false ], !dbg !21
  call void @llvm.dbg.value(metadata i32 %cond, i64 0, metadata !27, metadata !16), !dbg !28
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !29, metadata !16), !dbg !30
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !31, metadata !16), !dbg !32
  br label %for.cond, !dbg !33

for.cond:                                         ; preds = %for.inc.30, %cond.end
  %a.0 = phi i32 [ 0, %cond.end ], [ %inc31, %for.inc.30 ]
  %x.0 = phi i32 [ 0, %cond.end ], [ %x.1.lcssa, %for.inc.30 ]
  %cmp1 = icmp slt i32 %a.0, %cond, !dbg !35
  br i1 %cmp1, label %for.body, label %for.end.32, !dbg !37

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !38, metadata !16), !dbg !39
  br label %for.cond.2, !dbg !40

for.cond.2:                                       ; preds = %for.inc.27, %for.body
  %b.0 = phi i32 [ 0, %for.body ], [ %inc28, %for.inc.27 ]
  %x.1 = phi i32 [ %x.0, %for.body ], [ %x.2.lcssa, %for.inc.27 ]
  %cmp3 = icmp slt i32 %b.0, %cond, !dbg !42
  br i1 %cmp3, label %for.body.4, label %for.end.29, !dbg !44

for.body.4:                                       ; preds = %for.cond.2
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !45, metadata !16), !dbg !46
  br label %for.cond.5, !dbg !47

for.cond.5:                                       ; preds = %for.inc.24, %for.body.4
  %c.0 = phi i32 [ 0, %for.body.4 ], [ %inc25, %for.inc.24 ]
  %x.2 = phi i32 [ %x.1, %for.body.4 ], [ %x.3.lcssa, %for.inc.24 ]
  %cmp6 = icmp slt i32 %c.0, %cond, !dbg !49
  br i1 %cmp6, label %for.body.7, label %for.end.26, !dbg !51

for.body.7:                                       ; preds = %for.cond.5
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !52, metadata !16), !dbg !53
  br label %for.cond.8, !dbg !54

for.cond.8:                                       ; preds = %for.inc.21, %for.body.7
  %d.0 = phi i32 [ 0, %for.body.7 ], [ %inc22, %for.inc.21 ]
  %x.3 = phi i32 [ %x.2, %for.body.7 ], [ %x.4.lcssa, %for.inc.21 ]
  %cmp9 = icmp slt i32 %d.0, %cond, !dbg !56
  br i1 %cmp9, label %for.body.10, label %for.end.23, !dbg !58

for.body.10:                                      ; preds = %for.cond.8
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !59, metadata !16), !dbg !60
  br label %for.cond.11, !dbg !61

for.cond.11:                                      ; preds = %for.inc.18, %for.body.10
  %e.0 = phi i32 [ 0, %for.body.10 ], [ %inc19, %for.inc.18 ]
  %x.4 = phi i32 [ %x.3, %for.body.10 ], [ %x.5.lcssa, %for.inc.18 ]
  %cmp12 = icmp slt i32 %e.0, %cond, !dbg !63
  br i1 %cmp12, label %for.body.13, label %for.end.20, !dbg !65

for.body.13:                                      ; preds = %for.cond.11
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !66, metadata !16), !dbg !67
  br label %for.cond.14, !dbg !68

for.cond.14:                                      ; preds = %for.inc, %for.body.13
  %f.0 = phi i32 [ 0, %for.body.13 ], [ %inc17, %for.inc ]
  %x.5 = phi i32 [ %x.4, %for.body.13 ], [ %inc, %for.inc ]
  %cmp15 = icmp slt i32 %f.0, %cond, !dbg !70
  br i1 %cmp15, label %for.body.16, label %for.end, !dbg !72

for.body.16:                                      ; preds = %for.cond.14
  %inc = add nsw i32 %x.5, 1, !dbg !73
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !29, metadata !16), !dbg !30
  br label %for.inc, !dbg !74

for.inc:                                          ; preds = %for.body.16
  %inc17 = add nsw i32 %f.0, 1, !dbg !75
  call void @llvm.dbg.value(metadata i32 %inc17, i64 0, metadata !66, metadata !16), !dbg !67
  br label %for.cond.14, !dbg !76

for.end:                                          ; preds = %for.cond.14
  %x.5.lcssa = phi i32 [ %x.5, %for.cond.14 ]
  br label %for.inc.18, !dbg !77

for.inc.18:                                       ; preds = %for.end
  %inc19 = add nsw i32 %e.0, 1, !dbg !78
  call void @llvm.dbg.value(metadata i32 %inc19, i64 0, metadata !59, metadata !16), !dbg !60
  br label %for.cond.11, !dbg !79

for.end.20:                                       ; preds = %for.cond.11
  %x.4.lcssa = phi i32 [ %x.4, %for.cond.11 ]
  br label %for.inc.21, !dbg !80

for.inc.21:                                       ; preds = %for.end.20
  %inc22 = add nsw i32 %d.0, 1, !dbg !81
  call void @llvm.dbg.value(metadata i32 %inc22, i64 0, metadata !52, metadata !16), !dbg !53
  br label %for.cond.8, !dbg !82

for.end.23:                                       ; preds = %for.cond.8
  %x.3.lcssa = phi i32 [ %x.3, %for.cond.8 ]
  br label %for.inc.24, !dbg !83

for.inc.24:                                       ; preds = %for.end.23
  %inc25 = add nsw i32 %c.0, 1, !dbg !84
  call void @llvm.dbg.value(metadata i32 %inc25, i64 0, metadata !45, metadata !16), !dbg !46
  br label %for.cond.5, !dbg !85

for.end.26:                                       ; preds = %for.cond.5
  %x.2.lcssa = phi i32 [ %x.2, %for.cond.5 ]
  br label %for.inc.27, !dbg !86

for.inc.27:                                       ; preds = %for.end.26
  %inc28 = add nsw i32 %b.0, 1, !dbg !87
  call void @llvm.dbg.value(metadata i32 %inc28, i64 0, metadata !38, metadata !16), !dbg !39
  br label %for.cond.2, !dbg !88

for.end.29:                                       ; preds = %for.cond.2
  %x.1.lcssa = phi i32 [ %x.1, %for.cond.2 ]
  br label %for.inc.30, !dbg !89

for.inc.30:                                       ; preds = %for.end.29
  %inc31 = add nsw i32 %a.0, 1, !dbg !90
  call void @llvm.dbg.value(metadata i32 %inc31, i64 0, metadata !31, metadata !16), !dbg !32
  br label %for.cond, !dbg !91

for.end.32:                                       ; preds = %for.cond
  %x.0.lcssa = phi i32 [ %x.0, %for.cond ]
  %call33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %x.0.lcssa), !dbg !92
  ret i32 0, !dbg !93
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #2

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!12, !13}
!llvm.ident = !{!14}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/nestedloop")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "main", scope: !5, file: !5, line: 9, type: !6, isLocal: false, isDefinition: true, scopeLine: 9, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Shootout/nestedloop/tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/nestedloop")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8, !9}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!12 = !{i32 2, !"Dwarf Version", i32 4}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!15 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !4, file: !5, line: 9, type: !8)
!16 = !DIExpression()
!17 = !DILocation(line: 9, column: 14, scope: !4)
!18 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !4, file: !5, line: 9, type: !9)
!19 = !DILocation(line: 9, column: 26, scope: !4)
!20 = !DILocation(line: 15, column: 18, scope: !4)
!21 = !DILocation(line: 15, column: 12, scope: !4)
!22 = !DILocation(line: 15, column: 31, scope: !23)
!23 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 1)
!24 = !DILocation(line: 15, column: 26, scope: !4)
!25 = !DILocation(line: 15, column: 12, scope: !26)
!26 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 2)
!27 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !4, file: !5, line: 15, type: !8)
!28 = !DILocation(line: 15, column: 7, scope: !4)
!29 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !4, file: !5, line: 16, type: !8)
!30 = !DILocation(line: 16, column: 25, scope: !4)
!31 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !4, file: !5, line: 16, type: !8)
!32 = !DILocation(line: 16, column: 7, scope: !4)
!33 = !DILocation(line: 18, column: 8, scope: !34)
!34 = distinct !DILexicalBlock(scope: !4, file: !5, line: 18, column: 3)
!35 = !DILocation(line: 18, column: 17, scope: !36)
!36 = distinct !DILexicalBlock(scope: !34, file: !5, line: 18, column: 3)
!37 = !DILocation(line: 18, column: 3, scope: !34)
!38 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !4, file: !5, line: 16, type: !8)
!39 = !DILocation(line: 16, column: 10, scope: !4)
!40 = !DILocation(line: 19, column: 10, scope: !41)
!41 = distinct !DILexicalBlock(scope: !36, file: !5, line: 19, column: 5)
!42 = !DILocation(line: 19, column: 19, scope: !43)
!43 = distinct !DILexicalBlock(scope: !41, file: !5, line: 19, column: 5)
!44 = !DILocation(line: 19, column: 5, scope: !41)
!45 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !4, file: !5, line: 16, type: !8)
!46 = !DILocation(line: 16, column: 13, scope: !4)
!47 = !DILocation(line: 20, column: 12, scope: !48)
!48 = distinct !DILexicalBlock(scope: !43, file: !5, line: 20, column: 7)
!49 = !DILocation(line: 20, column: 21, scope: !50)
!50 = distinct !DILexicalBlock(scope: !48, file: !5, line: 20, column: 7)
!51 = !DILocation(line: 20, column: 7, scope: !48)
!52 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "d", scope: !4, file: !5, line: 16, type: !8)
!53 = !DILocation(line: 16, column: 16, scope: !4)
!54 = !DILocation(line: 21, column: 14, scope: !55)
!55 = distinct !DILexicalBlock(scope: !50, file: !5, line: 21, column: 9)
!56 = !DILocation(line: 21, column: 23, scope: !57)
!57 = distinct !DILexicalBlock(scope: !55, file: !5, line: 21, column: 9)
!58 = !DILocation(line: 21, column: 9, scope: !55)
!59 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "e", scope: !4, file: !5, line: 16, type: !8)
!60 = !DILocation(line: 16, column: 19, scope: !4)
!61 = !DILocation(line: 22, column: 16, scope: !62)
!62 = distinct !DILexicalBlock(scope: !57, file: !5, line: 22, column: 11)
!63 = !DILocation(line: 22, column: 25, scope: !64)
!64 = distinct !DILexicalBlock(scope: !62, file: !5, line: 22, column: 11)
!65 = !DILocation(line: 22, column: 11, scope: !62)
!66 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "f", scope: !4, file: !5, line: 16, type: !8)
!67 = !DILocation(line: 16, column: 22, scope: !4)
!68 = !DILocation(line: 23, column: 18, scope: !69)
!69 = distinct !DILexicalBlock(scope: !64, file: !5, line: 23, column: 13)
!70 = !DILocation(line: 23, column: 27, scope: !71)
!71 = distinct !DILexicalBlock(scope: !69, file: !5, line: 23, column: 13)
!72 = !DILocation(line: 23, column: 13, scope: !69)
!73 = !DILocation(line: 24, column: 16, scope: !71)
!74 = !DILocation(line: 24, column: 15, scope: !71)
!75 = !DILocation(line: 23, column: 33, scope: !71)
!76 = !DILocation(line: 23, column: 13, scope: !71)
!77 = !DILocation(line: 24, column: 16, scope: !69)
!78 = !DILocation(line: 22, column: 31, scope: !64)
!79 = !DILocation(line: 22, column: 11, scope: !64)
!80 = !DILocation(line: 24, column: 16, scope: !62)
!81 = !DILocation(line: 21, column: 29, scope: !57)
!82 = !DILocation(line: 21, column: 9, scope: !57)
!83 = !DILocation(line: 24, column: 16, scope: !55)
!84 = !DILocation(line: 20, column: 27, scope: !50)
!85 = !DILocation(line: 20, column: 7, scope: !50)
!86 = !DILocation(line: 24, column: 16, scope: !48)
!87 = !DILocation(line: 19, column: 25, scope: !43)
!88 = !DILocation(line: 19, column: 5, scope: !43)
!89 = !DILocation(line: 24, column: 16, scope: !41)
!90 = !DILocation(line: 18, column: 23, scope: !36)
!91 = !DILocation(line: 18, column: 3, scope: !36)
!92 = !DILocation(line: 26, column: 3, scope: !4)
!93 = !DILocation(line: 27, column: 3, scope: !4)
