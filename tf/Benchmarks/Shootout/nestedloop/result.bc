; ModuleID = '/home/gleison/tf/Benchmarks/Shootout/nestedloop/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %n = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %x = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !15, metadata !16), !dbg !17
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !18, metadata !16), !dbg !19
  call void @llvm.dbg.declare(metadata i32* %n, metadata !20, metadata !16), !dbg !21
  %0 = load i32, i32* %argc.addr, align 4, !dbg !22
  %cmp = icmp eq i32 %0, 2, !dbg !23
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !24

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !25
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 1, !dbg !25
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !25
  %call = call i32 @atoi(i8* %2) #4, !dbg !27
  br label %cond.end, !dbg !24

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !28

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 46, %cond.false ], !dbg !24
  store i32 %cond, i32* %n, align 4, !dbg !30
  call void @llvm.dbg.declare(metadata i32* %a, metadata !33, metadata !16), !dbg !34
  call void @llvm.dbg.declare(metadata i32* %b, metadata !35, metadata !16), !dbg !36
  call void @llvm.dbg.declare(metadata i32* %c, metadata !37, metadata !16), !dbg !38
  call void @llvm.dbg.declare(metadata i32* %d, metadata !39, metadata !16), !dbg !40
  call void @llvm.dbg.declare(metadata i32* %e, metadata !41, metadata !16), !dbg !42
  call void @llvm.dbg.declare(metadata i32* %f, metadata !43, metadata !16), !dbg !44
  call void @llvm.dbg.declare(metadata i32* %x, metadata !45, metadata !16), !dbg !46
  store i32 0, i32* %x, align 4, !dbg !46
  store i32 0, i32* %a, align 4, !dbg !47
  br label %for.cond, !dbg !49

for.cond:                                         ; preds = %for.inc.30, %cond.end
  %3 = load i32, i32* %a, align 4, !dbg !50
  %4 = load i32, i32* %n, align 4, !dbg !54
  %cmp1 = icmp slt i32 %3, %4, !dbg !55
  br i1 %cmp1, label %for.body, label %for.end.32, !dbg !56

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %b, align 4, !dbg !57
  br label %for.cond.2, !dbg !59

for.cond.2:                                       ; preds = %for.inc.27, %for.body
  %5 = load i32, i32* %b, align 4, !dbg !60
  %6 = load i32, i32* %n, align 4, !dbg !64
  %cmp3 = icmp slt i32 %5, %6, !dbg !65
  br i1 %cmp3, label %for.body.4, label %for.end.29, !dbg !66

for.body.4:                                       ; preds = %for.cond.2
  store i32 0, i32* %c, align 4, !dbg !67
  br label %for.cond.5, !dbg !69

for.cond.5:                                       ; preds = %for.inc.24, %for.body.4
  %7 = load i32, i32* %c, align 4, !dbg !70
  %8 = load i32, i32* %n, align 4, !dbg !74
  %cmp6 = icmp slt i32 %7, %8, !dbg !75
  br i1 %cmp6, label %for.body.7, label %for.end.26, !dbg !76

for.body.7:                                       ; preds = %for.cond.5
  store i32 0, i32* %d, align 4, !dbg !77
  br label %for.cond.8, !dbg !79

for.cond.8:                                       ; preds = %for.inc.21, %for.body.7
  %9 = load i32, i32* %d, align 4, !dbg !80
  %10 = load i32, i32* %n, align 4, !dbg !84
  %cmp9 = icmp slt i32 %9, %10, !dbg !85
  br i1 %cmp9, label %for.body.10, label %for.end.23, !dbg !86

for.body.10:                                      ; preds = %for.cond.8
  store i32 0, i32* %e, align 4, !dbg !87
  br label %for.cond.11, !dbg !89

for.cond.11:                                      ; preds = %for.inc.18, %for.body.10
  %11 = load i32, i32* %e, align 4, !dbg !90
  %12 = load i32, i32* %n, align 4, !dbg !94
  %cmp12 = icmp slt i32 %11, %12, !dbg !95
  br i1 %cmp12, label %for.body.13, label %for.end.20, !dbg !96

for.body.13:                                      ; preds = %for.cond.11
  store i32 0, i32* %f, align 4, !dbg !97
  br label %for.cond.14, !dbg !99

for.cond.14:                                      ; preds = %for.inc, %for.body.13
  %13 = load i32, i32* %f, align 4, !dbg !100
  %14 = load i32, i32* %n, align 4, !dbg !104
  %cmp15 = icmp slt i32 %13, %14, !dbg !105
  br i1 %cmp15, label %for.body.16, label %for.end, !dbg !106

for.body.16:                                      ; preds = %for.cond.14
  %15 = load i32, i32* %x, align 4, !dbg !107
  %inc = add nsw i32 %15, 1, !dbg !107
  store i32 %inc, i32* %x, align 4, !dbg !107
  br label %for.inc, !dbg !108

for.inc:                                          ; preds = %for.body.16
  %16 = load i32, i32* %f, align 4, !dbg !109
  %inc17 = add nsw i32 %16, 1, !dbg !109
  store i32 %inc17, i32* %f, align 4, !dbg !109
  br label %for.cond.14, !dbg !110

for.end:                                          ; preds = %for.cond.14
  br label %for.inc.18, !dbg !111

for.inc.18:                                       ; preds = %for.end
  %17 = load i32, i32* %e, align 4, !dbg !112
  %inc19 = add nsw i32 %17, 1, !dbg !112
  store i32 %inc19, i32* %e, align 4, !dbg !112
  br label %for.cond.11, !dbg !113

for.end.20:                                       ; preds = %for.cond.11
  br label %for.inc.21, !dbg !114

for.inc.21:                                       ; preds = %for.end.20
  %18 = load i32, i32* %d, align 4, !dbg !115
  %inc22 = add nsw i32 %18, 1, !dbg !115
  store i32 %inc22, i32* %d, align 4, !dbg !115
  br label %for.cond.8, !dbg !116

for.end.23:                                       ; preds = %for.cond.8
  br label %for.inc.24, !dbg !117

for.inc.24:                                       ; preds = %for.end.23
  %19 = load i32, i32* %c, align 4, !dbg !118
  %inc25 = add nsw i32 %19, 1, !dbg !118
  store i32 %inc25, i32* %c, align 4, !dbg !118
  br label %for.cond.5, !dbg !119

for.end.26:                                       ; preds = %for.cond.5
  br label %for.inc.27, !dbg !120

for.inc.27:                                       ; preds = %for.end.26
  %20 = load i32, i32* %b, align 4, !dbg !121
  %inc28 = add nsw i32 %20, 1, !dbg !121
  store i32 %inc28, i32* %b, align 4, !dbg !121
  br label %for.cond.2, !dbg !122

for.end.29:                                       ; preds = %for.cond.2
  br label %for.inc.30, !dbg !123

for.inc.30:                                       ; preds = %for.end.29
  %21 = load i32, i32* %a, align 4, !dbg !124
  %inc31 = add nsw i32 %21, 1, !dbg !124
  store i32 %inc31, i32* %a, align 4, !dbg !124
  br label %for.cond, !dbg !125

for.end.32:                                       ; preds = %for.cond
  %22 = load i32, i32* %x, align 4, !dbg !126
  %call33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %22), !dbg !127
  ret i32 0, !dbg !128
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #2

declare i32 @printf(i8*, ...) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!12, !13}
!llvm.ident = !{!14}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/nestedloop")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "main", scope: !5, file: !5, line: 9, type: !6, isLocal: false, isDefinition: true, scopeLine: 9, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Shootout/nestedloop/tmp.c", directory: "/home/gleison/tf/Benchmarks/Shootout/nestedloop")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8, !9}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!12 = !{i32 2, !"Dwarf Version", i32 4}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!15 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !4, file: !5, line: 9, type: !8)
!16 = !DIExpression()
!17 = !DILocation(line: 9, column: 14, scope: !4)
!18 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !4, file: !5, line: 9, type: !9)
!19 = !DILocation(line: 9, column: 26, scope: !4)
!20 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !4, file: !5, line: 15, type: !8)
!21 = !DILocation(line: 15, column: 7, scope: !4)
!22 = !DILocation(line: 15, column: 13, scope: !4)
!23 = !DILocation(line: 15, column: 18, scope: !4)
!24 = !DILocation(line: 15, column: 12, scope: !4)
!25 = !DILocation(line: 15, column: 31, scope: !26)
!26 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 1)
!27 = !DILocation(line: 15, column: 26, scope: !4)
!28 = !DILocation(line: 15, column: 12, scope: !29)
!29 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 2)
!30 = !DILocation(line: 15, column: 7, scope: !31)
!31 = !DILexicalBlockFile(scope: !32, file: !5, discriminator: 4)
!32 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 3)
!33 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !4, file: !5, line: 16, type: !8)
!34 = !DILocation(line: 16, column: 7, scope: !4)
!35 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !4, file: !5, line: 16, type: !8)
!36 = !DILocation(line: 16, column: 10, scope: !4)
!37 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !4, file: !5, line: 16, type: !8)
!38 = !DILocation(line: 16, column: 13, scope: !4)
!39 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "d", scope: !4, file: !5, line: 16, type: !8)
!40 = !DILocation(line: 16, column: 16, scope: !4)
!41 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "e", scope: !4, file: !5, line: 16, type: !8)
!42 = !DILocation(line: 16, column: 19, scope: !4)
!43 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "f", scope: !4, file: !5, line: 16, type: !8)
!44 = !DILocation(line: 16, column: 22, scope: !4)
!45 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !4, file: !5, line: 16, type: !8)
!46 = !DILocation(line: 16, column: 25, scope: !4)
!47 = !DILocation(line: 18, column: 10, scope: !48)
!48 = distinct !DILexicalBlock(scope: !4, file: !5, line: 18, column: 3)
!49 = !DILocation(line: 18, column: 8, scope: !48)
!50 = !DILocation(line: 18, column: 15, scope: !51)
!51 = !DILexicalBlockFile(scope: !52, file: !5, discriminator: 2)
!52 = !DILexicalBlockFile(scope: !53, file: !5, discriminator: 1)
!53 = distinct !DILexicalBlock(scope: !48, file: !5, line: 18, column: 3)
!54 = !DILocation(line: 18, column: 19, scope: !53)
!55 = !DILocation(line: 18, column: 17, scope: !53)
!56 = !DILocation(line: 18, column: 3, scope: !48)
!57 = !DILocation(line: 19, column: 12, scope: !58)
!58 = distinct !DILexicalBlock(scope: !53, file: !5, line: 19, column: 5)
!59 = !DILocation(line: 19, column: 10, scope: !58)
!60 = !DILocation(line: 19, column: 17, scope: !61)
!61 = !DILexicalBlockFile(scope: !62, file: !5, discriminator: 2)
!62 = !DILexicalBlockFile(scope: !63, file: !5, discriminator: 1)
!63 = distinct !DILexicalBlock(scope: !58, file: !5, line: 19, column: 5)
!64 = !DILocation(line: 19, column: 21, scope: !63)
!65 = !DILocation(line: 19, column: 19, scope: !63)
!66 = !DILocation(line: 19, column: 5, scope: !58)
!67 = !DILocation(line: 20, column: 14, scope: !68)
!68 = distinct !DILexicalBlock(scope: !63, file: !5, line: 20, column: 7)
!69 = !DILocation(line: 20, column: 12, scope: !68)
!70 = !DILocation(line: 20, column: 19, scope: !71)
!71 = !DILexicalBlockFile(scope: !72, file: !5, discriminator: 2)
!72 = !DILexicalBlockFile(scope: !73, file: !5, discriminator: 1)
!73 = distinct !DILexicalBlock(scope: !68, file: !5, line: 20, column: 7)
!74 = !DILocation(line: 20, column: 23, scope: !73)
!75 = !DILocation(line: 20, column: 21, scope: !73)
!76 = !DILocation(line: 20, column: 7, scope: !68)
!77 = !DILocation(line: 21, column: 16, scope: !78)
!78 = distinct !DILexicalBlock(scope: !73, file: !5, line: 21, column: 9)
!79 = !DILocation(line: 21, column: 14, scope: !78)
!80 = !DILocation(line: 21, column: 21, scope: !81)
!81 = !DILexicalBlockFile(scope: !82, file: !5, discriminator: 2)
!82 = !DILexicalBlockFile(scope: !83, file: !5, discriminator: 1)
!83 = distinct !DILexicalBlock(scope: !78, file: !5, line: 21, column: 9)
!84 = !DILocation(line: 21, column: 25, scope: !83)
!85 = !DILocation(line: 21, column: 23, scope: !83)
!86 = !DILocation(line: 21, column: 9, scope: !78)
!87 = !DILocation(line: 22, column: 18, scope: !88)
!88 = distinct !DILexicalBlock(scope: !83, file: !5, line: 22, column: 11)
!89 = !DILocation(line: 22, column: 16, scope: !88)
!90 = !DILocation(line: 22, column: 23, scope: !91)
!91 = !DILexicalBlockFile(scope: !92, file: !5, discriminator: 2)
!92 = !DILexicalBlockFile(scope: !93, file: !5, discriminator: 1)
!93 = distinct !DILexicalBlock(scope: !88, file: !5, line: 22, column: 11)
!94 = !DILocation(line: 22, column: 27, scope: !93)
!95 = !DILocation(line: 22, column: 25, scope: !93)
!96 = !DILocation(line: 22, column: 11, scope: !88)
!97 = !DILocation(line: 23, column: 20, scope: !98)
!98 = distinct !DILexicalBlock(scope: !93, file: !5, line: 23, column: 13)
!99 = !DILocation(line: 23, column: 18, scope: !98)
!100 = !DILocation(line: 23, column: 25, scope: !101)
!101 = !DILexicalBlockFile(scope: !102, file: !5, discriminator: 2)
!102 = !DILexicalBlockFile(scope: !103, file: !5, discriminator: 1)
!103 = distinct !DILexicalBlock(scope: !98, file: !5, line: 23, column: 13)
!104 = !DILocation(line: 23, column: 29, scope: !103)
!105 = !DILocation(line: 23, column: 27, scope: !103)
!106 = !DILocation(line: 23, column: 13, scope: !98)
!107 = !DILocation(line: 24, column: 16, scope: !103)
!108 = !DILocation(line: 24, column: 15, scope: !103)
!109 = !DILocation(line: 23, column: 33, scope: !103)
!110 = !DILocation(line: 23, column: 13, scope: !103)
!111 = !DILocation(line: 24, column: 16, scope: !98)
!112 = !DILocation(line: 22, column: 31, scope: !93)
!113 = !DILocation(line: 22, column: 11, scope: !93)
!114 = !DILocation(line: 24, column: 16, scope: !88)
!115 = !DILocation(line: 21, column: 29, scope: !83)
!116 = !DILocation(line: 21, column: 9, scope: !83)
!117 = !DILocation(line: 24, column: 16, scope: !78)
!118 = !DILocation(line: 20, column: 27, scope: !73)
!119 = !DILocation(line: 20, column: 7, scope: !73)
!120 = !DILocation(line: 24, column: 16, scope: !68)
!121 = !DILocation(line: 19, column: 25, scope: !63)
!122 = !DILocation(line: 19, column: 5, scope: !63)
!123 = !DILocation(line: 24, column: 16, scope: !58)
!124 = !DILocation(line: 18, column: 23, scope: !53)
!125 = !DILocation(line: 18, column: 3, scope: !53)
!126 = !DILocation(line: 26, column: 18, scope: !4)
!127 = !DILocation(line: 26, column: 3, scope: !4)
!128 = !DILocation(line: 27, column: 3, scope: !4)
