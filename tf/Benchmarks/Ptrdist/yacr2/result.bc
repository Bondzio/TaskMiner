; ModuleID = '/home/gleison/tf/Benchmarks/Ptrdist/yacr2/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._nodeVCGType = type { %struct._constraintVCGType*, i64, i64, i64, %struct._constraintVCGType*, i64, i64, i64 }
%struct._constraintVCGType = type { i64, i64, i64, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@channelNets = external global i64, align 8
@VCG = common global %struct._nodeVCGType* null, align 8
@storageRootVCG = common global %struct._constraintVCGType* null, align 8
@storageVCG = common global %struct._constraintVCGType* null, align 8
@storageLimitVCG = common global i64 0, align 8
@SCC = common global i64* null, align 8
@perSCC = common global i64* null, align 8
@removeVCG = common global %struct._constraintVCGType** null, align 8
@channelColumns = external global i64, align 8
@TOP = external global i64*, align 8
@BOT = external global i64*, align 8
@.str = private unnamed_addr constant [20 x i8] c"storageLimitVCG > 0\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"/home/gleison/tf/Benchmarks/Ptrdist/yacr2/tmp.c\00", align 1
@__PRETTY_FUNCTION__.BuildVCG = private unnamed_addr constant [16 x i8] c"void BuildVCG()\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"[%d]\0A\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"above: \00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"VCG[net].netsAboveHook[which].top == net\00", align 1
@__PRETTY_FUNCTION__.DumpVCG = private unnamed_addr constant [28 x i8] c"void DumpVCG(nodeVCGType *)\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"below: \00", align 1
@.str.8 = private unnamed_addr constant [41 x i8] c"VCG[net].netsBelowHook[which].bot == net\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [37 x i8] c"VCG[net].netsAboveHook[s].top == net\00", align 1
@__PRETTY_FUNCTION__.DFSAboveVCG = private unnamed_addr constant [47 x i8] c"void DFSAboveVCG(nodeVCGType *, unsigned long)\00", align 1
@.str.11 = private unnamed_addr constant [37 x i8] c"VCG[net].netsBelowHook[s].bot == net\00", align 1
@__PRETTY_FUNCTION__.DFSBelowVCG = private unnamed_addr constant [47 x i8] c"void DFSBelowVCG(nodeVCGType *, unsigned long)\00", align 1
@.str.12 = private unnamed_addr constant [28 x i8] c"VCG[net].netsAboveLabel > 0\00", align 1
@__PRETTY_FUNCTION__.SCCofVCG = private unnamed_addr constant [63 x i8] c"void SCCofVCG(nodeVCGType *, unsigned long *, unsigned long *)\00", align 1
@totalSCC = common global i64 0, align 8
@.str.13 = private unnamed_addr constant [13 x i8] c"totalSCC > 0\00", align 1
@__PRETTY_FUNCTION__.SCC_DFSAboveVCG = private unnamed_addr constant [68 x i8] c"void SCC_DFSAboveVCG(nodeVCGType *, unsigned long, unsigned long *)\00", align 1
@__PRETTY_FUNCTION__.SCC_DFSBelowVCG = private unnamed_addr constant [66 x i8] c"void SCC_DFSBelowVCG(nodeVCGType *, unsigned long, unsigned long)\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"[%d]\09\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"<%d>\00", align 1
@removeTotalVCG = common global i64 0, align 8
@.str.16 = private unnamed_addr constant [28 x i8] c"\0A*** Input is acyclic! ***\0A\00", align 1
@.str.17 = private unnamed_addr constant [27 x i8] c"\0A*** Input is cyclic! ***\0A\00", align 1
@.str.18 = private unnamed_addr constant [27 x i8] c"*** VC's removed (%d) ***\0A\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"remove != NULL\00", align 1
@__PRETTY_FUNCTION__.RemoveConstraintVCG = private unnamed_addr constant [96 x i8] c"void RemoveConstraintVCG(nodeVCGType *, unsigned long *, unsigned long *, constraintVCGType **)\00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@.str.20 = private unnamed_addr constant [57 x i8] c"removeTotalVCG < ((channelNets + 1) * (channelNets + 1))\00", align 1
@cardBotNotPref = external global i64, align 8
@channelTracks = external global i64, align 8
@tracksBotNotPref = external global i64*, align 8
@cardTopNotPref = external global i64, align 8
@tracksTopNotPref = external global i64*, align 8
@tracksNotPref = external global i64*, align 8
@cardNotPref = external global i64, align 8
@__PRETTY_FUNCTION__.DFSAboveLongestPathVCG = private unnamed_addr constant [67 x i8] c"unsigned long DFSAboveLongestPathVCG(nodeVCGType *, unsigned long)\00", align 1
@__PRETTY_FUNCTION__.DFSBelowLongestPathVCG = private unnamed_addr constant [67 x i8] c"unsigned long DFSBelowLongestPathVCG(nodeVCGType *, unsigned long)\00", align 1

; Function Attrs: nounwind uwtable
define void @AllocVCG() #0 {
entry:
  %0 = load i64, i64* @channelNets, align 8, !dbg !84
  %add = add i64 %0, 1, !dbg !85
  %mul = mul i64 %add, 64, !dbg !86
  %call = call noalias i8* @malloc(i64 %mul) #5, !dbg !87
  %1 = bitcast i8* %call to %struct._nodeVCGType*, !dbg !88
  store %struct._nodeVCGType* %1, %struct._nodeVCGType** @VCG, align 8, !dbg !89
  %2 = load i64, i64* @channelNets, align 8, !dbg !90
  %add1 = add i64 %2, 1, !dbg !91
  %3 = load i64, i64* @channelNets, align 8, !dbg !92
  %add2 = add i64 %3, 1, !dbg !93
  %mul3 = mul i64 %add1, %add2, !dbg !94
  %mul4 = mul i64 %mul3, 32, !dbg !95
  %call5 = call noalias i8* @malloc(i64 %mul4) #5, !dbg !96
  %4 = bitcast i8* %call5 to %struct._constraintVCGType*, !dbg !97
  store %struct._constraintVCGType* %4, %struct._constraintVCGType** @storageRootVCG, align 8, !dbg !98
  %5 = load %struct._constraintVCGType*, %struct._constraintVCGType** @storageRootVCG, align 8, !dbg !99
  store %struct._constraintVCGType* %5, %struct._constraintVCGType** @storageVCG, align 8, !dbg !100
  %6 = load i64, i64* @channelNets, align 8, !dbg !101
  %add6 = add i64 %6, 1, !dbg !102
  %7 = load i64, i64* @channelNets, align 8, !dbg !103
  %add7 = add i64 %7, 1, !dbg !104
  %mul8 = mul i64 %add6, %add7, !dbg !105
  store i64 %mul8, i64* @storageLimitVCG, align 8, !dbg !106
  %8 = load i64, i64* @channelNets, align 8, !dbg !107
  %add9 = add i64 %8, 1, !dbg !108
  %mul10 = mul i64 %add9, 8, !dbg !109
  %call11 = call noalias i8* @malloc(i64 %mul10) #5, !dbg !110
  %9 = bitcast i8* %call11 to i64*, !dbg !111
  store i64* %9, i64** @SCC, align 8, !dbg !112
  %10 = load i64, i64* @channelNets, align 8, !dbg !113
  %add12 = add i64 %10, 1, !dbg !114
  %mul13 = mul i64 %add12, 8, !dbg !115
  %call14 = call noalias i8* @malloc(i64 %mul13) #5, !dbg !116
  %11 = bitcast i8* %call14 to i64*, !dbg !117
  store i64* %11, i64** @perSCC, align 8, !dbg !118
  %12 = load i64, i64* @channelNets, align 8, !dbg !119
  %add15 = add i64 %12, 1, !dbg !120
  %13 = load i64, i64* @channelNets, align 8, !dbg !121
  %add16 = add i64 %13, 1, !dbg !122
  %mul17 = mul i64 %add15, %add16, !dbg !123
  %mul18 = mul i64 %mul17, 8, !dbg !124
  %call19 = call noalias i8* @malloc(i64 %mul18) #5, !dbg !125
  %14 = bitcast i8* %call19 to %struct._constraintVCGType**, !dbg !126
  store %struct._constraintVCGType** %14, %struct._constraintVCGType*** @removeVCG, align 8, !dbg !127
  ret void, !dbg !128
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #1

; Function Attrs: nounwind uwtable
define void @FreeVCG() #0 {
entry:
  %0 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !129
  %1 = bitcast %struct._nodeVCGType* %0 to i8*, !dbg !129
  call void @free(i8* %1) #5, !dbg !130
  %2 = load %struct._constraintVCGType*, %struct._constraintVCGType** @storageRootVCG, align 8, !dbg !131
  %3 = bitcast %struct._constraintVCGType* %2 to i8*, !dbg !131
  call void @free(i8* %3) #5, !dbg !132
  store i64 0, i64* @storageLimitVCG, align 8, !dbg !133
  %4 = load i64*, i64** @SCC, align 8, !dbg !134
  %5 = bitcast i64* %4 to i8*, !dbg !134
  call void @free(i8* %5) #5, !dbg !135
  %6 = load i64*, i64** @perSCC, align 8, !dbg !136
  %7 = bitcast i64* %6 to i8*, !dbg !136
  call void @free(i8* %7) #5, !dbg !137
  %8 = load %struct._constraintVCGType**, %struct._constraintVCGType*** @removeVCG, align 8, !dbg !138
  %9 = bitcast %struct._constraintVCGType** %8 to i8*, !dbg !138
  call void @free(i8* %9) #5, !dbg !139
  ret void, !dbg !140
}

; Function Attrs: nounwind
declare void @free(i8*) #1

; Function Attrs: nounwind uwtable
define void @BuildVCG() #0 {
entry:
  %col = alloca i64, align 8
  %net = alloca i64, align 8
  %constraint = alloca i64, align 8
  %check = alloca i64, align 8
  %add = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %col, metadata !141, metadata !142), !dbg !143
  call void @llvm.dbg.declare(metadata i64* %net, metadata !144, metadata !142), !dbg !145
  call void @llvm.dbg.declare(metadata i64* %constraint, metadata !146, metadata !142), !dbg !147
  call void @llvm.dbg.declare(metadata i64* %check, metadata !148, metadata !142), !dbg !149
  call void @llvm.dbg.declare(metadata i64* %add, metadata !150, metadata !142), !dbg !151
  call void @AllocVCG(), !dbg !152
  store i64 1, i64* %net, align 8, !dbg !153
  br label %for.cond, !dbg !155

for.cond:                                         ; preds = %for.inc.105, %entry
  %0 = load i64, i64* %net, align 8, !dbg !156
  %1 = load i64, i64* @channelNets, align 8, !dbg !160
  %cmp = icmp ule i64 %0, %1, !dbg !161
  br i1 %cmp, label %for.body, label %for.end.107, !dbg !162

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %constraint, align 8, !dbg !163
  %2 = load %struct._constraintVCGType*, %struct._constraintVCGType** @storageVCG, align 8, !dbg !165
  %3 = load i64, i64* %net, align 8, !dbg !166
  %4 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !167
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %4, i64 %3, !dbg !167
  %netsAboveHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 0, !dbg !168
  store %struct._constraintVCGType* %2, %struct._constraintVCGType** %netsAboveHook, align 8, !dbg !169
  store i64 1, i64* %col, align 8, !dbg !170
  br label %for.cond.1, !dbg !172

for.cond.1:                                       ; preds = %for.inc.41, %for.body
  %5 = load i64, i64* %col, align 8, !dbg !173
  %6 = load i64, i64* @channelColumns, align 8, !dbg !177
  %cmp2 = icmp ule i64 %5, %6, !dbg !178
  br i1 %cmp2, label %for.body.3, label %for.end.43, !dbg !179

for.body.3:                                       ; preds = %for.cond.1
  %7 = load i64, i64* %col, align 8, !dbg !180
  %8 = load i64*, i64** @TOP, align 8, !dbg !183
  %arrayidx4 = getelementptr inbounds i64, i64* %8, i64 %7, !dbg !183
  %9 = load i64, i64* %arrayidx4, align 8, !dbg !183
  %10 = load i64, i64* %net, align 8, !dbg !184
  %cmp5 = icmp eq i64 %9, %10, !dbg !185
  br i1 %cmp5, label %land.lhs.true, label %if.end.40, !dbg !186

land.lhs.true:                                    ; preds = %for.body.3
  %11 = load i64, i64* %col, align 8, !dbg !187
  %12 = load i64*, i64** @BOT, align 8, !dbg !189
  %arrayidx6 = getelementptr inbounds i64, i64* %12, i64 %11, !dbg !189
  %13 = load i64, i64* %arrayidx6, align 8, !dbg !189
  %14 = load i64, i64* %net, align 8, !dbg !190
  %cmp7 = icmp ne i64 %13, %14, !dbg !191
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.40, !dbg !192

land.lhs.true.8:                                  ; preds = %land.lhs.true
  %15 = load i64, i64* %col, align 8, !dbg !193
  %16 = load i64*, i64** @BOT, align 8, !dbg !195
  %arrayidx9 = getelementptr inbounds i64, i64* %16, i64 %15, !dbg !195
  %17 = load i64, i64* %arrayidx9, align 8, !dbg !195
  %cmp10 = icmp ne i64 %17, 0, !dbg !196
  br i1 %cmp10, label %if.then, label %if.end.40, !dbg !197

if.then:                                          ; preds = %land.lhs.true.8
  store i64 1, i64* %add, align 8, !dbg !198
  store i64 0, i64* %check, align 8, !dbg !200
  br label %for.cond.11, !dbg !202

for.cond.11:                                      ; preds = %for.inc, %if.then
  %18 = load i64, i64* %check, align 8, !dbg !203
  %19 = load i64, i64* %constraint, align 8, !dbg !207
  %cmp12 = icmp ult i64 %18, %19, !dbg !208
  br i1 %cmp12, label %for.body.13, label %for.end, !dbg !209

for.body.13:                                      ; preds = %for.cond.11
  %20 = load i64, i64* %check, align 8, !dbg !210
  %21 = load i64, i64* %net, align 8, !dbg !213
  %22 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !214
  %arrayidx14 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %22, i64 %21, !dbg !214
  %netsAboveHook15 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx14, i32 0, i32 0, !dbg !215
  %23 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook15, align 8, !dbg !215
  %arrayidx16 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %23, i64 %20, !dbg !214
  %bot = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx16, i32 0, i32 1, !dbg !216
  %24 = load i64, i64* %bot, align 8, !dbg !216
  %25 = load i64, i64* %col, align 8, !dbg !217
  %26 = load i64*, i64** @BOT, align 8, !dbg !218
  %arrayidx17 = getelementptr inbounds i64, i64* %26, i64 %25, !dbg !218
  %27 = load i64, i64* %arrayidx17, align 8, !dbg !218
  %cmp18 = icmp eq i64 %24, %27, !dbg !219
  br i1 %cmp18, label %if.then.19, label %if.end, !dbg !220

if.then.19:                                       ; preds = %for.body.13
  store i64 0, i64* %add, align 8, !dbg !221
  br label %for.end, !dbg !223

if.end:                                           ; preds = %for.body.13
  br label %for.inc, !dbg !224

for.inc:                                          ; preds = %if.end
  %28 = load i64, i64* %check, align 8, !dbg !225
  %inc = add i64 %28, 1, !dbg !225
  store i64 %inc, i64* %check, align 8, !dbg !225
  br label %for.cond.11, !dbg !226

for.end:                                          ; preds = %if.then.19, %for.cond.11
  %29 = load i64, i64* %add, align 8, !dbg !227
  %tobool = icmp ne i64 %29, 0, !dbg !227
  br i1 %tobool, label %if.then.20, label %if.end.39, !dbg !229

if.then.20:                                       ; preds = %for.end
  %30 = load i64, i64* @storageLimitVCG, align 8, !dbg !230
  %cmp21 = icmp ugt i64 %30, 0, !dbg !230
  br i1 %cmp21, label %cond.true, label %cond.false, !dbg !230

cond.true:                                        ; preds = %if.then.20
  br label %cond.end, !dbg !232

cond.false:                                       ; preds = %if.then.20
  call void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 87, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__PRETTY_FUNCTION__.BuildVCG, i32 0, i32 0)) #6, !dbg !234
  unreachable, !dbg !234
                                                  ; No predecessors!
  br label %cond.end, !dbg !230

cond.end:                                         ; preds = %31, %cond.true
  %32 = load i64, i64* %col, align 8, !dbg !236
  %33 = load i64*, i64** @TOP, align 8, !dbg !237
  %arrayidx22 = getelementptr inbounds i64, i64* %33, i64 %32, !dbg !237
  %34 = load i64, i64* %arrayidx22, align 8, !dbg !237
  %35 = load i64, i64* %constraint, align 8, !dbg !238
  %36 = load i64, i64* %net, align 8, !dbg !239
  %37 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !240
  %arrayidx23 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %37, i64 %36, !dbg !240
  %netsAboveHook24 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx23, i32 0, i32 0, !dbg !241
  %38 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook24, align 8, !dbg !241
  %arrayidx25 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %38, i64 %35, !dbg !240
  %top = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx25, i32 0, i32 0, !dbg !242
  store i64 %34, i64* %top, align 8, !dbg !243
  %39 = load i64, i64* %col, align 8, !dbg !244
  %40 = load i64*, i64** @BOT, align 8, !dbg !245
  %arrayidx26 = getelementptr inbounds i64, i64* %40, i64 %39, !dbg !245
  %41 = load i64, i64* %arrayidx26, align 8, !dbg !245
  %42 = load i64, i64* %constraint, align 8, !dbg !246
  %43 = load i64, i64* %net, align 8, !dbg !247
  %44 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !248
  %arrayidx27 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %44, i64 %43, !dbg !248
  %netsAboveHook28 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx27, i32 0, i32 0, !dbg !249
  %45 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook28, align 8, !dbg !249
  %arrayidx29 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %45, i64 %42, !dbg !248
  %bot30 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx29, i32 0, i32 1, !dbg !250
  store i64 %41, i64* %bot30, align 8, !dbg !251
  %46 = load i64, i64* %col, align 8, !dbg !252
  %47 = load i64, i64* %constraint, align 8, !dbg !253
  %48 = load i64, i64* %net, align 8, !dbg !254
  %49 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !255
  %arrayidx31 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %49, i64 %48, !dbg !255
  %netsAboveHook32 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx31, i32 0, i32 0, !dbg !256
  %50 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook32, align 8, !dbg !256
  %arrayidx33 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %50, i64 %47, !dbg !255
  %col34 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx33, i32 0, i32 2, !dbg !257
  store i64 %46, i64* %col34, align 8, !dbg !258
  %51 = load i64, i64* %constraint, align 8, !dbg !259
  %52 = load i64, i64* %net, align 8, !dbg !260
  %53 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !261
  %arrayidx35 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %53, i64 %52, !dbg !261
  %netsAboveHook36 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx35, i32 0, i32 0, !dbg !262
  %54 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook36, align 8, !dbg !262
  %arrayidx37 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %54, i64 %51, !dbg !261
  %removed = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx37, i32 0, i32 3, !dbg !263
  store i64 0, i64* %removed, align 8, !dbg !264
  %55 = load %struct._constraintVCGType*, %struct._constraintVCGType** @storageVCG, align 8, !dbg !265
  %incdec.ptr = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %55, i32 1, !dbg !265
  store %struct._constraintVCGType* %incdec.ptr, %struct._constraintVCGType** @storageVCG, align 8, !dbg !265
  %56 = load i64, i64* @storageLimitVCG, align 8, !dbg !266
  %dec = add i64 %56, -1, !dbg !266
  store i64 %dec, i64* @storageLimitVCG, align 8, !dbg !266
  %57 = load i64, i64* %constraint, align 8, !dbg !267
  %inc38 = add i64 %57, 1, !dbg !267
  store i64 %inc38, i64* %constraint, align 8, !dbg !267
  br label %if.end.39, !dbg !268

if.end.39:                                        ; preds = %cond.end, %for.end
  br label %if.end.40, !dbg !269

if.end.40:                                        ; preds = %if.end.39, %land.lhs.true.8, %land.lhs.true, %for.body.3
  br label %for.inc.41, !dbg !270

for.inc.41:                                       ; preds = %if.end.40
  %58 = load i64, i64* %col, align 8, !dbg !271
  %inc42 = add i64 %58, 1, !dbg !271
  store i64 %inc42, i64* %col, align 8, !dbg !271
  br label %for.cond.1, !dbg !272

for.end.43:                                       ; preds = %for.cond.1
  %59 = load i64, i64* %constraint, align 8, !dbg !273
  %60 = load i64, i64* %net, align 8, !dbg !274
  %61 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !275
  %arrayidx44 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %61, i64 %60, !dbg !275
  %netsAbove = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx44, i32 0, i32 1, !dbg !276
  store i64 %59, i64* %netsAbove, align 8, !dbg !277
  store i64 0, i64* %constraint, align 8, !dbg !278
  %62 = load %struct._constraintVCGType*, %struct._constraintVCGType** @storageVCG, align 8, !dbg !279
  %63 = load i64, i64* %net, align 8, !dbg !280
  %64 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !281
  %arrayidx45 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %64, i64 %63, !dbg !281
  %netsBelowHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx45, i32 0, i32 4, !dbg !282
  store %struct._constraintVCGType* %62, %struct._constraintVCGType** %netsBelowHook, align 8, !dbg !283
  store i64 1, i64* %col, align 8, !dbg !284
  br label %for.cond.46, !dbg !286

for.cond.46:                                      ; preds = %for.inc.101, %for.end.43
  %65 = load i64, i64* %col, align 8, !dbg !287
  %66 = load i64, i64* @channelColumns, align 8, !dbg !291
  %cmp47 = icmp ule i64 %65, %66, !dbg !292
  br i1 %cmp47, label %for.body.48, label %for.end.103, !dbg !293

for.body.48:                                      ; preds = %for.cond.46
  %67 = load i64, i64* %col, align 8, !dbg !294
  %68 = load i64*, i64** @BOT, align 8, !dbg !297
  %arrayidx49 = getelementptr inbounds i64, i64* %68, i64 %67, !dbg !297
  %69 = load i64, i64* %arrayidx49, align 8, !dbg !297
  %70 = load i64, i64* %net, align 8, !dbg !298
  %cmp50 = icmp eq i64 %69, %70, !dbg !299
  br i1 %cmp50, label %land.lhs.true.51, label %if.end.100, !dbg !300

land.lhs.true.51:                                 ; preds = %for.body.48
  %71 = load i64, i64* %col, align 8, !dbg !301
  %72 = load i64*, i64** @TOP, align 8, !dbg !303
  %arrayidx52 = getelementptr inbounds i64, i64* %72, i64 %71, !dbg !303
  %73 = load i64, i64* %arrayidx52, align 8, !dbg !303
  %74 = load i64, i64* %net, align 8, !dbg !304
  %cmp53 = icmp ne i64 %73, %74, !dbg !305
  br i1 %cmp53, label %land.lhs.true.54, label %if.end.100, !dbg !306

land.lhs.true.54:                                 ; preds = %land.lhs.true.51
  %75 = load i64, i64* %col, align 8, !dbg !307
  %76 = load i64*, i64** @TOP, align 8, !dbg !309
  %arrayidx55 = getelementptr inbounds i64, i64* %76, i64 %75, !dbg !309
  %77 = load i64, i64* %arrayidx55, align 8, !dbg !309
  %cmp56 = icmp ne i64 %77, 0, !dbg !310
  br i1 %cmp56, label %if.then.57, label %if.end.100, !dbg !311

if.then.57:                                       ; preds = %land.lhs.true.54
  store i64 1, i64* %add, align 8, !dbg !312
  store i64 0, i64* %check, align 8, !dbg !314
  br label %for.cond.58, !dbg !316

for.cond.58:                                      ; preds = %for.inc.69, %if.then.57
  %78 = load i64, i64* %check, align 8, !dbg !317
  %79 = load i64, i64* %constraint, align 8, !dbg !321
  %cmp59 = icmp ult i64 %78, %79, !dbg !322
  br i1 %cmp59, label %for.body.60, label %for.end.71, !dbg !323

for.body.60:                                      ; preds = %for.cond.58
  %80 = load i64, i64* %check, align 8, !dbg !324
  %81 = load i64, i64* %net, align 8, !dbg !327
  %82 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !328
  %arrayidx61 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %82, i64 %81, !dbg !328
  %netsBelowHook62 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx61, i32 0, i32 4, !dbg !329
  %83 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook62, align 8, !dbg !329
  %arrayidx63 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %83, i64 %80, !dbg !328
  %top64 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx63, i32 0, i32 0, !dbg !330
  %84 = load i64, i64* %top64, align 8, !dbg !330
  %85 = load i64, i64* %col, align 8, !dbg !331
  %86 = load i64*, i64** @TOP, align 8, !dbg !332
  %arrayidx65 = getelementptr inbounds i64, i64* %86, i64 %85, !dbg !332
  %87 = load i64, i64* %arrayidx65, align 8, !dbg !332
  %cmp66 = icmp eq i64 %84, %87, !dbg !333
  br i1 %cmp66, label %if.then.67, label %if.end.68, !dbg !334

if.then.67:                                       ; preds = %for.body.60
  store i64 0, i64* %add, align 8, !dbg !335
  br label %for.end.71, !dbg !337

if.end.68:                                        ; preds = %for.body.60
  br label %for.inc.69, !dbg !338

for.inc.69:                                       ; preds = %if.end.68
  %88 = load i64, i64* %check, align 8, !dbg !339
  %inc70 = add i64 %88, 1, !dbg !339
  store i64 %inc70, i64* %check, align 8, !dbg !339
  br label %for.cond.58, !dbg !340

for.end.71:                                       ; preds = %if.then.67, %for.cond.58
  %89 = load i64, i64* %add, align 8, !dbg !341
  %tobool72 = icmp ne i64 %89, 0, !dbg !341
  br i1 %tobool72, label %if.then.73, label %if.end.99, !dbg !343

if.then.73:                                       ; preds = %for.end.71
  %90 = load i64, i64* @storageLimitVCG, align 8, !dbg !344
  %cmp74 = icmp ugt i64 %90, 0, !dbg !344
  br i1 %cmp74, label %cond.true.75, label %cond.false.76, !dbg !344

cond.true.75:                                     ; preds = %if.then.73
  br label %cond.end.77, !dbg !346

cond.false.76:                                    ; preds = %if.then.73
  call void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 122, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__PRETTY_FUNCTION__.BuildVCG, i32 0, i32 0)) #6, !dbg !348
  unreachable, !dbg !348
                                                  ; No predecessors!
  br label %cond.end.77, !dbg !344

cond.end.77:                                      ; preds = %91, %cond.true.75
  %92 = load i64, i64* %col, align 8, !dbg !350
  %93 = load i64*, i64** @TOP, align 8, !dbg !351
  %arrayidx78 = getelementptr inbounds i64, i64* %93, i64 %92, !dbg !351
  %94 = load i64, i64* %arrayidx78, align 8, !dbg !351
  %95 = load i64, i64* %constraint, align 8, !dbg !352
  %96 = load i64, i64* %net, align 8, !dbg !353
  %97 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !354
  %arrayidx79 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %97, i64 %96, !dbg !354
  %netsBelowHook80 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx79, i32 0, i32 4, !dbg !355
  %98 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook80, align 8, !dbg !355
  %arrayidx81 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %98, i64 %95, !dbg !354
  %top82 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx81, i32 0, i32 0, !dbg !356
  store i64 %94, i64* %top82, align 8, !dbg !357
  %99 = load i64, i64* %col, align 8, !dbg !358
  %100 = load i64*, i64** @BOT, align 8, !dbg !359
  %arrayidx83 = getelementptr inbounds i64, i64* %100, i64 %99, !dbg !359
  %101 = load i64, i64* %arrayidx83, align 8, !dbg !359
  %102 = load i64, i64* %constraint, align 8, !dbg !360
  %103 = load i64, i64* %net, align 8, !dbg !361
  %104 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !362
  %arrayidx84 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %104, i64 %103, !dbg !362
  %netsBelowHook85 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx84, i32 0, i32 4, !dbg !363
  %105 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook85, align 8, !dbg !363
  %arrayidx86 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %105, i64 %102, !dbg !362
  %bot87 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx86, i32 0, i32 1, !dbg !364
  store i64 %101, i64* %bot87, align 8, !dbg !365
  %106 = load i64, i64* %col, align 8, !dbg !366
  %107 = load i64, i64* %constraint, align 8, !dbg !367
  %108 = load i64, i64* %net, align 8, !dbg !368
  %109 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !369
  %arrayidx88 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %109, i64 %108, !dbg !369
  %netsBelowHook89 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx88, i32 0, i32 4, !dbg !370
  %110 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook89, align 8, !dbg !370
  %arrayidx90 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %110, i64 %107, !dbg !369
  %col91 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx90, i32 0, i32 2, !dbg !371
  store i64 %106, i64* %col91, align 8, !dbg !372
  %111 = load i64, i64* %constraint, align 8, !dbg !373
  %112 = load i64, i64* %net, align 8, !dbg !374
  %113 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !375
  %arrayidx92 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %113, i64 %112, !dbg !375
  %netsBelowHook93 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx92, i32 0, i32 4, !dbg !376
  %114 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook93, align 8, !dbg !376
  %arrayidx94 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %114, i64 %111, !dbg !375
  %removed95 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx94, i32 0, i32 3, !dbg !377
  store i64 0, i64* %removed95, align 8, !dbg !378
  %115 = load %struct._constraintVCGType*, %struct._constraintVCGType** @storageVCG, align 8, !dbg !379
  %incdec.ptr96 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %115, i32 1, !dbg !379
  store %struct._constraintVCGType* %incdec.ptr96, %struct._constraintVCGType** @storageVCG, align 8, !dbg !379
  %116 = load i64, i64* @storageLimitVCG, align 8, !dbg !380
  %dec97 = add i64 %116, -1, !dbg !380
  store i64 %dec97, i64* @storageLimitVCG, align 8, !dbg !380
  %117 = load i64, i64* %constraint, align 8, !dbg !381
  %inc98 = add i64 %117, 1, !dbg !381
  store i64 %inc98, i64* %constraint, align 8, !dbg !381
  br label %if.end.99, !dbg !382

if.end.99:                                        ; preds = %cond.end.77, %for.end.71
  br label %if.end.100, !dbg !383

if.end.100:                                       ; preds = %if.end.99, %land.lhs.true.54, %land.lhs.true.51, %for.body.48
  br label %for.inc.101, !dbg !384

for.inc.101:                                      ; preds = %if.end.100
  %118 = load i64, i64* %col, align 8, !dbg !385
  %inc102 = add i64 %118, 1, !dbg !385
  store i64 %inc102, i64* %col, align 8, !dbg !385
  br label %for.cond.46, !dbg !386

for.end.103:                                      ; preds = %for.cond.46
  %119 = load i64, i64* %constraint, align 8, !dbg !387
  %120 = load i64, i64* %net, align 8, !dbg !388
  %121 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !389
  %arrayidx104 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %121, i64 %120, !dbg !389
  %netsBelow = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx104, i32 0, i32 5, !dbg !390
  store i64 %119, i64* %netsBelow, align 8, !dbg !391
  br label %for.inc.105, !dbg !392

for.inc.105:                                      ; preds = %for.end.103
  %122 = load i64, i64* %net, align 8, !dbg !393
  %inc106 = add i64 %122, 1, !dbg !393
  store i64 %inc106, i64* %net, align 8, !dbg !393
  br label %for.cond, !dbg !394

for.end.107:                                      ; preds = %for.cond
  ret void, !dbg !395
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) #3

; Function Attrs: nounwind uwtable
define void @DFSClearVCG(%struct._nodeVCGType* %VCG) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %net = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !396, metadata !142), !dbg !397
  call void @llvm.dbg.declare(metadata i64* %net, metadata !398, metadata !142), !dbg !399
  store i64 1, i64* %net, align 8, !dbg !400
  br label %for.cond, !dbg !402

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %net, align 8, !dbg !403
  %1 = load i64, i64* @channelNets, align 8, !dbg !407
  %cmp = icmp ule i64 %0, %1, !dbg !408
  br i1 %cmp, label %for.body, label %for.end, !dbg !409

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %net, align 8, !dbg !410
  %3 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !412
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %3, i64 %2, !dbg !412
  %netsAboveLabel = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 2, !dbg !413
  store i64 0, i64* %netsAboveLabel, align 8, !dbg !414
  %4 = load i64, i64* %net, align 8, !dbg !415
  %5 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !416
  %arrayidx1 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %5, i64 %4, !dbg !416
  %netsAboveReached = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx1, i32 0, i32 3, !dbg !417
  store i64 0, i64* %netsAboveReached, align 8, !dbg !418
  %6 = load i64, i64* %net, align 8, !dbg !419
  %7 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !420
  %arrayidx2 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %7, i64 %6, !dbg !420
  %netsBelowLabel = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx2, i32 0, i32 6, !dbg !421
  store i64 0, i64* %netsBelowLabel, align 8, !dbg !422
  %8 = load i64, i64* %net, align 8, !dbg !423
  %9 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !424
  %arrayidx3 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %9, i64 %8, !dbg !424
  %netsBelowReached = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx3, i32 0, i32 7, !dbg !425
  store i64 0, i64* %netsBelowReached, align 8, !dbg !426
  br label %for.inc, !dbg !427

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %net, align 8, !dbg !428
  %inc = add i64 %10, 1, !dbg !428
  store i64 %inc, i64* %net, align 8, !dbg !428
  br label %for.cond, !dbg !429

for.end:                                          ; preds = %for.cond
  ret void, !dbg !430
}

; Function Attrs: nounwind uwtable
define void @DumpVCG(%struct._nodeVCGType* %VCG) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %net = alloca i64, align 8
  %which = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !431, metadata !142), !dbg !432
  call void @llvm.dbg.declare(metadata i64* %net, metadata !433, metadata !142), !dbg !434
  call void @llvm.dbg.declare(metadata i64* %which, metadata !435, metadata !142), !dbg !436
  store i64 1, i64* %net, align 8, !dbg !437
  br label %for.cond, !dbg !439

for.cond:                                         ; preds = %for.inc.44, %entry
  %0 = load i64, i64* %net, align 8, !dbg !440
  %1 = load i64, i64* @channelNets, align 8, !dbg !444
  %cmp = icmp ule i64 %0, %1, !dbg !445
  br i1 %cmp, label %for.body, label %for.end.46, !dbg !446

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %net, align 8, !dbg !447
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i64 %2), !dbg !449
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0)), !dbg !450
  store i64 0, i64* %which, align 8, !dbg !451
  br label %for.cond.2, !dbg !453

for.cond.2:                                       ; preds = %for.inc, %for.body
  %3 = load i64, i64* %which, align 8, !dbg !454
  %4 = load i64, i64* %net, align 8, !dbg !458
  %5 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !459
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %5, i64 %4, !dbg !459
  %netsAbove = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 1, !dbg !460
  %6 = load i64, i64* %netsAbove, align 8, !dbg !460
  %cmp3 = icmp ult i64 %3, %6, !dbg !461
  br i1 %cmp3, label %for.body.4, label %for.end, !dbg !462

for.body.4:                                       ; preds = %for.cond.2
  %7 = load i64, i64* %which, align 8, !dbg !463
  %8 = load i64, i64* %net, align 8, !dbg !466
  %9 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !467
  %arrayidx5 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %9, i64 %8, !dbg !467
  %netsAboveHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx5, i32 0, i32 0, !dbg !468
  %10 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook, align 8, !dbg !468
  %arrayidx6 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %10, i64 %7, !dbg !467
  %removed = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx6, i32 0, i32 3, !dbg !469
  %11 = load i64, i64* %removed, align 8, !dbg !469
  %tobool = icmp ne i64 %11, 0, !dbg !467
  br i1 %tobool, label %if.end, label %if.then, !dbg !470

if.then:                                          ; preds = %for.body.4
  %12 = load i64, i64* %which, align 8, !dbg !471
  %13 = load i64, i64* %net, align 8, !dbg !471
  %14 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !471
  %arrayidx7 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %14, i64 %13, !dbg !471
  %netsAboveHook8 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx7, i32 0, i32 0, !dbg !471
  %15 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook8, align 8, !dbg !471
  %arrayidx9 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %15, i64 %12, !dbg !471
  %top = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx9, i32 0, i32 0, !dbg !471
  %16 = load i64, i64* %top, align 8, !dbg !471
  %17 = load i64, i64* %net, align 8, !dbg !471
  %cmp10 = icmp eq i64 %16, %17, !dbg !471
  br i1 %cmp10, label %cond.true, label %cond.false, !dbg !471

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !473

cond.false:                                       ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__PRETTY_FUNCTION__.DumpVCG, i32 0, i32 0)) #6, !dbg !475
  unreachable, !dbg !475
                                                  ; No predecessors!
  br label %cond.end, !dbg !471

cond.end:                                         ; preds = %18, %cond.true
  %19 = load i64, i64* %which, align 8, !dbg !477
  %20 = load i64, i64* %net, align 8, !dbg !478
  %21 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !479
  %arrayidx11 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %21, i64 %20, !dbg !479
  %netsAboveHook12 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx11, i32 0, i32 0, !dbg !480
  %22 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook12, align 8, !dbg !480
  %arrayidx13 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %22, i64 %19, !dbg !479
  %bot = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx13, i32 0, i32 1, !dbg !481
  %23 = load i64, i64* %bot, align 8, !dbg !481
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i64 %23), !dbg !482
  br label %if.end, !dbg !483

if.end:                                           ; preds = %cond.end, %for.body.4
  br label %for.inc, !dbg !484

for.inc:                                          ; preds = %if.end
  %24 = load i64, i64* %which, align 8, !dbg !485
  %inc = add i64 %24, 1, !dbg !485
  store i64 %inc, i64* %which, align 8, !dbg !485
  br label %for.cond.2, !dbg !486

for.end:                                          ; preds = %for.cond.2
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0)), !dbg !487
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0)), !dbg !488
  store i64 0, i64* %which, align 8, !dbg !489
  br label %for.cond.17, !dbg !491

for.cond.17:                                      ; preds = %for.inc.40, %for.end
  %25 = load i64, i64* %which, align 8, !dbg !492
  %26 = load i64, i64* %net, align 8, !dbg !496
  %27 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !497
  %arrayidx18 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %27, i64 %26, !dbg !497
  %netsBelow = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx18, i32 0, i32 5, !dbg !498
  %28 = load i64, i64* %netsBelow, align 8, !dbg !498
  %cmp19 = icmp ult i64 %25, %28, !dbg !499
  br i1 %cmp19, label %for.body.20, label %for.end.42, !dbg !500

for.body.20:                                      ; preds = %for.cond.17
  %29 = load i64, i64* %which, align 8, !dbg !501
  %30 = load i64, i64* %net, align 8, !dbg !504
  %31 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !505
  %arrayidx21 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %31, i64 %30, !dbg !505
  %netsBelowHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx21, i32 0, i32 4, !dbg !506
  %32 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook, align 8, !dbg !506
  %arrayidx22 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %32, i64 %29, !dbg !505
  %removed23 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx22, i32 0, i32 3, !dbg !507
  %33 = load i64, i64* %removed23, align 8, !dbg !507
  %tobool24 = icmp ne i64 %33, 0, !dbg !505
  br i1 %tobool24, label %if.end.39, label %if.then.25, !dbg !508

if.then.25:                                       ; preds = %for.body.20
  %34 = load i64, i64* %which, align 8, !dbg !509
  %35 = load i64, i64* %net, align 8, !dbg !509
  %36 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !509
  %arrayidx26 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %36, i64 %35, !dbg !509
  %netsBelowHook27 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx26, i32 0, i32 4, !dbg !509
  %37 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook27, align 8, !dbg !509
  %arrayidx28 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %37, i64 %34, !dbg !509
  %bot29 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx28, i32 0, i32 1, !dbg !509
  %38 = load i64, i64* %bot29, align 8, !dbg !509
  %39 = load i64, i64* %net, align 8, !dbg !509
  %cmp30 = icmp eq i64 %38, %39, !dbg !509
  br i1 %cmp30, label %cond.true.31, label %cond.false.32, !dbg !509

cond.true.31:                                     ; preds = %if.then.25
  br label %cond.end.33, !dbg !511

cond.false.32:                                    ; preds = %if.then.25
  call void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 166, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__PRETTY_FUNCTION__.DumpVCG, i32 0, i32 0)) #6, !dbg !513
  unreachable, !dbg !513
                                                  ; No predecessors!
  br label %cond.end.33, !dbg !509

cond.end.33:                                      ; preds = %40, %cond.true.31
  %41 = load i64, i64* %which, align 8, !dbg !515
  %42 = load i64, i64* %net, align 8, !dbg !516
  %43 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !517
  %arrayidx34 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %43, i64 %42, !dbg !517
  %netsBelowHook35 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx34, i32 0, i32 4, !dbg !518
  %44 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook35, align 8, !dbg !518
  %arrayidx36 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %44, i64 %41, !dbg !517
  %top37 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx36, i32 0, i32 0, !dbg !519
  %45 = load i64, i64* %top37, align 8, !dbg !519
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i64 %45), !dbg !520
  br label %if.end.39, !dbg !521

if.end.39:                                        ; preds = %cond.end.33, %for.body.20
  br label %for.inc.40, !dbg !522

for.inc.40:                                       ; preds = %if.end.39
  %46 = load i64, i64* %which, align 8, !dbg !523
  %inc41 = add i64 %46, 1, !dbg !523
  store i64 %inc41, i64* %which, align 8, !dbg !523
  br label %for.cond.17, !dbg !524

for.end.42:                                       ; preds = %for.cond.17
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0)), !dbg !525
  br label %for.inc.44, !dbg !526

for.inc.44:                                       ; preds = %for.end.42
  %47 = load i64, i64* %net, align 8, !dbg !527
  %inc45 = add i64 %47, 1, !dbg !527
  store i64 %inc45, i64* %net, align 8, !dbg !527
  br label %for.cond, !dbg !528

for.end.46:                                       ; preds = %for.cond
  ret void, !dbg !529
}

declare i32 @printf(i8*, ...) #4

; Function Attrs: nounwind uwtable
define void @DFSAboveVCG(%struct._nodeVCGType* %VCG, i64 %net) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %net.addr = alloca i64, align 8
  %s = alloca i64, align 8
  %above = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !530, metadata !142), !dbg !531
  store i64 %net, i64* %net.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %net.addr, metadata !532, metadata !142), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %s, metadata !534, metadata !142), !dbg !535
  call void @llvm.dbg.declare(metadata i64* %above, metadata !536, metadata !142), !dbg !537
  %0 = load i64, i64* %net.addr, align 8, !dbg !538
  %1 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !539
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %1, i64 %0, !dbg !539
  %netsAboveReached = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 3, !dbg !540
  store i64 1, i64* %netsAboveReached, align 8, !dbg !541
  store i64 0, i64* %s, align 8, !dbg !542
  br label %for.cond, !dbg !544

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %s, align 8, !dbg !545
  %3 = load i64, i64* %net.addr, align 8, !dbg !549
  %4 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !550
  %arrayidx1 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %4, i64 %3, !dbg !550
  %netsAbove = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx1, i32 0, i32 1, !dbg !551
  %5 = load i64, i64* %netsAbove, align 8, !dbg !551
  %cmp = icmp ult i64 %2, %5, !dbg !552
  br i1 %cmp, label %for.body, label %for.end, !dbg !553

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %s, align 8, !dbg !554
  %7 = load i64, i64* %net.addr, align 8, !dbg !557
  %8 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !558
  %arrayidx2 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %8, i64 %7, !dbg !558
  %netsAboveHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx2, i32 0, i32 0, !dbg !559
  %9 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook, align 8, !dbg !559
  %arrayidx3 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %9, i64 %6, !dbg !558
  %removed = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx3, i32 0, i32 3, !dbg !560
  %10 = load i64, i64* %removed, align 8, !dbg !560
  %tobool = icmp ne i64 %10, 0, !dbg !558
  br i1 %tobool, label %if.end.15, label %if.then, !dbg !561

if.then:                                          ; preds = %for.body
  %11 = load i64, i64* %s, align 8, !dbg !562
  %12 = load i64, i64* %net.addr, align 8, !dbg !562
  %13 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !562
  %arrayidx4 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %13, i64 %12, !dbg !562
  %netsAboveHook5 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx4, i32 0, i32 0, !dbg !562
  %14 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook5, align 8, !dbg !562
  %arrayidx6 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %14, i64 %11, !dbg !562
  %top = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx6, i32 0, i32 0, !dbg !562
  %15 = load i64, i64* %top, align 8, !dbg !562
  %16 = load i64, i64* %net.addr, align 8, !dbg !562
  %cmp7 = icmp eq i64 %15, %16, !dbg !562
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !562

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !564

cond.false:                                       ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 182, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__PRETTY_FUNCTION__.DFSAboveVCG, i32 0, i32 0)) #6, !dbg !566
  unreachable, !dbg !566
                                                  ; No predecessors!
  br label %cond.end, !dbg !562

cond.end:                                         ; preds = %17, %cond.true
  %18 = load i64, i64* %s, align 8, !dbg !568
  %19 = load i64, i64* %net.addr, align 8, !dbg !569
  %20 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !570
  %arrayidx8 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %20, i64 %19, !dbg !570
  %netsAboveHook9 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx8, i32 0, i32 0, !dbg !571
  %21 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook9, align 8, !dbg !571
  %arrayidx10 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %21, i64 %18, !dbg !570
  %bot = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx10, i32 0, i32 1, !dbg !572
  %22 = load i64, i64* %bot, align 8, !dbg !572
  store i64 %22, i64* %above, align 8, !dbg !573
  %23 = load i64, i64* %above, align 8, !dbg !574
  %24 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !576
  %arrayidx11 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %24, i64 %23, !dbg !576
  %netsAboveReached12 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx11, i32 0, i32 3, !dbg !577
  %25 = load i64, i64* %netsAboveReached12, align 8, !dbg !577
  %tobool13 = icmp ne i64 %25, 0, !dbg !576
  br i1 %tobool13, label %if.end, label %if.then.14, !dbg !578

if.then.14:                                       ; preds = %cond.end
  %26 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !579
  %27 = load i64, i64* %above, align 8, !dbg !581
  call void @DFSAboveVCG(%struct._nodeVCGType* %26, i64 %27), !dbg !582
  br label %if.end, !dbg !583

if.end:                                           ; preds = %if.then.14, %cond.end
  br label %if.end.15, !dbg !584

if.end.15:                                        ; preds = %if.end, %for.body
  br label %for.inc, !dbg !585

for.inc:                                          ; preds = %if.end.15
  %28 = load i64, i64* %s, align 8, !dbg !586
  %inc = add i64 %28, 1, !dbg !586
  store i64 %inc, i64* %s, align 8, !dbg !586
  br label %for.cond, !dbg !587

for.end:                                          ; preds = %for.cond
  ret void, !dbg !588
}

; Function Attrs: nounwind uwtable
define void @DFSBelowVCG(%struct._nodeVCGType* %VCG, i64 %net) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %net.addr = alloca i64, align 8
  %s = alloca i64, align 8
  %below = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !589, metadata !142), !dbg !590
  store i64 %net, i64* %net.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %net.addr, metadata !591, metadata !142), !dbg !592
  call void @llvm.dbg.declare(metadata i64* %s, metadata !593, metadata !142), !dbg !594
  call void @llvm.dbg.declare(metadata i64* %below, metadata !595, metadata !142), !dbg !596
  %0 = load i64, i64* %net.addr, align 8, !dbg !597
  %1 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !598
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %1, i64 %0, !dbg !598
  %netsBelowReached = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 7, !dbg !599
  store i64 1, i64* %netsBelowReached, align 8, !dbg !600
  store i64 0, i64* %s, align 8, !dbg !601
  br label %for.cond, !dbg !603

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %s, align 8, !dbg !604
  %3 = load i64, i64* %net.addr, align 8, !dbg !608
  %4 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !609
  %arrayidx1 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %4, i64 %3, !dbg !609
  %netsBelow = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx1, i32 0, i32 5, !dbg !610
  %5 = load i64, i64* %netsBelow, align 8, !dbg !610
  %cmp = icmp ult i64 %2, %5, !dbg !611
  br i1 %cmp, label %for.body, label %for.end, !dbg !612

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %s, align 8, !dbg !613
  %7 = load i64, i64* %net.addr, align 8, !dbg !616
  %8 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !617
  %arrayidx2 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %8, i64 %7, !dbg !617
  %netsBelowHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx2, i32 0, i32 4, !dbg !618
  %9 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook, align 8, !dbg !618
  %arrayidx3 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %9, i64 %6, !dbg !617
  %removed = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx3, i32 0, i32 3, !dbg !619
  %10 = load i64, i64* %removed, align 8, !dbg !619
  %tobool = icmp ne i64 %10, 0, !dbg !617
  br i1 %tobool, label %if.end.15, label %if.then, !dbg !620

if.then:                                          ; preds = %for.body
  %11 = load i64, i64* %s, align 8, !dbg !621
  %12 = load i64, i64* %net.addr, align 8, !dbg !621
  %13 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !621
  %arrayidx4 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %13, i64 %12, !dbg !621
  %netsBelowHook5 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx4, i32 0, i32 4, !dbg !621
  %14 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook5, align 8, !dbg !621
  %arrayidx6 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %14, i64 %11, !dbg !621
  %bot = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx6, i32 0, i32 1, !dbg !621
  %15 = load i64, i64* %bot, align 8, !dbg !621
  %16 = load i64, i64* %net.addr, align 8, !dbg !621
  %cmp7 = icmp eq i64 %15, %16, !dbg !621
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !621

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !623

cond.false:                                       ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 199, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__PRETTY_FUNCTION__.DFSBelowVCG, i32 0, i32 0)) #6, !dbg !625
  unreachable, !dbg !625
                                                  ; No predecessors!
  br label %cond.end, !dbg !621

cond.end:                                         ; preds = %17, %cond.true
  %18 = load i64, i64* %s, align 8, !dbg !627
  %19 = load i64, i64* %net.addr, align 8, !dbg !628
  %20 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !629
  %arrayidx8 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %20, i64 %19, !dbg !629
  %netsBelowHook9 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx8, i32 0, i32 4, !dbg !630
  %21 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook9, align 8, !dbg !630
  %arrayidx10 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %21, i64 %18, !dbg !629
  %top = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx10, i32 0, i32 0, !dbg !631
  %22 = load i64, i64* %top, align 8, !dbg !631
  store i64 %22, i64* %below, align 8, !dbg !632
  %23 = load i64, i64* %below, align 8, !dbg !633
  %24 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !635
  %arrayidx11 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %24, i64 %23, !dbg !635
  %netsBelowReached12 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx11, i32 0, i32 7, !dbg !636
  %25 = load i64, i64* %netsBelowReached12, align 8, !dbg !636
  %tobool13 = icmp ne i64 %25, 0, !dbg !635
  br i1 %tobool13, label %if.end, label %if.then.14, !dbg !637

if.then.14:                                       ; preds = %cond.end
  %26 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !638
  %27 = load i64, i64* %below, align 8, !dbg !640
  call void @DFSBelowVCG(%struct._nodeVCGType* %26, i64 %27), !dbg !641
  br label %if.end, !dbg !642

if.end:                                           ; preds = %if.then.14, %cond.end
  br label %if.end.15, !dbg !643

if.end.15:                                        ; preds = %if.end, %for.body
  br label %for.inc, !dbg !644

for.inc:                                          ; preds = %if.end.15
  %28 = load i64, i64* %s, align 8, !dbg !645
  %inc = add i64 %28, 1, !dbg !645
  store i64 %inc, i64* %s, align 8, !dbg !645
  br label %for.cond, !dbg !646

for.end:                                          ; preds = %for.cond
  ret void, !dbg !647
}

; Function Attrs: nounwind uwtable
define void @SCCofVCG(%struct._nodeVCGType* %VCG, i64* %SCC, i64* %perSCC) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %SCC.addr = alloca i64*, align 8
  %perSCC.addr = alloca i64*, align 8
  %net = alloca i64, align 8
  %scc = alloca i64, align 8
  %per = alloca i64, align 8
  %label = alloca i64, align 8
  %which = alloca i64, align 8
  %choose = alloca i64, align 8
  %large = alloca i64, align 8
  %done = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !648, metadata !142), !dbg !649
  store i64* %SCC, i64** %SCC.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %SCC.addr, metadata !650, metadata !142), !dbg !651
  store i64* %perSCC, i64** %perSCC.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %perSCC.addr, metadata !652, metadata !142), !dbg !653
  call void @llvm.dbg.declare(metadata i64* %net, metadata !654, metadata !142), !dbg !655
  call void @llvm.dbg.declare(metadata i64* %scc, metadata !656, metadata !142), !dbg !657
  call void @llvm.dbg.declare(metadata i64* %per, metadata !658, metadata !142), !dbg !659
  call void @llvm.dbg.declare(metadata i64* %label, metadata !660, metadata !142), !dbg !661
  call void @llvm.dbg.declare(metadata i64* %which, metadata !662, metadata !142), !dbg !663
  call void @llvm.dbg.declare(metadata i64* %choose, metadata !664, metadata !142), !dbg !665
  call void @llvm.dbg.declare(metadata i64* %large, metadata !666, metadata !142), !dbg !667
  call void @llvm.dbg.declare(metadata i64* %done, metadata !668, metadata !142), !dbg !669
  store i64 0, i64* %label, align 8, !dbg !670
  store i64 1, i64* %net, align 8, !dbg !671
  br label %for.cond, !dbg !673

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %net, align 8, !dbg !674
  %1 = load i64, i64* @channelNets, align 8, !dbg !678
  %cmp = icmp ule i64 %0, %1, !dbg !679
  br i1 %cmp, label %for.body, label %for.end, !dbg !680

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %net, align 8, !dbg !681
  %3 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !684
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %3, i64 %2, !dbg !684
  %netsAboveReached = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 3, !dbg !685
  %4 = load i64, i64* %netsAboveReached, align 8, !dbg !685
  %tobool = icmp ne i64 %4, 0, !dbg !684
  br i1 %tobool, label %if.end, label %if.then, !dbg !686

if.then:                                          ; preds = %for.body
  %5 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !687
  %6 = load i64, i64* %net, align 8, !dbg !689
  call void @SCC_DFSAboveVCG(%struct._nodeVCGType* %5, i64 %6, i64* %label), !dbg !690
  br label %if.end, !dbg !691

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !692

for.inc:                                          ; preds = %if.end
  %7 = load i64, i64* %net, align 8, !dbg !693
  %inc = add i64 %7, 1, !dbg !693
  store i64 %inc, i64* %net, align 8, !dbg !693
  br label %for.cond, !dbg !694

for.end:                                          ; preds = %for.cond
  store i64 0, i64* %which, align 8, !dbg !695
  br label %do.body, !dbg !696

do.body:                                          ; preds = %do.cond, %for.end
  store i64 1, i64* %done, align 8, !dbg !697
  store i64 0, i64* %choose, align 8, !dbg !699
  store i64 0, i64* %large, align 8, !dbg !700
  store i64 1, i64* %net, align 8, !dbg !701
  br label %for.cond.1, !dbg !703

for.cond.1:                                       ; preds = %for.inc.17, %do.body
  %8 = load i64, i64* %net, align 8, !dbg !704
  %9 = load i64, i64* @channelNets, align 8, !dbg !708
  %cmp2 = icmp ule i64 %8, %9, !dbg !709
  br i1 %cmp2, label %for.body.3, label %for.end.19, !dbg !710

for.body.3:                                       ; preds = %for.cond.1
  %10 = load i64, i64* %net, align 8, !dbg !711
  %11 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !714
  %arrayidx4 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %11, i64 %10, !dbg !714
  %netsBelowReached = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx4, i32 0, i32 7, !dbg !715
  %12 = load i64, i64* %netsBelowReached, align 8, !dbg !715
  %tobool5 = icmp ne i64 %12, 0, !dbg !714
  br i1 %tobool5, label %if.end.16, label %if.then.6, !dbg !716

if.then.6:                                        ; preds = %for.body.3
  %13 = load i64, i64* %net, align 8, !dbg !717
  %14 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !717
  %arrayidx7 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %14, i64 %13, !dbg !717
  %netsAboveLabel = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx7, i32 0, i32 2, !dbg !717
  %15 = load i64, i64* %netsAboveLabel, align 8, !dbg !717
  %cmp8 = icmp ugt i64 %15, 0, !dbg !717
  br i1 %cmp8, label %cond.true, label %cond.false, !dbg !717

cond.true:                                        ; preds = %if.then.6
  br label %cond.end, !dbg !719

cond.false:                                       ; preds = %if.then.6
  call void @__assert_fail(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 245, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @__PRETTY_FUNCTION__.SCCofVCG, i32 0, i32 0)) #6, !dbg !721
  unreachable, !dbg !721
                                                  ; No predecessors!
  br label %cond.end, !dbg !717

cond.end:                                         ; preds = %16, %cond.true
  %17 = load i64, i64* %net, align 8, !dbg !723
  %18 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !725
  %arrayidx9 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %18, i64 %17, !dbg !725
  %netsAboveLabel10 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx9, i32 0, i32 2, !dbg !726
  %19 = load i64, i64* %netsAboveLabel10, align 8, !dbg !726
  %20 = load i64, i64* %large, align 8, !dbg !727
  %cmp11 = icmp ugt i64 %19, %20, !dbg !728
  br i1 %cmp11, label %if.then.12, label %if.end.15, !dbg !729

if.then.12:                                       ; preds = %cond.end
  %21 = load i64, i64* %net, align 8, !dbg !730
  store i64 %21, i64* %choose, align 8, !dbg !732
  %22 = load i64, i64* %net, align 8, !dbg !733
  %23 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !734
  %arrayidx13 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %23, i64 %22, !dbg !734
  %netsAboveLabel14 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx13, i32 0, i32 2, !dbg !735
  %24 = load i64, i64* %netsAboveLabel14, align 8, !dbg !735
  store i64 %24, i64* %large, align 8, !dbg !736
  store i64 0, i64* %done, align 8, !dbg !737
  br label %if.end.15, !dbg !738

if.end.15:                                        ; preds = %if.then.12, %cond.end
  br label %if.end.16, !dbg !739

if.end.16:                                        ; preds = %if.end.15, %for.body.3
  br label %for.inc.17, !dbg !740

for.inc.17:                                       ; preds = %if.end.16
  %25 = load i64, i64* %net, align 8, !dbg !741
  %inc18 = add i64 %25, 1, !dbg !741
  store i64 %inc18, i64* %net, align 8, !dbg !741
  br label %for.cond.1, !dbg !742

for.end.19:                                       ; preds = %for.cond.1
  %26 = load i64, i64* %done, align 8, !dbg !743
  %tobool20 = icmp ne i64 %26, 0, !dbg !743
  br i1 %tobool20, label %if.end.23, label %if.then.21, !dbg !745

if.then.21:                                       ; preds = %for.end.19
  %27 = load i64, i64* %which, align 8, !dbg !746
  %inc22 = add i64 %27, 1, !dbg !746
  store i64 %inc22, i64* %which, align 8, !dbg !746
  %28 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !748
  %29 = load i64, i64* %choose, align 8, !dbg !749
  %30 = load i64, i64* %which, align 8, !dbg !750
  call void @SCC_DFSBelowVCG(%struct._nodeVCGType* %28, i64 %29, i64 %30), !dbg !751
  br label %if.end.23, !dbg !752

if.end.23:                                        ; preds = %if.then.21, %for.end.19
  br label %do.cond, !dbg !753

do.cond:                                          ; preds = %if.end.23
  %31 = load i64, i64* %done, align 8, !dbg !754
  %tobool24 = icmp ne i64 %31, 0, !dbg !756
  %lnot = xor i1 %tobool24, true, !dbg !756
  br i1 %lnot, label %do.body, label %do.end, !dbg !753

do.end:                                           ; preds = %do.cond
  store i64 0, i64* @totalSCC, align 8, !dbg !757
  store i64 1, i64* %net, align 8, !dbg !758
  br label %for.cond.25, !dbg !760

for.cond.25:                                      ; preds = %for.inc.35, %do.end
  %32 = load i64, i64* %net, align 8, !dbg !761
  %33 = load i64, i64* @channelNets, align 8, !dbg !765
  %cmp26 = icmp ule i64 %32, %33, !dbg !766
  br i1 %cmp26, label %for.body.27, label %for.end.37, !dbg !767

for.body.27:                                      ; preds = %for.cond.25
  %34 = load i64, i64* %net, align 8, !dbg !768
  %35 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !770
  %arrayidx28 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %35, i64 %34, !dbg !770
  %netsBelowLabel = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx28, i32 0, i32 6, !dbg !771
  %36 = load i64, i64* %netsBelowLabel, align 8, !dbg !771
  %37 = load i64, i64* %net, align 8, !dbg !772
  %38 = load i64*, i64** %SCC.addr, align 8, !dbg !773
  %arrayidx29 = getelementptr inbounds i64, i64* %38, i64 %37, !dbg !773
  store i64 %36, i64* %arrayidx29, align 8, !dbg !774
  %39 = load i64, i64* %net, align 8, !dbg !775
  %40 = load i64*, i64** %SCC.addr, align 8, !dbg !777
  %arrayidx30 = getelementptr inbounds i64, i64* %40, i64 %39, !dbg !777
  %41 = load i64, i64* %arrayidx30, align 8, !dbg !777
  %42 = load i64, i64* @totalSCC, align 8, !dbg !778
  %cmp31 = icmp ugt i64 %41, %42, !dbg !779
  br i1 %cmp31, label %if.then.32, label %if.end.34, !dbg !780

if.then.32:                                       ; preds = %for.body.27
  %43 = load i64, i64* %net, align 8, !dbg !781
  %44 = load i64*, i64** %SCC.addr, align 8, !dbg !783
  %arrayidx33 = getelementptr inbounds i64, i64* %44, i64 %43, !dbg !783
  %45 = load i64, i64* %arrayidx33, align 8, !dbg !783
  store i64 %45, i64* @totalSCC, align 8, !dbg !784
  br label %if.end.34, !dbg !785

if.end.34:                                        ; preds = %if.then.32, %for.body.27
  br label %for.inc.35, !dbg !786

for.inc.35:                                       ; preds = %if.end.34
  %46 = load i64, i64* %net, align 8, !dbg !787
  %inc36 = add i64 %46, 1, !dbg !787
  store i64 %inc36, i64* %net, align 8, !dbg !787
  br label %for.cond.25, !dbg !788

for.end.37:                                       ; preds = %for.cond.25
  %47 = load i64, i64* @totalSCC, align 8, !dbg !789
  %cmp38 = icmp ugt i64 %47, 0, !dbg !789
  br i1 %cmp38, label %cond.true.39, label %cond.false.40, !dbg !789

cond.true.39:                                     ; preds = %for.end.37
  br label %cond.end.41, !dbg !790

cond.false.40:                                    ; preds = %for.end.37
  call void @__assert_fail(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 273, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @__PRETTY_FUNCTION__.SCCofVCG, i32 0, i32 0)) #6, !dbg !791
  unreachable, !dbg !791
                                                  ; No predecessors!
  br label %cond.end.41, !dbg !789

cond.end.41:                                      ; preds = %48, %cond.true.39
  store i64 1, i64* %scc, align 8, !dbg !793
  br label %for.cond.42, !dbg !795

for.cond.42:                                      ; preds = %for.inc.57, %cond.end.41
  %49 = load i64, i64* %scc, align 8, !dbg !796
  %50 = load i64, i64* @totalSCC, align 8, !dbg !800
  %cmp43 = icmp ule i64 %49, %50, !dbg !801
  br i1 %cmp43, label %for.body.44, label %for.end.59, !dbg !802

for.body.44:                                      ; preds = %for.cond.42
  store i64 0, i64* %per, align 8, !dbg !803
  store i64 1, i64* %net, align 8, !dbg !805
  br label %for.cond.45, !dbg !807

for.cond.45:                                      ; preds = %for.inc.53, %for.body.44
  %51 = load i64, i64* %net, align 8, !dbg !808
  %52 = load i64, i64* @channelNets, align 8, !dbg !812
  %cmp46 = icmp ule i64 %51, %52, !dbg !813
  br i1 %cmp46, label %for.body.47, label %for.end.55, !dbg !814

for.body.47:                                      ; preds = %for.cond.45
  %53 = load i64, i64* %net, align 8, !dbg !815
  %54 = load i64*, i64** %SCC.addr, align 8, !dbg !818
  %arrayidx48 = getelementptr inbounds i64, i64* %54, i64 %53, !dbg !818
  %55 = load i64, i64* %arrayidx48, align 8, !dbg !818
  %56 = load i64, i64* %scc, align 8, !dbg !819
  %cmp49 = icmp eq i64 %55, %56, !dbg !820
  br i1 %cmp49, label %if.then.50, label %if.end.52, !dbg !821

if.then.50:                                       ; preds = %for.body.47
  %57 = load i64, i64* %per, align 8, !dbg !822
  %inc51 = add i64 %57, 1, !dbg !822
  store i64 %inc51, i64* %per, align 8, !dbg !822
  br label %if.end.52, !dbg !824

if.end.52:                                        ; preds = %if.then.50, %for.body.47
  br label %for.inc.53, !dbg !825

for.inc.53:                                       ; preds = %if.end.52
  %58 = load i64, i64* %net, align 8, !dbg !826
  %inc54 = add i64 %58, 1, !dbg !826
  store i64 %inc54, i64* %net, align 8, !dbg !826
  br label %for.cond.45, !dbg !827

for.end.55:                                       ; preds = %for.cond.45
  %59 = load i64, i64* %per, align 8, !dbg !828
  %60 = load i64, i64* %scc, align 8, !dbg !829
  %61 = load i64*, i64** %perSCC.addr, align 8, !dbg !830
  %arrayidx56 = getelementptr inbounds i64, i64* %61, i64 %60, !dbg !830
  store i64 %59, i64* %arrayidx56, align 8, !dbg !831
  br label %for.inc.57, !dbg !832

for.inc.57:                                       ; preds = %for.end.55
  %62 = load i64, i64* %scc, align 8, !dbg !833
  %inc58 = add i64 %62, 1, !dbg !833
  store i64 %inc58, i64* %scc, align 8, !dbg !833
  br label %for.cond.42, !dbg !834

for.end.59:                                       ; preds = %for.cond.42
  ret void, !dbg !835
}

; Function Attrs: nounwind uwtable
define void @SCC_DFSAboveVCG(%struct._nodeVCGType* %VCG, i64 %net, i64* %label) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %net.addr = alloca i64, align 8
  %label.addr = alloca i64*, align 8
  %s = alloca i64, align 8
  %above = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !836, metadata !142), !dbg !837
  store i64 %net, i64* %net.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %net.addr, metadata !838, metadata !142), !dbg !839
  store i64* %label, i64** %label.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %label.addr, metadata !840, metadata !142), !dbg !841
  call void @llvm.dbg.declare(metadata i64* %s, metadata !842, metadata !142), !dbg !843
  call void @llvm.dbg.declare(metadata i64* %above, metadata !844, metadata !142), !dbg !845
  %0 = load i64, i64* %net.addr, align 8, !dbg !846
  %1 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !847
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %1, i64 %0, !dbg !847
  %netsAboveReached = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 3, !dbg !848
  store i64 1, i64* %netsAboveReached, align 8, !dbg !849
  store i64 0, i64* %s, align 8, !dbg !850
  br label %for.cond, !dbg !852

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %s, align 8, !dbg !853
  %3 = load i64, i64* %net.addr, align 8, !dbg !857
  %4 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !858
  %arrayidx1 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %4, i64 %3, !dbg !858
  %netsAbove = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx1, i32 0, i32 1, !dbg !859
  %5 = load i64, i64* %netsAbove, align 8, !dbg !859
  %cmp = icmp ult i64 %2, %5, !dbg !860
  br i1 %cmp, label %for.body, label %for.end, !dbg !861

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %s, align 8, !dbg !862
  %7 = load i64, i64* %net.addr, align 8, !dbg !865
  %8 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !866
  %arrayidx2 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %8, i64 %7, !dbg !866
  %netsAboveHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx2, i32 0, i32 0, !dbg !867
  %9 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook, align 8, !dbg !867
  %arrayidx3 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %9, i64 %6, !dbg !866
  %removed = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx3, i32 0, i32 3, !dbg !868
  %10 = load i64, i64* %removed, align 8, !dbg !868
  %tobool = icmp ne i64 %10, 0, !dbg !866
  br i1 %tobool, label %if.end.15, label %if.then, !dbg !869

if.then:                                          ; preds = %for.body
  %11 = load i64, i64* %s, align 8, !dbg !870
  %12 = load i64, i64* %net.addr, align 8, !dbg !870
  %13 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !870
  %arrayidx4 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %13, i64 %12, !dbg !870
  %netsAboveHook5 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx4, i32 0, i32 0, !dbg !870
  %14 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook5, align 8, !dbg !870
  %arrayidx6 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %14, i64 %11, !dbg !870
  %top = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx6, i32 0, i32 0, !dbg !870
  %15 = load i64, i64* %top, align 8, !dbg !870
  %16 = load i64, i64* %net.addr, align 8, !dbg !870
  %cmp7 = icmp eq i64 %15, %16, !dbg !870
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !870

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !872

cond.false:                                       ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 294, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__.SCC_DFSAboveVCG, i32 0, i32 0)) #6, !dbg !874
  unreachable, !dbg !874
                                                  ; No predecessors!
  br label %cond.end, !dbg !870

cond.end:                                         ; preds = %17, %cond.true
  %18 = load i64, i64* %s, align 8, !dbg !876
  %19 = load i64, i64* %net.addr, align 8, !dbg !877
  %20 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !878
  %arrayidx8 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %20, i64 %19, !dbg !878
  %netsAboveHook9 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx8, i32 0, i32 0, !dbg !879
  %21 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook9, align 8, !dbg !879
  %arrayidx10 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %21, i64 %18, !dbg !878
  %bot = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx10, i32 0, i32 1, !dbg !880
  %22 = load i64, i64* %bot, align 8, !dbg !880
  store i64 %22, i64* %above, align 8, !dbg !881
  %23 = load i64, i64* %above, align 8, !dbg !882
  %24 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !884
  %arrayidx11 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %24, i64 %23, !dbg !884
  %netsAboveReached12 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx11, i32 0, i32 3, !dbg !885
  %25 = load i64, i64* %netsAboveReached12, align 8, !dbg !885
  %tobool13 = icmp ne i64 %25, 0, !dbg !884
  br i1 %tobool13, label %if.end, label %if.then.14, !dbg !886

if.then.14:                                       ; preds = %cond.end
  %26 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !887
  %27 = load i64, i64* %above, align 8, !dbg !889
  %28 = load i64*, i64** %label.addr, align 8, !dbg !890
  call void @SCC_DFSAboveVCG(%struct._nodeVCGType* %26, i64 %27, i64* %28), !dbg !891
  br label %if.end, !dbg !892

if.end:                                           ; preds = %if.then.14, %cond.end
  br label %if.end.15, !dbg !893

if.end.15:                                        ; preds = %if.end, %for.body
  br label %for.inc, !dbg !894

for.inc:                                          ; preds = %if.end.15
  %29 = load i64, i64* %s, align 8, !dbg !895
  %inc = add i64 %29, 1, !dbg !895
  store i64 %inc, i64* %s, align 8, !dbg !895
  br label %for.cond, !dbg !896

for.end:                                          ; preds = %for.cond
  %30 = load i64*, i64** %label.addr, align 8, !dbg !897
  %31 = load i64, i64* %30, align 8, !dbg !898
  %inc16 = add i64 %31, 1, !dbg !898
  store i64 %inc16, i64* %30, align 8, !dbg !898
  %32 = load i64*, i64** %label.addr, align 8, !dbg !899
  %33 = load i64, i64* %32, align 8, !dbg !900
  %34 = load i64, i64* %net.addr, align 8, !dbg !901
  %35 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !902
  %arrayidx17 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %35, i64 %34, !dbg !902
  %netsAboveLabel = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx17, i32 0, i32 2, !dbg !903
  store i64 %33, i64* %netsAboveLabel, align 8, !dbg !904
  ret void, !dbg !905
}

; Function Attrs: nounwind uwtable
define void @SCC_DFSBelowVCG(%struct._nodeVCGType* %VCG, i64 %net, i64 %label) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %net.addr = alloca i64, align 8
  %label.addr = alloca i64, align 8
  %s = alloca i64, align 8
  %below = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !906, metadata !142), !dbg !907
  store i64 %net, i64* %net.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %net.addr, metadata !908, metadata !142), !dbg !909
  store i64 %label, i64* %label.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %label.addr, metadata !910, metadata !142), !dbg !911
  call void @llvm.dbg.declare(metadata i64* %s, metadata !912, metadata !142), !dbg !913
  call void @llvm.dbg.declare(metadata i64* %below, metadata !914, metadata !142), !dbg !915
  %0 = load i64, i64* %net.addr, align 8, !dbg !916
  %1 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !917
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %1, i64 %0, !dbg !917
  %netsBelowReached = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 7, !dbg !918
  store i64 1, i64* %netsBelowReached, align 8, !dbg !919
  store i64 0, i64* %s, align 8, !dbg !920
  br label %for.cond, !dbg !922

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %s, align 8, !dbg !923
  %3 = load i64, i64* %net.addr, align 8, !dbg !927
  %4 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !928
  %arrayidx1 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %4, i64 %3, !dbg !928
  %netsBelow = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx1, i32 0, i32 5, !dbg !929
  %5 = load i64, i64* %netsBelow, align 8, !dbg !929
  %cmp = icmp ult i64 %2, %5, !dbg !930
  br i1 %cmp, label %for.body, label %for.end, !dbg !931

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %s, align 8, !dbg !932
  %7 = load i64, i64* %net.addr, align 8, !dbg !935
  %8 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !936
  %arrayidx2 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %8, i64 %7, !dbg !936
  %netsBelowHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx2, i32 0, i32 4, !dbg !937
  %9 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook, align 8, !dbg !937
  %arrayidx3 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %9, i64 %6, !dbg !936
  %removed = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx3, i32 0, i32 3, !dbg !938
  %10 = load i64, i64* %removed, align 8, !dbg !938
  %tobool = icmp ne i64 %10, 0, !dbg !936
  br i1 %tobool, label %if.end.15, label %if.then, !dbg !939

if.then:                                          ; preds = %for.body
  %11 = load i64, i64* %s, align 8, !dbg !940
  %12 = load i64, i64* %net.addr, align 8, !dbg !940
  %13 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !940
  %arrayidx4 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %13, i64 %12, !dbg !940
  %netsBelowHook5 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx4, i32 0, i32 4, !dbg !940
  %14 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook5, align 8, !dbg !940
  %arrayidx6 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %14, i64 %11, !dbg !940
  %bot = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx6, i32 0, i32 1, !dbg !940
  %15 = load i64, i64* %bot, align 8, !dbg !940
  %16 = load i64, i64* %net.addr, align 8, !dbg !940
  %cmp7 = icmp eq i64 %15, %16, !dbg !940
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !940

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !942

cond.false:                                       ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 314, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__.SCC_DFSBelowVCG, i32 0, i32 0)) #6, !dbg !944
  unreachable, !dbg !944
                                                  ; No predecessors!
  br label %cond.end, !dbg !940

cond.end:                                         ; preds = %17, %cond.true
  %18 = load i64, i64* %s, align 8, !dbg !946
  %19 = load i64, i64* %net.addr, align 8, !dbg !947
  %20 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !948
  %arrayidx8 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %20, i64 %19, !dbg !948
  %netsBelowHook9 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx8, i32 0, i32 4, !dbg !949
  %21 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook9, align 8, !dbg !949
  %arrayidx10 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %21, i64 %18, !dbg !948
  %top = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx10, i32 0, i32 0, !dbg !950
  %22 = load i64, i64* %top, align 8, !dbg !950
  store i64 %22, i64* %below, align 8, !dbg !951
  %23 = load i64, i64* %below, align 8, !dbg !952
  %24 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !954
  %arrayidx11 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %24, i64 %23, !dbg !954
  %netsBelowReached12 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx11, i32 0, i32 7, !dbg !955
  %25 = load i64, i64* %netsBelowReached12, align 8, !dbg !955
  %tobool13 = icmp ne i64 %25, 0, !dbg !954
  br i1 %tobool13, label %if.end, label %if.then.14, !dbg !956

if.then.14:                                       ; preds = %cond.end
  %26 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !957
  %27 = load i64, i64* %below, align 8, !dbg !959
  %28 = load i64, i64* %label.addr, align 8, !dbg !960
  call void @SCC_DFSBelowVCG(%struct._nodeVCGType* %26, i64 %27, i64 %28), !dbg !961
  br label %if.end, !dbg !962

if.end:                                           ; preds = %if.then.14, %cond.end
  br label %if.end.15, !dbg !963

if.end.15:                                        ; preds = %if.end, %for.body
  br label %for.inc, !dbg !964

for.inc:                                          ; preds = %if.end.15
  %29 = load i64, i64* %s, align 8, !dbg !965
  %inc = add i64 %29, 1, !dbg !965
  store i64 %inc, i64* %s, align 8, !dbg !965
  br label %for.cond, !dbg !966

for.end:                                          ; preds = %for.cond
  %30 = load i64, i64* %label.addr, align 8, !dbg !967
  %31 = load i64, i64* %net.addr, align 8, !dbg !968
  %32 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !969
  %arrayidx16 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %32, i64 %31, !dbg !969
  %netsBelowLabel = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx16, i32 0, i32 6, !dbg !970
  store i64 %30, i64* %netsBelowLabel, align 8, !dbg !971
  ret void, !dbg !972
}

; Function Attrs: nounwind uwtable
define void @DumpSCC(i64* %SCC, i64* %perSCC) #0 {
entry:
  %SCC.addr = alloca i64*, align 8
  %perSCC.addr = alloca i64*, align 8
  %net = alloca i64, align 8
  %scc = alloca i64, align 8
  store i64* %SCC, i64** %SCC.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %SCC.addr, metadata !973, metadata !142), !dbg !974
  store i64* %perSCC, i64** %perSCC.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %perSCC.addr, metadata !975, metadata !142), !dbg !976
  call void @llvm.dbg.declare(metadata i64* %net, metadata !977, metadata !142), !dbg !978
  call void @llvm.dbg.declare(metadata i64* %scc, metadata !979, metadata !142), !dbg !980
  store i64 1, i64* %scc, align 8, !dbg !981
  br label %for.cond, !dbg !983

for.cond:                                         ; preds = %for.inc.9, %entry
  %0 = load i64, i64* %scc, align 8, !dbg !984
  %1 = load i64, i64* @totalSCC, align 8, !dbg !988
  %cmp = icmp ule i64 %0, %1, !dbg !989
  br i1 %cmp, label %for.body, label %for.end.11, !dbg !990

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %scc, align 8, !dbg !991
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i64 %2), !dbg !993
  store i64 1, i64* %net, align 8, !dbg !994
  br label %for.cond.1, !dbg !996

for.cond.1:                                       ; preds = %for.inc, %for.body
  %3 = load i64, i64* %net, align 8, !dbg !997
  %4 = load i64, i64* @channelNets, align 8, !dbg !1001
  %cmp2 = icmp ule i64 %3, %4, !dbg !1002
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !1003

for.body.3:                                       ; preds = %for.cond.1
  %5 = load i64, i64* %net, align 8, !dbg !1004
  %6 = load i64*, i64** %SCC.addr, align 8, !dbg !1007
  %arrayidx = getelementptr inbounds i64, i64* %6, i64 %5, !dbg !1007
  %7 = load i64, i64* %arrayidx, align 8, !dbg !1007
  %8 = load i64, i64* %scc, align 8, !dbg !1008
  %cmp4 = icmp eq i64 %7, %8, !dbg !1009
  br i1 %cmp4, label %if.then, label %if.end, !dbg !1010

if.then:                                          ; preds = %for.body.3
  %9 = load i64, i64* %net, align 8, !dbg !1011
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i64 %9), !dbg !1013
  br label %if.end, !dbg !1014

if.end:                                           ; preds = %if.then, %for.body.3
  br label %for.inc, !dbg !1015

for.inc:                                          ; preds = %if.end
  %10 = load i64, i64* %net, align 8, !dbg !1016
  %inc = add i64 %10, 1, !dbg !1016
  store i64 %inc, i64* %net, align 8, !dbg !1016
  br label %for.cond.1, !dbg !1017

for.end:                                          ; preds = %for.cond.1
  %11 = load i64, i64* %scc, align 8, !dbg !1018
  %12 = load i64*, i64** %perSCC.addr, align 8, !dbg !1019
  %arrayidx6 = getelementptr inbounds i64, i64* %12, i64 %11, !dbg !1019
  %13 = load i64, i64* %arrayidx6, align 8, !dbg !1019
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i32 0, i32 0), i64 %13), !dbg !1020
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0)), !dbg !1021
  br label %for.inc.9, !dbg !1022

for.inc.9:                                        ; preds = %for.end
  %14 = load i64, i64* %scc, align 8, !dbg !1023
  %inc10 = add i64 %14, 1, !dbg !1023
  store i64 %inc10, i64* %scc, align 8, !dbg !1023
  br label %for.cond, !dbg !1024

for.end.11:                                       ; preds = %for.cond
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0)), !dbg !1025
  ret void, !dbg !1026
}

; Function Attrs: nounwind uwtable
define void @AcyclicVCG() #0 {
entry:
  %done = alloca i64, align 8
  %scc = alloca i64, align 8
  %net = alloca i64, align 8
  %top = alloca i64, align 8
  %bot = alloca i64, align 8
  %rep = alloca i64, align 8
  %which = alloca i64, align 8
  %total = alloca i64, align 8
  %cycle = alloca i64, align 8
  %acyclic = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %done, metadata !1027, metadata !142), !dbg !1028
  call void @llvm.dbg.declare(metadata i64* %scc, metadata !1029, metadata !142), !dbg !1030
  call void @llvm.dbg.declare(metadata i64* %net, metadata !1031, metadata !142), !dbg !1032
  call void @llvm.dbg.declare(metadata i64* %top, metadata !1033, metadata !142), !dbg !1034
  call void @llvm.dbg.declare(metadata i64* %bot, metadata !1035, metadata !142), !dbg !1036
  call void @llvm.dbg.declare(metadata i64* %rep, metadata !1037, metadata !142), !dbg !1038
  call void @llvm.dbg.declare(metadata i64* %which, metadata !1039, metadata !142), !dbg !1040
  call void @llvm.dbg.declare(metadata i64* %total, metadata !1041, metadata !142), !dbg !1042
  call void @llvm.dbg.declare(metadata i64* %cycle, metadata !1043, metadata !142), !dbg !1044
  call void @llvm.dbg.declare(metadata i64* %acyclic, metadata !1045, metadata !142), !dbg !1046
  store i64 1, i64* %net, align 8, !dbg !1047
  br label %for.cond, !dbg !1049

for.cond:                                         ; preds = %for.inc.16, %entry
  %0 = load i64, i64* %net, align 8, !dbg !1050
  %1 = load i64, i64* @channelNets, align 8, !dbg !1054
  %cmp = icmp ule i64 %0, %1, !dbg !1055
  br i1 %cmp, label %for.body, label %for.end.18, !dbg !1056

for.body:                                         ; preds = %for.cond
  store i64 0, i64* %which, align 8, !dbg !1057
  br label %for.cond.1, !dbg !1060

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i64, i64* %which, align 8, !dbg !1061
  %3 = load i64, i64* %net, align 8, !dbg !1065
  %4 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1066
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %4, i64 %3, !dbg !1066
  %netsAbove = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 1, !dbg !1067
  %5 = load i64, i64* %netsAbove, align 8, !dbg !1067
  %cmp2 = icmp ult i64 %2, %5, !dbg !1068
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !1069

for.body.3:                                       ; preds = %for.cond.1
  %6 = load i64, i64* %which, align 8, !dbg !1070
  %7 = load i64, i64* %net, align 8, !dbg !1072
  %8 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1073
  %arrayidx4 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %8, i64 %7, !dbg !1073
  %netsAboveHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx4, i32 0, i32 0, !dbg !1074
  %9 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook, align 8, !dbg !1074
  %arrayidx5 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %9, i64 %6, !dbg !1073
  %removed = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx5, i32 0, i32 3, !dbg !1075
  store i64 0, i64* %removed, align 8, !dbg !1076
  br label %for.inc, !dbg !1077

for.inc:                                          ; preds = %for.body.3
  %10 = load i64, i64* %which, align 8, !dbg !1078
  %inc = add i64 %10, 1, !dbg !1078
  store i64 %inc, i64* %which, align 8, !dbg !1078
  br label %for.cond.1, !dbg !1079

for.end:                                          ; preds = %for.cond.1
  store i64 0, i64* %which, align 8, !dbg !1080
  br label %for.cond.6, !dbg !1082

for.cond.6:                                       ; preds = %for.inc.13, %for.end
  %11 = load i64, i64* %which, align 8, !dbg !1083
  %12 = load i64, i64* %net, align 8, !dbg !1087
  %13 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1088
  %arrayidx7 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %13, i64 %12, !dbg !1088
  %netsBelow = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx7, i32 0, i32 5, !dbg !1089
  %14 = load i64, i64* %netsBelow, align 8, !dbg !1089
  %cmp8 = icmp ult i64 %11, %14, !dbg !1090
  br i1 %cmp8, label %for.body.9, label %for.end.15, !dbg !1091

for.body.9:                                       ; preds = %for.cond.6
  %15 = load i64, i64* %which, align 8, !dbg !1092
  %16 = load i64, i64* %net, align 8, !dbg !1094
  %17 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1095
  %arrayidx10 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %17, i64 %16, !dbg !1095
  %netsBelowHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx10, i32 0, i32 4, !dbg !1096
  %18 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook, align 8, !dbg !1096
  %arrayidx11 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %18, i64 %15, !dbg !1095
  %removed12 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx11, i32 0, i32 3, !dbg !1097
  store i64 0, i64* %removed12, align 8, !dbg !1098
  br label %for.inc.13, !dbg !1099

for.inc.13:                                       ; preds = %for.body.9
  %19 = load i64, i64* %which, align 8, !dbg !1100
  %inc14 = add i64 %19, 1, !dbg !1100
  store i64 %inc14, i64* %which, align 8, !dbg !1100
  br label %for.cond.6, !dbg !1101

for.end.15:                                       ; preds = %for.cond.6
  br label %for.inc.16, !dbg !1102

for.inc.16:                                       ; preds = %for.end.15
  %20 = load i64, i64* %net, align 8, !dbg !1103
  %inc17 = add i64 %20, 1, !dbg !1103
  store i64 %inc17, i64* %net, align 8, !dbg !1103
  br label %for.cond, !dbg !1104

for.end.18:                                       ; preds = %for.cond
  store i64 1, i64* %acyclic, align 8, !dbg !1105
  store i64 0, i64* @removeTotalVCG, align 8, !dbg !1106
  br label %do.body, !dbg !1107

do.body:                                          ; preds = %do.cond, %for.end.18
  store i64 1, i64* %done, align 8, !dbg !1108
  %21 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1110
  call void @DFSClearVCG(%struct._nodeVCGType* %21), !dbg !1111
  %22 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1112
  %23 = load i64*, i64** @SCC, align 8, !dbg !1113
  %24 = load i64*, i64** @perSCC, align 8, !dbg !1114
  call void @SCCofVCG(%struct._nodeVCGType* %22, i64* %23, i64* %24), !dbg !1115
  store i64 1, i64* %scc, align 8, !dbg !1116
  br label %for.cond.19, !dbg !1118

for.cond.19:                                      ; preds = %for.inc.24, %do.body
  %25 = load i64, i64* %scc, align 8, !dbg !1119
  %26 = load i64, i64* @totalSCC, align 8, !dbg !1123
  %cmp20 = icmp ule i64 %25, %26, !dbg !1124
  br i1 %cmp20, label %for.body.21, label %for.end.26, !dbg !1125

for.body.21:                                      ; preds = %for.cond.19
  %27 = load i64, i64* %scc, align 8, !dbg !1126
  %28 = load i64*, i64** @perSCC, align 8, !dbg !1129
  %arrayidx22 = getelementptr inbounds i64, i64* %28, i64 %27, !dbg !1129
  %29 = load i64, i64* %arrayidx22, align 8, !dbg !1129
  %cmp23 = icmp ugt i64 %29, 1, !dbg !1130
  br i1 %cmp23, label %if.then, label %if.end, !dbg !1131

if.then:                                          ; preds = %for.body.21
  store i64 0, i64* %acyclic, align 8, !dbg !1132
  store i64 0, i64* %done, align 8, !dbg !1134
  br label %for.end.26, !dbg !1135

if.end:                                           ; preds = %for.body.21
  br label %for.inc.24, !dbg !1136

for.inc.24:                                       ; preds = %if.end
  %30 = load i64, i64* %scc, align 8, !dbg !1137
  %inc25 = add i64 %30, 1, !dbg !1137
  store i64 %inc25, i64* %scc, align 8, !dbg !1137
  br label %for.cond.19, !dbg !1138

for.end.26:                                       ; preds = %if.then, %for.cond.19
  %31 = load i64, i64* %done, align 8, !dbg !1139
  %tobool = icmp ne i64 %31, 0, !dbg !1139
  br i1 %tobool, label %if.end.28, label %if.then.27, !dbg !1141

if.then.27:                                       ; preds = %for.end.26
  %32 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1142
  %33 = load i64*, i64** @SCC, align 8, !dbg !1144
  %34 = load i64*, i64** @perSCC, align 8, !dbg !1145
  %35 = load %struct._constraintVCGType**, %struct._constraintVCGType*** @removeVCG, align 8, !dbg !1146
  call void @RemoveConstraintVCG(%struct._nodeVCGType* %32, i64* %33, i64* %34, %struct._constraintVCGType** %35), !dbg !1147
  br label %if.end.28, !dbg !1148

if.end.28:                                        ; preds = %if.then.27, %for.end.26
  br label %do.cond, !dbg !1149

do.cond:                                          ; preds = %if.end.28
  %36 = load i64, i64* %done, align 8, !dbg !1150
  %tobool29 = icmp ne i64 %36, 0, !dbg !1152
  %lnot = xor i1 %tobool29, true, !dbg !1152
  br i1 %lnot, label %do.body, label %do.end, !dbg !1149

do.end:                                           ; preds = %do.cond
  %37 = load i64, i64* @removeTotalVCG, align 8, !dbg !1153
  store i64 %37, i64* %total, align 8, !dbg !1154
  store i64 0, i64* %rep, align 8, !dbg !1155
  br label %for.cond.30, !dbg !1157

for.cond.30:                                      ; preds = %for.inc.126, %do.end
  %38 = load i64, i64* %rep, align 8, !dbg !1158
  %39 = load i64, i64* @removeTotalVCG, align 8, !dbg !1162
  %cmp31 = icmp ult i64 %38, %39, !dbg !1163
  br i1 %cmp31, label %for.body.32, label %for.end.128, !dbg !1164

for.body.32:                                      ; preds = %for.cond.30
  %40 = load i64, i64* %rep, align 8, !dbg !1165
  %41 = load %struct._constraintVCGType**, %struct._constraintVCGType*** @removeVCG, align 8, !dbg !1167
  %arrayidx33 = getelementptr inbounds %struct._constraintVCGType*, %struct._constraintVCGType** %41, i64 %40, !dbg !1167
  %42 = load %struct._constraintVCGType*, %struct._constraintVCGType** %arrayidx33, align 8, !dbg !1167
  %top34 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %42, i32 0, i32 0, !dbg !1168
  %43 = load i64, i64* %top34, align 8, !dbg !1168
  store i64 %43, i64* %top, align 8, !dbg !1169
  %44 = load i64, i64* %rep, align 8, !dbg !1170
  %45 = load %struct._constraintVCGType**, %struct._constraintVCGType*** @removeVCG, align 8, !dbg !1171
  %arrayidx35 = getelementptr inbounds %struct._constraintVCGType*, %struct._constraintVCGType** %45, i64 %44, !dbg !1171
  %46 = load %struct._constraintVCGType*, %struct._constraintVCGType** %arrayidx35, align 8, !dbg !1171
  %bot36 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %46, i32 0, i32 1, !dbg !1172
  %47 = load i64, i64* %bot36, align 8, !dbg !1172
  store i64 %47, i64* %bot, align 8, !dbg !1173
  store i64 0, i64* %which, align 8, !dbg !1174
  br label %for.cond.37, !dbg !1176

for.cond.37:                                      ; preds = %for.inc.53, %for.body.32
  %48 = load i64, i64* %which, align 8, !dbg !1177
  %49 = load i64, i64* %top, align 8, !dbg !1181
  %50 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1182
  %arrayidx38 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %50, i64 %49, !dbg !1182
  %netsAbove39 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx38, i32 0, i32 1, !dbg !1183
  %51 = load i64, i64* %netsAbove39, align 8, !dbg !1183
  %cmp40 = icmp ult i64 %48, %51, !dbg !1184
  br i1 %cmp40, label %for.body.41, label %for.end.55, !dbg !1185

for.body.41:                                      ; preds = %for.cond.37
  %52 = load i64, i64* %which, align 8, !dbg !1186
  %53 = load i64, i64* %top, align 8, !dbg !1189
  %54 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1190
  %arrayidx42 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %54, i64 %53, !dbg !1190
  %netsAboveHook43 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx42, i32 0, i32 0, !dbg !1191
  %55 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook43, align 8, !dbg !1191
  %arrayidx44 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %55, i64 %52, !dbg !1190
  %bot45 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx44, i32 0, i32 1, !dbg !1192
  %56 = load i64, i64* %bot45, align 8, !dbg !1192
  %57 = load i64, i64* %bot, align 8, !dbg !1193
  %cmp46 = icmp eq i64 %56, %57, !dbg !1194
  br i1 %cmp46, label %if.then.47, label %if.end.52, !dbg !1195

if.then.47:                                       ; preds = %for.body.41
  %58 = load i64, i64* %which, align 8, !dbg !1196
  %59 = load i64, i64* %top, align 8, !dbg !1198
  %60 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1199
  %arrayidx48 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %60, i64 %59, !dbg !1199
  %netsAboveHook49 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx48, i32 0, i32 0, !dbg !1200
  %61 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook49, align 8, !dbg !1200
  %arrayidx50 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %61, i64 %58, !dbg !1199
  %removed51 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx50, i32 0, i32 3, !dbg !1201
  store i64 0, i64* %removed51, align 8, !dbg !1202
  br label %for.end.55, !dbg !1203

if.end.52:                                        ; preds = %for.body.41
  br label %for.inc.53, !dbg !1204

for.inc.53:                                       ; preds = %if.end.52
  %62 = load i64, i64* %which, align 8, !dbg !1205
  %inc54 = add i64 %62, 1, !dbg !1205
  store i64 %inc54, i64* %which, align 8, !dbg !1205
  br label %for.cond.37, !dbg !1206

for.end.55:                                       ; preds = %if.then.47, %for.cond.37
  store i64 0, i64* %which, align 8, !dbg !1207
  br label %for.cond.56, !dbg !1209

for.cond.56:                                      ; preds = %for.inc.72, %for.end.55
  %63 = load i64, i64* %which, align 8, !dbg !1210
  %64 = load i64, i64* %bot, align 8, !dbg !1214
  %65 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1215
  %arrayidx57 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %65, i64 %64, !dbg !1215
  %netsBelow58 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx57, i32 0, i32 5, !dbg !1216
  %66 = load i64, i64* %netsBelow58, align 8, !dbg !1216
  %cmp59 = icmp ult i64 %63, %66, !dbg !1217
  br i1 %cmp59, label %for.body.60, label %for.end.74, !dbg !1218

for.body.60:                                      ; preds = %for.cond.56
  %67 = load i64, i64* %which, align 8, !dbg !1219
  %68 = load i64, i64* %bot, align 8, !dbg !1222
  %69 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1223
  %arrayidx61 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %69, i64 %68, !dbg !1223
  %netsBelowHook62 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx61, i32 0, i32 4, !dbg !1224
  %70 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook62, align 8, !dbg !1224
  %arrayidx63 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %70, i64 %67, !dbg !1223
  %top64 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx63, i32 0, i32 0, !dbg !1225
  %71 = load i64, i64* %top64, align 8, !dbg !1225
  %72 = load i64, i64* %top, align 8, !dbg !1226
  %cmp65 = icmp eq i64 %71, %72, !dbg !1227
  br i1 %cmp65, label %if.then.66, label %if.end.71, !dbg !1228

if.then.66:                                       ; preds = %for.body.60
  %73 = load i64, i64* %which, align 8, !dbg !1229
  %74 = load i64, i64* %bot, align 8, !dbg !1231
  %75 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1232
  %arrayidx67 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %75, i64 %74, !dbg !1232
  %netsBelowHook68 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx67, i32 0, i32 4, !dbg !1233
  %76 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook68, align 8, !dbg !1233
  %arrayidx69 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %76, i64 %73, !dbg !1232
  %removed70 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx69, i32 0, i32 3, !dbg !1234
  store i64 0, i64* %removed70, align 8, !dbg !1235
  br label %for.end.74, !dbg !1236

if.end.71:                                        ; preds = %for.body.60
  br label %for.inc.72, !dbg !1237

for.inc.72:                                       ; preds = %if.end.71
  %77 = load i64, i64* %which, align 8, !dbg !1238
  %inc73 = add i64 %77, 1, !dbg !1238
  store i64 %inc73, i64* %which, align 8, !dbg !1238
  br label %for.cond.56, !dbg !1239

for.end.74:                                       ; preds = %if.then.66, %for.cond.56
  store i64 0, i64* %cycle, align 8, !dbg !1240
  %78 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1241
  call void @DFSClearVCG(%struct._nodeVCGType* %78), !dbg !1242
  %79 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1243
  %80 = load i64*, i64** @SCC, align 8, !dbg !1244
  %81 = load i64*, i64** @perSCC, align 8, !dbg !1245
  call void @SCCofVCG(%struct._nodeVCGType* %79, i64* %80, i64* %81), !dbg !1246
  store i64 1, i64* %scc, align 8, !dbg !1247
  br label %for.cond.75, !dbg !1249

for.cond.75:                                      ; preds = %for.inc.82, %for.end.74
  %82 = load i64, i64* %scc, align 8, !dbg !1250
  %83 = load i64, i64* @totalSCC, align 8, !dbg !1254
  %cmp76 = icmp ule i64 %82, %83, !dbg !1255
  br i1 %cmp76, label %for.body.77, label %for.end.84, !dbg !1256

for.body.77:                                      ; preds = %for.cond.75
  %84 = load i64, i64* %scc, align 8, !dbg !1257
  %85 = load i64*, i64** @perSCC, align 8, !dbg !1260
  %arrayidx78 = getelementptr inbounds i64, i64* %85, i64 %84, !dbg !1260
  %86 = load i64, i64* %arrayidx78, align 8, !dbg !1260
  %cmp79 = icmp ugt i64 %86, 1, !dbg !1261
  br i1 %cmp79, label %if.then.80, label %if.end.81, !dbg !1262

if.then.80:                                       ; preds = %for.body.77
  store i64 1, i64* %cycle, align 8, !dbg !1263
  br label %for.end.84, !dbg !1265

if.end.81:                                        ; preds = %for.body.77
  br label %for.inc.82, !dbg !1266

for.inc.82:                                       ; preds = %if.end.81
  %87 = load i64, i64* %scc, align 8, !dbg !1267
  %inc83 = add i64 %87, 1, !dbg !1267
  store i64 %inc83, i64* %scc, align 8, !dbg !1267
  br label %for.cond.75, !dbg !1268

for.end.84:                                       ; preds = %if.then.80, %for.cond.75
  %88 = load i64, i64* %cycle, align 8, !dbg !1269
  %tobool85 = icmp ne i64 %88, 0, !dbg !1269
  br i1 %tobool85, label %if.then.86, label %if.else, !dbg !1271

if.then.86:                                       ; preds = %for.end.84
  store i64 0, i64* %which, align 8, !dbg !1272
  br label %for.cond.87, !dbg !1275

for.cond.87:                                      ; preds = %for.inc.103, %if.then.86
  %89 = load i64, i64* %which, align 8, !dbg !1276
  %90 = load i64, i64* %top, align 8, !dbg !1280
  %91 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1281
  %arrayidx88 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %91, i64 %90, !dbg !1281
  %netsAbove89 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx88, i32 0, i32 1, !dbg !1282
  %92 = load i64, i64* %netsAbove89, align 8, !dbg !1282
  %cmp90 = icmp ult i64 %89, %92, !dbg !1283
  br i1 %cmp90, label %for.body.91, label %for.end.105, !dbg !1284

for.body.91:                                      ; preds = %for.cond.87
  %93 = load i64, i64* %which, align 8, !dbg !1285
  %94 = load i64, i64* %top, align 8, !dbg !1288
  %95 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1289
  %arrayidx92 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %95, i64 %94, !dbg !1289
  %netsAboveHook93 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx92, i32 0, i32 0, !dbg !1290
  %96 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook93, align 8, !dbg !1290
  %arrayidx94 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %96, i64 %93, !dbg !1289
  %bot95 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx94, i32 0, i32 1, !dbg !1291
  %97 = load i64, i64* %bot95, align 8, !dbg !1291
  %98 = load i64, i64* %bot, align 8, !dbg !1292
  %cmp96 = icmp eq i64 %97, %98, !dbg !1293
  br i1 %cmp96, label %if.then.97, label %if.end.102, !dbg !1294

if.then.97:                                       ; preds = %for.body.91
  %99 = load i64, i64* %which, align 8, !dbg !1295
  %100 = load i64, i64* %top, align 8, !dbg !1297
  %101 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1298
  %arrayidx98 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %101, i64 %100, !dbg !1298
  %netsAboveHook99 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx98, i32 0, i32 0, !dbg !1299
  %102 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook99, align 8, !dbg !1299
  %arrayidx100 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %102, i64 %99, !dbg !1298
  %removed101 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx100, i32 0, i32 3, !dbg !1300
  store i64 1, i64* %removed101, align 8, !dbg !1301
  br label %for.end.105, !dbg !1302

if.end.102:                                       ; preds = %for.body.91
  br label %for.inc.103, !dbg !1303

for.inc.103:                                      ; preds = %if.end.102
  %103 = load i64, i64* %which, align 8, !dbg !1304
  %inc104 = add i64 %103, 1, !dbg !1304
  store i64 %inc104, i64* %which, align 8, !dbg !1304
  br label %for.cond.87, !dbg !1305

for.end.105:                                      ; preds = %if.then.97, %for.cond.87
  store i64 0, i64* %which, align 8, !dbg !1306
  br label %for.cond.106, !dbg !1308

for.cond.106:                                     ; preds = %for.inc.122, %for.end.105
  %104 = load i64, i64* %which, align 8, !dbg !1309
  %105 = load i64, i64* %bot, align 8, !dbg !1313
  %106 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1314
  %arrayidx107 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %106, i64 %105, !dbg !1314
  %netsBelow108 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx107, i32 0, i32 5, !dbg !1315
  %107 = load i64, i64* %netsBelow108, align 8, !dbg !1315
  %cmp109 = icmp ult i64 %104, %107, !dbg !1316
  br i1 %cmp109, label %for.body.110, label %for.end.124, !dbg !1317

for.body.110:                                     ; preds = %for.cond.106
  %108 = load i64, i64* %which, align 8, !dbg !1318
  %109 = load i64, i64* %bot, align 8, !dbg !1321
  %110 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1322
  %arrayidx111 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %110, i64 %109, !dbg !1322
  %netsBelowHook112 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx111, i32 0, i32 4, !dbg !1323
  %111 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook112, align 8, !dbg !1323
  %arrayidx113 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %111, i64 %108, !dbg !1322
  %top114 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx113, i32 0, i32 0, !dbg !1324
  %112 = load i64, i64* %top114, align 8, !dbg !1324
  %113 = load i64, i64* %top, align 8, !dbg !1325
  %cmp115 = icmp eq i64 %112, %113, !dbg !1326
  br i1 %cmp115, label %if.then.116, label %if.end.121, !dbg !1327

if.then.116:                                      ; preds = %for.body.110
  %114 = load i64, i64* %which, align 8, !dbg !1328
  %115 = load i64, i64* %bot, align 8, !dbg !1330
  %116 = load %struct._nodeVCGType*, %struct._nodeVCGType** @VCG, align 8, !dbg !1331
  %arrayidx117 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %116, i64 %115, !dbg !1331
  %netsBelowHook118 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx117, i32 0, i32 4, !dbg !1332
  %117 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook118, align 8, !dbg !1332
  %arrayidx119 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %117, i64 %114, !dbg !1331
  %removed120 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx119, i32 0, i32 3, !dbg !1333
  store i64 1, i64* %removed120, align 8, !dbg !1334
  br label %for.end.124, !dbg !1335

if.end.121:                                       ; preds = %for.body.110
  br label %for.inc.122, !dbg !1336

for.inc.122:                                      ; preds = %if.end.121
  %118 = load i64, i64* %which, align 8, !dbg !1337
  %inc123 = add i64 %118, 1, !dbg !1337
  store i64 %inc123, i64* %which, align 8, !dbg !1337
  br label %for.cond.106, !dbg !1338

for.end.124:                                      ; preds = %if.then.116, %for.cond.106
  br label %if.end.125, !dbg !1339

if.else:                                          ; preds = %for.end.84
  %119 = load i64, i64* %total, align 8, !dbg !1340
  %dec = add i64 %119, -1, !dbg !1340
  store i64 %dec, i64* %total, align 8, !dbg !1340
  br label %if.end.125

if.end.125:                                       ; preds = %if.else, %for.end.124
  br label %for.inc.126, !dbg !1342

for.inc.126:                                      ; preds = %if.end.125
  %120 = load i64, i64* %rep, align 8, !dbg !1343
  %inc127 = add i64 %120, 1, !dbg !1343
  store i64 %inc127, i64* %rep, align 8, !dbg !1343
  br label %for.cond.30, !dbg !1344

for.end.128:                                      ; preds = %for.cond.30
  %121 = load i64, i64* %acyclic, align 8, !dbg !1345
  %tobool129 = icmp ne i64 %121, 0, !dbg !1345
  br i1 %tobool129, label %if.then.130, label %if.else.131, !dbg !1347

if.then.130:                                      ; preds = %for.end.128
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.16, i32 0, i32 0)), !dbg !1348
  br label %if.end.134, !dbg !1350

if.else.131:                                      ; preds = %for.end.128
  %call132 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.17, i32 0, i32 0)), !dbg !1351
  %122 = load i64, i64* %total, align 8, !dbg !1353
  %call133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.18, i32 0, i32 0), i64 %122), !dbg !1354
  br label %if.end.134

if.end.134:                                       ; preds = %if.else.131, %if.then.130
  ret void, !dbg !1355
}

; Function Attrs: nounwind uwtable
define void @RemoveConstraintVCG(%struct._nodeVCGType* %VCG, i64* %SCC, i64* %perSCC, %struct._constraintVCGType** %removeVCG) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %SCC.addr = alloca i64*, align 8
  %perSCC.addr = alloca i64*, align 8
  %removeVCG.addr = alloca %struct._constraintVCGType**, align 8
  %scc = alloca i64, align 8
  %net = alloca i64, align 8
  %which = alloca i64, align 8
  %best = alloca i64, align 8
  %weight = alloca i64, align 8
  %top = alloca i64, align 8
  %bot = alloca i64, align 8
  %col = alloca i64, align 8
  %remove = alloca %struct._constraintVCGType*, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !1356, metadata !142), !dbg !1357
  store i64* %SCC, i64** %SCC.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %SCC.addr, metadata !1358, metadata !142), !dbg !1359
  store i64* %perSCC, i64** %perSCC.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %perSCC.addr, metadata !1360, metadata !142), !dbg !1361
  store %struct._constraintVCGType** %removeVCG, %struct._constraintVCGType*** %removeVCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._constraintVCGType*** %removeVCG.addr, metadata !1362, metadata !142), !dbg !1363
  call void @llvm.dbg.declare(metadata i64* %scc, metadata !1364, metadata !142), !dbg !1365
  call void @llvm.dbg.declare(metadata i64* %net, metadata !1366, metadata !142), !dbg !1367
  call void @llvm.dbg.declare(metadata i64* %which, metadata !1368, metadata !142), !dbg !1369
  call void @llvm.dbg.declare(metadata i64* %best, metadata !1370, metadata !142), !dbg !1371
  call void @llvm.dbg.declare(metadata i64* %weight, metadata !1372, metadata !142), !dbg !1373
  call void @llvm.dbg.declare(metadata i64* %top, metadata !1374, metadata !142), !dbg !1375
  call void @llvm.dbg.declare(metadata i64* %bot, metadata !1376, metadata !142), !dbg !1377
  call void @llvm.dbg.declare(metadata i64* %col, metadata !1378, metadata !142), !dbg !1379
  call void @llvm.dbg.declare(metadata %struct._constraintVCGType** %remove, metadata !1380, metadata !142), !dbg !1381
  store i64 1, i64* %scc, align 8, !dbg !1382
  br label %for.cond, !dbg !1384

for.cond:                                         ; preds = %for.inc.159, %entry
  %0 = load i64, i64* %scc, align 8, !dbg !1385
  %1 = load i64, i64* @totalSCC, align 8, !dbg !1389
  %cmp = icmp ule i64 %0, %1, !dbg !1390
  br i1 %cmp, label %for.body, label %for.end.161, !dbg !1391

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %scc, align 8, !dbg !1392
  %3 = load i64*, i64** %perSCC.addr, align 8, !dbg !1395
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 %2, !dbg !1395
  %4 = load i64, i64* %arrayidx, align 8, !dbg !1395
  %cmp1 = icmp ugt i64 %4, 1, !dbg !1396
  br i1 %cmp1, label %if.then, label %if.end.158, !dbg !1397

if.then:                                          ; preds = %for.body
  store %struct._constraintVCGType* null, %struct._constraintVCGType** %remove, align 8, !dbg !1398
  store i64 7, i64* %best, align 8, !dbg !1400
  store i64 1, i64* %net, align 8, !dbg !1401
  br label %for.cond.2, !dbg !1403

for.cond.2:                                       ; preds = %for.inc.126, %if.then
  %5 = load i64, i64* %net, align 8, !dbg !1404
  %6 = load i64, i64* @channelNets, align 8, !dbg !1408
  %cmp3 = icmp ule i64 %5, %6, !dbg !1409
  br i1 %cmp3, label %for.body.4, label %for.end.128, !dbg !1410

for.body.4:                                       ; preds = %for.cond.2
  %7 = load i64, i64* %net, align 8, !dbg !1411
  %8 = load i64*, i64** %SCC.addr, align 8, !dbg !1414
  %arrayidx5 = getelementptr inbounds i64, i64* %8, i64 %7, !dbg !1414
  %9 = load i64, i64* %arrayidx5, align 8, !dbg !1414
  %10 = load i64, i64* %scc, align 8, !dbg !1415
  %cmp6 = icmp eq i64 %9, %10, !dbg !1416
  br i1 %cmp6, label %if.then.7, label %if.end.125, !dbg !1417

if.then.7:                                        ; preds = %for.body.4
  store i64 0, i64* %which, align 8, !dbg !1418
  br label %for.cond.8, !dbg !1421

for.cond.8:                                       ; preds = %for.inc, %if.then.7
  %11 = load i64, i64* %which, align 8, !dbg !1422
  %12 = load i64, i64* %net, align 8, !dbg !1426
  %13 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1427
  %arrayidx9 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %13, i64 %12, !dbg !1427
  %netsAbove = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx9, i32 0, i32 1, !dbg !1428
  %14 = load i64, i64* %netsAbove, align 8, !dbg !1428
  %cmp10 = icmp ult i64 %11, %14, !dbg !1429
  br i1 %cmp10, label %for.body.11, label %for.end, !dbg !1430

for.body.11:                                      ; preds = %for.cond.8
  %15 = load i64, i64* %which, align 8, !dbg !1431
  %16 = load i64, i64* %net, align 8, !dbg !1433
  %17 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1434
  %arrayidx12 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %17, i64 %16, !dbg !1434
  %netsAboveHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx12, i32 0, i32 0, !dbg !1435
  %18 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook, align 8, !dbg !1435
  %arrayidx13 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %18, i64 %15, !dbg !1434
  %bot14 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx13, i32 0, i32 1, !dbg !1436
  %19 = load i64, i64* %bot14, align 8, !dbg !1436
  store i64 %19, i64* %bot, align 8, !dbg !1437
  %20 = load i64, i64* %bot, align 8, !dbg !1438
  %21 = load i64*, i64** %SCC.addr, align 8, !dbg !1440
  %arrayidx15 = getelementptr inbounds i64, i64* %21, i64 %20, !dbg !1440
  %22 = load i64, i64* %arrayidx15, align 8, !dbg !1440
  %23 = load i64, i64* %scc, align 8, !dbg !1441
  %cmp16 = icmp eq i64 %22, %23, !dbg !1442
  br i1 %cmp16, label %land.lhs.true, label %if.end.124, !dbg !1443

land.lhs.true:                                    ; preds = %for.body.11
  %24 = load i64, i64* %which, align 8, !dbg !1444
  %25 = load i64, i64* %net, align 8, !dbg !1446
  %26 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1447
  %arrayidx17 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %26, i64 %25, !dbg !1447
  %netsAboveHook18 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx17, i32 0, i32 0, !dbg !1448
  %27 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook18, align 8, !dbg !1448
  %arrayidx19 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %27, i64 %24, !dbg !1447
  %removed = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx19, i32 0, i32 3, !dbg !1449
  %28 = load i64, i64* %removed, align 8, !dbg !1449
  %tobool = icmp ne i64 %28, 0, !dbg !1447
  br i1 %tobool, label %if.end.124, label %if.then.20, !dbg !1450

if.then.20:                                       ; preds = %land.lhs.true
  %29 = load i64, i64* %which, align 8, !dbg !1451
  %30 = load i64, i64* %net, align 8, !dbg !1453
  %31 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1454
  %arrayidx21 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %31, i64 %30, !dbg !1454
  %netsAboveHook22 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx21, i32 0, i32 0, !dbg !1455
  %32 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook22, align 8, !dbg !1455
  %arrayidx23 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %32, i64 %29, !dbg !1454
  %col24 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx23, i32 0, i32 2, !dbg !1456
  %33 = load i64, i64* %col24, align 8, !dbg !1456
  store i64 %33, i64* %col, align 8, !dbg !1457
  store i64 0, i64* %weight, align 8, !dbg !1458
  %34 = load i64, i64* %col, align 8, !dbg !1459
  %cmp25 = icmp eq i64 %34, 1, !dbg !1461
  br i1 %cmp25, label %if.then.26, label %if.else.46, !dbg !1462

if.then.26:                                       ; preds = %if.then.20
  %35 = load i64, i64* %weight, align 8, !dbg !1463
  %add = add i64 %35, 3, !dbg !1463
  store i64 %add, i64* %weight, align 8, !dbg !1463
  %36 = load i64, i64* %col, align 8, !dbg !1465
  %add27 = add i64 %36, 1, !dbg !1467
  %37 = load i64*, i64** @TOP, align 8, !dbg !1468
  %arrayidx28 = getelementptr inbounds i64, i64* %37, i64 %add27, !dbg !1468
  %38 = load i64, i64* %arrayidx28, align 8, !dbg !1468
  %tobool29 = icmp ne i64 %38, 0, !dbg !1468
  br i1 %tobool29, label %land.lhs.true.30, label %if.else, !dbg !1469

land.lhs.true.30:                                 ; preds = %if.then.26
  %39 = load i64, i64* %col, align 8, !dbg !1470
  %add31 = add i64 %39, 1, !dbg !1472
  %40 = load i64*, i64** @BOT, align 8, !dbg !1473
  %arrayidx32 = getelementptr inbounds i64, i64* %40, i64 %add31, !dbg !1473
  %41 = load i64, i64* %arrayidx32, align 8, !dbg !1473
  %tobool33 = icmp ne i64 %41, 0, !dbg !1473
  br i1 %tobool33, label %if.then.34, label %if.else, !dbg !1474

if.then.34:                                       ; preds = %land.lhs.true.30
  %42 = load i64, i64* %weight, align 8, !dbg !1475
  %add35 = add i64 %42, 3, !dbg !1475
  store i64 %add35, i64* %weight, align 8, !dbg !1475
  br label %if.end.45, !dbg !1477

if.else:                                          ; preds = %land.lhs.true.30, %if.then.26
  %43 = load i64, i64* %col, align 8, !dbg !1478
  %add36 = add i64 %43, 1, !dbg !1480
  %44 = load i64*, i64** @TOP, align 8, !dbg !1481
  %arrayidx37 = getelementptr inbounds i64, i64* %44, i64 %add36, !dbg !1481
  %45 = load i64, i64* %arrayidx37, align 8, !dbg !1481
  %tobool38 = icmp ne i64 %45, 0, !dbg !1481
  br i1 %tobool38, label %if.else.43, label %lor.lhs.false, !dbg !1482

lor.lhs.false:                                    ; preds = %if.else
  %46 = load i64, i64* %col, align 8, !dbg !1483
  %add39 = add i64 %46, 1, !dbg !1485
  %47 = load i64*, i64** @BOT, align 8, !dbg !1486
  %arrayidx40 = getelementptr inbounds i64, i64* %47, i64 %add39, !dbg !1486
  %48 = load i64, i64* %arrayidx40, align 8, !dbg !1486
  %tobool41 = icmp ne i64 %48, 0, !dbg !1486
  br i1 %tobool41, label %if.else.43, label %if.then.42, !dbg !1487

if.then.42:                                       ; preds = %lor.lhs.false
  br label %if.end, !dbg !1488

if.else.43:                                       ; preds = %lor.lhs.false, %if.else
  %49 = load i64, i64* %weight, align 8, !dbg !1490
  %add44 = add i64 %49, 2, !dbg !1490
  store i64 %add44, i64* %weight, align 8, !dbg !1490
  br label %if.end

if.end:                                           ; preds = %if.else.43, %if.then.42
  br label %if.end.45

if.end.45:                                        ; preds = %if.end, %if.then.34
  br label %if.end.117, !dbg !1492

if.else.46:                                       ; preds = %if.then.20
  %50 = load i64, i64* %col, align 8, !dbg !1493
  %51 = load i64, i64* @channelColumns, align 8, !dbg !1495
  %cmp47 = icmp eq i64 %50, %51, !dbg !1496
  br i1 %cmp47, label %if.then.48, label %if.else.71, !dbg !1497

if.then.48:                                       ; preds = %if.else.46
  %52 = load i64, i64* %weight, align 8, !dbg !1498
  %add49 = add i64 %52, 3, !dbg !1498
  store i64 %add49, i64* %weight, align 8, !dbg !1498
  %53 = load i64, i64* %col, align 8, !dbg !1500
  %sub = sub i64 %53, 1, !dbg !1502
  %54 = load i64*, i64** @TOP, align 8, !dbg !1503
  %arrayidx50 = getelementptr inbounds i64, i64* %54, i64 %sub, !dbg !1503
  %55 = load i64, i64* %arrayidx50, align 8, !dbg !1503
  %tobool51 = icmp ne i64 %55, 0, !dbg !1503
  br i1 %tobool51, label %land.lhs.true.52, label %if.else.58, !dbg !1504

land.lhs.true.52:                                 ; preds = %if.then.48
  %56 = load i64, i64* %col, align 8, !dbg !1505
  %sub53 = sub i64 %56, 1, !dbg !1507
  %57 = load i64*, i64** @BOT, align 8, !dbg !1508
  %arrayidx54 = getelementptr inbounds i64, i64* %57, i64 %sub53, !dbg !1508
  %58 = load i64, i64* %arrayidx54, align 8, !dbg !1508
  %tobool55 = icmp ne i64 %58, 0, !dbg !1508
  br i1 %tobool55, label %if.then.56, label %if.else.58, !dbg !1509

if.then.56:                                       ; preds = %land.lhs.true.52
  %59 = load i64, i64* %weight, align 8, !dbg !1510
  %add57 = add i64 %59, 3, !dbg !1510
  store i64 %add57, i64* %weight, align 8, !dbg !1510
  br label %if.end.70, !dbg !1512

if.else.58:                                       ; preds = %land.lhs.true.52, %if.then.48
  %60 = load i64, i64* %col, align 8, !dbg !1513
  %sub59 = sub i64 %60, 1, !dbg !1515
  %61 = load i64*, i64** @TOP, align 8, !dbg !1516
  %arrayidx60 = getelementptr inbounds i64, i64* %61, i64 %sub59, !dbg !1516
  %62 = load i64, i64* %arrayidx60, align 8, !dbg !1516
  %tobool61 = icmp ne i64 %62, 0, !dbg !1516
  br i1 %tobool61, label %if.else.67, label %lor.lhs.false.62, !dbg !1517

lor.lhs.false.62:                                 ; preds = %if.else.58
  %63 = load i64, i64* %col, align 8, !dbg !1518
  %sub63 = sub i64 %63, 1, !dbg !1520
  %64 = load i64*, i64** @BOT, align 8, !dbg !1521
  %arrayidx64 = getelementptr inbounds i64, i64* %64, i64 %sub63, !dbg !1521
  %65 = load i64, i64* %arrayidx64, align 8, !dbg !1521
  %tobool65 = icmp ne i64 %65, 0, !dbg !1521
  br i1 %tobool65, label %if.else.67, label %if.then.66, !dbg !1522

if.then.66:                                       ; preds = %lor.lhs.false.62
  br label %if.end.69, !dbg !1523

if.else.67:                                       ; preds = %lor.lhs.false.62, %if.else.58
  %66 = load i64, i64* %weight, align 8, !dbg !1525
  %add68 = add i64 %66, 2, !dbg !1525
  store i64 %add68, i64* %weight, align 8, !dbg !1525
  br label %if.end.69

if.end.69:                                        ; preds = %if.else.67, %if.then.66
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %if.then.56
  br label %if.end.116, !dbg !1527

if.else.71:                                       ; preds = %if.else.46
  %67 = load i64, i64* %col, align 8, !dbg !1528
  %sub72 = sub i64 %67, 1, !dbg !1531
  %68 = load i64*, i64** @TOP, align 8, !dbg !1532
  %arrayidx73 = getelementptr inbounds i64, i64* %68, i64 %sub72, !dbg !1532
  %69 = load i64, i64* %arrayidx73, align 8, !dbg !1532
  %tobool74 = icmp ne i64 %69, 0, !dbg !1532
  br i1 %tobool74, label %land.lhs.true.75, label %if.else.81, !dbg !1533

land.lhs.true.75:                                 ; preds = %if.else.71
  %70 = load i64, i64* %col, align 8, !dbg !1534
  %sub76 = sub i64 %70, 1, !dbg !1536
  %71 = load i64*, i64** @BOT, align 8, !dbg !1537
  %arrayidx77 = getelementptr inbounds i64, i64* %71, i64 %sub76, !dbg !1537
  %72 = load i64, i64* %arrayidx77, align 8, !dbg !1537
  %tobool78 = icmp ne i64 %72, 0, !dbg !1537
  br i1 %tobool78, label %if.then.79, label %if.else.81, !dbg !1538

if.then.79:                                       ; preds = %land.lhs.true.75
  %73 = load i64, i64* %weight, align 8, !dbg !1539
  %add80 = add i64 %73, 3, !dbg !1539
  store i64 %add80, i64* %weight, align 8, !dbg !1539
  br label %if.end.93, !dbg !1541

if.else.81:                                       ; preds = %land.lhs.true.75, %if.else.71
  %74 = load i64, i64* %col, align 8, !dbg !1542
  %sub82 = sub i64 %74, 1, !dbg !1544
  %75 = load i64*, i64** @TOP, align 8, !dbg !1545
  %arrayidx83 = getelementptr inbounds i64, i64* %75, i64 %sub82, !dbg !1545
  %76 = load i64, i64* %arrayidx83, align 8, !dbg !1545
  %tobool84 = icmp ne i64 %76, 0, !dbg !1545
  br i1 %tobool84, label %if.else.90, label %lor.lhs.false.85, !dbg !1546

lor.lhs.false.85:                                 ; preds = %if.else.81
  %77 = load i64, i64* %col, align 8, !dbg !1547
  %sub86 = sub i64 %77, 1, !dbg !1549
  %78 = load i64*, i64** @BOT, align 8, !dbg !1550
  %arrayidx87 = getelementptr inbounds i64, i64* %78, i64 %sub86, !dbg !1550
  %79 = load i64, i64* %arrayidx87, align 8, !dbg !1550
  %tobool88 = icmp ne i64 %79, 0, !dbg !1550
  br i1 %tobool88, label %if.else.90, label %if.then.89, !dbg !1551

if.then.89:                                       ; preds = %lor.lhs.false.85
  br label %if.end.92, !dbg !1552

if.else.90:                                       ; preds = %lor.lhs.false.85, %if.else.81
  %80 = load i64, i64* %weight, align 8, !dbg !1554
  %add91 = add i64 %80, 2, !dbg !1554
  store i64 %add91, i64* %weight, align 8, !dbg !1554
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.90, %if.then.89
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %if.then.79
  %81 = load i64, i64* %col, align 8, !dbg !1556
  %add94 = add i64 %81, 1, !dbg !1558
  %82 = load i64*, i64** @TOP, align 8, !dbg !1559
  %arrayidx95 = getelementptr inbounds i64, i64* %82, i64 %add94, !dbg !1559
  %83 = load i64, i64* %arrayidx95, align 8, !dbg !1559
  %tobool96 = icmp ne i64 %83, 0, !dbg !1559
  br i1 %tobool96, label %land.lhs.true.97, label %if.else.103, !dbg !1560

land.lhs.true.97:                                 ; preds = %if.end.93
  %84 = load i64, i64* %col, align 8, !dbg !1561
  %add98 = add i64 %84, 1, !dbg !1563
  %85 = load i64*, i64** @BOT, align 8, !dbg !1564
  %arrayidx99 = getelementptr inbounds i64, i64* %85, i64 %add98, !dbg !1564
  %86 = load i64, i64* %arrayidx99, align 8, !dbg !1564
  %tobool100 = icmp ne i64 %86, 0, !dbg !1564
  br i1 %tobool100, label %if.then.101, label %if.else.103, !dbg !1565

if.then.101:                                      ; preds = %land.lhs.true.97
  %87 = load i64, i64* %weight, align 8, !dbg !1566
  %add102 = add i64 %87, 3, !dbg !1566
  store i64 %add102, i64* %weight, align 8, !dbg !1566
  br label %if.end.115, !dbg !1568

if.else.103:                                      ; preds = %land.lhs.true.97, %if.end.93
  %88 = load i64, i64* %col, align 8, !dbg !1569
  %add104 = add i64 %88, 1, !dbg !1571
  %89 = load i64*, i64** @TOP, align 8, !dbg !1572
  %arrayidx105 = getelementptr inbounds i64, i64* %89, i64 %add104, !dbg !1572
  %90 = load i64, i64* %arrayidx105, align 8, !dbg !1572
  %tobool106 = icmp ne i64 %90, 0, !dbg !1572
  br i1 %tobool106, label %if.else.112, label %lor.lhs.false.107, !dbg !1573

lor.lhs.false.107:                                ; preds = %if.else.103
  %91 = load i64, i64* %col, align 8, !dbg !1574
  %add108 = add i64 %91, 1, !dbg !1576
  %92 = load i64*, i64** @BOT, align 8, !dbg !1577
  %arrayidx109 = getelementptr inbounds i64, i64* %92, i64 %add108, !dbg !1577
  %93 = load i64, i64* %arrayidx109, align 8, !dbg !1577
  %tobool110 = icmp ne i64 %93, 0, !dbg !1577
  br i1 %tobool110, label %if.else.112, label %if.then.111, !dbg !1578

if.then.111:                                      ; preds = %lor.lhs.false.107
  br label %if.end.114, !dbg !1579

if.else.112:                                      ; preds = %lor.lhs.false.107, %if.else.103
  %94 = load i64, i64* %weight, align 8, !dbg !1581
  %add113 = add i64 %94, 2, !dbg !1581
  store i64 %add113, i64* %weight, align 8, !dbg !1581
  br label %if.end.114

if.end.114:                                       ; preds = %if.else.112, %if.then.111
  br label %if.end.115

if.end.115:                                       ; preds = %if.end.114, %if.then.101
  br label %if.end.116

if.end.116:                                       ; preds = %if.end.115, %if.end.70
  br label %if.end.117

if.end.117:                                       ; preds = %if.end.116, %if.end.45
  %95 = load i64, i64* %weight, align 8, !dbg !1583
  %96 = load i64, i64* %best, align 8, !dbg !1585
  %cmp118 = icmp ult i64 %95, %96, !dbg !1586
  br i1 %cmp118, label %if.then.119, label %if.end.123, !dbg !1587

if.then.119:                                      ; preds = %if.end.117
  %97 = load i64, i64* %weight, align 8, !dbg !1588
  store i64 %97, i64* %best, align 8, !dbg !1590
  %98 = load i64, i64* %which, align 8, !dbg !1591
  %99 = load i64, i64* %net, align 8, !dbg !1592
  %100 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1593
  %arrayidx120 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %100, i64 %99, !dbg !1593
  %netsAboveHook121 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx120, i32 0, i32 0, !dbg !1594
  %101 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook121, align 8, !dbg !1594
  %arrayidx122 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %101, i64 %98, !dbg !1593
  store %struct._constraintVCGType* %arrayidx122, %struct._constraintVCGType** %remove, align 8, !dbg !1595
  br label %if.end.123, !dbg !1596

if.end.123:                                       ; preds = %if.then.119, %if.end.117
  br label %if.end.124, !dbg !1597

if.end.124:                                       ; preds = %if.end.123, %land.lhs.true, %for.body.11
  br label %for.inc, !dbg !1598

for.inc:                                          ; preds = %if.end.124
  %102 = load i64, i64* %which, align 8, !dbg !1599
  %inc = add i64 %102, 1, !dbg !1599
  store i64 %inc, i64* %which, align 8, !dbg !1599
  br label %for.cond.8, !dbg !1600

for.end:                                          ; preds = %for.cond.8
  br label %if.end.125, !dbg !1601

if.end.125:                                       ; preds = %for.end, %for.body.4
  br label %for.inc.126, !dbg !1602

for.inc.126:                                      ; preds = %if.end.125
  %103 = load i64, i64* %net, align 8, !dbg !1603
  %inc127 = add i64 %103, 1, !dbg !1603
  store i64 %inc127, i64* %net, align 8, !dbg !1603
  br label %for.cond.2, !dbg !1604

for.end.128:                                      ; preds = %for.cond.2
  %104 = load %struct._constraintVCGType*, %struct._constraintVCGType** %remove, align 8, !dbg !1605
  %cmp129 = icmp ne %struct._constraintVCGType* %104, null, !dbg !1605
  br i1 %cmp129, label %cond.true, label %cond.false, !dbg !1605

cond.true:                                        ; preds = %for.end.128
  br label %cond.end, !dbg !1606

cond.false:                                       ; preds = %for.end.128
  call void @__assert_fail(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 572, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @__PRETTY_FUNCTION__.RemoveConstraintVCG, i32 0, i32 0)) #6, !dbg !1608
  unreachable, !dbg !1608
                                                  ; No predecessors!
  br label %cond.end, !dbg !1605

cond.end:                                         ; preds = %105, %cond.true
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1610
  %call = call i32 @fflush(%struct._IO_FILE* %106), !dbg !1611
  %107 = load i64, i64* @removeTotalVCG, align 8, !dbg !1612
  %108 = load i64, i64* @channelNets, align 8, !dbg !1612
  %add130 = add i64 %108, 1, !dbg !1612
  %109 = load i64, i64* @channelNets, align 8, !dbg !1612
  %add131 = add i64 %109, 1, !dbg !1612
  %mul = mul i64 %add130, %add131, !dbg !1612
  %cmp132 = icmp ult i64 %107, %mul, !dbg !1612
  br i1 %cmp132, label %cond.true.133, label %cond.false.134, !dbg !1612

cond.true.133:                                    ; preds = %cond.end
  br label %cond.end.135, !dbg !1613

cond.false.134:                                   ; preds = %cond.end
  call void @__assert_fail(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 574, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @__PRETTY_FUNCTION__.RemoveConstraintVCG, i32 0, i32 0)) #6, !dbg !1614
  unreachable, !dbg !1614
                                                  ; No predecessors!
  br label %cond.end.135, !dbg !1612

cond.end.135:                                     ; preds = %110, %cond.true.133
  %111 = load %struct._constraintVCGType*, %struct._constraintVCGType** %remove, align 8, !dbg !1615
  %112 = load i64, i64* @removeTotalVCG, align 8, !dbg !1616
  %113 = load %struct._constraintVCGType**, %struct._constraintVCGType*** %removeVCG.addr, align 8, !dbg !1617
  %arrayidx136 = getelementptr inbounds %struct._constraintVCGType*, %struct._constraintVCGType** %113, i64 %112, !dbg !1617
  store %struct._constraintVCGType* %111, %struct._constraintVCGType** %arrayidx136, align 8, !dbg !1618
  %114 = load i64, i64* @removeTotalVCG, align 8, !dbg !1619
  %inc137 = add i64 %114, 1, !dbg !1619
  store i64 %inc137, i64* @removeTotalVCG, align 8, !dbg !1619
  %115 = load %struct._constraintVCGType*, %struct._constraintVCGType** %remove, align 8, !dbg !1620
  %top138 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %115, i32 0, i32 0, !dbg !1621
  %116 = load i64, i64* %top138, align 8, !dbg !1621
  store i64 %116, i64* %top, align 8, !dbg !1622
  %117 = load %struct._constraintVCGType*, %struct._constraintVCGType** %remove, align 8, !dbg !1623
  %bot139 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %117, i32 0, i32 1, !dbg !1624
  %118 = load i64, i64* %bot139, align 8, !dbg !1624
  store i64 %118, i64* %bot, align 8, !dbg !1625
  %119 = load %struct._constraintVCGType*, %struct._constraintVCGType** %remove, align 8, !dbg !1626
  %removed140 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %119, i32 0, i32 3, !dbg !1627
  store i64 1, i64* %removed140, align 8, !dbg !1628
  store i64 0, i64* %which, align 8, !dbg !1629
  br label %for.cond.141, !dbg !1631

for.cond.141:                                     ; preds = %for.inc.155, %cond.end.135
  %120 = load i64, i64* %which, align 8, !dbg !1632
  %121 = load i64, i64* %bot, align 8, !dbg !1636
  %122 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1637
  %arrayidx142 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %122, i64 %121, !dbg !1637
  %netsBelow = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx142, i32 0, i32 5, !dbg !1638
  %123 = load i64, i64* %netsBelow, align 8, !dbg !1638
  %cmp143 = icmp ult i64 %120, %123, !dbg !1639
  br i1 %cmp143, label %for.body.144, label %for.end.157, !dbg !1640

for.body.144:                                     ; preds = %for.cond.141
  %124 = load i64, i64* %which, align 8, !dbg !1641
  %125 = load i64, i64* %bot, align 8, !dbg !1644
  %126 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1645
  %arrayidx145 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %126, i64 %125, !dbg !1645
  %netsBelowHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx145, i32 0, i32 4, !dbg !1646
  %127 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook, align 8, !dbg !1646
  %arrayidx146 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %127, i64 %124, !dbg !1645
  %top147 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx146, i32 0, i32 0, !dbg !1647
  %128 = load i64, i64* %top147, align 8, !dbg !1647
  %129 = load i64, i64* %top, align 8, !dbg !1648
  %cmp148 = icmp eq i64 %128, %129, !dbg !1649
  br i1 %cmp148, label %if.then.149, label %if.end.154, !dbg !1650

if.then.149:                                      ; preds = %for.body.144
  %130 = load i64, i64* %which, align 8, !dbg !1651
  %131 = load i64, i64* %bot, align 8, !dbg !1653
  %132 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1654
  %arrayidx150 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %132, i64 %131, !dbg !1654
  %netsBelowHook151 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx150, i32 0, i32 4, !dbg !1655
  %133 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook151, align 8, !dbg !1655
  %arrayidx152 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %133, i64 %130, !dbg !1654
  %removed153 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx152, i32 0, i32 3, !dbg !1656
  store i64 1, i64* %removed153, align 8, !dbg !1657
  br label %for.end.157, !dbg !1658

if.end.154:                                       ; preds = %for.body.144
  br label %for.inc.155, !dbg !1659

for.inc.155:                                      ; preds = %if.end.154
  %134 = load i64, i64* %which, align 8, !dbg !1660
  %inc156 = add i64 %134, 1, !dbg !1660
  store i64 %inc156, i64* %which, align 8, !dbg !1660
  br label %for.cond.141, !dbg !1661

for.end.157:                                      ; preds = %if.then.149, %for.cond.141
  br label %if.end.158, !dbg !1662

if.end.158:                                       ; preds = %for.end.157, %for.body
  br label %for.inc.159, !dbg !1663

for.inc.159:                                      ; preds = %if.end.158
  %135 = load i64, i64* %scc, align 8, !dbg !1664
  %inc160 = add i64 %135, 1, !dbg !1664
  store i64 %inc160, i64* %scc, align 8, !dbg !1664
  br label %for.cond, !dbg !1665

for.end.161:                                      ; preds = %for.cond
  ret void, !dbg !1666
}

declare i32 @fflush(%struct._IO_FILE*) #4

; Function Attrs: nounwind uwtable
define i64 @ExistPathAboveVCG(%struct._nodeVCGType* %VCG, i64 %above, i64 %below) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %above.addr = alloca i64, align 8
  %below.addr = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !1667, metadata !142), !dbg !1668
  store i64 %above, i64* %above.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %above.addr, metadata !1669, metadata !142), !dbg !1670
  store i64 %below, i64* %below.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %below.addr, metadata !1671, metadata !142), !dbg !1672
  %0 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1673
  call void @DFSClearVCG(%struct._nodeVCGType* %0), !dbg !1674
  %1 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1675
  %2 = load i64, i64* %above.addr, align 8, !dbg !1676
  call void @DFSAboveVCG(%struct._nodeVCGType* %1, i64 %2), !dbg !1677
  %3 = load i64, i64* %below.addr, align 8, !dbg !1678
  %4 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1679
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %4, i64 %3, !dbg !1679
  %netsAboveReached = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 3, !dbg !1680
  %5 = load i64, i64* %netsAboveReached, align 8, !dbg !1680
  ret i64 %5, !dbg !1681
}

; Function Attrs: nounwind uwtable
define void @LongestPathVCG(%struct._nodeVCGType* %VCG, i64 %net) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %net.addr = alloca i64, align 8
  %track = alloca i64, align 8
  %bot = alloca i64, align 8
  %top = alloca i64, align 8
  %not = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !1682, metadata !142), !dbg !1683
  store i64 %net, i64* %net.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %net.addr, metadata !1684, metadata !142), !dbg !1685
  call void @llvm.dbg.declare(metadata i64* %track, metadata !1686, metadata !142), !dbg !1687
  call void @llvm.dbg.declare(metadata i64* %bot, metadata !1688, metadata !142), !dbg !1689
  call void @llvm.dbg.declare(metadata i64* %top, metadata !1690, metadata !142), !dbg !1691
  call void @llvm.dbg.declare(metadata i64* %not, metadata !1692, metadata !142), !dbg !1693
  %0 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1694
  call void @DFSClearVCG(%struct._nodeVCGType* %0), !dbg !1695
  %1 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1696
  %2 = load i64, i64* %net.addr, align 8, !dbg !1697
  %call = call i64 @DFSAboveLongestPathVCG(%struct._nodeVCGType* %1, i64 %2), !dbg !1698
  %sub = sub i64 %call, 1, !dbg !1699
  store i64 %sub, i64* @cardBotNotPref, align 8, !dbg !1700
  %3 = load i64, i64* @cardBotNotPref, align 8, !dbg !1701
  store i64 %3, i64* %bot, align 8, !dbg !1702
  %4 = load i64, i64* @channelTracks, align 8, !dbg !1703
  store i64 %4, i64* %track, align 8, !dbg !1705
  br label %for.cond, !dbg !1706

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i64, i64* %track, align 8, !dbg !1707
  %cmp = icmp uge i64 %5, 1, !dbg !1711
  br i1 %cmp, label %for.body, label %for.end, !dbg !1712

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %bot, align 8, !dbg !1713
  %cmp1 = icmp ugt i64 %6, 0, !dbg !1716
  br i1 %cmp1, label %if.then, label %if.else, !dbg !1717

if.then:                                          ; preds = %for.body
  %7 = load i64, i64* %track, align 8, !dbg !1718
  %8 = load i64*, i64** @tracksBotNotPref, align 8, !dbg !1720
  %arrayidx = getelementptr inbounds i64, i64* %8, i64 %7, !dbg !1720
  store i64 1, i64* %arrayidx, align 8, !dbg !1721
  %9 = load i64, i64* %bot, align 8, !dbg !1722
  %dec = add i64 %9, -1, !dbg !1722
  store i64 %dec, i64* %bot, align 8, !dbg !1722
  br label %if.end, !dbg !1723

if.else:                                          ; preds = %for.body
  %10 = load i64, i64* %track, align 8, !dbg !1724
  %11 = load i64*, i64** @tracksBotNotPref, align 8, !dbg !1726
  %arrayidx2 = getelementptr inbounds i64, i64* %11, i64 %10, !dbg !1726
  store i64 0, i64* %arrayidx2, align 8, !dbg !1727
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !1728

for.inc:                                          ; preds = %if.end
  %12 = load i64, i64* %track, align 8, !dbg !1729
  %dec3 = add i64 %12, -1, !dbg !1729
  store i64 %dec3, i64* %track, align 8, !dbg !1729
  br label %for.cond, !dbg !1730

for.end:                                          ; preds = %for.cond
  %13 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1731
  call void @DFSClearVCG(%struct._nodeVCGType* %13), !dbg !1732
  %14 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1733
  %15 = load i64, i64* %net.addr, align 8, !dbg !1734
  %call4 = call i64 @DFSBelowLongestPathVCG(%struct._nodeVCGType* %14, i64 %15), !dbg !1735
  %sub5 = sub i64 %call4, 1, !dbg !1736
  store i64 %sub5, i64* @cardTopNotPref, align 8, !dbg !1737
  %16 = load i64, i64* @cardTopNotPref, align 8, !dbg !1738
  store i64 %16, i64* %top, align 8, !dbg !1739
  store i64 1, i64* %track, align 8, !dbg !1740
  br label %for.cond.6, !dbg !1742

for.cond.6:                                       ; preds = %for.inc.16, %for.end
  %17 = load i64, i64* %track, align 8, !dbg !1743
  %18 = load i64, i64* @channelTracks, align 8, !dbg !1747
  %cmp7 = icmp ule i64 %17, %18, !dbg !1748
  br i1 %cmp7, label %for.body.8, label %for.end.17, !dbg !1749

for.body.8:                                       ; preds = %for.cond.6
  %19 = load i64, i64* %top, align 8, !dbg !1750
  %cmp9 = icmp ugt i64 %19, 0, !dbg !1753
  br i1 %cmp9, label %if.then.10, label %if.else.13, !dbg !1754

if.then.10:                                       ; preds = %for.body.8
  %20 = load i64, i64* %track, align 8, !dbg !1755
  %21 = load i64*, i64** @tracksTopNotPref, align 8, !dbg !1757
  %arrayidx11 = getelementptr inbounds i64, i64* %21, i64 %20, !dbg !1757
  store i64 1, i64* %arrayidx11, align 8, !dbg !1758
  %22 = load i64, i64* %top, align 8, !dbg !1759
  %dec12 = add i64 %22, -1, !dbg !1759
  store i64 %dec12, i64* %top, align 8, !dbg !1759
  br label %if.end.15, !dbg !1760

if.else.13:                                       ; preds = %for.body.8
  %23 = load i64, i64* %track, align 8, !dbg !1761
  %24 = load i64*, i64** @tracksTopNotPref, align 8, !dbg !1763
  %arrayidx14 = getelementptr inbounds i64, i64* %24, i64 %23, !dbg !1763
  store i64 0, i64* %arrayidx14, align 8, !dbg !1764
  br label %if.end.15

if.end.15:                                        ; preds = %if.else.13, %if.then.10
  br label %for.inc.16, !dbg !1765

for.inc.16:                                       ; preds = %if.end.15
  %25 = load i64, i64* %track, align 8, !dbg !1766
  %inc = add i64 %25, 1, !dbg !1766
  store i64 %inc, i64* %track, align 8, !dbg !1766
  br label %for.cond.6, !dbg !1767

for.end.17:                                       ; preds = %for.cond.6
  store i64 0, i64* %not, align 8, !dbg !1768
  store i64 1, i64* %track, align 8, !dbg !1769
  br label %for.cond.18, !dbg !1771

for.cond.18:                                      ; preds = %for.inc.30, %for.end.17
  %26 = load i64, i64* %track, align 8, !dbg !1772
  %27 = load i64, i64* @channelTracks, align 8, !dbg !1776
  %cmp19 = icmp ule i64 %26, %27, !dbg !1777
  br i1 %cmp19, label %for.body.20, label %for.end.32, !dbg !1778

for.body.20:                                      ; preds = %for.cond.18
  %28 = load i64, i64* %track, align 8, !dbg !1779
  %29 = load i64*, i64** @tracksTopNotPref, align 8, !dbg !1782
  %arrayidx21 = getelementptr inbounds i64, i64* %29, i64 %28, !dbg !1782
  %30 = load i64, i64* %arrayidx21, align 8, !dbg !1782
  %tobool = icmp ne i64 %30, 0, !dbg !1782
  br i1 %tobool, label %if.then.24, label %lor.lhs.false, !dbg !1783

lor.lhs.false:                                    ; preds = %for.body.20
  %31 = load i64, i64* %track, align 8, !dbg !1784
  %32 = load i64*, i64** @tracksBotNotPref, align 8, !dbg !1786
  %arrayidx22 = getelementptr inbounds i64, i64* %32, i64 %31, !dbg !1786
  %33 = load i64, i64* %arrayidx22, align 8, !dbg !1786
  %tobool23 = icmp ne i64 %33, 0, !dbg !1786
  br i1 %tobool23, label %if.then.24, label %if.else.27, !dbg !1787

if.then.24:                                       ; preds = %lor.lhs.false, %for.body.20
  %34 = load i64, i64* %track, align 8, !dbg !1788
  %35 = load i64*, i64** @tracksNotPref, align 8, !dbg !1790
  %arrayidx25 = getelementptr inbounds i64, i64* %35, i64 %34, !dbg !1790
  store i64 1, i64* %arrayidx25, align 8, !dbg !1791
  %36 = load i64, i64* %not, align 8, !dbg !1792
  %inc26 = add i64 %36, 1, !dbg !1792
  store i64 %inc26, i64* %not, align 8, !dbg !1792
  br label %if.end.29, !dbg !1793

if.else.27:                                       ; preds = %lor.lhs.false
  %37 = load i64, i64* %track, align 8, !dbg !1794
  %38 = load i64*, i64** @tracksNotPref, align 8, !dbg !1796
  %arrayidx28 = getelementptr inbounds i64, i64* %38, i64 %37, !dbg !1796
  store i64 0, i64* %arrayidx28, align 8, !dbg !1797
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.27, %if.then.24
  br label %for.inc.30, !dbg !1798

for.inc.30:                                       ; preds = %if.end.29
  %39 = load i64, i64* %track, align 8, !dbg !1799
  %inc31 = add i64 %39, 1, !dbg !1799
  store i64 %inc31, i64* %track, align 8, !dbg !1799
  br label %for.cond.18, !dbg !1800

for.end.32:                                       ; preds = %for.cond.18
  %40 = load i64, i64* %not, align 8, !dbg !1801
  store i64 %40, i64* @cardNotPref, align 8, !dbg !1802
  ret void, !dbg !1803
}

; Function Attrs: nounwind uwtable
define i64 @DFSAboveLongestPathVCG(%struct._nodeVCGType* %VCG, i64 %net) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %net.addr = alloca i64, align 8
  %s = alloca i64, align 8
  %above = alloca i64, align 8
  %path = alloca i64, align 8
  %longest = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !1804, metadata !142), !dbg !1805
  store i64 %net, i64* %net.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %net.addr, metadata !1806, metadata !142), !dbg !1807
  call void @llvm.dbg.declare(metadata i64* %s, metadata !1808, metadata !142), !dbg !1809
  call void @llvm.dbg.declare(metadata i64* %above, metadata !1810, metadata !142), !dbg !1811
  call void @llvm.dbg.declare(metadata i64* %path, metadata !1812, metadata !142), !dbg !1813
  call void @llvm.dbg.declare(metadata i64* %longest, metadata !1814, metadata !142), !dbg !1815
  store i64 0, i64* %longest, align 8, !dbg !1816
  %0 = load i64, i64* %net.addr, align 8, !dbg !1817
  %1 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1818
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %1, i64 %0, !dbg !1818
  %netsAboveReached = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 3, !dbg !1819
  store i64 1, i64* %netsAboveReached, align 8, !dbg !1820
  store i64 0, i64* %s, align 8, !dbg !1821
  br label %for.cond, !dbg !1823

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %s, align 8, !dbg !1824
  %3 = load i64, i64* %net.addr, align 8, !dbg !1828
  %4 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1829
  %arrayidx1 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %4, i64 %3, !dbg !1829
  %netsAbove = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx1, i32 0, i32 1, !dbg !1830
  %5 = load i64, i64* %netsAbove, align 8, !dbg !1830
  %cmp = icmp ult i64 %2, %5, !dbg !1831
  br i1 %cmp, label %for.body, label %for.end, !dbg !1832

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %s, align 8, !dbg !1833
  %7 = load i64, i64* %net.addr, align 8, !dbg !1836
  %8 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1837
  %arrayidx2 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %8, i64 %7, !dbg !1837
  %netsAboveHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx2, i32 0, i32 0, !dbg !1838
  %9 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook, align 8, !dbg !1838
  %arrayidx3 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %9, i64 %6, !dbg !1837
  %removed = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx3, i32 0, i32 3, !dbg !1839
  %10 = load i64, i64* %removed, align 8, !dbg !1839
  %tobool = icmp ne i64 %10, 0, !dbg !1837
  br i1 %tobool, label %if.end.18, label %if.then, !dbg !1840

if.then:                                          ; preds = %for.body
  %11 = load i64, i64* %s, align 8, !dbg !1841
  %12 = load i64, i64* %net.addr, align 8, !dbg !1841
  %13 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1841
  %arrayidx4 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %13, i64 %12, !dbg !1841
  %netsAboveHook5 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx4, i32 0, i32 0, !dbg !1841
  %14 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook5, align 8, !dbg !1841
  %arrayidx6 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %14, i64 %11, !dbg !1841
  %top = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx6, i32 0, i32 0, !dbg !1841
  %15 = load i64, i64* %top, align 8, !dbg !1841
  %16 = load i64, i64* %net.addr, align 8, !dbg !1841
  %cmp7 = icmp eq i64 %15, %16, !dbg !1841
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !1841

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !1843

cond.false:                                       ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 676, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @__PRETTY_FUNCTION__.DFSAboveLongestPathVCG, i32 0, i32 0)) #6, !dbg !1845
  unreachable, !dbg !1845
                                                  ; No predecessors!
  br label %cond.end, !dbg !1841

cond.end:                                         ; preds = %17, %cond.true
  %18 = load i64, i64* %s, align 8, !dbg !1847
  %19 = load i64, i64* %net.addr, align 8, !dbg !1848
  %20 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1849
  %arrayidx8 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %20, i64 %19, !dbg !1849
  %netsAboveHook9 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx8, i32 0, i32 0, !dbg !1850
  %21 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsAboveHook9, align 8, !dbg !1850
  %arrayidx10 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %21, i64 %18, !dbg !1849
  %bot = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx10, i32 0, i32 1, !dbg !1851
  %22 = load i64, i64* %bot, align 8, !dbg !1851
  store i64 %22, i64* %above, align 8, !dbg !1852
  %23 = load i64, i64* %above, align 8, !dbg !1853
  %24 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1855
  %arrayidx11 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %24, i64 %23, !dbg !1855
  %netsAboveReached12 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx11, i32 0, i32 3, !dbg !1856
  %25 = load i64, i64* %netsAboveReached12, align 8, !dbg !1856
  %tobool13 = icmp ne i64 %25, 0, !dbg !1855
  br i1 %tobool13, label %if.end.17, label %if.then.14, !dbg !1857

if.then.14:                                       ; preds = %cond.end
  %26 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1858
  %27 = load i64, i64* %above, align 8, !dbg !1860
  %call = call i64 @DFSAboveLongestPathVCG(%struct._nodeVCGType* %26, i64 %27), !dbg !1861
  store i64 %call, i64* %path, align 8, !dbg !1862
  %28 = load i64, i64* %path, align 8, !dbg !1863
  %29 = load i64, i64* %longest, align 8, !dbg !1865
  %cmp15 = icmp ugt i64 %28, %29, !dbg !1866
  br i1 %cmp15, label %if.then.16, label %if.end, !dbg !1867

if.then.16:                                       ; preds = %if.then.14
  %30 = load i64, i64* %path, align 8, !dbg !1868
  store i64 %30, i64* %longest, align 8, !dbg !1870
  br label %if.end, !dbg !1871

if.end:                                           ; preds = %if.then.16, %if.then.14
  br label %if.end.17, !dbg !1872

if.end.17:                                        ; preds = %if.end, %cond.end
  br label %if.end.18, !dbg !1873

if.end.18:                                        ; preds = %if.end.17, %for.body
  br label %for.inc, !dbg !1874

for.inc:                                          ; preds = %if.end.18
  %31 = load i64, i64* %s, align 8, !dbg !1875
  %inc = add i64 %31, 1, !dbg !1875
  store i64 %inc, i64* %s, align 8, !dbg !1875
  br label %for.cond, !dbg !1876

for.end:                                          ; preds = %for.cond
  %32 = load i64, i64* %longest, align 8, !dbg !1877
  %add = add i64 %32, 1, !dbg !1878
  ret i64 %add, !dbg !1879
}

; Function Attrs: nounwind uwtable
define i64 @DFSBelowLongestPathVCG(%struct._nodeVCGType* %VCG, i64 %net) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %net.addr = alloca i64, align 8
  %s = alloca i64, align 8
  %below = alloca i64, align 8
  %path = alloca i64, align 8
  %longest = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !1880, metadata !142), !dbg !1881
  store i64 %net, i64* %net.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %net.addr, metadata !1882, metadata !142), !dbg !1883
  call void @llvm.dbg.declare(metadata i64* %s, metadata !1884, metadata !142), !dbg !1885
  call void @llvm.dbg.declare(metadata i64* %below, metadata !1886, metadata !142), !dbg !1887
  call void @llvm.dbg.declare(metadata i64* %path, metadata !1888, metadata !142), !dbg !1889
  call void @llvm.dbg.declare(metadata i64* %longest, metadata !1890, metadata !142), !dbg !1891
  store i64 0, i64* %longest, align 8, !dbg !1892
  %0 = load i64, i64* %net.addr, align 8, !dbg !1893
  %1 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1894
  %arrayidx = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %1, i64 %0, !dbg !1894
  %netsBelowReached = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx, i32 0, i32 7, !dbg !1895
  store i64 1, i64* %netsBelowReached, align 8, !dbg !1896
  store i64 0, i64* %s, align 8, !dbg !1897
  br label %for.cond, !dbg !1899

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %s, align 8, !dbg !1900
  %3 = load i64, i64* %net.addr, align 8, !dbg !1904
  %4 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1905
  %arrayidx1 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %4, i64 %3, !dbg !1905
  %netsBelow = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx1, i32 0, i32 5, !dbg !1906
  %5 = load i64, i64* %netsBelow, align 8, !dbg !1906
  %cmp = icmp ult i64 %2, %5, !dbg !1907
  br i1 %cmp, label %for.body, label %for.end, !dbg !1908

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %s, align 8, !dbg !1909
  %7 = load i64, i64* %net.addr, align 8, !dbg !1912
  %8 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1913
  %arrayidx2 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %8, i64 %7, !dbg !1913
  %netsBelowHook = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx2, i32 0, i32 4, !dbg !1914
  %9 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook, align 8, !dbg !1914
  %arrayidx3 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %9, i64 %6, !dbg !1913
  %removed = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx3, i32 0, i32 3, !dbg !1915
  %10 = load i64, i64* %removed, align 8, !dbg !1915
  %tobool = icmp ne i64 %10, 0, !dbg !1913
  br i1 %tobool, label %if.end.18, label %if.then, !dbg !1916

if.then:                                          ; preds = %for.body
  %11 = load i64, i64* %s, align 8, !dbg !1917
  %12 = load i64, i64* %net.addr, align 8, !dbg !1917
  %13 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1917
  %arrayidx4 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %13, i64 %12, !dbg !1917
  %netsBelowHook5 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx4, i32 0, i32 4, !dbg !1917
  %14 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook5, align 8, !dbg !1917
  %arrayidx6 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %14, i64 %11, !dbg !1917
  %bot = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx6, i32 0, i32 1, !dbg !1917
  %15 = load i64, i64* %bot, align 8, !dbg !1917
  %16 = load i64, i64* %net.addr, align 8, !dbg !1917
  %cmp7 = icmp eq i64 %15, %16, !dbg !1917
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !1917

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !1919

cond.false:                                       ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i32 0, i32 0), i32 700, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @__PRETTY_FUNCTION__.DFSBelowLongestPathVCG, i32 0, i32 0)) #6, !dbg !1921
  unreachable, !dbg !1921
                                                  ; No predecessors!
  br label %cond.end, !dbg !1917

cond.end:                                         ; preds = %17, %cond.true
  %18 = load i64, i64* %s, align 8, !dbg !1923
  %19 = load i64, i64* %net.addr, align 8, !dbg !1924
  %20 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1925
  %arrayidx8 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %20, i64 %19, !dbg !1925
  %netsBelowHook9 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx8, i32 0, i32 4, !dbg !1926
  %21 = load %struct._constraintVCGType*, %struct._constraintVCGType** %netsBelowHook9, align 8, !dbg !1926
  %arrayidx10 = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %21, i64 %18, !dbg !1925
  %top = getelementptr inbounds %struct._constraintVCGType, %struct._constraintVCGType* %arrayidx10, i32 0, i32 0, !dbg !1927
  %22 = load i64, i64* %top, align 8, !dbg !1927
  store i64 %22, i64* %below, align 8, !dbg !1928
  %23 = load i64, i64* %below, align 8, !dbg !1929
  %24 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1931
  %arrayidx11 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %24, i64 %23, !dbg !1931
  %netsBelowReached12 = getelementptr inbounds %struct._nodeVCGType, %struct._nodeVCGType* %arrayidx11, i32 0, i32 7, !dbg !1932
  %25 = load i64, i64* %netsBelowReached12, align 8, !dbg !1932
  %tobool13 = icmp ne i64 %25, 0, !dbg !1931
  br i1 %tobool13, label %if.end.17, label %if.then.14, !dbg !1933

if.then.14:                                       ; preds = %cond.end
  %26 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1934
  %27 = load i64, i64* %below, align 8, !dbg !1936
  %call = call i64 @DFSBelowLongestPathVCG(%struct._nodeVCGType* %26, i64 %27), !dbg !1937
  store i64 %call, i64* %path, align 8, !dbg !1938
  %28 = load i64, i64* %path, align 8, !dbg !1939
  %29 = load i64, i64* %longest, align 8, !dbg !1941
  %cmp15 = icmp ugt i64 %28, %29, !dbg !1942
  br i1 %cmp15, label %if.then.16, label %if.end, !dbg !1943

if.then.16:                                       ; preds = %if.then.14
  %30 = load i64, i64* %path, align 8, !dbg !1944
  store i64 %30, i64* %longest, align 8, !dbg !1946
  br label %if.end, !dbg !1947

if.end:                                           ; preds = %if.then.16, %if.then.14
  br label %if.end.17, !dbg !1948

if.end.17:                                        ; preds = %if.end, %cond.end
  br label %if.end.18, !dbg !1949

if.end.18:                                        ; preds = %if.end.17, %for.body
  br label %for.inc, !dbg !1950

for.inc:                                          ; preds = %if.end.18
  %31 = load i64, i64* %s, align 8, !dbg !1951
  %inc = add i64 %31, 1, !dbg !1951
  store i64 %inc, i64* %s, align 8, !dbg !1951
  br label %for.cond, !dbg !1952

for.end:                                          ; preds = %for.cond
  %32 = load i64, i64* %longest, align 8, !dbg !1953
  %add = add i64 %32, 1, !dbg !1954
  ret i64 %add, !dbg !1955
}

; Function Attrs: nounwind uwtable
define i64 @VCV(%struct._nodeVCGType* %VCG, i64 %check, i64 %track, i64* %assign) #0 {
entry:
  %VCG.addr = alloca %struct._nodeVCGType*, align 8
  %check.addr = alloca i64, align 8
  %track.addr = alloca i64, align 8
  %assign.addr = alloca i64*, align 8
  %net = alloca i64, align 8
  %vcv = alloca i64, align 8
  store %struct._nodeVCGType* %VCG, %struct._nodeVCGType** %VCG.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._nodeVCGType** %VCG.addr, metadata !1956, metadata !142), !dbg !1957
  store i64 %check, i64* %check.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %check.addr, metadata !1958, metadata !142), !dbg !1959
  store i64 %track, i64* %track.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %track.addr, metadata !1960, metadata !142), !dbg !1961
  store i64* %assign, i64** %assign.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %assign.addr, metadata !1962, metadata !142), !dbg !1963
  call void @llvm.dbg.declare(metadata i64* %net, metadata !1964, metadata !142), !dbg !1965
  call void @llvm.dbg.declare(metadata i64* %vcv, metadata !1966, metadata !142), !dbg !1967
  store i64 0, i64* %vcv, align 8, !dbg !1968
  store i64 1, i64* %net, align 8, !dbg !1969
  br label %for.cond, !dbg !1971

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %net, align 8, !dbg !1972
  %1 = load i64, i64* @channelNets, align 8, !dbg !1976
  %cmp = icmp ule i64 %0, %1, !dbg !1977
  br i1 %cmp, label %for.body, label %for.end, !dbg !1978

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %net, align 8, !dbg !1979
  %3 = load i64*, i64** %assign.addr, align 8, !dbg !1982
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 %2, !dbg !1982
  %4 = load i64, i64* %arrayidx, align 8, !dbg !1982
  %tobool = icmp ne i64 %4, 0, !dbg !1982
  br i1 %tobool, label %if.then, label %if.end.24, !dbg !1983

if.then:                                          ; preds = %for.body
  %5 = load i64, i64* %net, align 8, !dbg !1984
  %6 = load i64*, i64** %assign.addr, align 8, !dbg !1987
  %arrayidx1 = getelementptr inbounds i64, i64* %6, i64 %5, !dbg !1987
  %7 = load i64, i64* %arrayidx1, align 8, !dbg !1987
  %8 = load i64, i64* %track.addr, align 8, !dbg !1988
  %cmp2 = icmp ult i64 %7, %8, !dbg !1989
  br i1 %cmp2, label %if.then.3, label %if.else, !dbg !1990

if.then.3:                                        ; preds = %if.then
  %9 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !1991
  %10 = load i64, i64* %net, align 8, !dbg !1994
  %11 = load i64, i64* %check.addr, align 8, !dbg !1995
  %call = call i64 @ExistPathAboveVCG(%struct._nodeVCGType* %9, i64 %10, i64 %11), !dbg !1996
  %tobool4 = icmp ne i64 %call, 0, !dbg !1996
  br i1 %tobool4, label %if.then.5, label %if.end, !dbg !1997

if.then.5:                                        ; preds = %if.then.3
  %12 = load i64, i64* %vcv, align 8, !dbg !1998
  %inc = add i64 %12, 1, !dbg !1998
  store i64 %inc, i64* %vcv, align 8, !dbg !1998
  br label %if.end, !dbg !2000

if.end:                                           ; preds = %if.then.5, %if.then.3
  br label %if.end.23, !dbg !2001

if.else:                                          ; preds = %if.then
  %13 = load i64, i64* %net, align 8, !dbg !2002
  %14 = load i64*, i64** %assign.addr, align 8, !dbg !2004
  %arrayidx6 = getelementptr inbounds i64, i64* %14, i64 %13, !dbg !2004
  %15 = load i64, i64* %arrayidx6, align 8, !dbg !2004
  %16 = load i64, i64* %track.addr, align 8, !dbg !2005
  %cmp7 = icmp ugt i64 %15, %16, !dbg !2006
  br i1 %cmp7, label %if.then.8, label %if.else.14, !dbg !2007

if.then.8:                                        ; preds = %if.else
  %17 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !2008
  %18 = load i64, i64* %check.addr, align 8, !dbg !2011
  %19 = load i64, i64* %net, align 8, !dbg !2012
  %call9 = call i64 @ExistPathAboveVCG(%struct._nodeVCGType* %17, i64 %18, i64 %19), !dbg !2013
  %tobool10 = icmp ne i64 %call9, 0, !dbg !2013
  br i1 %tobool10, label %if.then.11, label %if.end.13, !dbg !2014

if.then.11:                                       ; preds = %if.then.8
  %20 = load i64, i64* %vcv, align 8, !dbg !2015
  %inc12 = add i64 %20, 1, !dbg !2015
  store i64 %inc12, i64* %vcv, align 8, !dbg !2015
  br label %if.end.13, !dbg !2017

if.end.13:                                        ; preds = %if.then.11, %if.then.8
  br label %if.end.22, !dbg !2018

if.else.14:                                       ; preds = %if.else
  %21 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !2019
  %22 = load i64, i64* %net, align 8, !dbg !2022
  %23 = load i64, i64* %check.addr, align 8, !dbg !2023
  %call15 = call i64 @ExistPathAboveVCG(%struct._nodeVCGType* %21, i64 %22, i64 %23), !dbg !2024
  %tobool16 = icmp ne i64 %call15, 0, !dbg !2024
  br i1 %tobool16, label %if.then.19, label %lor.lhs.false, !dbg !2025

lor.lhs.false:                                    ; preds = %if.else.14
  %24 = load %struct._nodeVCGType*, %struct._nodeVCGType** %VCG.addr, align 8, !dbg !2026
  %25 = load i64, i64* %check.addr, align 8, !dbg !2028
  %26 = load i64, i64* %net, align 8, !dbg !2029
  %call17 = call i64 @ExistPathAboveVCG(%struct._nodeVCGType* %24, i64 %25, i64 %26), !dbg !2030
  %tobool18 = icmp ne i64 %call17, 0, !dbg !2030
  br i1 %tobool18, label %if.then.19, label %if.end.21, !dbg !2031

if.then.19:                                       ; preds = %lor.lhs.false, %if.else.14
  %27 = load i64, i64* %vcv, align 8, !dbg !2032
  %inc20 = add i64 %27, 1, !dbg !2032
  store i64 %inc20, i64* %vcv, align 8, !dbg !2032
  br label %if.end.21, !dbg !2034

if.end.21:                                        ; preds = %if.then.19, %lor.lhs.false
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.end.13
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.end
  br label %if.end.24, !dbg !2035

if.end.24:                                        ; preds = %if.end.23, %for.body
  br label %for.inc, !dbg !2036

for.inc:                                          ; preds = %if.end.24
  %28 = load i64, i64* %net, align 8, !dbg !2037
  %inc25 = add i64 %28, 1, !dbg !2037
  store i64 %inc25, i64* %net, align 8, !dbg !2037
  br label %for.cond, !dbg !2038

for.end:                                          ; preds = %for.cond
  %29 = load i64, i64* %vcv, align 8, !dbg !2039
  ret i64 %29, !dbg !2040
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!81, !82}
!llvm.ident = !{!83}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !29, globals: !71)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Ptrdist/yacr2")
!2 = !{}
!3 = !{!4, !10, !26, !27, !28}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIDerivedType(tag: DW_TAG_typedef, name: "nodeVCGType", file: !6, line: 57, baseType: !7)
!6 = !DIFile(filename: "./vcg.h", directory: "/home/gleison/tf/Benchmarks/Ptrdist/yacr2")
!7 = !DICompositeType(tag: DW_TAG_structure_type, name: "_nodeVCGType", file: !6, line: 48, size: 512, align: 64, elements: !8)
!8 = !{!9, !19, !20, !21, !22, !23, !24, !25}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "netsAboveHook", scope: !7, file: !6, line: 49, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DIDerivedType(tag: DW_TAG_typedef, name: "constraintVCGType", file: !6, line: 46, baseType: !12)
!12 = !DICompositeType(tag: DW_TAG_structure_type, name: "_constraintVCGType", file: !6, line: 41, size: 256, align: 64, elements: !13)
!13 = !{!14, !16, !17, !18}
!14 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !12, file: !6, line: 42, baseType: !15, size: 64, align: 64)
!15 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "bot", scope: !12, file: !6, line: 43, baseType: !15, size: 64, align: 64, offset: 64)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "col", scope: !12, file: !6, line: 44, baseType: !15, size: 64, align: 64, offset: 128)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "removed", scope: !12, file: !6, line: 45, baseType: !15, size: 64, align: 64, offset: 192)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "netsAbove", scope: !7, file: !6, line: 50, baseType: !15, size: 64, align: 64, offset: 64)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "netsAboveLabel", scope: !7, file: !6, line: 51, baseType: !15, size: 64, align: 64, offset: 128)
!21 = !DIDerivedType(tag: DW_TAG_member, name: "netsAboveReached", scope: !7, file: !6, line: 52, baseType: !15, size: 64, align: 64, offset: 192)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "netsBelowHook", scope: !7, file: !6, line: 53, baseType: !10, size: 64, align: 64, offset: 256)
!23 = !DIDerivedType(tag: DW_TAG_member, name: "netsBelow", scope: !7, file: !6, line: 54, baseType: !15, size: 64, align: 64, offset: 320)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "netsBelowLabel", scope: !7, file: !6, line: 55, baseType: !15, size: 64, align: 64, offset: 384)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "netsBelowReached", scope: !7, file: !6, line: 56, baseType: !15, size: 64, align: 64, offset: 448)
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64, align: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!28 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!29 = !{!30, !34, !35, !36, !39, !40, !43, !44, !47, !50, !53, !56, !57, !60, !63, !64, !67, !68}
!30 = !DISubprogram(name: "AllocVCG", scope: !31, file: !31, line: 30, type: !32, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @AllocVCG, variables: !2)
!31 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Ptrdist/yacr2/tmp.c", directory: "/home/gleison/tf/Benchmarks/Ptrdist/yacr2")
!32 = !DISubroutineType(types: !33)
!33 = !{null}
!34 = !DISubprogram(name: "FreeVCG", scope: !31, file: !31, line: 40, type: !32, isLocal: false, isDefinition: true, scopeLine: 40, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @FreeVCG, variables: !2)
!35 = !DISubprogram(name: "BuildVCG", scope: !31, file: !31, line: 49, type: !32, isLocal: false, isDefinition: true, scopeLine: 49, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @BuildVCG, variables: !2)
!36 = !DISubprogram(name: "DFSClearVCG", scope: !31, file: !31, line: 137, type: !37, isLocal: false, isDefinition: true, scopeLine: 137, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct._nodeVCGType*)* @DFSClearVCG, variables: !2)
!37 = !DISubroutineType(types: !38)
!38 = !{null, !4}
!39 = !DISubprogram(name: "DumpVCG", scope: !31, file: !31, line: 148, type: !37, isLocal: false, isDefinition: true, scopeLine: 148, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct._nodeVCGType*)* @DumpVCG, variables: !2)
!40 = !DISubprogram(name: "DFSAboveVCG", scope: !31, file: !31, line: 174, type: !41, isLocal: false, isDefinition: true, scopeLine: 175, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct._nodeVCGType*, i64)* @DFSAboveVCG, variables: !2)
!41 = !DISubroutineType(types: !42)
!42 = !{null, !4, !15}
!43 = !DISubprogram(name: "DFSBelowVCG", scope: !31, file: !31, line: 191, type: !41, isLocal: false, isDefinition: true, scopeLine: 192, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct._nodeVCGType*, i64)* @DFSBelowVCG, variables: !2)
!44 = !DISubprogram(name: "SCCofVCG", scope: !31, file: !31, line: 208, type: !45, isLocal: false, isDefinition: true, scopeLine: 210, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct._nodeVCGType*, i64*, i64*)* @SCCofVCG, variables: !2)
!45 = !DISubroutineType(types: !46)
!46 = !{null, !4, !26, !26}
!47 = !DISubprogram(name: "SCC_DFSAboveVCG", scope: !31, file: !31, line: 285, type: !48, isLocal: false, isDefinition: true, scopeLine: 287, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct._nodeVCGType*, i64, i64*)* @SCC_DFSAboveVCG, variables: !2)
!48 = !DISubroutineType(types: !49)
!49 = !{null, !4, !15, !26}
!50 = !DISubprogram(name: "SCC_DFSBelowVCG", scope: !31, file: !31, line: 305, type: !51, isLocal: false, isDefinition: true, scopeLine: 307, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct._nodeVCGType*, i64, i64)* @SCC_DFSBelowVCG, variables: !2)
!51 = !DISubroutineType(types: !52)
!52 = !{null, !4, !15, !15}
!53 = !DISubprogram(name: "DumpSCC", scope: !31, file: !31, line: 324, type: !54, isLocal: false, isDefinition: true, scopeLine: 325, flags: DIFlagPrototyped, isOptimized: false, function: void (i64*, i64*)* @DumpSCC, variables: !2)
!54 = !DISubroutineType(types: !55)
!55 = !{null, !26, !26}
!56 = !DISubprogram(name: "AcyclicVCG", scope: !31, file: !31, line: 342, type: !32, isLocal: false, isDefinition: true, scopeLine: 342, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @AcyclicVCG, variables: !2)
!57 = !DISubprogram(name: "RemoveConstraintVCG", scope: !31, file: !31, line: 470, type: !58, isLocal: false, isDefinition: true, scopeLine: 473, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct._nodeVCGType*, i64*, i64*, %struct._constraintVCGType**)* @RemoveConstraintVCG, variables: !2)
!58 = !DISubroutineType(types: !59)
!59 = !{null, !4, !26, !26, !27}
!60 = !DISubprogram(name: "ExistPathAboveVCG", scope: !31, file: !31, line: 598, type: !61, isLocal: false, isDefinition: true, scopeLine: 600, flags: DIFlagPrototyped, isOptimized: false, function: i64 (%struct._nodeVCGType*, i64, i64)* @ExistPathAboveVCG, variables: !2)
!61 = !DISubroutineType(types: !62)
!62 = !{!15, !4, !15, !15}
!63 = !DISubprogram(name: "LongestPathVCG", scope: !31, file: !31, line: 606, type: !41, isLocal: false, isDefinition: true, scopeLine: 607, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct._nodeVCGType*, i64)* @LongestPathVCG, variables: !2)
!64 = !DISubprogram(name: "DFSAboveLongestPathVCG", scope: !31, file: !31, line: 665, type: !65, isLocal: false, isDefinition: true, scopeLine: 666, flags: DIFlagPrototyped, isOptimized: false, function: i64 (%struct._nodeVCGType*, i64)* @DFSAboveLongestPathVCG, variables: !2)
!65 = !DISubroutineType(types: !66)
!66 = !{!15, !4, !15}
!67 = !DISubprogram(name: "DFSBelowLongestPathVCG", scope: !31, file: !31, line: 689, type: !65, isLocal: false, isDefinition: true, scopeLine: 690, flags: DIFlagPrototyped, isOptimized: false, function: i64 (%struct._nodeVCGType*, i64)* @DFSBelowLongestPathVCG, variables: !2)
!68 = !DISubprogram(name: "VCV", scope: !31, file: !31, line: 713, type: !69, isLocal: false, isDefinition: true, scopeLine: 716, flags: DIFlagPrototyped, isOptimized: false, function: i64 (%struct._nodeVCGType*, i64, i64, i64*)* @VCV, variables: !2)
!69 = !DISubroutineType(types: !70)
!70 = !{!15, !4, !15, !15, !26}
!71 = !{!72, !73, !74, !75, !76, !77, !78, !79, !80}
!72 = !DIGlobalVariable(name: "VCG", scope: !0, file: !6, line: 68, type: !4, isLocal: false, isDefinition: true, variable: %struct._nodeVCGType** @VCG)
!73 = !DIGlobalVariable(name: "storageRootVCG", scope: !0, file: !6, line: 69, type: !10, isLocal: false, isDefinition: true, variable: %struct._constraintVCGType** @storageRootVCG)
!74 = !DIGlobalVariable(name: "storageVCG", scope: !0, file: !6, line: 70, type: !10, isLocal: false, isDefinition: true, variable: %struct._constraintVCGType** @storageVCG)
!75 = !DIGlobalVariable(name: "storageLimitVCG", scope: !0, file: !6, line: 71, type: !15, isLocal: false, isDefinition: true, variable: i64* @storageLimitVCG)
!76 = !DIGlobalVariable(name: "removeVCG", scope: !0, file: !6, line: 72, type: !27, isLocal: false, isDefinition: true, variable: %struct._constraintVCGType*** @removeVCG)
!77 = !DIGlobalVariable(name: "removeTotalVCG", scope: !0, file: !6, line: 73, type: !15, isLocal: false, isDefinition: true, variable: i64* @removeTotalVCG)
!78 = !DIGlobalVariable(name: "SCC", scope: !0, file: !6, line: 74, type: !26, isLocal: false, isDefinition: true, variable: i64** @SCC)
!79 = !DIGlobalVariable(name: "totalSCC", scope: !0, file: !6, line: 75, type: !15, isLocal: false, isDefinition: true, variable: i64* @totalSCC)
!80 = !DIGlobalVariable(name: "perSCC", scope: !0, file: !6, line: 76, type: !26, isLocal: false, isDefinition: true, variable: i64** @perSCC)
!81 = !{i32 2, !"Dwarf Version", i32 4}
!82 = !{i32 2, !"Debug Info Version", i32 3}
!83 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!84 = !DILocation(line: 31, column: 32, scope: !30)
!85 = !DILocation(line: 31, column: 44, scope: !30)
!86 = !DILocation(line: 31, column: 49, scope: !30)
!87 = !DILocation(line: 31, column: 24, scope: !30)
!88 = !DILocation(line: 31, column: 9, scope: !30)
!89 = !DILocation(line: 31, column: 7, scope: !30)
!90 = !DILocation(line: 32, column: 49, scope: !30)
!91 = !DILocation(line: 32, column: 61, scope: !30)
!92 = !DILocation(line: 32, column: 69, scope: !30)
!93 = !DILocation(line: 32, column: 81, scope: !30)
!94 = !DILocation(line: 32, column: 66, scope: !30)
!95 = !DILocation(line: 32, column: 86, scope: !30)
!96 = !DILocation(line: 32, column: 41, scope: !30)
!97 = !DILocation(line: 32, column: 20, scope: !30)
!98 = !DILocation(line: 32, column: 18, scope: !30)
!99 = !DILocation(line: 33, column: 16, scope: !30)
!100 = !DILocation(line: 33, column: 14, scope: !30)
!101 = !DILocation(line: 34, column: 22, scope: !30)
!102 = !DILocation(line: 34, column: 34, scope: !30)
!103 = !DILocation(line: 34, column: 42, scope: !30)
!104 = !DILocation(line: 34, column: 54, scope: !30)
!105 = !DILocation(line: 34, column: 39, scope: !30)
!106 = !DILocation(line: 34, column: 19, scope: !30)
!107 = !DILocation(line: 35, column: 26, scope: !30)
!108 = !DILocation(line: 35, column: 38, scope: !30)
!109 = !DILocation(line: 35, column: 43, scope: !30)
!110 = !DILocation(line: 35, column: 18, scope: !30)
!111 = !DILocation(line: 35, column: 9, scope: !30)
!112 = !DILocation(line: 35, column: 7, scope: !30)
!113 = !DILocation(line: 36, column: 29, scope: !30)
!114 = !DILocation(line: 36, column: 41, scope: !30)
!115 = !DILocation(line: 36, column: 46, scope: !30)
!116 = !DILocation(line: 36, column: 21, scope: !30)
!117 = !DILocation(line: 36, column: 12, scope: !30)
!118 = !DILocation(line: 36, column: 10, scope: !30)
!119 = !DILocation(line: 37, column: 45, scope: !30)
!120 = !DILocation(line: 37, column: 57, scope: !30)
!121 = !DILocation(line: 37, column: 65, scope: !30)
!122 = !DILocation(line: 37, column: 77, scope: !30)
!123 = !DILocation(line: 37, column: 62, scope: !30)
!124 = !DILocation(line: 37, column: 82, scope: !30)
!125 = !DILocation(line: 37, column: 37, scope: !30)
!126 = !DILocation(line: 37, column: 15, scope: !30)
!127 = !DILocation(line: 37, column: 13, scope: !30)
!128 = !DILocation(line: 38, column: 1, scope: !30)
!129 = !DILocation(line: 41, column: 8, scope: !34)
!130 = !DILocation(line: 41, column: 3, scope: !34)
!131 = !DILocation(line: 42, column: 8, scope: !34)
!132 = !DILocation(line: 42, column: 3, scope: !34)
!133 = !DILocation(line: 43, column: 19, scope: !34)
!134 = !DILocation(line: 44, column: 8, scope: !34)
!135 = !DILocation(line: 44, column: 3, scope: !34)
!136 = !DILocation(line: 45, column: 8, scope: !34)
!137 = !DILocation(line: 45, column: 3, scope: !34)
!138 = !DILocation(line: 46, column: 8, scope: !34)
!139 = !DILocation(line: 46, column: 3, scope: !34)
!140 = !DILocation(line: 47, column: 1, scope: !34)
!141 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "col", scope: !35, file: !31, line: 50, type: !15)
!142 = !DIExpression()
!143 = !DILocation(line: 50, column: 9, scope: !35)
!144 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "net", scope: !35, file: !31, line: 51, type: !15)
!145 = !DILocation(line: 51, column: 9, scope: !35)
!146 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "constraint", scope: !35, file: !31, line: 52, type: !15)
!147 = !DILocation(line: 52, column: 9, scope: !35)
!148 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "check", scope: !35, file: !31, line: 53, type: !15)
!149 = !DILocation(line: 53, column: 9, scope: !35)
!150 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "add", scope: !35, file: !31, line: 54, type: !15)
!151 = !DILocation(line: 54, column: 9, scope: !35)
!152 = !DILocation(line: 59, column: 3, scope: !35)
!153 = !DILocation(line: 64, column: 12, scope: !154)
!154 = distinct !DILexicalBlock(scope: !35, file: !31, line: 64, column: 3)
!155 = !DILocation(line: 64, column: 8, scope: !154)
!156 = !DILocation(line: 64, column: 17, scope: !157)
!157 = !DILexicalBlockFile(scope: !158, file: !31, discriminator: 2)
!158 = !DILexicalBlockFile(scope: !159, file: !31, discriminator: 1)
!159 = distinct !DILexicalBlock(scope: !154, file: !31, line: 64, column: 3)
!160 = !DILocation(line: 64, column: 24, scope: !159)
!161 = !DILocation(line: 64, column: 21, scope: !159)
!162 = !DILocation(line: 64, column: 3, scope: !154)
!163 = !DILocation(line: 68, column: 16, scope: !164)
!164 = distinct !DILexicalBlock(scope: !159, file: !31, line: 64, column: 44)
!165 = !DILocation(line: 69, column: 30, scope: !164)
!166 = !DILocation(line: 69, column: 9, scope: !164)
!167 = !DILocation(line: 69, column: 5, scope: !164)
!168 = !DILocation(line: 69, column: 14, scope: !164)
!169 = !DILocation(line: 69, column: 28, scope: !164)
!170 = !DILocation(line: 70, column: 14, scope: !171)
!171 = distinct !DILexicalBlock(scope: !164, file: !31, line: 70, column: 5)
!172 = !DILocation(line: 70, column: 10, scope: !171)
!173 = !DILocation(line: 70, column: 19, scope: !174)
!174 = !DILexicalBlockFile(scope: !175, file: !31, discriminator: 2)
!175 = !DILexicalBlockFile(scope: !176, file: !31, discriminator: 1)
!176 = distinct !DILexicalBlock(scope: !171, file: !31, line: 70, column: 5)
!177 = !DILocation(line: 70, column: 26, scope: !176)
!178 = !DILocation(line: 70, column: 23, scope: !176)
!179 = !DILocation(line: 70, column: 5, scope: !171)
!180 = !DILocation(line: 71, column: 16, scope: !181)
!181 = distinct !DILexicalBlock(scope: !182, file: !31, line: 71, column: 11)
!182 = distinct !DILexicalBlock(scope: !176, file: !31, line: 70, column: 49)
!183 = !DILocation(line: 71, column: 12, scope: !181)
!184 = !DILocation(line: 71, column: 24, scope: !181)
!185 = !DILocation(line: 71, column: 21, scope: !181)
!186 = !DILocation(line: 71, column: 29, scope: !181)
!187 = !DILocation(line: 71, column: 37, scope: !188)
!188 = !DILexicalBlockFile(scope: !181, file: !31, discriminator: 1)
!189 = !DILocation(line: 71, column: 33, scope: !181)
!190 = !DILocation(line: 71, column: 45, scope: !181)
!191 = !DILocation(line: 71, column: 42, scope: !181)
!192 = !DILocation(line: 71, column: 50, scope: !181)
!193 = !DILocation(line: 71, column: 58, scope: !194)
!194 = !DILexicalBlockFile(scope: !181, file: !31, discriminator: 2)
!195 = !DILocation(line: 71, column: 54, scope: !181)
!196 = !DILocation(line: 71, column: 63, scope: !181)
!197 = !DILocation(line: 71, column: 11, scope: !182)
!198 = !DILocation(line: 75, column: 13, scope: !199)
!199 = distinct !DILexicalBlock(scope: !181, file: !31, line: 71, column: 70)
!200 = !DILocation(line: 76, column: 20, scope: !201)
!201 = distinct !DILexicalBlock(scope: !199, file: !31, line: 76, column: 9)
!202 = !DILocation(line: 76, column: 14, scope: !201)
!203 = !DILocation(line: 76, column: 25, scope: !204)
!204 = !DILexicalBlockFile(scope: !205, file: !31, discriminator: 2)
!205 = !DILexicalBlockFile(scope: !206, file: !31, discriminator: 1)
!206 = distinct !DILexicalBlock(scope: !201, file: !31, line: 76, column: 9)
!207 = !DILocation(line: 76, column: 33, scope: !206)
!208 = !DILocation(line: 76, column: 31, scope: !206)
!209 = !DILocation(line: 76, column: 9, scope: !201)
!210 = !DILocation(line: 77, column: 38, scope: !211)
!211 = distinct !DILexicalBlock(scope: !212, file: !31, line: 77, column: 15)
!212 = distinct !DILexicalBlock(scope: !206, file: !31, line: 76, column: 54)
!213 = !DILocation(line: 77, column: 19, scope: !211)
!214 = !DILocation(line: 77, column: 15, scope: !211)
!215 = !DILocation(line: 77, column: 24, scope: !211)
!216 = !DILocation(line: 77, column: 45, scope: !211)
!217 = !DILocation(line: 77, column: 56, scope: !211)
!218 = !DILocation(line: 77, column: 52, scope: !211)
!219 = !DILocation(line: 77, column: 49, scope: !211)
!220 = !DILocation(line: 77, column: 15, scope: !212)
!221 = !DILocation(line: 78, column: 17, scope: !222)
!222 = distinct !DILexicalBlock(scope: !211, file: !31, line: 77, column: 62)
!223 = !DILocation(line: 79, column: 13, scope: !222)
!224 = !DILocation(line: 81, column: 9, scope: !212)
!225 = !DILocation(line: 76, column: 50, scope: !206)
!226 = !DILocation(line: 76, column: 9, scope: !206)
!227 = !DILocation(line: 86, column: 13, scope: !228)
!228 = distinct !DILexicalBlock(scope: !199, file: !31, line: 86, column: 13)
!229 = !DILocation(line: 86, column: 13, scope: !199)
!230 = !DILocation(line: 87, column: 11, scope: !231)
!231 = distinct !DILexicalBlock(scope: !228, file: !31, line: 86, column: 18)
!232 = !DILocation(line: 87, column: 11, scope: !233)
!233 = !DILexicalBlockFile(scope: !231, file: !31, discriminator: 1)
!234 = !DILocation(line: 87, column: 11, scope: !235)
!235 = !DILexicalBlockFile(scope: !231, file: !31, discriminator: 2)
!236 = !DILocation(line: 88, column: 56, scope: !231)
!237 = !DILocation(line: 88, column: 52, scope: !231)
!238 = !DILocation(line: 88, column: 34, scope: !231)
!239 = !DILocation(line: 88, column: 15, scope: !231)
!240 = !DILocation(line: 88, column: 11, scope: !231)
!241 = !DILocation(line: 88, column: 20, scope: !231)
!242 = !DILocation(line: 88, column: 46, scope: !231)
!243 = !DILocation(line: 88, column: 50, scope: !231)
!244 = !DILocation(line: 89, column: 56, scope: !231)
!245 = !DILocation(line: 89, column: 52, scope: !231)
!246 = !DILocation(line: 89, column: 34, scope: !231)
!247 = !DILocation(line: 89, column: 15, scope: !231)
!248 = !DILocation(line: 89, column: 11, scope: !231)
!249 = !DILocation(line: 89, column: 20, scope: !231)
!250 = !DILocation(line: 89, column: 46, scope: !231)
!251 = !DILocation(line: 89, column: 50, scope: !231)
!252 = !DILocation(line: 90, column: 52, scope: !231)
!253 = !DILocation(line: 90, column: 34, scope: !231)
!254 = !DILocation(line: 90, column: 15, scope: !231)
!255 = !DILocation(line: 90, column: 11, scope: !231)
!256 = !DILocation(line: 90, column: 20, scope: !231)
!257 = !DILocation(line: 90, column: 46, scope: !231)
!258 = !DILocation(line: 90, column: 50, scope: !231)
!259 = !DILocation(line: 91, column: 34, scope: !231)
!260 = !DILocation(line: 91, column: 15, scope: !231)
!261 = !DILocation(line: 91, column: 11, scope: !231)
!262 = !DILocation(line: 91, column: 20, scope: !231)
!263 = !DILocation(line: 91, column: 46, scope: !231)
!264 = !DILocation(line: 91, column: 54, scope: !231)
!265 = !DILocation(line: 92, column: 21, scope: !231)
!266 = !DILocation(line: 93, column: 26, scope: !231)
!267 = !DILocation(line: 94, column: 21, scope: !231)
!268 = !DILocation(line: 95, column: 9, scope: !231)
!269 = !DILocation(line: 96, column: 7, scope: !199)
!270 = !DILocation(line: 97, column: 5, scope: !182)
!271 = !DILocation(line: 70, column: 45, scope: !176)
!272 = !DILocation(line: 70, column: 5, scope: !176)
!273 = !DILocation(line: 98, column: 26, scope: !164)
!274 = !DILocation(line: 98, column: 9, scope: !164)
!275 = !DILocation(line: 98, column: 5, scope: !164)
!276 = !DILocation(line: 98, column: 14, scope: !164)
!277 = !DILocation(line: 98, column: 24, scope: !164)
!278 = !DILocation(line: 103, column: 16, scope: !164)
!279 = !DILocation(line: 104, column: 30, scope: !164)
!280 = !DILocation(line: 104, column: 9, scope: !164)
!281 = !DILocation(line: 104, column: 5, scope: !164)
!282 = !DILocation(line: 104, column: 14, scope: !164)
!283 = !DILocation(line: 104, column: 28, scope: !164)
!284 = !DILocation(line: 105, column: 14, scope: !285)
!285 = distinct !DILexicalBlock(scope: !164, file: !31, line: 105, column: 5)
!286 = !DILocation(line: 105, column: 10, scope: !285)
!287 = !DILocation(line: 105, column: 19, scope: !288)
!288 = !DILexicalBlockFile(scope: !289, file: !31, discriminator: 2)
!289 = !DILexicalBlockFile(scope: !290, file: !31, discriminator: 1)
!290 = distinct !DILexicalBlock(scope: !285, file: !31, line: 105, column: 5)
!291 = !DILocation(line: 105, column: 26, scope: !290)
!292 = !DILocation(line: 105, column: 23, scope: !290)
!293 = !DILocation(line: 105, column: 5, scope: !285)
!294 = !DILocation(line: 106, column: 16, scope: !295)
!295 = distinct !DILexicalBlock(scope: !296, file: !31, line: 106, column: 11)
!296 = distinct !DILexicalBlock(scope: !290, file: !31, line: 105, column: 49)
!297 = !DILocation(line: 106, column: 12, scope: !295)
!298 = !DILocation(line: 106, column: 24, scope: !295)
!299 = !DILocation(line: 106, column: 21, scope: !295)
!300 = !DILocation(line: 106, column: 29, scope: !295)
!301 = !DILocation(line: 106, column: 37, scope: !302)
!302 = !DILexicalBlockFile(scope: !295, file: !31, discriminator: 1)
!303 = !DILocation(line: 106, column: 33, scope: !295)
!304 = !DILocation(line: 106, column: 45, scope: !295)
!305 = !DILocation(line: 106, column: 42, scope: !295)
!306 = !DILocation(line: 106, column: 50, scope: !295)
!307 = !DILocation(line: 106, column: 58, scope: !308)
!308 = !DILexicalBlockFile(scope: !295, file: !31, discriminator: 2)
!309 = !DILocation(line: 106, column: 54, scope: !295)
!310 = !DILocation(line: 106, column: 63, scope: !295)
!311 = !DILocation(line: 106, column: 11, scope: !296)
!312 = !DILocation(line: 110, column: 13, scope: !313)
!313 = distinct !DILexicalBlock(scope: !295, file: !31, line: 106, column: 70)
!314 = !DILocation(line: 111, column: 20, scope: !315)
!315 = distinct !DILexicalBlock(scope: !313, file: !31, line: 111, column: 9)
!316 = !DILocation(line: 111, column: 14, scope: !315)
!317 = !DILocation(line: 111, column: 25, scope: !318)
!318 = !DILexicalBlockFile(scope: !319, file: !31, discriminator: 2)
!319 = !DILexicalBlockFile(scope: !320, file: !31, discriminator: 1)
!320 = distinct !DILexicalBlock(scope: !315, file: !31, line: 111, column: 9)
!321 = !DILocation(line: 111, column: 33, scope: !320)
!322 = !DILocation(line: 111, column: 31, scope: !320)
!323 = !DILocation(line: 111, column: 9, scope: !315)
!324 = !DILocation(line: 112, column: 38, scope: !325)
!325 = distinct !DILexicalBlock(scope: !326, file: !31, line: 112, column: 15)
!326 = distinct !DILexicalBlock(scope: !320, file: !31, line: 111, column: 54)
!327 = !DILocation(line: 112, column: 19, scope: !325)
!328 = !DILocation(line: 112, column: 15, scope: !325)
!329 = !DILocation(line: 112, column: 24, scope: !325)
!330 = !DILocation(line: 112, column: 45, scope: !325)
!331 = !DILocation(line: 112, column: 56, scope: !325)
!332 = !DILocation(line: 112, column: 52, scope: !325)
!333 = !DILocation(line: 112, column: 49, scope: !325)
!334 = !DILocation(line: 112, column: 15, scope: !326)
!335 = !DILocation(line: 113, column: 17, scope: !336)
!336 = distinct !DILexicalBlock(scope: !325, file: !31, line: 112, column: 62)
!337 = !DILocation(line: 114, column: 13, scope: !336)
!338 = !DILocation(line: 116, column: 9, scope: !326)
!339 = !DILocation(line: 111, column: 50, scope: !320)
!340 = !DILocation(line: 111, column: 9, scope: !320)
!341 = !DILocation(line: 121, column: 13, scope: !342)
!342 = distinct !DILexicalBlock(scope: !313, file: !31, line: 121, column: 13)
!343 = !DILocation(line: 121, column: 13, scope: !313)
!344 = !DILocation(line: 122, column: 11, scope: !345)
!345 = distinct !DILexicalBlock(scope: !342, file: !31, line: 121, column: 18)
!346 = !DILocation(line: 122, column: 11, scope: !347)
!347 = !DILexicalBlockFile(scope: !345, file: !31, discriminator: 1)
!348 = !DILocation(line: 122, column: 11, scope: !349)
!349 = !DILexicalBlockFile(scope: !345, file: !31, discriminator: 2)
!350 = !DILocation(line: 123, column: 56, scope: !345)
!351 = !DILocation(line: 123, column: 52, scope: !345)
!352 = !DILocation(line: 123, column: 34, scope: !345)
!353 = !DILocation(line: 123, column: 15, scope: !345)
!354 = !DILocation(line: 123, column: 11, scope: !345)
!355 = !DILocation(line: 123, column: 20, scope: !345)
!356 = !DILocation(line: 123, column: 46, scope: !345)
!357 = !DILocation(line: 123, column: 50, scope: !345)
!358 = !DILocation(line: 124, column: 56, scope: !345)
!359 = !DILocation(line: 124, column: 52, scope: !345)
!360 = !DILocation(line: 124, column: 34, scope: !345)
!361 = !DILocation(line: 124, column: 15, scope: !345)
!362 = !DILocation(line: 124, column: 11, scope: !345)
!363 = !DILocation(line: 124, column: 20, scope: !345)
!364 = !DILocation(line: 124, column: 46, scope: !345)
!365 = !DILocation(line: 124, column: 50, scope: !345)
!366 = !DILocation(line: 125, column: 52, scope: !345)
!367 = !DILocation(line: 125, column: 34, scope: !345)
!368 = !DILocation(line: 125, column: 15, scope: !345)
!369 = !DILocation(line: 125, column: 11, scope: !345)
!370 = !DILocation(line: 125, column: 20, scope: !345)
!371 = !DILocation(line: 125, column: 46, scope: !345)
!372 = !DILocation(line: 125, column: 50, scope: !345)
!373 = !DILocation(line: 126, column: 34, scope: !345)
!374 = !DILocation(line: 126, column: 15, scope: !345)
!375 = !DILocation(line: 126, column: 11, scope: !345)
!376 = !DILocation(line: 126, column: 20, scope: !345)
!377 = !DILocation(line: 126, column: 46, scope: !345)
!378 = !DILocation(line: 126, column: 54, scope: !345)
!379 = !DILocation(line: 127, column: 21, scope: !345)
!380 = !DILocation(line: 128, column: 26, scope: !345)
!381 = !DILocation(line: 129, column: 21, scope: !345)
!382 = !DILocation(line: 130, column: 9, scope: !345)
!383 = !DILocation(line: 131, column: 7, scope: !313)
!384 = !DILocation(line: 132, column: 5, scope: !296)
!385 = !DILocation(line: 105, column: 45, scope: !290)
!386 = !DILocation(line: 105, column: 5, scope: !290)
!387 = !DILocation(line: 133, column: 26, scope: !164)
!388 = !DILocation(line: 133, column: 9, scope: !164)
!389 = !DILocation(line: 133, column: 5, scope: !164)
!390 = !DILocation(line: 133, column: 14, scope: !164)
!391 = !DILocation(line: 133, column: 24, scope: !164)
!392 = !DILocation(line: 134, column: 3, scope: !164)
!393 = !DILocation(line: 64, column: 40, scope: !159)
!394 = !DILocation(line: 64, column: 3, scope: !159)
!395 = !DILocation(line: 135, column: 1, scope: !35)
!396 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !36, file: !31, line: 137, type: !4)
!397 = !DILocation(line: 137, column: 31, scope: !36)
!398 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "net", scope: !36, file: !31, line: 138, type: !15)
!399 = !DILocation(line: 138, column: 9, scope: !36)
!400 = !DILocation(line: 140, column: 12, scope: !401)
!401 = distinct !DILexicalBlock(scope: !36, file: !31, line: 140, column: 3)
!402 = !DILocation(line: 140, column: 8, scope: !401)
!403 = !DILocation(line: 140, column: 17, scope: !404)
!404 = !DILexicalBlockFile(scope: !405, file: !31, discriminator: 2)
!405 = !DILexicalBlockFile(scope: !406, file: !31, discriminator: 1)
!406 = distinct !DILexicalBlock(scope: !401, file: !31, line: 140, column: 3)
!407 = !DILocation(line: 140, column: 24, scope: !406)
!408 = !DILocation(line: 140, column: 21, scope: !406)
!409 = !DILocation(line: 140, column: 3, scope: !401)
!410 = !DILocation(line: 141, column: 9, scope: !411)
!411 = distinct !DILexicalBlock(scope: !406, file: !31, line: 140, column: 44)
!412 = !DILocation(line: 141, column: 5, scope: !411)
!413 = !DILocation(line: 141, column: 14, scope: !411)
!414 = !DILocation(line: 141, column: 29, scope: !411)
!415 = !DILocation(line: 142, column: 9, scope: !411)
!416 = !DILocation(line: 142, column: 5, scope: !411)
!417 = !DILocation(line: 142, column: 14, scope: !411)
!418 = !DILocation(line: 142, column: 31, scope: !411)
!419 = !DILocation(line: 143, column: 9, scope: !411)
!420 = !DILocation(line: 143, column: 5, scope: !411)
!421 = !DILocation(line: 143, column: 14, scope: !411)
!422 = !DILocation(line: 143, column: 29, scope: !411)
!423 = !DILocation(line: 144, column: 9, scope: !411)
!424 = !DILocation(line: 144, column: 5, scope: !411)
!425 = !DILocation(line: 144, column: 14, scope: !411)
!426 = !DILocation(line: 144, column: 31, scope: !411)
!427 = !DILocation(line: 145, column: 3, scope: !411)
!428 = !DILocation(line: 140, column: 40, scope: !406)
!429 = !DILocation(line: 140, column: 3, scope: !406)
!430 = !DILocation(line: 146, column: 1, scope: !36)
!431 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !39, file: !31, line: 148, type: !4)
!432 = !DILocation(line: 148, column: 27, scope: !39)
!433 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "net", scope: !39, file: !31, line: 149, type: !15)
!434 = !DILocation(line: 149, column: 9, scope: !39)
!435 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "which", scope: !39, file: !31, line: 150, type: !15)
!436 = !DILocation(line: 150, column: 9, scope: !39)
!437 = !DILocation(line: 152, column: 12, scope: !438)
!438 = distinct !DILexicalBlock(scope: !39, file: !31, line: 152, column: 3)
!439 = !DILocation(line: 152, column: 8, scope: !438)
!440 = !DILocation(line: 152, column: 17, scope: !441)
!441 = !DILexicalBlockFile(scope: !442, file: !31, discriminator: 2)
!442 = !DILexicalBlockFile(scope: !443, file: !31, discriminator: 1)
!443 = distinct !DILexicalBlock(scope: !438, file: !31, line: 152, column: 3)
!444 = !DILocation(line: 152, column: 24, scope: !443)
!445 = !DILocation(line: 152, column: 21, scope: !443)
!446 = !DILocation(line: 152, column: 3, scope: !438)
!447 = !DILocation(line: 153, column: 22, scope: !448)
!448 = distinct !DILexicalBlock(scope: !443, file: !31, line: 152, column: 44)
!449 = !DILocation(line: 153, column: 5, scope: !448)
!450 = !DILocation(line: 154, column: 5, scope: !448)
!451 = !DILocation(line: 155, column: 16, scope: !452)
!452 = distinct !DILexicalBlock(scope: !448, file: !31, line: 155, column: 5)
!453 = !DILocation(line: 155, column: 10, scope: !452)
!454 = !DILocation(line: 155, column: 21, scope: !455)
!455 = !DILexicalBlockFile(scope: !456, file: !31, discriminator: 2)
!456 = !DILexicalBlockFile(scope: !457, file: !31, discriminator: 1)
!457 = distinct !DILexicalBlock(scope: !452, file: !31, line: 155, column: 5)
!458 = !DILocation(line: 155, column: 33, scope: !457)
!459 = !DILocation(line: 155, column: 29, scope: !457)
!460 = !DILocation(line: 155, column: 38, scope: !457)
!461 = !DILocation(line: 155, column: 27, scope: !457)
!462 = !DILocation(line: 155, column: 5, scope: !452)
!463 = !DILocation(line: 156, column: 35, scope: !464)
!464 = distinct !DILexicalBlock(scope: !465, file: !31, line: 156, column: 11)
!465 = distinct !DILexicalBlock(scope: !457, file: !31, line: 155, column: 58)
!466 = !DILocation(line: 156, column: 16, scope: !464)
!467 = !DILocation(line: 156, column: 12, scope: !464)
!468 = !DILocation(line: 156, column: 21, scope: !464)
!469 = !DILocation(line: 156, column: 42, scope: !464)
!470 = !DILocation(line: 156, column: 11, scope: !465)
!471 = !DILocation(line: 157, column: 9, scope: !472)
!472 = distinct !DILexicalBlock(scope: !464, file: !31, line: 156, column: 51)
!473 = !DILocation(line: 157, column: 9, scope: !474)
!474 = !DILexicalBlockFile(scope: !472, file: !31, discriminator: 1)
!475 = !DILocation(line: 157, column: 9, scope: !476)
!476 = !DILexicalBlockFile(scope: !472, file: !31, discriminator: 2)
!477 = !DILocation(line: 158, column: 46, scope: !472)
!478 = !DILocation(line: 158, column: 27, scope: !472)
!479 = !DILocation(line: 158, column: 23, scope: !472)
!480 = !DILocation(line: 158, column: 32, scope: !472)
!481 = !DILocation(line: 158, column: 53, scope: !472)
!482 = !DILocation(line: 158, column: 9, scope: !472)
!483 = !DILocation(line: 159, column: 7, scope: !472)
!484 = !DILocation(line: 160, column: 5, scope: !465)
!485 = !DILocation(line: 155, column: 54, scope: !457)
!486 = !DILocation(line: 155, column: 5, scope: !457)
!487 = !DILocation(line: 162, column: 5, scope: !448)
!488 = !DILocation(line: 163, column: 5, scope: !448)
!489 = !DILocation(line: 164, column: 16, scope: !490)
!490 = distinct !DILexicalBlock(scope: !448, file: !31, line: 164, column: 5)
!491 = !DILocation(line: 164, column: 10, scope: !490)
!492 = !DILocation(line: 164, column: 21, scope: !493)
!493 = !DILexicalBlockFile(scope: !494, file: !31, discriminator: 2)
!494 = !DILexicalBlockFile(scope: !495, file: !31, discriminator: 1)
!495 = distinct !DILexicalBlock(scope: !490, file: !31, line: 164, column: 5)
!496 = !DILocation(line: 164, column: 33, scope: !495)
!497 = !DILocation(line: 164, column: 29, scope: !495)
!498 = !DILocation(line: 164, column: 38, scope: !495)
!499 = !DILocation(line: 164, column: 27, scope: !495)
!500 = !DILocation(line: 164, column: 5, scope: !490)
!501 = !DILocation(line: 165, column: 35, scope: !502)
!502 = distinct !DILexicalBlock(scope: !503, file: !31, line: 165, column: 11)
!503 = distinct !DILexicalBlock(scope: !495, file: !31, line: 164, column: 58)
!504 = !DILocation(line: 165, column: 16, scope: !502)
!505 = !DILocation(line: 165, column: 12, scope: !502)
!506 = !DILocation(line: 165, column: 21, scope: !502)
!507 = !DILocation(line: 165, column: 42, scope: !502)
!508 = !DILocation(line: 165, column: 11, scope: !503)
!509 = !DILocation(line: 166, column: 9, scope: !510)
!510 = distinct !DILexicalBlock(scope: !502, file: !31, line: 165, column: 51)
!511 = !DILocation(line: 166, column: 9, scope: !512)
!512 = !DILexicalBlockFile(scope: !510, file: !31, discriminator: 1)
!513 = !DILocation(line: 166, column: 9, scope: !514)
!514 = !DILexicalBlockFile(scope: !510, file: !31, discriminator: 2)
!515 = !DILocation(line: 167, column: 46, scope: !510)
!516 = !DILocation(line: 167, column: 27, scope: !510)
!517 = !DILocation(line: 167, column: 23, scope: !510)
!518 = !DILocation(line: 167, column: 32, scope: !510)
!519 = !DILocation(line: 167, column: 53, scope: !510)
!520 = !DILocation(line: 167, column: 9, scope: !510)
!521 = !DILocation(line: 168, column: 7, scope: !510)
!522 = !DILocation(line: 169, column: 5, scope: !503)
!523 = !DILocation(line: 164, column: 54, scope: !495)
!524 = !DILocation(line: 164, column: 5, scope: !495)
!525 = !DILocation(line: 170, column: 5, scope: !448)
!526 = !DILocation(line: 171, column: 3, scope: !448)
!527 = !DILocation(line: 152, column: 40, scope: !443)
!528 = !DILocation(line: 152, column: 3, scope: !443)
!529 = !DILocation(line: 172, column: 1, scope: !39)
!530 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !40, file: !31, line: 174, type: !4)
!531 = !DILocation(line: 174, column: 31, scope: !40)
!532 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "net", arg: 2, scope: !40, file: !31, line: 175, type: !15)
!533 = !DILocation(line: 175, column: 24, scope: !40)
!534 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !40, file: !31, line: 176, type: !15)
!535 = !DILocation(line: 176, column: 9, scope: !40)
!536 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "above", scope: !40, file: !31, line: 177, type: !15)
!537 = !DILocation(line: 177, column: 9, scope: !40)
!538 = !DILocation(line: 179, column: 7, scope: !40)
!539 = !DILocation(line: 179, column: 3, scope: !40)
!540 = !DILocation(line: 179, column: 12, scope: !40)
!541 = !DILocation(line: 179, column: 29, scope: !40)
!542 = !DILocation(line: 180, column: 10, scope: !543)
!543 = distinct !DILexicalBlock(scope: !40, file: !31, line: 180, column: 3)
!544 = !DILocation(line: 180, column: 8, scope: !543)
!545 = !DILocation(line: 180, column: 15, scope: !546)
!546 = !DILexicalBlockFile(scope: !547, file: !31, discriminator: 2)
!547 = !DILexicalBlockFile(scope: !548, file: !31, discriminator: 1)
!548 = distinct !DILexicalBlock(scope: !543, file: !31, line: 180, column: 3)
!549 = !DILocation(line: 180, column: 23, scope: !548)
!550 = !DILocation(line: 180, column: 19, scope: !548)
!551 = !DILocation(line: 180, column: 28, scope: !548)
!552 = !DILocation(line: 180, column: 17, scope: !548)
!553 = !DILocation(line: 180, column: 3, scope: !543)
!554 = !DILocation(line: 181, column: 33, scope: !555)
!555 = distinct !DILexicalBlock(scope: !556, file: !31, line: 181, column: 9)
!556 = distinct !DILexicalBlock(scope: !548, file: !31, line: 180, column: 44)
!557 = !DILocation(line: 181, column: 14, scope: !555)
!558 = !DILocation(line: 181, column: 10, scope: !555)
!559 = !DILocation(line: 181, column: 19, scope: !555)
!560 = !DILocation(line: 181, column: 36, scope: !555)
!561 = !DILocation(line: 181, column: 9, scope: !556)
!562 = !DILocation(line: 182, column: 7, scope: !563)
!563 = distinct !DILexicalBlock(scope: !555, file: !31, line: 181, column: 45)
!564 = !DILocation(line: 182, column: 7, scope: !565)
!565 = !DILexicalBlockFile(scope: !563, file: !31, discriminator: 1)
!566 = !DILocation(line: 182, column: 7, scope: !567)
!567 = !DILexicalBlockFile(scope: !563, file: !31, discriminator: 2)
!568 = !DILocation(line: 183, column: 38, scope: !563)
!569 = !DILocation(line: 183, column: 19, scope: !563)
!570 = !DILocation(line: 183, column: 15, scope: !563)
!571 = !DILocation(line: 183, column: 24, scope: !563)
!572 = !DILocation(line: 183, column: 41, scope: !563)
!573 = !DILocation(line: 183, column: 13, scope: !563)
!574 = !DILocation(line: 184, column: 16, scope: !575)
!575 = distinct !DILexicalBlock(scope: !563, file: !31, line: 184, column: 11)
!576 = !DILocation(line: 184, column: 12, scope: !575)
!577 = !DILocation(line: 184, column: 23, scope: !575)
!578 = !DILocation(line: 184, column: 11, scope: !563)
!579 = !DILocation(line: 185, column: 21, scope: !580)
!580 = distinct !DILexicalBlock(scope: !575, file: !31, line: 184, column: 41)
!581 = !DILocation(line: 185, column: 26, scope: !580)
!582 = !DILocation(line: 185, column: 9, scope: !580)
!583 = !DILocation(line: 186, column: 7, scope: !580)
!584 = !DILocation(line: 187, column: 5, scope: !563)
!585 = !DILocation(line: 188, column: 3, scope: !556)
!586 = !DILocation(line: 180, column: 40, scope: !548)
!587 = !DILocation(line: 180, column: 3, scope: !548)
!588 = !DILocation(line: 189, column: 1, scope: !40)
!589 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !43, file: !31, line: 191, type: !4)
!590 = !DILocation(line: 191, column: 31, scope: !43)
!591 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "net", arg: 2, scope: !43, file: !31, line: 192, type: !15)
!592 = !DILocation(line: 192, column: 24, scope: !43)
!593 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !43, file: !31, line: 193, type: !15)
!594 = !DILocation(line: 193, column: 9, scope: !43)
!595 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "below", scope: !43, file: !31, line: 194, type: !15)
!596 = !DILocation(line: 194, column: 9, scope: !43)
!597 = !DILocation(line: 196, column: 7, scope: !43)
!598 = !DILocation(line: 196, column: 3, scope: !43)
!599 = !DILocation(line: 196, column: 12, scope: !43)
!600 = !DILocation(line: 196, column: 29, scope: !43)
!601 = !DILocation(line: 197, column: 10, scope: !602)
!602 = distinct !DILexicalBlock(scope: !43, file: !31, line: 197, column: 3)
!603 = !DILocation(line: 197, column: 8, scope: !602)
!604 = !DILocation(line: 197, column: 15, scope: !605)
!605 = !DILexicalBlockFile(scope: !606, file: !31, discriminator: 2)
!606 = !DILexicalBlockFile(scope: !607, file: !31, discriminator: 1)
!607 = distinct !DILexicalBlock(scope: !602, file: !31, line: 197, column: 3)
!608 = !DILocation(line: 197, column: 23, scope: !607)
!609 = !DILocation(line: 197, column: 19, scope: !607)
!610 = !DILocation(line: 197, column: 28, scope: !607)
!611 = !DILocation(line: 197, column: 17, scope: !607)
!612 = !DILocation(line: 197, column: 3, scope: !602)
!613 = !DILocation(line: 198, column: 33, scope: !614)
!614 = distinct !DILexicalBlock(scope: !615, file: !31, line: 198, column: 9)
!615 = distinct !DILexicalBlock(scope: !607, file: !31, line: 197, column: 44)
!616 = !DILocation(line: 198, column: 14, scope: !614)
!617 = !DILocation(line: 198, column: 10, scope: !614)
!618 = !DILocation(line: 198, column: 19, scope: !614)
!619 = !DILocation(line: 198, column: 36, scope: !614)
!620 = !DILocation(line: 198, column: 9, scope: !615)
!621 = !DILocation(line: 199, column: 7, scope: !622)
!622 = distinct !DILexicalBlock(scope: !614, file: !31, line: 198, column: 45)
!623 = !DILocation(line: 199, column: 7, scope: !624)
!624 = !DILexicalBlockFile(scope: !622, file: !31, discriminator: 1)
!625 = !DILocation(line: 199, column: 7, scope: !626)
!626 = !DILexicalBlockFile(scope: !622, file: !31, discriminator: 2)
!627 = !DILocation(line: 200, column: 38, scope: !622)
!628 = !DILocation(line: 200, column: 19, scope: !622)
!629 = !DILocation(line: 200, column: 15, scope: !622)
!630 = !DILocation(line: 200, column: 24, scope: !622)
!631 = !DILocation(line: 200, column: 41, scope: !622)
!632 = !DILocation(line: 200, column: 13, scope: !622)
!633 = !DILocation(line: 201, column: 16, scope: !634)
!634 = distinct !DILexicalBlock(scope: !622, file: !31, line: 201, column: 11)
!635 = !DILocation(line: 201, column: 12, scope: !634)
!636 = !DILocation(line: 201, column: 23, scope: !634)
!637 = !DILocation(line: 201, column: 11, scope: !622)
!638 = !DILocation(line: 202, column: 21, scope: !639)
!639 = distinct !DILexicalBlock(scope: !634, file: !31, line: 201, column: 41)
!640 = !DILocation(line: 202, column: 26, scope: !639)
!641 = !DILocation(line: 202, column: 9, scope: !639)
!642 = !DILocation(line: 203, column: 7, scope: !639)
!643 = !DILocation(line: 204, column: 5, scope: !622)
!644 = !DILocation(line: 205, column: 3, scope: !615)
!645 = !DILocation(line: 197, column: 40, scope: !607)
!646 = !DILocation(line: 197, column: 3, scope: !607)
!647 = !DILocation(line: 206, column: 1, scope: !43)
!648 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !44, file: !31, line: 208, type: !4)
!649 = !DILocation(line: 208, column: 28, scope: !44)
!650 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "SCC", arg: 2, scope: !44, file: !31, line: 209, type: !26)
!651 = !DILocation(line: 209, column: 22, scope: !44)
!652 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "perSCC", arg: 3, scope: !44, file: !31, line: 210, type: !26)
!653 = !DILocation(line: 210, column: 22, scope: !44)
!654 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "net", scope: !44, file: !31, line: 211, type: !15)
!655 = !DILocation(line: 211, column: 9, scope: !44)
!656 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "scc", scope: !44, file: !31, line: 212, type: !15)
!657 = !DILocation(line: 212, column: 9, scope: !44)
!658 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "per", scope: !44, file: !31, line: 213, type: !15)
!659 = !DILocation(line: 213, column: 9, scope: !44)
!660 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "label", scope: !44, file: !31, line: 214, type: !15)
!661 = !DILocation(line: 214, column: 9, scope: !44)
!662 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "which", scope: !44, file: !31, line: 215, type: !15)
!663 = !DILocation(line: 215, column: 9, scope: !44)
!664 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "choose", scope: !44, file: !31, line: 216, type: !15)
!665 = !DILocation(line: 216, column: 9, scope: !44)
!666 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "large", scope: !44, file: !31, line: 217, type: !15)
!667 = !DILocation(line: 217, column: 9, scope: !44)
!668 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "done", scope: !44, file: !31, line: 218, type: !15)
!669 = !DILocation(line: 218, column: 9, scope: !44)
!670 = !DILocation(line: 224, column: 9, scope: !44)
!671 = !DILocation(line: 225, column: 12, scope: !672)
!672 = distinct !DILexicalBlock(scope: !44, file: !31, line: 225, column: 3)
!673 = !DILocation(line: 225, column: 8, scope: !672)
!674 = !DILocation(line: 225, column: 17, scope: !675)
!675 = !DILexicalBlockFile(scope: !676, file: !31, discriminator: 2)
!676 = !DILexicalBlockFile(scope: !677, file: !31, discriminator: 1)
!677 = distinct !DILexicalBlock(scope: !672, file: !31, line: 225, column: 3)
!678 = !DILocation(line: 225, column: 24, scope: !677)
!679 = !DILocation(line: 225, column: 21, scope: !677)
!680 = !DILocation(line: 225, column: 3, scope: !672)
!681 = !DILocation(line: 226, column: 14, scope: !682)
!682 = distinct !DILexicalBlock(scope: !683, file: !31, line: 226, column: 9)
!683 = distinct !DILexicalBlock(scope: !677, file: !31, line: 225, column: 44)
!684 = !DILocation(line: 226, column: 10, scope: !682)
!685 = !DILocation(line: 226, column: 19, scope: !682)
!686 = !DILocation(line: 226, column: 9, scope: !683)
!687 = !DILocation(line: 227, column: 23, scope: !688)
!688 = distinct !DILexicalBlock(scope: !682, file: !31, line: 226, column: 37)
!689 = !DILocation(line: 227, column: 28, scope: !688)
!690 = !DILocation(line: 227, column: 7, scope: !688)
!691 = !DILocation(line: 228, column: 5, scope: !688)
!692 = !DILocation(line: 229, column: 3, scope: !683)
!693 = !DILocation(line: 225, column: 40, scope: !677)
!694 = !DILocation(line: 225, column: 3, scope: !677)
!695 = !DILocation(line: 234, column: 9, scope: !44)
!696 = !DILocation(line: 235, column: 3, scope: !44)
!697 = !DILocation(line: 236, column: 10, scope: !698)
!698 = distinct !DILexicalBlock(scope: !44, file: !31, line: 235, column: 6)
!699 = !DILocation(line: 241, column: 12, scope: !698)
!700 = !DILocation(line: 242, column: 11, scope: !698)
!701 = !DILocation(line: 243, column: 14, scope: !702)
!702 = distinct !DILexicalBlock(scope: !698, file: !31, line: 243, column: 5)
!703 = !DILocation(line: 243, column: 10, scope: !702)
!704 = !DILocation(line: 243, column: 19, scope: !705)
!705 = !DILexicalBlockFile(scope: !706, file: !31, discriminator: 2)
!706 = !DILexicalBlockFile(scope: !707, file: !31, discriminator: 1)
!707 = distinct !DILexicalBlock(scope: !702, file: !31, line: 243, column: 5)
!708 = !DILocation(line: 243, column: 26, scope: !707)
!709 = !DILocation(line: 243, column: 23, scope: !707)
!710 = !DILocation(line: 243, column: 5, scope: !702)
!711 = !DILocation(line: 244, column: 16, scope: !712)
!712 = distinct !DILexicalBlock(scope: !713, file: !31, line: 244, column: 11)
!713 = distinct !DILexicalBlock(scope: !707, file: !31, line: 243, column: 46)
!714 = !DILocation(line: 244, column: 12, scope: !712)
!715 = !DILocation(line: 244, column: 21, scope: !712)
!716 = !DILocation(line: 244, column: 11, scope: !713)
!717 = !DILocation(line: 245, column: 9, scope: !718)
!718 = distinct !DILexicalBlock(scope: !712, file: !31, line: 244, column: 39)
!719 = !DILocation(line: 245, column: 9, scope: !720)
!720 = !DILexicalBlockFile(scope: !718, file: !31, discriminator: 1)
!721 = !DILocation(line: 245, column: 9, scope: !722)
!722 = !DILexicalBlockFile(scope: !718, file: !31, discriminator: 2)
!723 = !DILocation(line: 246, column: 17, scope: !724)
!724 = distinct !DILexicalBlock(scope: !718, file: !31, line: 246, column: 13)
!725 = !DILocation(line: 246, column: 13, scope: !724)
!726 = !DILocation(line: 246, column: 22, scope: !724)
!727 = !DILocation(line: 246, column: 39, scope: !724)
!728 = !DILocation(line: 246, column: 37, scope: !724)
!729 = !DILocation(line: 246, column: 13, scope: !718)
!730 = !DILocation(line: 247, column: 20, scope: !731)
!731 = distinct !DILexicalBlock(scope: !724, file: !31, line: 246, column: 46)
!732 = !DILocation(line: 247, column: 18, scope: !731)
!733 = !DILocation(line: 248, column: 23, scope: !731)
!734 = !DILocation(line: 248, column: 19, scope: !731)
!735 = !DILocation(line: 248, column: 28, scope: !731)
!736 = !DILocation(line: 248, column: 17, scope: !731)
!737 = !DILocation(line: 249, column: 16, scope: !731)
!738 = !DILocation(line: 250, column: 9, scope: !731)
!739 = !DILocation(line: 251, column: 7, scope: !718)
!740 = !DILocation(line: 252, column: 5, scope: !713)
!741 = !DILocation(line: 243, column: 42, scope: !707)
!742 = !DILocation(line: 243, column: 5, scope: !707)
!743 = !DILocation(line: 257, column: 10, scope: !744)
!744 = distinct !DILexicalBlock(scope: !698, file: !31, line: 257, column: 9)
!745 = !DILocation(line: 257, column: 9, scope: !698)
!746 = !DILocation(line: 258, column: 12, scope: !747)
!747 = distinct !DILexicalBlock(scope: !744, file: !31, line: 257, column: 16)
!748 = !DILocation(line: 259, column: 23, scope: !747)
!749 = !DILocation(line: 259, column: 28, scope: !747)
!750 = !DILocation(line: 259, column: 36, scope: !747)
!751 = !DILocation(line: 259, column: 7, scope: !747)
!752 = !DILocation(line: 260, column: 5, scope: !747)
!753 = !DILocation(line: 261, column: 3, scope: !698)
!754 = !DILocation(line: 261, column: 13, scope: !755)
!755 = !DILexicalBlockFile(scope: !44, file: !31, discriminator: 1)
!756 = !DILocation(line: 261, column: 12, scope: !44)
!757 = !DILocation(line: 266, column: 12, scope: !44)
!758 = !DILocation(line: 267, column: 12, scope: !759)
!759 = distinct !DILexicalBlock(scope: !44, file: !31, line: 267, column: 3)
!760 = !DILocation(line: 267, column: 8, scope: !759)
!761 = !DILocation(line: 267, column: 17, scope: !762)
!762 = !DILexicalBlockFile(scope: !763, file: !31, discriminator: 2)
!763 = !DILexicalBlockFile(scope: !764, file: !31, discriminator: 1)
!764 = distinct !DILexicalBlock(scope: !759, file: !31, line: 267, column: 3)
!765 = !DILocation(line: 267, column: 24, scope: !764)
!766 = !DILocation(line: 267, column: 21, scope: !764)
!767 = !DILocation(line: 267, column: 3, scope: !759)
!768 = !DILocation(line: 268, column: 20, scope: !769)
!769 = distinct !DILexicalBlock(scope: !764, file: !31, line: 267, column: 44)
!770 = !DILocation(line: 268, column: 16, scope: !769)
!771 = !DILocation(line: 268, column: 25, scope: !769)
!772 = !DILocation(line: 268, column: 9, scope: !769)
!773 = !DILocation(line: 268, column: 5, scope: !769)
!774 = !DILocation(line: 268, column: 14, scope: !769)
!775 = !DILocation(line: 269, column: 13, scope: !776)
!776 = distinct !DILexicalBlock(scope: !769, file: !31, line: 269, column: 9)
!777 = !DILocation(line: 269, column: 9, scope: !776)
!778 = !DILocation(line: 269, column: 20, scope: !776)
!779 = !DILocation(line: 269, column: 18, scope: !776)
!780 = !DILocation(line: 269, column: 9, scope: !769)
!781 = !DILocation(line: 270, column: 22, scope: !782)
!782 = distinct !DILexicalBlock(scope: !776, file: !31, line: 269, column: 30)
!783 = !DILocation(line: 270, column: 18, scope: !782)
!784 = !DILocation(line: 270, column: 16, scope: !782)
!785 = !DILocation(line: 271, column: 5, scope: !782)
!786 = !DILocation(line: 272, column: 3, scope: !769)
!787 = !DILocation(line: 267, column: 40, scope: !764)
!788 = !DILocation(line: 267, column: 3, scope: !764)
!789 = !DILocation(line: 273, column: 3, scope: !44)
!790 = !DILocation(line: 273, column: 3, scope: !755)
!791 = !DILocation(line: 273, column: 3, scope: !792)
!792 = !DILexicalBlockFile(scope: !44, file: !31, discriminator: 2)
!793 = !DILocation(line: 274, column: 12, scope: !794)
!794 = distinct !DILexicalBlock(scope: !44, file: !31, line: 274, column: 3)
!795 = !DILocation(line: 274, column: 8, scope: !794)
!796 = !DILocation(line: 274, column: 17, scope: !797)
!797 = !DILexicalBlockFile(scope: !798, file: !31, discriminator: 2)
!798 = !DILexicalBlockFile(scope: !799, file: !31, discriminator: 1)
!799 = distinct !DILexicalBlock(scope: !794, file: !31, line: 274, column: 3)
!800 = !DILocation(line: 274, column: 24, scope: !799)
!801 = !DILocation(line: 274, column: 21, scope: !799)
!802 = !DILocation(line: 274, column: 3, scope: !794)
!803 = !DILocation(line: 275, column: 9, scope: !804)
!804 = distinct !DILexicalBlock(scope: !799, file: !31, line: 274, column: 41)
!805 = !DILocation(line: 276, column: 14, scope: !806)
!806 = distinct !DILexicalBlock(scope: !804, file: !31, line: 276, column: 5)
!807 = !DILocation(line: 276, column: 10, scope: !806)
!808 = !DILocation(line: 276, column: 19, scope: !809)
!809 = !DILexicalBlockFile(scope: !810, file: !31, discriminator: 2)
!810 = !DILexicalBlockFile(scope: !811, file: !31, discriminator: 1)
!811 = distinct !DILexicalBlock(scope: !806, file: !31, line: 276, column: 5)
!812 = !DILocation(line: 276, column: 26, scope: !811)
!813 = !DILocation(line: 276, column: 23, scope: !811)
!814 = !DILocation(line: 276, column: 5, scope: !806)
!815 = !DILocation(line: 277, column: 15, scope: !816)
!816 = distinct !DILexicalBlock(scope: !817, file: !31, line: 277, column: 11)
!817 = distinct !DILexicalBlock(scope: !811, file: !31, line: 276, column: 46)
!818 = !DILocation(line: 277, column: 11, scope: !816)
!819 = !DILocation(line: 277, column: 23, scope: !816)
!820 = !DILocation(line: 277, column: 20, scope: !816)
!821 = !DILocation(line: 277, column: 11, scope: !817)
!822 = !DILocation(line: 278, column: 12, scope: !823)
!823 = distinct !DILexicalBlock(scope: !816, file: !31, line: 277, column: 28)
!824 = !DILocation(line: 279, column: 7, scope: !823)
!825 = !DILocation(line: 280, column: 5, scope: !817)
!826 = !DILocation(line: 276, column: 42, scope: !811)
!827 = !DILocation(line: 276, column: 5, scope: !811)
!828 = !DILocation(line: 281, column: 19, scope: !804)
!829 = !DILocation(line: 281, column: 12, scope: !804)
!830 = !DILocation(line: 281, column: 5, scope: !804)
!831 = !DILocation(line: 281, column: 17, scope: !804)
!832 = !DILocation(line: 282, column: 3, scope: !804)
!833 = !DILocation(line: 274, column: 37, scope: !799)
!834 = !DILocation(line: 274, column: 3, scope: !799)
!835 = !DILocation(line: 283, column: 1, scope: !44)
!836 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !47, file: !31, line: 285, type: !4)
!837 = !DILocation(line: 285, column: 35, scope: !47)
!838 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "net", arg: 2, scope: !47, file: !31, line: 286, type: !15)
!839 = !DILocation(line: 286, column: 28, scope: !47)
!840 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "label", arg: 3, scope: !47, file: !31, line: 287, type: !26)
!841 = !DILocation(line: 287, column: 29, scope: !47)
!842 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !47, file: !31, line: 288, type: !15)
!843 = !DILocation(line: 288, column: 9, scope: !47)
!844 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "above", scope: !47, file: !31, line: 289, type: !15)
!845 = !DILocation(line: 289, column: 9, scope: !47)
!846 = !DILocation(line: 291, column: 7, scope: !47)
!847 = !DILocation(line: 291, column: 3, scope: !47)
!848 = !DILocation(line: 291, column: 12, scope: !47)
!849 = !DILocation(line: 291, column: 29, scope: !47)
!850 = !DILocation(line: 292, column: 10, scope: !851)
!851 = distinct !DILexicalBlock(scope: !47, file: !31, line: 292, column: 3)
!852 = !DILocation(line: 292, column: 8, scope: !851)
!853 = !DILocation(line: 292, column: 15, scope: !854)
!854 = !DILexicalBlockFile(scope: !855, file: !31, discriminator: 2)
!855 = !DILexicalBlockFile(scope: !856, file: !31, discriminator: 1)
!856 = distinct !DILexicalBlock(scope: !851, file: !31, line: 292, column: 3)
!857 = !DILocation(line: 292, column: 23, scope: !856)
!858 = !DILocation(line: 292, column: 19, scope: !856)
!859 = !DILocation(line: 292, column: 28, scope: !856)
!860 = !DILocation(line: 292, column: 17, scope: !856)
!861 = !DILocation(line: 292, column: 3, scope: !851)
!862 = !DILocation(line: 293, column: 33, scope: !863)
!863 = distinct !DILexicalBlock(scope: !864, file: !31, line: 293, column: 9)
!864 = distinct !DILexicalBlock(scope: !856, file: !31, line: 292, column: 44)
!865 = !DILocation(line: 293, column: 14, scope: !863)
!866 = !DILocation(line: 293, column: 10, scope: !863)
!867 = !DILocation(line: 293, column: 19, scope: !863)
!868 = !DILocation(line: 293, column: 36, scope: !863)
!869 = !DILocation(line: 293, column: 9, scope: !864)
!870 = !DILocation(line: 294, column: 7, scope: !871)
!871 = distinct !DILexicalBlock(scope: !863, file: !31, line: 293, column: 45)
!872 = !DILocation(line: 294, column: 7, scope: !873)
!873 = !DILexicalBlockFile(scope: !871, file: !31, discriminator: 1)
!874 = !DILocation(line: 294, column: 7, scope: !875)
!875 = !DILexicalBlockFile(scope: !871, file: !31, discriminator: 2)
!876 = !DILocation(line: 295, column: 38, scope: !871)
!877 = !DILocation(line: 295, column: 19, scope: !871)
!878 = !DILocation(line: 295, column: 15, scope: !871)
!879 = !DILocation(line: 295, column: 24, scope: !871)
!880 = !DILocation(line: 295, column: 41, scope: !871)
!881 = !DILocation(line: 295, column: 13, scope: !871)
!882 = !DILocation(line: 296, column: 16, scope: !883)
!883 = distinct !DILexicalBlock(scope: !871, file: !31, line: 296, column: 11)
!884 = !DILocation(line: 296, column: 12, scope: !883)
!885 = !DILocation(line: 296, column: 23, scope: !883)
!886 = !DILocation(line: 296, column: 11, scope: !871)
!887 = !DILocation(line: 297, column: 25, scope: !888)
!888 = distinct !DILexicalBlock(scope: !883, file: !31, line: 296, column: 41)
!889 = !DILocation(line: 297, column: 30, scope: !888)
!890 = !DILocation(line: 297, column: 37, scope: !888)
!891 = !DILocation(line: 297, column: 9, scope: !888)
!892 = !DILocation(line: 298, column: 7, scope: !888)
!893 = !DILocation(line: 299, column: 5, scope: !871)
!894 = !DILocation(line: 300, column: 3, scope: !864)
!895 = !DILocation(line: 292, column: 40, scope: !856)
!896 = !DILocation(line: 292, column: 3, scope: !856)
!897 = !DILocation(line: 301, column: 5, scope: !47)
!898 = !DILocation(line: 301, column: 11, scope: !47)
!899 = !DILocation(line: 302, column: 30, scope: !47)
!900 = !DILocation(line: 302, column: 29, scope: !47)
!901 = !DILocation(line: 302, column: 7, scope: !47)
!902 = !DILocation(line: 302, column: 3, scope: !47)
!903 = !DILocation(line: 302, column: 12, scope: !47)
!904 = !DILocation(line: 302, column: 27, scope: !47)
!905 = !DILocation(line: 303, column: 1, scope: !47)
!906 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !50, file: !31, line: 305, type: !4)
!907 = !DILocation(line: 305, column: 35, scope: !50)
!908 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "net", arg: 2, scope: !50, file: !31, line: 306, type: !15)
!909 = !DILocation(line: 306, column: 28, scope: !50)
!910 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "label", arg: 3, scope: !50, file: !31, line: 307, type: !15)
!911 = !DILocation(line: 307, column: 28, scope: !50)
!912 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !50, file: !31, line: 308, type: !15)
!913 = !DILocation(line: 308, column: 9, scope: !50)
!914 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "below", scope: !50, file: !31, line: 309, type: !15)
!915 = !DILocation(line: 309, column: 9, scope: !50)
!916 = !DILocation(line: 311, column: 7, scope: !50)
!917 = !DILocation(line: 311, column: 3, scope: !50)
!918 = !DILocation(line: 311, column: 12, scope: !50)
!919 = !DILocation(line: 311, column: 29, scope: !50)
!920 = !DILocation(line: 312, column: 10, scope: !921)
!921 = distinct !DILexicalBlock(scope: !50, file: !31, line: 312, column: 3)
!922 = !DILocation(line: 312, column: 8, scope: !921)
!923 = !DILocation(line: 312, column: 15, scope: !924)
!924 = !DILexicalBlockFile(scope: !925, file: !31, discriminator: 2)
!925 = !DILexicalBlockFile(scope: !926, file: !31, discriminator: 1)
!926 = distinct !DILexicalBlock(scope: !921, file: !31, line: 312, column: 3)
!927 = !DILocation(line: 312, column: 23, scope: !926)
!928 = !DILocation(line: 312, column: 19, scope: !926)
!929 = !DILocation(line: 312, column: 28, scope: !926)
!930 = !DILocation(line: 312, column: 17, scope: !926)
!931 = !DILocation(line: 312, column: 3, scope: !921)
!932 = !DILocation(line: 313, column: 33, scope: !933)
!933 = distinct !DILexicalBlock(scope: !934, file: !31, line: 313, column: 9)
!934 = distinct !DILexicalBlock(scope: !926, file: !31, line: 312, column: 44)
!935 = !DILocation(line: 313, column: 14, scope: !933)
!936 = !DILocation(line: 313, column: 10, scope: !933)
!937 = !DILocation(line: 313, column: 19, scope: !933)
!938 = !DILocation(line: 313, column: 36, scope: !933)
!939 = !DILocation(line: 313, column: 9, scope: !934)
!940 = !DILocation(line: 314, column: 7, scope: !941)
!941 = distinct !DILexicalBlock(scope: !933, file: !31, line: 313, column: 45)
!942 = !DILocation(line: 314, column: 7, scope: !943)
!943 = !DILexicalBlockFile(scope: !941, file: !31, discriminator: 1)
!944 = !DILocation(line: 314, column: 7, scope: !945)
!945 = !DILexicalBlockFile(scope: !941, file: !31, discriminator: 2)
!946 = !DILocation(line: 315, column: 38, scope: !941)
!947 = !DILocation(line: 315, column: 19, scope: !941)
!948 = !DILocation(line: 315, column: 15, scope: !941)
!949 = !DILocation(line: 315, column: 24, scope: !941)
!950 = !DILocation(line: 315, column: 41, scope: !941)
!951 = !DILocation(line: 315, column: 13, scope: !941)
!952 = !DILocation(line: 316, column: 16, scope: !953)
!953 = distinct !DILexicalBlock(scope: !941, file: !31, line: 316, column: 11)
!954 = !DILocation(line: 316, column: 12, scope: !953)
!955 = !DILocation(line: 316, column: 23, scope: !953)
!956 = !DILocation(line: 316, column: 11, scope: !941)
!957 = !DILocation(line: 317, column: 25, scope: !958)
!958 = distinct !DILexicalBlock(scope: !953, file: !31, line: 316, column: 41)
!959 = !DILocation(line: 317, column: 30, scope: !958)
!960 = !DILocation(line: 317, column: 37, scope: !958)
!961 = !DILocation(line: 317, column: 9, scope: !958)
!962 = !DILocation(line: 318, column: 7, scope: !958)
!963 = !DILocation(line: 319, column: 5, scope: !941)
!964 = !DILocation(line: 320, column: 3, scope: !934)
!965 = !DILocation(line: 312, column: 40, scope: !926)
!966 = !DILocation(line: 312, column: 3, scope: !926)
!967 = !DILocation(line: 321, column: 29, scope: !50)
!968 = !DILocation(line: 321, column: 7, scope: !50)
!969 = !DILocation(line: 321, column: 3, scope: !50)
!970 = !DILocation(line: 321, column: 12, scope: !50)
!971 = !DILocation(line: 321, column: 27, scope: !50)
!972 = !DILocation(line: 322, column: 1, scope: !50)
!973 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "SCC", arg: 1, scope: !53, file: !31, line: 324, type: !26)
!974 = !DILocation(line: 324, column: 21, scope: !53)
!975 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "perSCC", arg: 2, scope: !53, file: !31, line: 325, type: !26)
!976 = !DILocation(line: 325, column: 21, scope: !53)
!977 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "net", scope: !53, file: !31, line: 326, type: !15)
!978 = !DILocation(line: 326, column: 9, scope: !53)
!979 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "scc", scope: !53, file: !31, line: 327, type: !15)
!980 = !DILocation(line: 327, column: 9, scope: !53)
!981 = !DILocation(line: 329, column: 12, scope: !982)
!982 = distinct !DILexicalBlock(scope: !53, file: !31, line: 329, column: 3)
!983 = !DILocation(line: 329, column: 8, scope: !982)
!984 = !DILocation(line: 329, column: 17, scope: !985)
!985 = !DILexicalBlockFile(scope: !986, file: !31, discriminator: 2)
!986 = !DILexicalBlockFile(scope: !987, file: !31, discriminator: 1)
!987 = distinct !DILexicalBlock(scope: !982, file: !31, line: 329, column: 3)
!988 = !DILocation(line: 329, column: 24, scope: !987)
!989 = !DILocation(line: 329, column: 21, scope: !987)
!990 = !DILocation(line: 329, column: 3, scope: !982)
!991 = !DILocation(line: 330, column: 22, scope: !992)
!992 = distinct !DILexicalBlock(scope: !987, file: !31, line: 329, column: 41)
!993 = !DILocation(line: 330, column: 5, scope: !992)
!994 = !DILocation(line: 331, column: 14, scope: !995)
!995 = distinct !DILexicalBlock(scope: !992, file: !31, line: 331, column: 5)
!996 = !DILocation(line: 331, column: 10, scope: !995)
!997 = !DILocation(line: 331, column: 19, scope: !998)
!998 = !DILexicalBlockFile(scope: !999, file: !31, discriminator: 2)
!999 = !DILexicalBlockFile(scope: !1000, file: !31, discriminator: 1)
!1000 = distinct !DILexicalBlock(scope: !995, file: !31, line: 331, column: 5)
!1001 = !DILocation(line: 331, column: 26, scope: !1000)
!1002 = !DILocation(line: 331, column: 23, scope: !1000)
!1003 = !DILocation(line: 331, column: 5, scope: !995)
!1004 = !DILocation(line: 332, column: 15, scope: !1005)
!1005 = distinct !DILexicalBlock(scope: !1006, file: !31, line: 332, column: 11)
!1006 = distinct !DILexicalBlock(scope: !1000, file: !31, line: 331, column: 46)
!1007 = !DILocation(line: 332, column: 11, scope: !1005)
!1008 = !DILocation(line: 332, column: 23, scope: !1005)
!1009 = !DILocation(line: 332, column: 20, scope: !1005)
!1010 = !DILocation(line: 332, column: 11, scope: !1006)
!1011 = !DILocation(line: 333, column: 23, scope: !1012)
!1012 = distinct !DILexicalBlock(scope: !1005, file: !31, line: 332, column: 28)
!1013 = !DILocation(line: 333, column: 9, scope: !1012)
!1014 = !DILocation(line: 334, column: 7, scope: !1012)
!1015 = !DILocation(line: 335, column: 5, scope: !1006)
!1016 = !DILocation(line: 331, column: 42, scope: !1000)
!1017 = !DILocation(line: 331, column: 5, scope: !1000)
!1018 = !DILocation(line: 336, column: 27, scope: !992)
!1019 = !DILocation(line: 336, column: 20, scope: !992)
!1020 = !DILocation(line: 336, column: 5, scope: !992)
!1021 = !DILocation(line: 337, column: 5, scope: !992)
!1022 = !DILocation(line: 338, column: 3, scope: !992)
!1023 = !DILocation(line: 329, column: 37, scope: !987)
!1024 = !DILocation(line: 329, column: 3, scope: !987)
!1025 = !DILocation(line: 339, column: 3, scope: !53)
!1026 = !DILocation(line: 340, column: 1, scope: !53)
!1027 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "done", scope: !56, file: !31, line: 343, type: !15)
!1028 = !DILocation(line: 343, column: 9, scope: !56)
!1029 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "scc", scope: !56, file: !31, line: 344, type: !15)
!1030 = !DILocation(line: 344, column: 9, scope: !56)
!1031 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "net", scope: !56, file: !31, line: 345, type: !15)
!1032 = !DILocation(line: 345, column: 9, scope: !56)
!1033 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "top", scope: !56, file: !31, line: 346, type: !15)
!1034 = !DILocation(line: 346, column: 9, scope: !56)
!1035 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bot", scope: !56, file: !31, line: 347, type: !15)
!1036 = !DILocation(line: 347, column: 9, scope: !56)
!1037 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rep", scope: !56, file: !31, line: 348, type: !15)
!1038 = !DILocation(line: 348, column: 9, scope: !56)
!1039 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "which", scope: !56, file: !31, line: 349, type: !15)
!1040 = !DILocation(line: 349, column: 9, scope: !56)
!1041 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "total", scope: !56, file: !31, line: 350, type: !15)
!1042 = !DILocation(line: 350, column: 9, scope: !56)
!1043 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cycle", scope: !56, file: !31, line: 351, type: !15)
!1044 = !DILocation(line: 351, column: 9, scope: !56)
!1045 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "acyclic", scope: !56, file: !31, line: 352, type: !15)
!1046 = !DILocation(line: 352, column: 9, scope: !56)
!1047 = !DILocation(line: 354, column: 12, scope: !1048)
!1048 = distinct !DILexicalBlock(scope: !56, file: !31, line: 354, column: 3)
!1049 = !DILocation(line: 354, column: 8, scope: !1048)
!1050 = !DILocation(line: 354, column: 17, scope: !1051)
!1051 = !DILexicalBlockFile(scope: !1052, file: !31, discriminator: 2)
!1052 = !DILexicalBlockFile(scope: !1053, file: !31, discriminator: 1)
!1053 = distinct !DILexicalBlock(scope: !1048, file: !31, line: 354, column: 3)
!1054 = !DILocation(line: 354, column: 24, scope: !1053)
!1055 = !DILocation(line: 354, column: 21, scope: !1053)
!1056 = !DILocation(line: 354, column: 3, scope: !1048)
!1057 = !DILocation(line: 355, column: 16, scope: !1058)
!1058 = distinct !DILexicalBlock(scope: !1059, file: !31, line: 355, column: 5)
!1059 = distinct !DILexicalBlock(scope: !1053, file: !31, line: 354, column: 44)
!1060 = !DILocation(line: 355, column: 10, scope: !1058)
!1061 = !DILocation(line: 355, column: 21, scope: !1062)
!1062 = !DILexicalBlockFile(scope: !1063, file: !31, discriminator: 2)
!1063 = !DILexicalBlockFile(scope: !1064, file: !31, discriminator: 1)
!1064 = distinct !DILexicalBlock(scope: !1058, file: !31, line: 355, column: 5)
!1065 = !DILocation(line: 355, column: 33, scope: !1064)
!1066 = !DILocation(line: 355, column: 29, scope: !1064)
!1067 = !DILocation(line: 355, column: 38, scope: !1064)
!1068 = !DILocation(line: 355, column: 27, scope: !1064)
!1069 = !DILocation(line: 355, column: 5, scope: !1058)
!1070 = !DILocation(line: 356, column: 30, scope: !1071)
!1071 = distinct !DILexicalBlock(scope: !1064, file: !31, line: 355, column: 58)
!1072 = !DILocation(line: 356, column: 11, scope: !1071)
!1073 = !DILocation(line: 356, column: 7, scope: !1071)
!1074 = !DILocation(line: 356, column: 16, scope: !1071)
!1075 = !DILocation(line: 356, column: 37, scope: !1071)
!1076 = !DILocation(line: 356, column: 45, scope: !1071)
!1077 = !DILocation(line: 357, column: 5, scope: !1071)
!1078 = !DILocation(line: 355, column: 54, scope: !1064)
!1079 = !DILocation(line: 355, column: 5, scope: !1064)
!1080 = !DILocation(line: 358, column: 16, scope: !1081)
!1081 = distinct !DILexicalBlock(scope: !1059, file: !31, line: 358, column: 5)
!1082 = !DILocation(line: 358, column: 10, scope: !1081)
!1083 = !DILocation(line: 358, column: 21, scope: !1084)
!1084 = !DILexicalBlockFile(scope: !1085, file: !31, discriminator: 2)
!1085 = !DILexicalBlockFile(scope: !1086, file: !31, discriminator: 1)
!1086 = distinct !DILexicalBlock(scope: !1081, file: !31, line: 358, column: 5)
!1087 = !DILocation(line: 358, column: 33, scope: !1086)
!1088 = !DILocation(line: 358, column: 29, scope: !1086)
!1089 = !DILocation(line: 358, column: 38, scope: !1086)
!1090 = !DILocation(line: 358, column: 27, scope: !1086)
!1091 = !DILocation(line: 358, column: 5, scope: !1081)
!1092 = !DILocation(line: 359, column: 30, scope: !1093)
!1093 = distinct !DILexicalBlock(scope: !1086, file: !31, line: 358, column: 58)
!1094 = !DILocation(line: 359, column: 11, scope: !1093)
!1095 = !DILocation(line: 359, column: 7, scope: !1093)
!1096 = !DILocation(line: 359, column: 16, scope: !1093)
!1097 = !DILocation(line: 359, column: 37, scope: !1093)
!1098 = !DILocation(line: 359, column: 45, scope: !1093)
!1099 = !DILocation(line: 360, column: 5, scope: !1093)
!1100 = !DILocation(line: 358, column: 54, scope: !1086)
!1101 = !DILocation(line: 358, column: 5, scope: !1086)
!1102 = !DILocation(line: 361, column: 3, scope: !1059)
!1103 = !DILocation(line: 354, column: 40, scope: !1053)
!1104 = !DILocation(line: 354, column: 3, scope: !1053)
!1105 = !DILocation(line: 363, column: 11, scope: !56)
!1106 = !DILocation(line: 364, column: 18, scope: !56)
!1107 = !DILocation(line: 365, column: 3, scope: !56)
!1108 = !DILocation(line: 366, column: 10, scope: !1109)
!1109 = distinct !DILexicalBlock(scope: !56, file: !31, line: 365, column: 6)
!1110 = !DILocation(line: 371, column: 17, scope: !1109)
!1111 = !DILocation(line: 371, column: 5, scope: !1109)
!1112 = !DILocation(line: 372, column: 14, scope: !1109)
!1113 = !DILocation(line: 372, column: 19, scope: !1109)
!1114 = !DILocation(line: 372, column: 24, scope: !1109)
!1115 = !DILocation(line: 372, column: 5, scope: !1109)
!1116 = !DILocation(line: 373, column: 14, scope: !1117)
!1117 = distinct !DILexicalBlock(scope: !1109, file: !31, line: 373, column: 5)
!1118 = !DILocation(line: 373, column: 10, scope: !1117)
!1119 = !DILocation(line: 373, column: 19, scope: !1120)
!1120 = !DILexicalBlockFile(scope: !1121, file: !31, discriminator: 2)
!1121 = !DILexicalBlockFile(scope: !1122, file: !31, discriminator: 1)
!1122 = distinct !DILexicalBlock(scope: !1117, file: !31, line: 373, column: 5)
!1123 = !DILocation(line: 373, column: 26, scope: !1122)
!1124 = !DILocation(line: 373, column: 23, scope: !1122)
!1125 = !DILocation(line: 373, column: 5, scope: !1117)
!1126 = !DILocation(line: 374, column: 18, scope: !1127)
!1127 = distinct !DILexicalBlock(scope: !1128, file: !31, line: 374, column: 11)
!1128 = distinct !DILexicalBlock(scope: !1122, file: !31, line: 373, column: 43)
!1129 = !DILocation(line: 374, column: 11, scope: !1127)
!1130 = !DILocation(line: 374, column: 23, scope: !1127)
!1131 = !DILocation(line: 374, column: 11, scope: !1128)
!1132 = !DILocation(line: 375, column: 17, scope: !1133)
!1133 = distinct !DILexicalBlock(scope: !1127, file: !31, line: 374, column: 28)
!1134 = !DILocation(line: 376, column: 14, scope: !1133)
!1135 = !DILocation(line: 377, column: 9, scope: !1133)
!1136 = !DILocation(line: 379, column: 5, scope: !1128)
!1137 = !DILocation(line: 373, column: 39, scope: !1122)
!1138 = !DILocation(line: 373, column: 5, scope: !1122)
!1139 = !DILocation(line: 385, column: 10, scope: !1140)
!1140 = distinct !DILexicalBlock(scope: !1109, file: !31, line: 385, column: 9)
!1141 = !DILocation(line: 385, column: 9, scope: !1109)
!1142 = !DILocation(line: 386, column: 27, scope: !1143)
!1143 = distinct !DILexicalBlock(scope: !1140, file: !31, line: 385, column: 16)
!1144 = !DILocation(line: 386, column: 32, scope: !1143)
!1145 = !DILocation(line: 386, column: 37, scope: !1143)
!1146 = !DILocation(line: 386, column: 45, scope: !1143)
!1147 = !DILocation(line: 386, column: 7, scope: !1143)
!1148 = !DILocation(line: 387, column: 5, scope: !1143)
!1149 = !DILocation(line: 388, column: 3, scope: !1109)
!1150 = !DILocation(line: 388, column: 13, scope: !1151)
!1151 = !DILexicalBlockFile(scope: !56, file: !31, discriminator: 1)
!1152 = !DILocation(line: 388, column: 12, scope: !56)
!1153 = !DILocation(line: 395, column: 11, scope: !56)
!1154 = !DILocation(line: 395, column: 9, scope: !56)
!1155 = !DILocation(line: 396, column: 12, scope: !1156)
!1156 = distinct !DILexicalBlock(scope: !56, file: !31, line: 396, column: 3)
!1157 = !DILocation(line: 396, column: 8, scope: !1156)
!1158 = !DILocation(line: 396, column: 17, scope: !1159)
!1159 = !DILexicalBlockFile(scope: !1160, file: !31, discriminator: 2)
!1160 = !DILexicalBlockFile(scope: !1161, file: !31, discriminator: 1)
!1161 = distinct !DILexicalBlock(scope: !1156, file: !31, line: 396, column: 3)
!1162 = !DILocation(line: 396, column: 23, scope: !1161)
!1163 = !DILocation(line: 396, column: 21, scope: !1161)
!1164 = !DILocation(line: 396, column: 3, scope: !1156)
!1165 = !DILocation(line: 401, column: 23, scope: !1166)
!1166 = distinct !DILexicalBlock(scope: !1161, file: !31, line: 396, column: 46)
!1167 = !DILocation(line: 401, column: 13, scope: !1166)
!1168 = !DILocation(line: 401, column: 29, scope: !1166)
!1169 = !DILocation(line: 401, column: 9, scope: !1166)
!1170 = !DILocation(line: 402, column: 23, scope: !1166)
!1171 = !DILocation(line: 402, column: 13, scope: !1166)
!1172 = !DILocation(line: 402, column: 29, scope: !1166)
!1173 = !DILocation(line: 402, column: 9, scope: !1166)
!1174 = !DILocation(line: 407, column: 16, scope: !1175)
!1175 = distinct !DILexicalBlock(scope: !1166, file: !31, line: 407, column: 5)
!1176 = !DILocation(line: 407, column: 10, scope: !1175)
!1177 = !DILocation(line: 407, column: 21, scope: !1178)
!1178 = !DILexicalBlockFile(scope: !1179, file: !31, discriminator: 2)
!1179 = !DILexicalBlockFile(scope: !1180, file: !31, discriminator: 1)
!1180 = distinct !DILexicalBlock(scope: !1175, file: !31, line: 407, column: 5)
!1181 = !DILocation(line: 407, column: 33, scope: !1180)
!1182 = !DILocation(line: 407, column: 29, scope: !1180)
!1183 = !DILocation(line: 407, column: 38, scope: !1180)
!1184 = !DILocation(line: 407, column: 27, scope: !1180)
!1185 = !DILocation(line: 407, column: 5, scope: !1175)
!1186 = !DILocation(line: 408, column: 34, scope: !1187)
!1187 = distinct !DILexicalBlock(scope: !1188, file: !31, line: 408, column: 11)
!1188 = distinct !DILexicalBlock(scope: !1180, file: !31, line: 407, column: 58)
!1189 = !DILocation(line: 408, column: 15, scope: !1187)
!1190 = !DILocation(line: 408, column: 11, scope: !1187)
!1191 = !DILocation(line: 408, column: 20, scope: !1187)
!1192 = !DILocation(line: 408, column: 41, scope: !1187)
!1193 = !DILocation(line: 408, column: 48, scope: !1187)
!1194 = !DILocation(line: 408, column: 45, scope: !1187)
!1195 = !DILocation(line: 408, column: 11, scope: !1188)
!1196 = !DILocation(line: 409, column: 32, scope: !1197)
!1197 = distinct !DILexicalBlock(scope: !1187, file: !31, line: 408, column: 53)
!1198 = !DILocation(line: 409, column: 13, scope: !1197)
!1199 = !DILocation(line: 409, column: 9, scope: !1197)
!1200 = !DILocation(line: 409, column: 18, scope: !1197)
!1201 = !DILocation(line: 409, column: 39, scope: !1197)
!1202 = !DILocation(line: 409, column: 47, scope: !1197)
!1203 = !DILocation(line: 410, column: 9, scope: !1197)
!1204 = !DILocation(line: 412, column: 5, scope: !1188)
!1205 = !DILocation(line: 407, column: 54, scope: !1180)
!1206 = !DILocation(line: 407, column: 5, scope: !1180)
!1207 = !DILocation(line: 417, column: 16, scope: !1208)
!1208 = distinct !DILexicalBlock(scope: !1166, file: !31, line: 417, column: 5)
!1209 = !DILocation(line: 417, column: 10, scope: !1208)
!1210 = !DILocation(line: 417, column: 21, scope: !1211)
!1211 = !DILexicalBlockFile(scope: !1212, file: !31, discriminator: 2)
!1212 = !DILexicalBlockFile(scope: !1213, file: !31, discriminator: 1)
!1213 = distinct !DILexicalBlock(scope: !1208, file: !31, line: 417, column: 5)
!1214 = !DILocation(line: 417, column: 33, scope: !1213)
!1215 = !DILocation(line: 417, column: 29, scope: !1213)
!1216 = !DILocation(line: 417, column: 38, scope: !1213)
!1217 = !DILocation(line: 417, column: 27, scope: !1213)
!1218 = !DILocation(line: 417, column: 5, scope: !1208)
!1219 = !DILocation(line: 418, column: 34, scope: !1220)
!1220 = distinct !DILexicalBlock(scope: !1221, file: !31, line: 418, column: 11)
!1221 = distinct !DILexicalBlock(scope: !1213, file: !31, line: 417, column: 58)
!1222 = !DILocation(line: 418, column: 15, scope: !1220)
!1223 = !DILocation(line: 418, column: 11, scope: !1220)
!1224 = !DILocation(line: 418, column: 20, scope: !1220)
!1225 = !DILocation(line: 418, column: 41, scope: !1220)
!1226 = !DILocation(line: 418, column: 48, scope: !1220)
!1227 = !DILocation(line: 418, column: 45, scope: !1220)
!1228 = !DILocation(line: 418, column: 11, scope: !1221)
!1229 = !DILocation(line: 419, column: 32, scope: !1230)
!1230 = distinct !DILexicalBlock(scope: !1220, file: !31, line: 418, column: 53)
!1231 = !DILocation(line: 419, column: 13, scope: !1230)
!1232 = !DILocation(line: 419, column: 9, scope: !1230)
!1233 = !DILocation(line: 419, column: 18, scope: !1230)
!1234 = !DILocation(line: 419, column: 39, scope: !1230)
!1235 = !DILocation(line: 419, column: 47, scope: !1230)
!1236 = !DILocation(line: 420, column: 9, scope: !1230)
!1237 = !DILocation(line: 422, column: 5, scope: !1221)
!1238 = !DILocation(line: 417, column: 54, scope: !1213)
!1239 = !DILocation(line: 417, column: 5, scope: !1213)
!1240 = !DILocation(line: 427, column: 11, scope: !1166)
!1241 = !DILocation(line: 428, column: 17, scope: !1166)
!1242 = !DILocation(line: 428, column: 5, scope: !1166)
!1243 = !DILocation(line: 429, column: 14, scope: !1166)
!1244 = !DILocation(line: 429, column: 19, scope: !1166)
!1245 = !DILocation(line: 429, column: 24, scope: !1166)
!1246 = !DILocation(line: 429, column: 5, scope: !1166)
!1247 = !DILocation(line: 430, column: 14, scope: !1248)
!1248 = distinct !DILexicalBlock(scope: !1166, file: !31, line: 430, column: 5)
!1249 = !DILocation(line: 430, column: 10, scope: !1248)
!1250 = !DILocation(line: 430, column: 19, scope: !1251)
!1251 = !DILexicalBlockFile(scope: !1252, file: !31, discriminator: 2)
!1252 = !DILexicalBlockFile(scope: !1253, file: !31, discriminator: 1)
!1253 = distinct !DILexicalBlock(scope: !1248, file: !31, line: 430, column: 5)
!1254 = !DILocation(line: 430, column: 26, scope: !1253)
!1255 = !DILocation(line: 430, column: 23, scope: !1253)
!1256 = !DILocation(line: 430, column: 5, scope: !1248)
!1257 = !DILocation(line: 431, column: 18, scope: !1258)
!1258 = distinct !DILexicalBlock(scope: !1259, file: !31, line: 431, column: 11)
!1259 = distinct !DILexicalBlock(scope: !1253, file: !31, line: 430, column: 43)
!1260 = !DILocation(line: 431, column: 11, scope: !1258)
!1261 = !DILocation(line: 431, column: 23, scope: !1258)
!1262 = !DILocation(line: 431, column: 11, scope: !1259)
!1263 = !DILocation(line: 432, column: 15, scope: !1264)
!1264 = distinct !DILexicalBlock(scope: !1258, file: !31, line: 431, column: 28)
!1265 = !DILocation(line: 433, column: 9, scope: !1264)
!1266 = !DILocation(line: 435, column: 5, scope: !1259)
!1267 = !DILocation(line: 430, column: 39, scope: !1253)
!1268 = !DILocation(line: 430, column: 5, scope: !1253)
!1269 = !DILocation(line: 436, column: 9, scope: !1270)
!1270 = distinct !DILexicalBlock(scope: !1166, file: !31, line: 436, column: 9)
!1271 = !DILocation(line: 436, column: 9, scope: !1166)
!1272 = !DILocation(line: 441, column: 18, scope: !1273)
!1273 = distinct !DILexicalBlock(scope: !1274, file: !31, line: 441, column: 7)
!1274 = distinct !DILexicalBlock(scope: !1270, file: !31, line: 436, column: 16)
!1275 = !DILocation(line: 441, column: 12, scope: !1273)
!1276 = !DILocation(line: 441, column: 23, scope: !1277)
!1277 = !DILexicalBlockFile(scope: !1278, file: !31, discriminator: 2)
!1278 = !DILexicalBlockFile(scope: !1279, file: !31, discriminator: 1)
!1279 = distinct !DILexicalBlock(scope: !1273, file: !31, line: 441, column: 7)
!1280 = !DILocation(line: 441, column: 35, scope: !1279)
!1281 = !DILocation(line: 441, column: 31, scope: !1279)
!1282 = !DILocation(line: 441, column: 40, scope: !1279)
!1283 = !DILocation(line: 441, column: 29, scope: !1279)
!1284 = !DILocation(line: 441, column: 7, scope: !1273)
!1285 = !DILocation(line: 442, column: 36, scope: !1286)
!1286 = distinct !DILexicalBlock(scope: !1287, file: !31, line: 442, column: 13)
!1287 = distinct !DILexicalBlock(scope: !1279, file: !31, line: 441, column: 60)
!1288 = !DILocation(line: 442, column: 17, scope: !1286)
!1289 = !DILocation(line: 442, column: 13, scope: !1286)
!1290 = !DILocation(line: 442, column: 22, scope: !1286)
!1291 = !DILocation(line: 442, column: 43, scope: !1286)
!1292 = !DILocation(line: 442, column: 50, scope: !1286)
!1293 = !DILocation(line: 442, column: 47, scope: !1286)
!1294 = !DILocation(line: 442, column: 13, scope: !1287)
!1295 = !DILocation(line: 443, column: 34, scope: !1296)
!1296 = distinct !DILexicalBlock(scope: !1286, file: !31, line: 442, column: 55)
!1297 = !DILocation(line: 443, column: 15, scope: !1296)
!1298 = !DILocation(line: 443, column: 11, scope: !1296)
!1299 = !DILocation(line: 443, column: 20, scope: !1296)
!1300 = !DILocation(line: 443, column: 41, scope: !1296)
!1301 = !DILocation(line: 443, column: 49, scope: !1296)
!1302 = !DILocation(line: 444, column: 11, scope: !1296)
!1303 = !DILocation(line: 446, column: 7, scope: !1287)
!1304 = !DILocation(line: 441, column: 56, scope: !1279)
!1305 = !DILocation(line: 441, column: 7, scope: !1279)
!1306 = !DILocation(line: 447, column: 18, scope: !1307)
!1307 = distinct !DILexicalBlock(scope: !1274, file: !31, line: 447, column: 7)
!1308 = !DILocation(line: 447, column: 12, scope: !1307)
!1309 = !DILocation(line: 447, column: 23, scope: !1310)
!1310 = !DILexicalBlockFile(scope: !1311, file: !31, discriminator: 2)
!1311 = !DILexicalBlockFile(scope: !1312, file: !31, discriminator: 1)
!1312 = distinct !DILexicalBlock(scope: !1307, file: !31, line: 447, column: 7)
!1313 = !DILocation(line: 447, column: 35, scope: !1312)
!1314 = !DILocation(line: 447, column: 31, scope: !1312)
!1315 = !DILocation(line: 447, column: 40, scope: !1312)
!1316 = !DILocation(line: 447, column: 29, scope: !1312)
!1317 = !DILocation(line: 447, column: 7, scope: !1307)
!1318 = !DILocation(line: 448, column: 36, scope: !1319)
!1319 = distinct !DILexicalBlock(scope: !1320, file: !31, line: 448, column: 13)
!1320 = distinct !DILexicalBlock(scope: !1312, file: !31, line: 447, column: 60)
!1321 = !DILocation(line: 448, column: 17, scope: !1319)
!1322 = !DILocation(line: 448, column: 13, scope: !1319)
!1323 = !DILocation(line: 448, column: 22, scope: !1319)
!1324 = !DILocation(line: 448, column: 43, scope: !1319)
!1325 = !DILocation(line: 448, column: 50, scope: !1319)
!1326 = !DILocation(line: 448, column: 47, scope: !1319)
!1327 = !DILocation(line: 448, column: 13, scope: !1320)
!1328 = !DILocation(line: 449, column: 34, scope: !1329)
!1329 = distinct !DILexicalBlock(scope: !1319, file: !31, line: 448, column: 55)
!1330 = !DILocation(line: 449, column: 15, scope: !1329)
!1331 = !DILocation(line: 449, column: 11, scope: !1329)
!1332 = !DILocation(line: 449, column: 20, scope: !1329)
!1333 = !DILocation(line: 449, column: 41, scope: !1329)
!1334 = !DILocation(line: 449, column: 49, scope: !1329)
!1335 = !DILocation(line: 450, column: 11, scope: !1329)
!1336 = !DILocation(line: 452, column: 7, scope: !1320)
!1337 = !DILocation(line: 447, column: 56, scope: !1312)
!1338 = !DILocation(line: 447, column: 7, scope: !1312)
!1339 = !DILocation(line: 453, column: 5, scope: !1274)
!1340 = !DILocation(line: 458, column: 12, scope: !1341)
!1341 = distinct !DILexicalBlock(scope: !1270, file: !31, line: 453, column: 12)
!1342 = !DILocation(line: 460, column: 3, scope: !1166)
!1343 = !DILocation(line: 396, column: 42, scope: !1161)
!1344 = !DILocation(line: 396, column: 3, scope: !1161)
!1345 = !DILocation(line: 462, column: 7, scope: !1346)
!1346 = distinct !DILexicalBlock(scope: !56, file: !31, line: 462, column: 7)
!1347 = !DILocation(line: 462, column: 7, scope: !56)
!1348 = !DILocation(line: 463, column: 5, scope: !1349)
!1349 = distinct !DILexicalBlock(scope: !1346, file: !31, line: 462, column: 16)
!1350 = !DILocation(line: 464, column: 3, scope: !1349)
!1351 = !DILocation(line: 465, column: 5, scope: !1352)
!1352 = distinct !DILexicalBlock(scope: !1346, file: !31, line: 464, column: 10)
!1353 = !DILocation(line: 466, column: 43, scope: !1352)
!1354 = !DILocation(line: 466, column: 5, scope: !1352)
!1355 = !DILocation(line: 468, column: 1, scope: !56)
!1356 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !57, file: !31, line: 470, type: !4)
!1357 = !DILocation(line: 470, column: 39, scope: !57)
!1358 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "SCC", arg: 2, scope: !57, file: !31, line: 471, type: !26)
!1359 = !DILocation(line: 471, column: 33, scope: !57)
!1360 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "perSCC", arg: 3, scope: !57, file: !31, line: 472, type: !26)
!1361 = !DILocation(line: 472, column: 33, scope: !57)
!1362 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "removeVCG", arg: 4, scope: !57, file: !31, line: 473, type: !27)
!1363 = !DILocation(line: 473, column: 46, scope: !57)
!1364 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "scc", scope: !57, file: !31, line: 474, type: !15)
!1365 = !DILocation(line: 474, column: 9, scope: !57)
!1366 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "net", scope: !57, file: !31, line: 475, type: !15)
!1367 = !DILocation(line: 475, column: 9, scope: !57)
!1368 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "which", scope: !57, file: !31, line: 476, type: !15)
!1369 = !DILocation(line: 476, column: 9, scope: !57)
!1370 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "best", scope: !57, file: !31, line: 477, type: !15)
!1371 = !DILocation(line: 477, column: 9, scope: !57)
!1372 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "weight", scope: !57, file: !31, line: 478, type: !15)
!1373 = !DILocation(line: 478, column: 9, scope: !57)
!1374 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "top", scope: !57, file: !31, line: 479, type: !15)
!1375 = !DILocation(line: 479, column: 9, scope: !57)
!1376 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bot", scope: !57, file: !31, line: 480, type: !15)
!1377 = !DILocation(line: 480, column: 9, scope: !57)
!1378 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "col", scope: !57, file: !31, line: 481, type: !15)
!1379 = !DILocation(line: 481, column: 9, scope: !57)
!1380 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "remove", scope: !57, file: !31, line: 482, type: !10)
!1381 = !DILocation(line: 482, column: 22, scope: !57)
!1382 = !DILocation(line: 484, column: 12, scope: !1383)
!1383 = distinct !DILexicalBlock(scope: !57, file: !31, line: 484, column: 3)
!1384 = !DILocation(line: 484, column: 8, scope: !1383)
!1385 = !DILocation(line: 484, column: 17, scope: !1386)
!1386 = !DILexicalBlockFile(scope: !1387, file: !31, discriminator: 2)
!1387 = !DILexicalBlockFile(scope: !1388, file: !31, discriminator: 1)
!1388 = distinct !DILexicalBlock(scope: !1383, file: !31, line: 484, column: 3)
!1389 = !DILocation(line: 484, column: 24, scope: !1388)
!1390 = !DILocation(line: 484, column: 21, scope: !1388)
!1391 = !DILocation(line: 484, column: 3, scope: !1383)
!1392 = !DILocation(line: 488, column: 16, scope: !1393)
!1393 = distinct !DILexicalBlock(scope: !1394, file: !31, line: 488, column: 9)
!1394 = distinct !DILexicalBlock(scope: !1388, file: !31, line: 484, column: 41)
!1395 = !DILocation(line: 488, column: 9, scope: !1393)
!1396 = !DILocation(line: 488, column: 21, scope: !1393)
!1397 = !DILocation(line: 488, column: 9, scope: !1394)
!1398 = !DILocation(line: 492, column: 14, scope: !1399)
!1399 = distinct !DILexicalBlock(scope: !1393, file: !31, line: 488, column: 26)
!1400 = !DILocation(line: 493, column: 12, scope: !1399)
!1401 = !DILocation(line: 494, column: 16, scope: !1402)
!1402 = distinct !DILexicalBlock(scope: !1399, file: !31, line: 494, column: 7)
!1403 = !DILocation(line: 494, column: 12, scope: !1402)
!1404 = !DILocation(line: 494, column: 21, scope: !1405)
!1405 = !DILexicalBlockFile(scope: !1406, file: !31, discriminator: 2)
!1406 = !DILexicalBlockFile(scope: !1407, file: !31, discriminator: 1)
!1407 = distinct !DILexicalBlock(scope: !1402, file: !31, line: 494, column: 7)
!1408 = !DILocation(line: 494, column: 28, scope: !1407)
!1409 = !DILocation(line: 494, column: 25, scope: !1407)
!1410 = !DILocation(line: 494, column: 7, scope: !1402)
!1411 = !DILocation(line: 498, column: 17, scope: !1412)
!1412 = distinct !DILexicalBlock(scope: !1413, file: !31, line: 498, column: 13)
!1413 = distinct !DILexicalBlock(scope: !1407, file: !31, line: 494, column: 48)
!1414 = !DILocation(line: 498, column: 13, scope: !1412)
!1415 = !DILocation(line: 498, column: 25, scope: !1412)
!1416 = !DILocation(line: 498, column: 22, scope: !1412)
!1417 = !DILocation(line: 498, column: 13, scope: !1413)
!1418 = !DILocation(line: 503, column: 22, scope: !1419)
!1419 = distinct !DILexicalBlock(scope: !1420, file: !31, line: 503, column: 11)
!1420 = distinct !DILexicalBlock(scope: !1412, file: !31, line: 498, column: 30)
!1421 = !DILocation(line: 503, column: 16, scope: !1419)
!1422 = !DILocation(line: 503, column: 27, scope: !1423)
!1423 = !DILexicalBlockFile(scope: !1424, file: !31, discriminator: 2)
!1424 = !DILexicalBlockFile(scope: !1425, file: !31, discriminator: 1)
!1425 = distinct !DILexicalBlock(scope: !1419, file: !31, line: 503, column: 11)
!1426 = !DILocation(line: 503, column: 39, scope: !1425)
!1427 = !DILocation(line: 503, column: 35, scope: !1425)
!1428 = !DILocation(line: 503, column: 44, scope: !1425)
!1429 = !DILocation(line: 503, column: 33, scope: !1425)
!1430 = !DILocation(line: 503, column: 11, scope: !1419)
!1431 = !DILocation(line: 504, column: 42, scope: !1432)
!1432 = distinct !DILexicalBlock(scope: !1425, file: !31, line: 503, column: 64)
!1433 = !DILocation(line: 504, column: 23, scope: !1432)
!1434 = !DILocation(line: 504, column: 19, scope: !1432)
!1435 = !DILocation(line: 504, column: 28, scope: !1432)
!1436 = !DILocation(line: 504, column: 49, scope: !1432)
!1437 = !DILocation(line: 504, column: 17, scope: !1432)
!1438 = !DILocation(line: 505, column: 22, scope: !1439)
!1439 = distinct !DILexicalBlock(scope: !1432, file: !31, line: 505, column: 17)
!1440 = !DILocation(line: 505, column: 18, scope: !1439)
!1441 = !DILocation(line: 505, column: 30, scope: !1439)
!1442 = !DILocation(line: 505, column: 27, scope: !1439)
!1443 = !DILocation(line: 505, column: 35, scope: !1439)
!1444 = !DILocation(line: 505, column: 63, scope: !1445)
!1445 = !DILexicalBlockFile(scope: !1439, file: !31, discriminator: 1)
!1446 = !DILocation(line: 505, column: 44, scope: !1439)
!1447 = !DILocation(line: 505, column: 40, scope: !1439)
!1448 = !DILocation(line: 505, column: 49, scope: !1439)
!1449 = !DILocation(line: 505, column: 70, scope: !1439)
!1450 = !DILocation(line: 505, column: 17, scope: !1432)
!1451 = !DILocation(line: 524, column: 44, scope: !1452)
!1452 = distinct !DILexicalBlock(scope: !1439, file: !31, line: 505, column: 80)
!1453 = !DILocation(line: 524, column: 25, scope: !1452)
!1454 = !DILocation(line: 524, column: 21, scope: !1452)
!1455 = !DILocation(line: 524, column: 30, scope: !1452)
!1456 = !DILocation(line: 524, column: 51, scope: !1452)
!1457 = !DILocation(line: 524, column: 19, scope: !1452)
!1458 = !DILocation(line: 525, column: 22, scope: !1452)
!1459 = !DILocation(line: 526, column: 19, scope: !1460)
!1460 = distinct !DILexicalBlock(scope: !1452, file: !31, line: 526, column: 19)
!1461 = !DILocation(line: 526, column: 23, scope: !1460)
!1462 = !DILocation(line: 526, column: 19, scope: !1452)
!1463 = !DILocation(line: 527, column: 24, scope: !1464)
!1464 = distinct !DILexicalBlock(scope: !1460, file: !31, line: 526, column: 29)
!1465 = !DILocation(line: 528, column: 25, scope: !1466)
!1466 = distinct !DILexicalBlock(scope: !1464, file: !31, line: 528, column: 21)
!1467 = !DILocation(line: 528, column: 29, scope: !1466)
!1468 = !DILocation(line: 528, column: 21, scope: !1466)
!1469 = !DILocation(line: 528, column: 34, scope: !1466)
!1470 = !DILocation(line: 528, column: 41, scope: !1471)
!1471 = !DILexicalBlockFile(scope: !1466, file: !31, discriminator: 1)
!1472 = !DILocation(line: 528, column: 45, scope: !1466)
!1473 = !DILocation(line: 528, column: 37, scope: !1466)
!1474 = !DILocation(line: 528, column: 21, scope: !1464)
!1475 = !DILocation(line: 529, column: 26, scope: !1476)
!1476 = distinct !DILexicalBlock(scope: !1466, file: !31, line: 528, column: 51)
!1477 = !DILocation(line: 530, column: 17, scope: !1476)
!1478 = !DILocation(line: 530, column: 34, scope: !1479)
!1479 = distinct !DILexicalBlock(scope: !1466, file: !31, line: 530, column: 28)
!1480 = !DILocation(line: 530, column: 38, scope: !1479)
!1481 = !DILocation(line: 530, column: 30, scope: !1479)
!1482 = !DILocation(line: 530, column: 43, scope: !1479)
!1483 = !DILocation(line: 530, column: 50, scope: !1484)
!1484 = !DILexicalBlockFile(scope: !1479, file: !31, discriminator: 1)
!1485 = !DILocation(line: 530, column: 54, scope: !1479)
!1486 = !DILocation(line: 530, column: 46, scope: !1479)
!1487 = !DILocation(line: 530, column: 28, scope: !1466)
!1488 = !DILocation(line: 531, column: 17, scope: !1489)
!1489 = distinct !DILexicalBlock(scope: !1479, file: !31, line: 530, column: 61)
!1490 = !DILocation(line: 532, column: 26, scope: !1491)
!1491 = distinct !DILexicalBlock(scope: !1479, file: !31, line: 531, column: 24)
!1492 = !DILocation(line: 534, column: 15, scope: !1464)
!1493 = !DILocation(line: 534, column: 26, scope: !1494)
!1494 = distinct !DILexicalBlock(scope: !1460, file: !31, line: 534, column: 26)
!1495 = !DILocation(line: 534, column: 33, scope: !1494)
!1496 = !DILocation(line: 534, column: 30, scope: !1494)
!1497 = !DILocation(line: 534, column: 26, scope: !1460)
!1498 = !DILocation(line: 535, column: 24, scope: !1499)
!1499 = distinct !DILexicalBlock(scope: !1494, file: !31, line: 534, column: 49)
!1500 = !DILocation(line: 536, column: 25, scope: !1501)
!1501 = distinct !DILexicalBlock(scope: !1499, file: !31, line: 536, column: 21)
!1502 = !DILocation(line: 536, column: 29, scope: !1501)
!1503 = !DILocation(line: 536, column: 21, scope: !1501)
!1504 = !DILocation(line: 536, column: 34, scope: !1501)
!1505 = !DILocation(line: 536, column: 41, scope: !1506)
!1506 = !DILexicalBlockFile(scope: !1501, file: !31, discriminator: 1)
!1507 = !DILocation(line: 536, column: 45, scope: !1501)
!1508 = !DILocation(line: 536, column: 37, scope: !1501)
!1509 = !DILocation(line: 536, column: 21, scope: !1499)
!1510 = !DILocation(line: 537, column: 26, scope: !1511)
!1511 = distinct !DILexicalBlock(scope: !1501, file: !31, line: 536, column: 51)
!1512 = !DILocation(line: 538, column: 17, scope: !1511)
!1513 = !DILocation(line: 538, column: 34, scope: !1514)
!1514 = distinct !DILexicalBlock(scope: !1501, file: !31, line: 538, column: 28)
!1515 = !DILocation(line: 538, column: 38, scope: !1514)
!1516 = !DILocation(line: 538, column: 30, scope: !1514)
!1517 = !DILocation(line: 538, column: 43, scope: !1514)
!1518 = !DILocation(line: 538, column: 50, scope: !1519)
!1519 = !DILexicalBlockFile(scope: !1514, file: !31, discriminator: 1)
!1520 = !DILocation(line: 538, column: 54, scope: !1514)
!1521 = !DILocation(line: 538, column: 46, scope: !1514)
!1522 = !DILocation(line: 538, column: 28, scope: !1501)
!1523 = !DILocation(line: 539, column: 17, scope: !1524)
!1524 = distinct !DILexicalBlock(scope: !1514, file: !31, line: 538, column: 61)
!1525 = !DILocation(line: 540, column: 26, scope: !1526)
!1526 = distinct !DILexicalBlock(scope: !1514, file: !31, line: 539, column: 24)
!1527 = !DILocation(line: 542, column: 15, scope: !1499)
!1528 = !DILocation(line: 543, column: 25, scope: !1529)
!1529 = distinct !DILexicalBlock(scope: !1530, file: !31, line: 543, column: 21)
!1530 = distinct !DILexicalBlock(scope: !1494, file: !31, line: 542, column: 22)
!1531 = !DILocation(line: 543, column: 29, scope: !1529)
!1532 = !DILocation(line: 543, column: 21, scope: !1529)
!1533 = !DILocation(line: 543, column: 34, scope: !1529)
!1534 = !DILocation(line: 543, column: 41, scope: !1535)
!1535 = !DILexicalBlockFile(scope: !1529, file: !31, discriminator: 1)
!1536 = !DILocation(line: 543, column: 45, scope: !1529)
!1537 = !DILocation(line: 543, column: 37, scope: !1529)
!1538 = !DILocation(line: 543, column: 21, scope: !1530)
!1539 = !DILocation(line: 544, column: 26, scope: !1540)
!1540 = distinct !DILexicalBlock(scope: !1529, file: !31, line: 543, column: 51)
!1541 = !DILocation(line: 545, column: 17, scope: !1540)
!1542 = !DILocation(line: 545, column: 34, scope: !1543)
!1543 = distinct !DILexicalBlock(scope: !1529, file: !31, line: 545, column: 28)
!1544 = !DILocation(line: 545, column: 38, scope: !1543)
!1545 = !DILocation(line: 545, column: 30, scope: !1543)
!1546 = !DILocation(line: 545, column: 43, scope: !1543)
!1547 = !DILocation(line: 545, column: 50, scope: !1548)
!1548 = !DILexicalBlockFile(scope: !1543, file: !31, discriminator: 1)
!1549 = !DILocation(line: 545, column: 54, scope: !1543)
!1550 = !DILocation(line: 545, column: 46, scope: !1543)
!1551 = !DILocation(line: 545, column: 28, scope: !1529)
!1552 = !DILocation(line: 546, column: 17, scope: !1553)
!1553 = distinct !DILexicalBlock(scope: !1543, file: !31, line: 545, column: 61)
!1554 = !DILocation(line: 547, column: 26, scope: !1555)
!1555 = distinct !DILexicalBlock(scope: !1543, file: !31, line: 546, column: 24)
!1556 = !DILocation(line: 549, column: 25, scope: !1557)
!1557 = distinct !DILexicalBlock(scope: !1530, file: !31, line: 549, column: 21)
!1558 = !DILocation(line: 549, column: 29, scope: !1557)
!1559 = !DILocation(line: 549, column: 21, scope: !1557)
!1560 = !DILocation(line: 549, column: 34, scope: !1557)
!1561 = !DILocation(line: 549, column: 41, scope: !1562)
!1562 = !DILexicalBlockFile(scope: !1557, file: !31, discriminator: 1)
!1563 = !DILocation(line: 549, column: 45, scope: !1557)
!1564 = !DILocation(line: 549, column: 37, scope: !1557)
!1565 = !DILocation(line: 549, column: 21, scope: !1530)
!1566 = !DILocation(line: 550, column: 26, scope: !1567)
!1567 = distinct !DILexicalBlock(scope: !1557, file: !31, line: 549, column: 51)
!1568 = !DILocation(line: 551, column: 17, scope: !1567)
!1569 = !DILocation(line: 551, column: 34, scope: !1570)
!1570 = distinct !DILexicalBlock(scope: !1557, file: !31, line: 551, column: 28)
!1571 = !DILocation(line: 551, column: 38, scope: !1570)
!1572 = !DILocation(line: 551, column: 30, scope: !1570)
!1573 = !DILocation(line: 551, column: 43, scope: !1570)
!1574 = !DILocation(line: 551, column: 50, scope: !1575)
!1575 = !DILexicalBlockFile(scope: !1570, file: !31, discriminator: 1)
!1576 = !DILocation(line: 551, column: 54, scope: !1570)
!1577 = !DILocation(line: 551, column: 46, scope: !1570)
!1578 = !DILocation(line: 551, column: 28, scope: !1557)
!1579 = !DILocation(line: 552, column: 17, scope: !1580)
!1580 = distinct !DILexicalBlock(scope: !1570, file: !31, line: 551, column: 61)
!1581 = !DILocation(line: 553, column: 26, scope: !1582)
!1582 = distinct !DILexicalBlock(scope: !1570, file: !31, line: 552, column: 24)
!1583 = !DILocation(line: 560, column: 19, scope: !1584)
!1584 = distinct !DILexicalBlock(scope: !1452, file: !31, line: 560, column: 19)
!1585 = !DILocation(line: 560, column: 28, scope: !1584)
!1586 = !DILocation(line: 560, column: 26, scope: !1584)
!1587 = !DILocation(line: 560, column: 19, scope: !1452)
!1588 = !DILocation(line: 561, column: 24, scope: !1589)
!1589 = distinct !DILexicalBlock(scope: !1584, file: !31, line: 560, column: 34)
!1590 = !DILocation(line: 561, column: 22, scope: !1589)
!1591 = !DILocation(line: 562, column: 50, scope: !1589)
!1592 = !DILocation(line: 562, column: 31, scope: !1589)
!1593 = !DILocation(line: 562, column: 27, scope: !1589)
!1594 = !DILocation(line: 562, column: 36, scope: !1589)
!1595 = !DILocation(line: 562, column: 24, scope: !1589)
!1596 = !DILocation(line: 563, column: 15, scope: !1589)
!1597 = !DILocation(line: 564, column: 13, scope: !1452)
!1598 = !DILocation(line: 565, column: 11, scope: !1432)
!1599 = !DILocation(line: 503, column: 60, scope: !1425)
!1600 = !DILocation(line: 503, column: 11, scope: !1425)
!1601 = !DILocation(line: 566, column: 9, scope: !1420)
!1602 = !DILocation(line: 567, column: 7, scope: !1413)
!1603 = !DILocation(line: 494, column: 44, scope: !1407)
!1604 = !DILocation(line: 494, column: 7, scope: !1407)
!1605 = !DILocation(line: 572, column: 7, scope: !1399)
!1606 = !DILocation(line: 572, column: 7, scope: !1607)
!1607 = !DILexicalBlockFile(scope: !1399, file: !31, discriminator: 1)
!1608 = !DILocation(line: 572, column: 7, scope: !1609)
!1609 = !DILexicalBlockFile(scope: !1399, file: !31, discriminator: 2)
!1610 = !DILocation(line: 573, column: 14, scope: !1399)
!1611 = !DILocation(line: 573, column: 7, scope: !1399)
!1612 = !DILocation(line: 574, column: 7, scope: !1399)
!1613 = !DILocation(line: 574, column: 7, scope: !1607)
!1614 = !DILocation(line: 574, column: 7, scope: !1609)
!1615 = !DILocation(line: 575, column: 35, scope: !1399)
!1616 = !DILocation(line: 575, column: 17, scope: !1399)
!1617 = !DILocation(line: 575, column: 7, scope: !1399)
!1618 = !DILocation(line: 575, column: 33, scope: !1399)
!1619 = !DILocation(line: 576, column: 21, scope: !1399)
!1620 = !DILocation(line: 577, column: 15, scope: !1399)
!1621 = !DILocation(line: 577, column: 23, scope: !1399)
!1622 = !DILocation(line: 577, column: 11, scope: !1399)
!1623 = !DILocation(line: 578, column: 15, scope: !1399)
!1624 = !DILocation(line: 578, column: 23, scope: !1399)
!1625 = !DILocation(line: 578, column: 11, scope: !1399)
!1626 = !DILocation(line: 583, column: 9, scope: !1399)
!1627 = !DILocation(line: 583, column: 17, scope: !1399)
!1628 = !DILocation(line: 583, column: 25, scope: !1399)
!1629 = !DILocation(line: 588, column: 18, scope: !1630)
!1630 = distinct !DILexicalBlock(scope: !1399, file: !31, line: 588, column: 7)
!1631 = !DILocation(line: 588, column: 12, scope: !1630)
!1632 = !DILocation(line: 588, column: 23, scope: !1633)
!1633 = !DILexicalBlockFile(scope: !1634, file: !31, discriminator: 2)
!1634 = !DILexicalBlockFile(scope: !1635, file: !31, discriminator: 1)
!1635 = distinct !DILexicalBlock(scope: !1630, file: !31, line: 588, column: 7)
!1636 = !DILocation(line: 588, column: 35, scope: !1635)
!1637 = !DILocation(line: 588, column: 31, scope: !1635)
!1638 = !DILocation(line: 588, column: 40, scope: !1635)
!1639 = !DILocation(line: 588, column: 29, scope: !1635)
!1640 = !DILocation(line: 588, column: 7, scope: !1630)
!1641 = !DILocation(line: 589, column: 36, scope: !1642)
!1642 = distinct !DILexicalBlock(scope: !1643, file: !31, line: 589, column: 13)
!1643 = distinct !DILexicalBlock(scope: !1635, file: !31, line: 588, column: 60)
!1644 = !DILocation(line: 589, column: 17, scope: !1642)
!1645 = !DILocation(line: 589, column: 13, scope: !1642)
!1646 = !DILocation(line: 589, column: 22, scope: !1642)
!1647 = !DILocation(line: 589, column: 43, scope: !1642)
!1648 = !DILocation(line: 589, column: 50, scope: !1642)
!1649 = !DILocation(line: 589, column: 47, scope: !1642)
!1650 = !DILocation(line: 589, column: 13, scope: !1643)
!1651 = !DILocation(line: 590, column: 34, scope: !1652)
!1652 = distinct !DILexicalBlock(scope: !1642, file: !31, line: 589, column: 55)
!1653 = !DILocation(line: 590, column: 15, scope: !1652)
!1654 = !DILocation(line: 590, column: 11, scope: !1652)
!1655 = !DILocation(line: 590, column: 20, scope: !1652)
!1656 = !DILocation(line: 590, column: 41, scope: !1652)
!1657 = !DILocation(line: 590, column: 49, scope: !1652)
!1658 = !DILocation(line: 591, column: 11, scope: !1652)
!1659 = !DILocation(line: 593, column: 7, scope: !1643)
!1660 = !DILocation(line: 588, column: 56, scope: !1635)
!1661 = !DILocation(line: 588, column: 7, scope: !1635)
!1662 = !DILocation(line: 594, column: 5, scope: !1399)
!1663 = !DILocation(line: 595, column: 3, scope: !1394)
!1664 = !DILocation(line: 484, column: 37, scope: !1388)
!1665 = !DILocation(line: 484, column: 3, scope: !1388)
!1666 = !DILocation(line: 596, column: 1, scope: !57)
!1667 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !60, file: !31, line: 598, type: !4)
!1668 = !DILocation(line: 598, column: 38, scope: !60)
!1669 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "above", arg: 2, scope: !60, file: !31, line: 599, type: !15)
!1670 = !DILocation(line: 599, column: 31, scope: !60)
!1671 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "below", arg: 3, scope: !60, file: !31, line: 600, type: !15)
!1672 = !DILocation(line: 600, column: 31, scope: !60)
!1673 = !DILocation(line: 601, column: 15, scope: !60)
!1674 = !DILocation(line: 601, column: 3, scope: !60)
!1675 = !DILocation(line: 602, column: 15, scope: !60)
!1676 = !DILocation(line: 602, column: 20, scope: !60)
!1677 = !DILocation(line: 602, column: 3, scope: !60)
!1678 = !DILocation(line: 603, column: 15, scope: !60)
!1679 = !DILocation(line: 603, column: 11, scope: !60)
!1680 = !DILocation(line: 603, column: 22, scope: !60)
!1681 = !DILocation(line: 603, column: 3, scope: !60)
!1682 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !63, file: !31, line: 606, type: !4)
!1683 = !DILocation(line: 606, column: 34, scope: !63)
!1684 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "net", arg: 2, scope: !63, file: !31, line: 607, type: !15)
!1685 = !DILocation(line: 607, column: 27, scope: !63)
!1686 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "track", scope: !63, file: !31, line: 608, type: !15)
!1687 = !DILocation(line: 608, column: 9, scope: !63)
!1688 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bot", scope: !63, file: !31, line: 609, type: !15)
!1689 = !DILocation(line: 609, column: 9, scope: !63)
!1690 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "top", scope: !63, file: !31, line: 610, type: !15)
!1691 = !DILocation(line: 610, column: 9, scope: !63)
!1692 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "not", scope: !63, file: !31, line: 611, type: !15)
!1693 = !DILocation(line: 611, column: 9, scope: !63)
!1694 = !DILocation(line: 618, column: 15, scope: !63)
!1695 = !DILocation(line: 618, column: 3, scope: !63)
!1696 = !DILocation(line: 619, column: 43, scope: !63)
!1697 = !DILocation(line: 619, column: 48, scope: !63)
!1698 = !DILocation(line: 619, column: 20, scope: !63)
!1699 = !DILocation(line: 619, column: 53, scope: !63)
!1700 = !DILocation(line: 619, column: 18, scope: !63)
!1701 = !DILocation(line: 620, column: 9, scope: !63)
!1702 = !DILocation(line: 620, column: 7, scope: !63)
!1703 = !DILocation(line: 621, column: 16, scope: !1704)
!1704 = distinct !DILexicalBlock(scope: !63, file: !31, line: 621, column: 3)
!1705 = !DILocation(line: 621, column: 14, scope: !1704)
!1706 = !DILocation(line: 621, column: 8, scope: !1704)
!1707 = !DILocation(line: 621, column: 31, scope: !1708)
!1708 = !DILexicalBlockFile(scope: !1709, file: !31, discriminator: 2)
!1709 = !DILexicalBlockFile(scope: !1710, file: !31, discriminator: 1)
!1710 = distinct !DILexicalBlock(scope: !1704, file: !31, line: 621, column: 3)
!1711 = !DILocation(line: 621, column: 37, scope: !1710)
!1712 = !DILocation(line: 621, column: 3, scope: !1704)
!1713 = !DILocation(line: 622, column: 9, scope: !1714)
!1714 = distinct !DILexicalBlock(scope: !1715, file: !31, line: 622, column: 9)
!1715 = distinct !DILexicalBlock(scope: !1710, file: !31, line: 621, column: 52)
!1716 = !DILocation(line: 622, column: 13, scope: !1714)
!1717 = !DILocation(line: 622, column: 9, scope: !1715)
!1718 = !DILocation(line: 623, column: 24, scope: !1719)
!1719 = distinct !DILexicalBlock(scope: !1714, file: !31, line: 622, column: 18)
!1720 = !DILocation(line: 623, column: 7, scope: !1719)
!1721 = !DILocation(line: 623, column: 31, scope: !1719)
!1722 = !DILocation(line: 624, column: 10, scope: !1719)
!1723 = !DILocation(line: 625, column: 5, scope: !1719)
!1724 = !DILocation(line: 626, column: 24, scope: !1725)
!1725 = distinct !DILexicalBlock(scope: !1714, file: !31, line: 625, column: 12)
!1726 = !DILocation(line: 626, column: 7, scope: !1725)
!1727 = !DILocation(line: 626, column: 31, scope: !1725)
!1728 = !DILocation(line: 628, column: 3, scope: !1715)
!1729 = !DILocation(line: 621, column: 48, scope: !1710)
!1730 = !DILocation(line: 621, column: 3, scope: !1710)
!1731 = !DILocation(line: 635, column: 15, scope: !63)
!1732 = !DILocation(line: 635, column: 3, scope: !63)
!1733 = !DILocation(line: 636, column: 43, scope: !63)
!1734 = !DILocation(line: 636, column: 48, scope: !63)
!1735 = !DILocation(line: 636, column: 20, scope: !63)
!1736 = !DILocation(line: 636, column: 53, scope: !63)
!1737 = !DILocation(line: 636, column: 18, scope: !63)
!1738 = !DILocation(line: 637, column: 9, scope: !63)
!1739 = !DILocation(line: 637, column: 7, scope: !63)
!1740 = !DILocation(line: 638, column: 14, scope: !1741)
!1741 = distinct !DILexicalBlock(scope: !63, file: !31, line: 638, column: 3)
!1742 = !DILocation(line: 638, column: 8, scope: !1741)
!1743 = !DILocation(line: 638, column: 19, scope: !1744)
!1744 = !DILexicalBlockFile(scope: !1745, file: !31, discriminator: 2)
!1745 = !DILexicalBlockFile(scope: !1746, file: !31, discriminator: 1)
!1746 = distinct !DILexicalBlock(scope: !1741, file: !31, line: 638, column: 3)
!1747 = !DILocation(line: 638, column: 28, scope: !1746)
!1748 = !DILocation(line: 638, column: 25, scope: !1746)
!1749 = !DILocation(line: 638, column: 3, scope: !1741)
!1750 = !DILocation(line: 639, column: 9, scope: !1751)
!1751 = distinct !DILexicalBlock(scope: !1752, file: !31, line: 639, column: 9)
!1752 = distinct !DILexicalBlock(scope: !1746, file: !31, line: 638, column: 52)
!1753 = !DILocation(line: 639, column: 13, scope: !1751)
!1754 = !DILocation(line: 639, column: 9, scope: !1752)
!1755 = !DILocation(line: 640, column: 24, scope: !1756)
!1756 = distinct !DILexicalBlock(scope: !1751, file: !31, line: 639, column: 18)
!1757 = !DILocation(line: 640, column: 7, scope: !1756)
!1758 = !DILocation(line: 640, column: 31, scope: !1756)
!1759 = !DILocation(line: 641, column: 10, scope: !1756)
!1760 = !DILocation(line: 642, column: 5, scope: !1756)
!1761 = !DILocation(line: 643, column: 24, scope: !1762)
!1762 = distinct !DILexicalBlock(scope: !1751, file: !31, line: 642, column: 12)
!1763 = !DILocation(line: 643, column: 7, scope: !1762)
!1764 = !DILocation(line: 643, column: 31, scope: !1762)
!1765 = !DILocation(line: 645, column: 3, scope: !1752)
!1766 = !DILocation(line: 638, column: 48, scope: !1746)
!1767 = !DILocation(line: 638, column: 3, scope: !1746)
!1768 = !DILocation(line: 653, column: 7, scope: !63)
!1769 = !DILocation(line: 654, column: 14, scope: !1770)
!1770 = distinct !DILexicalBlock(scope: !63, file: !31, line: 654, column: 3)
!1771 = !DILocation(line: 654, column: 8, scope: !1770)
!1772 = !DILocation(line: 654, column: 19, scope: !1773)
!1773 = !DILexicalBlockFile(scope: !1774, file: !31, discriminator: 2)
!1774 = !DILexicalBlockFile(scope: !1775, file: !31, discriminator: 1)
!1775 = distinct !DILexicalBlock(scope: !1770, file: !31, line: 654, column: 3)
!1776 = !DILocation(line: 654, column: 28, scope: !1775)
!1777 = !DILocation(line: 654, column: 25, scope: !1775)
!1778 = !DILocation(line: 654, column: 3, scope: !1770)
!1779 = !DILocation(line: 655, column: 26, scope: !1780)
!1780 = distinct !DILexicalBlock(scope: !1781, file: !31, line: 655, column: 9)
!1781 = distinct !DILexicalBlock(scope: !1775, file: !31, line: 654, column: 52)
!1782 = !DILocation(line: 655, column: 9, scope: !1780)
!1783 = !DILocation(line: 655, column: 33, scope: !1780)
!1784 = !DILocation(line: 655, column: 53, scope: !1785)
!1785 = !DILexicalBlockFile(scope: !1780, file: !31, discriminator: 1)
!1786 = !DILocation(line: 655, column: 36, scope: !1780)
!1787 = !DILocation(line: 655, column: 9, scope: !1781)
!1788 = !DILocation(line: 656, column: 21, scope: !1789)
!1789 = distinct !DILexicalBlock(scope: !1780, file: !31, line: 655, column: 61)
!1790 = !DILocation(line: 656, column: 7, scope: !1789)
!1791 = !DILocation(line: 656, column: 28, scope: !1789)
!1792 = !DILocation(line: 657, column: 10, scope: !1789)
!1793 = !DILocation(line: 658, column: 5, scope: !1789)
!1794 = !DILocation(line: 659, column: 21, scope: !1795)
!1795 = distinct !DILexicalBlock(scope: !1780, file: !31, line: 658, column: 12)
!1796 = !DILocation(line: 659, column: 7, scope: !1795)
!1797 = !DILocation(line: 659, column: 28, scope: !1795)
!1798 = !DILocation(line: 661, column: 3, scope: !1781)
!1799 = !DILocation(line: 654, column: 48, scope: !1775)
!1800 = !DILocation(line: 654, column: 3, scope: !1775)
!1801 = !DILocation(line: 662, column: 17, scope: !63)
!1802 = !DILocation(line: 662, column: 15, scope: !63)
!1803 = !DILocation(line: 663, column: 1, scope: !63)
!1804 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !64, file: !31, line: 665, type: !4)
!1805 = !DILocation(line: 665, column: 43, scope: !64)
!1806 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "net", arg: 2, scope: !64, file: !31, line: 666, type: !15)
!1807 = !DILocation(line: 666, column: 36, scope: !64)
!1808 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !64, file: !31, line: 667, type: !15)
!1809 = !DILocation(line: 667, column: 9, scope: !64)
!1810 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "above", scope: !64, file: !31, line: 668, type: !15)
!1811 = !DILocation(line: 668, column: 9, scope: !64)
!1812 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !64, file: !31, line: 669, type: !15)
!1813 = !DILocation(line: 669, column: 9, scope: !64)
!1814 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "longest", scope: !64, file: !31, line: 670, type: !15)
!1815 = !DILocation(line: 670, column: 9, scope: !64)
!1816 = !DILocation(line: 672, column: 11, scope: !64)
!1817 = !DILocation(line: 673, column: 7, scope: !64)
!1818 = !DILocation(line: 673, column: 3, scope: !64)
!1819 = !DILocation(line: 673, column: 12, scope: !64)
!1820 = !DILocation(line: 673, column: 29, scope: !64)
!1821 = !DILocation(line: 674, column: 10, scope: !1822)
!1822 = distinct !DILexicalBlock(scope: !64, file: !31, line: 674, column: 3)
!1823 = !DILocation(line: 674, column: 8, scope: !1822)
!1824 = !DILocation(line: 674, column: 15, scope: !1825)
!1825 = !DILexicalBlockFile(scope: !1826, file: !31, discriminator: 2)
!1826 = !DILexicalBlockFile(scope: !1827, file: !31, discriminator: 1)
!1827 = distinct !DILexicalBlock(scope: !1822, file: !31, line: 674, column: 3)
!1828 = !DILocation(line: 674, column: 23, scope: !1827)
!1829 = !DILocation(line: 674, column: 19, scope: !1827)
!1830 = !DILocation(line: 674, column: 28, scope: !1827)
!1831 = !DILocation(line: 674, column: 17, scope: !1827)
!1832 = !DILocation(line: 674, column: 3, scope: !1822)
!1833 = !DILocation(line: 675, column: 33, scope: !1834)
!1834 = distinct !DILexicalBlock(scope: !1835, file: !31, line: 675, column: 9)
!1835 = distinct !DILexicalBlock(scope: !1827, file: !31, line: 674, column: 44)
!1836 = !DILocation(line: 675, column: 14, scope: !1834)
!1837 = !DILocation(line: 675, column: 10, scope: !1834)
!1838 = !DILocation(line: 675, column: 19, scope: !1834)
!1839 = !DILocation(line: 675, column: 36, scope: !1834)
!1840 = !DILocation(line: 675, column: 9, scope: !1835)
!1841 = !DILocation(line: 676, column: 7, scope: !1842)
!1842 = distinct !DILexicalBlock(scope: !1834, file: !31, line: 675, column: 45)
!1843 = !DILocation(line: 676, column: 7, scope: !1844)
!1844 = !DILexicalBlockFile(scope: !1842, file: !31, discriminator: 1)
!1845 = !DILocation(line: 676, column: 7, scope: !1846)
!1846 = !DILexicalBlockFile(scope: !1842, file: !31, discriminator: 2)
!1847 = !DILocation(line: 677, column: 38, scope: !1842)
!1848 = !DILocation(line: 677, column: 19, scope: !1842)
!1849 = !DILocation(line: 677, column: 15, scope: !1842)
!1850 = !DILocation(line: 677, column: 24, scope: !1842)
!1851 = !DILocation(line: 677, column: 41, scope: !1842)
!1852 = !DILocation(line: 677, column: 13, scope: !1842)
!1853 = !DILocation(line: 678, column: 16, scope: !1854)
!1854 = distinct !DILexicalBlock(scope: !1842, file: !31, line: 678, column: 11)
!1855 = !DILocation(line: 678, column: 12, scope: !1854)
!1856 = !DILocation(line: 678, column: 23, scope: !1854)
!1857 = !DILocation(line: 678, column: 11, scope: !1842)
!1858 = !DILocation(line: 679, column: 39, scope: !1859)
!1859 = distinct !DILexicalBlock(scope: !1854, file: !31, line: 678, column: 41)
!1860 = !DILocation(line: 679, column: 44, scope: !1859)
!1861 = !DILocation(line: 679, column: 16, scope: !1859)
!1862 = !DILocation(line: 679, column: 14, scope: !1859)
!1863 = !DILocation(line: 680, column: 13, scope: !1864)
!1864 = distinct !DILexicalBlock(scope: !1859, file: !31, line: 680, column: 13)
!1865 = !DILocation(line: 680, column: 20, scope: !1864)
!1866 = !DILocation(line: 680, column: 18, scope: !1864)
!1867 = !DILocation(line: 680, column: 13, scope: !1859)
!1868 = !DILocation(line: 681, column: 21, scope: !1869)
!1869 = distinct !DILexicalBlock(scope: !1864, file: !31, line: 680, column: 29)
!1870 = !DILocation(line: 681, column: 19, scope: !1869)
!1871 = !DILocation(line: 682, column: 9, scope: !1869)
!1872 = !DILocation(line: 683, column: 7, scope: !1859)
!1873 = !DILocation(line: 684, column: 5, scope: !1842)
!1874 = !DILocation(line: 685, column: 3, scope: !1835)
!1875 = !DILocation(line: 674, column: 40, scope: !1827)
!1876 = !DILocation(line: 674, column: 3, scope: !1827)
!1877 = !DILocation(line: 686, column: 11, scope: !64)
!1878 = !DILocation(line: 686, column: 19, scope: !64)
!1879 = !DILocation(line: 686, column: 3, scope: !64)
!1880 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !67, file: !31, line: 689, type: !4)
!1881 = !DILocation(line: 689, column: 43, scope: !67)
!1882 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "net", arg: 2, scope: !67, file: !31, line: 690, type: !15)
!1883 = !DILocation(line: 690, column: 36, scope: !67)
!1884 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !67, file: !31, line: 691, type: !15)
!1885 = !DILocation(line: 691, column: 9, scope: !67)
!1886 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "below", scope: !67, file: !31, line: 692, type: !15)
!1887 = !DILocation(line: 692, column: 9, scope: !67)
!1888 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !67, file: !31, line: 693, type: !15)
!1889 = !DILocation(line: 693, column: 9, scope: !67)
!1890 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "longest", scope: !67, file: !31, line: 694, type: !15)
!1891 = !DILocation(line: 694, column: 9, scope: !67)
!1892 = !DILocation(line: 696, column: 11, scope: !67)
!1893 = !DILocation(line: 697, column: 7, scope: !67)
!1894 = !DILocation(line: 697, column: 3, scope: !67)
!1895 = !DILocation(line: 697, column: 12, scope: !67)
!1896 = !DILocation(line: 697, column: 29, scope: !67)
!1897 = !DILocation(line: 698, column: 10, scope: !1898)
!1898 = distinct !DILexicalBlock(scope: !67, file: !31, line: 698, column: 3)
!1899 = !DILocation(line: 698, column: 8, scope: !1898)
!1900 = !DILocation(line: 698, column: 15, scope: !1901)
!1901 = !DILexicalBlockFile(scope: !1902, file: !31, discriminator: 2)
!1902 = !DILexicalBlockFile(scope: !1903, file: !31, discriminator: 1)
!1903 = distinct !DILexicalBlock(scope: !1898, file: !31, line: 698, column: 3)
!1904 = !DILocation(line: 698, column: 23, scope: !1903)
!1905 = !DILocation(line: 698, column: 19, scope: !1903)
!1906 = !DILocation(line: 698, column: 28, scope: !1903)
!1907 = !DILocation(line: 698, column: 17, scope: !1903)
!1908 = !DILocation(line: 698, column: 3, scope: !1898)
!1909 = !DILocation(line: 699, column: 33, scope: !1910)
!1910 = distinct !DILexicalBlock(scope: !1911, file: !31, line: 699, column: 9)
!1911 = distinct !DILexicalBlock(scope: !1903, file: !31, line: 698, column: 44)
!1912 = !DILocation(line: 699, column: 14, scope: !1910)
!1913 = !DILocation(line: 699, column: 10, scope: !1910)
!1914 = !DILocation(line: 699, column: 19, scope: !1910)
!1915 = !DILocation(line: 699, column: 36, scope: !1910)
!1916 = !DILocation(line: 699, column: 9, scope: !1911)
!1917 = !DILocation(line: 700, column: 7, scope: !1918)
!1918 = distinct !DILexicalBlock(scope: !1910, file: !31, line: 699, column: 45)
!1919 = !DILocation(line: 700, column: 7, scope: !1920)
!1920 = !DILexicalBlockFile(scope: !1918, file: !31, discriminator: 1)
!1921 = !DILocation(line: 700, column: 7, scope: !1922)
!1922 = !DILexicalBlockFile(scope: !1918, file: !31, discriminator: 2)
!1923 = !DILocation(line: 701, column: 38, scope: !1918)
!1924 = !DILocation(line: 701, column: 19, scope: !1918)
!1925 = !DILocation(line: 701, column: 15, scope: !1918)
!1926 = !DILocation(line: 701, column: 24, scope: !1918)
!1927 = !DILocation(line: 701, column: 41, scope: !1918)
!1928 = !DILocation(line: 701, column: 13, scope: !1918)
!1929 = !DILocation(line: 702, column: 16, scope: !1930)
!1930 = distinct !DILexicalBlock(scope: !1918, file: !31, line: 702, column: 11)
!1931 = !DILocation(line: 702, column: 12, scope: !1930)
!1932 = !DILocation(line: 702, column: 23, scope: !1930)
!1933 = !DILocation(line: 702, column: 11, scope: !1918)
!1934 = !DILocation(line: 703, column: 39, scope: !1935)
!1935 = distinct !DILexicalBlock(scope: !1930, file: !31, line: 702, column: 41)
!1936 = !DILocation(line: 703, column: 44, scope: !1935)
!1937 = !DILocation(line: 703, column: 16, scope: !1935)
!1938 = !DILocation(line: 703, column: 14, scope: !1935)
!1939 = !DILocation(line: 704, column: 13, scope: !1940)
!1940 = distinct !DILexicalBlock(scope: !1935, file: !31, line: 704, column: 13)
!1941 = !DILocation(line: 704, column: 20, scope: !1940)
!1942 = !DILocation(line: 704, column: 18, scope: !1940)
!1943 = !DILocation(line: 704, column: 13, scope: !1935)
!1944 = !DILocation(line: 705, column: 21, scope: !1945)
!1945 = distinct !DILexicalBlock(scope: !1940, file: !31, line: 704, column: 29)
!1946 = !DILocation(line: 705, column: 19, scope: !1945)
!1947 = !DILocation(line: 706, column: 9, scope: !1945)
!1948 = !DILocation(line: 707, column: 7, scope: !1935)
!1949 = !DILocation(line: 708, column: 5, scope: !1918)
!1950 = !DILocation(line: 709, column: 3, scope: !1911)
!1951 = !DILocation(line: 698, column: 40, scope: !1903)
!1952 = !DILocation(line: 698, column: 3, scope: !1903)
!1953 = !DILocation(line: 710, column: 11, scope: !67)
!1954 = !DILocation(line: 710, column: 19, scope: !67)
!1955 = !DILocation(line: 710, column: 3, scope: !67)
!1956 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "VCG", arg: 1, scope: !68, file: !31, line: 713, type: !4)
!1957 = !DILocation(line: 713, column: 24, scope: !68)
!1958 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "check", arg: 2, scope: !68, file: !31, line: 714, type: !15)
!1959 = !DILocation(line: 714, column: 17, scope: !68)
!1960 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "track", arg: 3, scope: !68, file: !31, line: 715, type: !15)
!1961 = !DILocation(line: 715, column: 17, scope: !68)
!1962 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "assign", arg: 4, scope: !68, file: !31, line: 716, type: !26)
!1963 = !DILocation(line: 716, column: 18, scope: !68)
!1964 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "net", scope: !68, file: !31, line: 717, type: !15)
!1965 = !DILocation(line: 717, column: 9, scope: !68)
!1966 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vcv", scope: !68, file: !31, line: 718, type: !15)
!1967 = !DILocation(line: 718, column: 9, scope: !68)
!1968 = !DILocation(line: 720, column: 7, scope: !68)
!1969 = !DILocation(line: 721, column: 12, scope: !1970)
!1970 = distinct !DILexicalBlock(scope: !68, file: !31, line: 721, column: 3)
!1971 = !DILocation(line: 721, column: 8, scope: !1970)
!1972 = !DILocation(line: 721, column: 17, scope: !1973)
!1973 = !DILexicalBlockFile(scope: !1974, file: !31, discriminator: 2)
!1974 = !DILexicalBlockFile(scope: !1975, file: !31, discriminator: 1)
!1975 = distinct !DILexicalBlock(scope: !1970, file: !31, line: 721, column: 3)
!1976 = !DILocation(line: 721, column: 24, scope: !1975)
!1977 = !DILocation(line: 721, column: 21, scope: !1975)
!1978 = !DILocation(line: 721, column: 3, scope: !1970)
!1979 = !DILocation(line: 722, column: 16, scope: !1980)
!1980 = distinct !DILexicalBlock(scope: !1981, file: !31, line: 722, column: 9)
!1981 = distinct !DILexicalBlock(scope: !1975, file: !31, line: 721, column: 44)
!1982 = !DILocation(line: 722, column: 9, scope: !1980)
!1983 = !DILocation(line: 722, column: 9, scope: !1981)
!1984 = !DILocation(line: 723, column: 18, scope: !1985)
!1985 = distinct !DILexicalBlock(scope: !1986, file: !31, line: 723, column: 11)
!1986 = distinct !DILexicalBlock(scope: !1980, file: !31, line: 722, column: 22)
!1987 = !DILocation(line: 723, column: 11, scope: !1985)
!1988 = !DILocation(line: 723, column: 25, scope: !1985)
!1989 = !DILocation(line: 723, column: 23, scope: !1985)
!1990 = !DILocation(line: 723, column: 11, scope: !1986)
!1991 = !DILocation(line: 727, column: 31, scope: !1992)
!1992 = distinct !DILexicalBlock(scope: !1993, file: !31, line: 727, column: 13)
!1993 = distinct !DILexicalBlock(scope: !1985, file: !31, line: 723, column: 32)
!1994 = !DILocation(line: 727, column: 36, scope: !1992)
!1995 = !DILocation(line: 727, column: 41, scope: !1992)
!1996 = !DILocation(line: 727, column: 13, scope: !1992)
!1997 = !DILocation(line: 727, column: 13, scope: !1993)
!1998 = !DILocation(line: 728, column: 14, scope: !1999)
!1999 = distinct !DILexicalBlock(scope: !1992, file: !31, line: 727, column: 49)
!2000 = !DILocation(line: 729, column: 9, scope: !1999)
!2001 = !DILocation(line: 730, column: 7, scope: !1993)
!2002 = !DILocation(line: 730, column: 25, scope: !2003)
!2003 = distinct !DILexicalBlock(scope: !1985, file: !31, line: 730, column: 18)
!2004 = !DILocation(line: 730, column: 18, scope: !2003)
!2005 = !DILocation(line: 730, column: 32, scope: !2003)
!2006 = !DILocation(line: 730, column: 30, scope: !2003)
!2007 = !DILocation(line: 730, column: 18, scope: !1985)
!2008 = !DILocation(line: 734, column: 31, scope: !2009)
!2009 = distinct !DILexicalBlock(scope: !2010, file: !31, line: 734, column: 13)
!2010 = distinct !DILexicalBlock(scope: !2003, file: !31, line: 730, column: 39)
!2011 = !DILocation(line: 734, column: 36, scope: !2009)
!2012 = !DILocation(line: 734, column: 43, scope: !2009)
!2013 = !DILocation(line: 734, column: 13, scope: !2009)
!2014 = !DILocation(line: 734, column: 13, scope: !2010)
!2015 = !DILocation(line: 735, column: 14, scope: !2016)
!2016 = distinct !DILexicalBlock(scope: !2009, file: !31, line: 734, column: 49)
!2017 = !DILocation(line: 736, column: 9, scope: !2016)
!2018 = !DILocation(line: 737, column: 7, scope: !2010)
!2019 = !DILocation(line: 741, column: 31, scope: !2020)
!2020 = distinct !DILexicalBlock(scope: !2021, file: !31, line: 741, column: 13)
!2021 = distinct !DILexicalBlock(scope: !2003, file: !31, line: 737, column: 14)
!2022 = !DILocation(line: 741, column: 36, scope: !2020)
!2023 = !DILocation(line: 741, column: 41, scope: !2020)
!2024 = !DILocation(line: 741, column: 13, scope: !2020)
!2025 = !DILocation(line: 741, column: 48, scope: !2020)
!2026 = !DILocation(line: 741, column: 69, scope: !2027)
!2027 = !DILexicalBlockFile(scope: !2020, file: !31, discriminator: 1)
!2028 = !DILocation(line: 741, column: 74, scope: !2020)
!2029 = !DILocation(line: 741, column: 81, scope: !2020)
!2030 = !DILocation(line: 741, column: 51, scope: !2020)
!2031 = !DILocation(line: 741, column: 13, scope: !2021)
!2032 = !DILocation(line: 742, column: 14, scope: !2033)
!2033 = distinct !DILexicalBlock(scope: !2020, file: !31, line: 741, column: 87)
!2034 = !DILocation(line: 743, column: 9, scope: !2033)
!2035 = !DILocation(line: 745, column: 5, scope: !1986)
!2036 = !DILocation(line: 746, column: 3, scope: !1981)
!2037 = !DILocation(line: 721, column: 40, scope: !1975)
!2038 = !DILocation(line: 721, column: 3, scope: !1975)
!2039 = !DILocation(line: 747, column: 11, scope: !68)
!2040 = !DILocation(line: 747, column: 3, scope: !68)
