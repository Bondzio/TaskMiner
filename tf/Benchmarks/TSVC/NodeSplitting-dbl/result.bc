; ModuleID = '/home/gleison/tf/Benchmarks/TSVC/NodeSplitting-dbl/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define i32 @dummy(double* %a, double* %b, double* %c, double* %d, double* %e, [256 x double]* %aa, [256 x double]* %bb, [256 x double]* %cc, double %s) #0 {
entry:
  %a.addr = alloca double*, align 8
  %b.addr = alloca double*, align 8
  %c.addr = alloca double*, align 8
  %d.addr = alloca double*, align 8
  %e.addr = alloca double*, align 8
  %aa.addr = alloca [256 x double]*, align 8
  %bb.addr = alloca [256 x double]*, align 8
  %cc.addr = alloca [256 x double]*, align 8
  %s.addr = alloca double, align 8
  store double* %a, double** %a.addr, align 8
  call void @llvm.dbg.declare(metadata double** %a.addr, metadata !18, metadata !19), !dbg !20
  store double* %b, double** %b.addr, align 8
  call void @llvm.dbg.declare(metadata double** %b.addr, metadata !21, metadata !19), !dbg !22
  store double* %c, double** %c.addr, align 8
  call void @llvm.dbg.declare(metadata double** %c.addr, metadata !23, metadata !19), !dbg !24
  store double* %d, double** %d.addr, align 8
  call void @llvm.dbg.declare(metadata double** %d.addr, metadata !25, metadata !19), !dbg !26
  store double* %e, double** %e.addr, align 8
  call void @llvm.dbg.declare(metadata double** %e.addr, metadata !27, metadata !19), !dbg !28
  store [256 x double]* %aa, [256 x double]** %aa.addr, align 8
  call void @llvm.dbg.declare(metadata [256 x double]** %aa.addr, metadata !29, metadata !19), !dbg !30
  store [256 x double]* %bb, [256 x double]** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata [256 x double]** %bb.addr, metadata !31, metadata !19), !dbg !32
  store [256 x double]* %cc, [256 x double]** %cc.addr, align 8
  call void @llvm.dbg.declare(metadata [256 x double]** %cc.addr, metadata !33, metadata !19), !dbg !34
  store double %s, double* %s.addr, align 8
  call void @llvm.dbg.declare(metadata double* %s.addr, metadata !35, metadata !19), !dbg !36
  ret i32 0, !dbg !37
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!15, !16}
!llvm.ident = !{!17}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/TSVC/NodeSplitting-dbl")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "dummy", scope: !5, file: !5, line: 3, type: !6, isLocal: false, isDefinition: true, scopeLine: 3, flags: DIFlagPrototyped, isOptimized: false, function: i32 (double*, double*, double*, double*, double*, [256 x double]*, [256 x double]*, [256 x double]*, double)* @dummy, variables: !2)
!5 = !DIFile(filename: "./../dummy.inc", directory: "/home/gleison/tf/Benchmarks/TSVC/NodeSplitting-dbl")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !9, !9, !9, !9, !11, !11, !11, !10}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!12 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 16384, align: 64, elements: !13)
!13 = !{!14}
!14 = !DISubrange(count: 256)
!15 = !{i32 2, !"Dwarf Version", i32 4}
!16 = !{i32 2, !"Debug Info Version", i32 3}
!17 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!18 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !5, line: 3, type: !9)
!19 = !DIExpression()
!20 = !DILocation(line: 3, column: 16, scope: !4)
!21 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !4, file: !5, line: 3, type: !9)
!22 = !DILocation(line: 3, column: 29, scope: !4)
!23 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "c", arg: 3, scope: !4, file: !5, line: 3, type: !9)
!24 = !DILocation(line: 3, column: 42, scope: !4)
!25 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "d", arg: 4, scope: !4, file: !5, line: 3, type: !9)
!26 = !DILocation(line: 3, column: 55, scope: !4)
!27 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "e", arg: 5, scope: !4, file: !5, line: 3, type: !9)
!28 = !DILocation(line: 3, column: 68, scope: !4)
!29 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "aa", arg: 6, scope: !4, file: !5, line: 3, type: !11)
!30 = !DILocation(line: 3, column: 81, scope: !4)
!31 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "bb", arg: 7, scope: !4, file: !5, line: 3, type: !11)
!32 = !DILocation(line: 3, column: 102, scope: !4)
!33 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cc", arg: 8, scope: !4, file: !5, line: 3, type: !11)
!34 = !DILocation(line: 3, column: 123, scope: !4)
!35 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 9, scope: !4, file: !5, line: 3, type: !10)
!36 = !DILocation(line: 3, column: 144, scope: !4)
!37 = !DILocation(line: 5, column: 2, scope: !4)
