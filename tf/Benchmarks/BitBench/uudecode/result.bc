; ModuleID = '/home/gleison/tf/Benchmarks/BitBench/uudecode/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }

@.str = private unnamed_addr constant [14 x i8] c"begin %o %s \0A\00", align 1
@main.postfix = private unnamed_addr constant [3 x i8] c".c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdin = external global %struct._IO_FILE*, align 8
@stdout = external global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [26 x i8] c"Usage: uudecode [infile]\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @skip_to_newline(i8* %input, i32 %offset) #0 {
entry:
  %input.addr = alloca i8*, align 8
  %offset.addr = alloca i32, align 4
  store i8* %input, i8** %input.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %input.addr, metadata !91, metadata !92), !dbg !93
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !94, metadata !92), !dbg !95
  br label %while.cond, !dbg !96

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %offset.addr, align 4, !dbg !97
  %idxprom = sext i32 %0 to i64, !dbg !100
  %1 = load i8*, i8** %input.addr, align 8, !dbg !100
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %idxprom, !dbg !100
  %2 = load i8, i8* %arrayidx, align 1, !dbg !100
  %conv = sext i8 %2 to i32, !dbg !100
  %cmp = icmp ne i32 %conv, 10, !dbg !101
  br i1 %cmp, label %while.body, label %while.end, !dbg !96

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %offset.addr, align 4, !dbg !102
  %inc = add nsw i32 %3, 1, !dbg !102
  store i32 %inc, i32* %offset.addr, align 4, !dbg !102
  br label %while.cond, !dbg !96

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %offset.addr, align 4, !dbg !104
  %inc2 = add nsw i32 %4, 1, !dbg !104
  store i32 %inc2, i32* %offset.addr, align 4, !dbg !104
  ret i32 %inc2, !dbg !105
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define i32 @decode_char(i8 signext %in) #0 {
entry:
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %in.addr, metadata !106, metadata !92), !dbg !107
  %0 = load i8, i8* %in.addr, align 1, !dbg !108
  %conv = sext i8 %0 to i32, !dbg !109
  %sub = sub nsw i32 %conv, 32, !dbg !110
  %and = and i32 %sub, 63, !dbg !111
  ret i32 %and, !dbg !112
}

; Function Attrs: nounwind uwtable
define i32 @decode(i8* %input, i32 %offset, i8* %output) #0 {
entry:
  %input.addr = alloca i8*, align 8
  %offset.addr = alloca i32, align 4
  %output.addr = alloca i8*, align 8
  %ooffset = alloca i32, align 4
  %encodedoctets = alloca i32, align 4
  %ch = alloca i8, align 1
  store i8* %input, i8** %input.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %input.addr, metadata !113, metadata !92), !dbg !114
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !115, metadata !92), !dbg !116
  store i8* %output, i8** %output.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %output.addr, metadata !117, metadata !92), !dbg !118
  call void @llvm.dbg.declare(metadata i32* %ooffset, metadata !119, metadata !92), !dbg !120
  store i32 0, i32* %ooffset, align 4, !dbg !120
  br label %while.cond, !dbg !121

while.cond:                                       ; preds = %for.end, %entry
  %0 = load i32, i32* %offset.addr, align 4, !dbg !122
  %idxprom = sext i32 %0 to i64, !dbg !125
  %1 = load i8*, i8** %input.addr, align 8, !dbg !125
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %idxprom, !dbg !125
  %2 = load i8, i8* %arrayidx, align 1, !dbg !125
  %conv = sext i8 %2 to i32, !dbg !125
  %cmp = icmp ne i32 %conv, 32, !dbg !126
  br i1 %cmp, label %while.body, label %while.end, !dbg !121

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %encodedoctets, metadata !127, metadata !92), !dbg !129
  %3 = load i32, i32* %offset.addr, align 4, !dbg !130
  %idxprom2 = sext i32 %3 to i64, !dbg !131
  %4 = load i8*, i8** %input.addr, align 8, !dbg !131
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i64 %idxprom2, !dbg !131
  %5 = load i8, i8* %arrayidx3, align 1, !dbg !131
  %call = call i32 @decode_char(i8 signext %5), !dbg !132
  store i32 %call, i32* %encodedoctets, align 4, !dbg !133
  %6 = load i32, i32* %offset.addr, align 4, !dbg !134
  %inc = add nsw i32 %6, 1, !dbg !134
  store i32 %inc, i32* %offset.addr, align 4, !dbg !134
  br label %for.cond, !dbg !134

for.cond:                                         ; preds = %for.inc, %while.body
  %7 = load i32, i32* %encodedoctets, align 4, !dbg !136
  %cmp4 = icmp sgt i32 %7, 0, !dbg !140
  br i1 %cmp4, label %for.body, label %for.end, !dbg !141

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %ch, metadata !142, metadata !92), !dbg !144
  %8 = load i32, i32* %encodedoctets, align 4, !dbg !145
  %cmp6 = icmp sge i32 %8, 3, !dbg !147
  br i1 %cmp6, label %if.then, label %if.else, !dbg !148

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %offset.addr, align 4, !dbg !149
  %idxprom8 = sext i32 %9 to i64, !dbg !151
  %10 = load i8*, i8** %input.addr, align 8, !dbg !151
  %arrayidx9 = getelementptr inbounds i8, i8* %10, i64 %idxprom8, !dbg !151
  %11 = load i8, i8* %arrayidx9, align 1, !dbg !151
  %call10 = call i32 @decode_char(i8 signext %11), !dbg !152
  %shl = shl i32 %call10, 2, !dbg !153
  %12 = load i32, i32* %offset.addr, align 4, !dbg !154
  %add = add nsw i32 %12, 1, !dbg !155
  %idxprom11 = sext i32 %add to i64, !dbg !156
  %13 = load i8*, i8** %input.addr, align 8, !dbg !156
  %arrayidx12 = getelementptr inbounds i8, i8* %13, i64 %idxprom11, !dbg !156
  %14 = load i8, i8* %arrayidx12, align 1, !dbg !156
  %call13 = call i32 @decode_char(i8 signext %14), !dbg !157
  %shr = ashr i32 %call13, 4, !dbg !158
  %or = or i32 %shl, %shr, !dbg !159
  %conv14 = trunc i32 %or to i8, !dbg !152
  store i8 %conv14, i8* %ch, align 1, !dbg !160
  %15 = load i8, i8* %ch, align 1, !dbg !161
  %16 = load i32, i32* %ooffset, align 4, !dbg !162
  %inc15 = add nsw i32 %16, 1, !dbg !162
  store i32 %inc15, i32* %ooffset, align 4, !dbg !162
  %idxprom16 = sext i32 %16 to i64, !dbg !163
  %17 = load i8*, i8** %output.addr, align 8, !dbg !163
  %arrayidx17 = getelementptr inbounds i8, i8* %17, i64 %idxprom16, !dbg !163
  store i8 %15, i8* %arrayidx17, align 1, !dbg !164
  %18 = load i32, i32* %offset.addr, align 4, !dbg !165
  %add18 = add nsw i32 %18, 1, !dbg !166
  %idxprom19 = sext i32 %add18 to i64, !dbg !167
  %19 = load i8*, i8** %input.addr, align 8, !dbg !167
  %arrayidx20 = getelementptr inbounds i8, i8* %19, i64 %idxprom19, !dbg !167
  %20 = load i8, i8* %arrayidx20, align 1, !dbg !167
  %call21 = call i32 @decode_char(i8 signext %20), !dbg !168
  %shl22 = shl i32 %call21, 4, !dbg !169
  %21 = load i32, i32* %offset.addr, align 4, !dbg !170
  %add23 = add nsw i32 %21, 2, !dbg !171
  %idxprom24 = sext i32 %add23 to i64, !dbg !172
  %22 = load i8*, i8** %input.addr, align 8, !dbg !172
  %arrayidx25 = getelementptr inbounds i8, i8* %22, i64 %idxprom24, !dbg !172
  %23 = load i8, i8* %arrayidx25, align 1, !dbg !172
  %call26 = call i32 @decode_char(i8 signext %23), !dbg !173
  %shr27 = ashr i32 %call26, 2, !dbg !174
  %or28 = or i32 %shl22, %shr27, !dbg !175
  %conv29 = trunc i32 %or28 to i8, !dbg !168
  store i8 %conv29, i8* %ch, align 1, !dbg !176
  %24 = load i8, i8* %ch, align 1, !dbg !177
  %25 = load i32, i32* %ooffset, align 4, !dbg !178
  %inc30 = add nsw i32 %25, 1, !dbg !178
  store i32 %inc30, i32* %ooffset, align 4, !dbg !178
  %idxprom31 = sext i32 %25 to i64, !dbg !179
  %26 = load i8*, i8** %output.addr, align 8, !dbg !179
  %arrayidx32 = getelementptr inbounds i8, i8* %26, i64 %idxprom31, !dbg !179
  store i8 %24, i8* %arrayidx32, align 1, !dbg !180
  %27 = load i32, i32* %offset.addr, align 4, !dbg !181
  %add33 = add nsw i32 %27, 2, !dbg !182
  %idxprom34 = sext i32 %add33 to i64, !dbg !183
  %28 = load i8*, i8** %input.addr, align 8, !dbg !183
  %arrayidx35 = getelementptr inbounds i8, i8* %28, i64 %idxprom34, !dbg !183
  %29 = load i8, i8* %arrayidx35, align 1, !dbg !183
  %call36 = call i32 @decode_char(i8 signext %29), !dbg !184
  %shl37 = shl i32 %call36, 6, !dbg !185
  %30 = load i32, i32* %offset.addr, align 4, !dbg !186
  %add38 = add nsw i32 %30, 3, !dbg !187
  %idxprom39 = sext i32 %add38 to i64, !dbg !188
  %31 = load i8*, i8** %input.addr, align 8, !dbg !188
  %arrayidx40 = getelementptr inbounds i8, i8* %31, i64 %idxprom39, !dbg !188
  %32 = load i8, i8* %arrayidx40, align 1, !dbg !188
  %call41 = call i32 @decode_char(i8 signext %32), !dbg !189
  %or42 = or i32 %shl37, %call41, !dbg !190
  %conv43 = trunc i32 %or42 to i8, !dbg !184
  store i8 %conv43, i8* %ch, align 1, !dbg !191
  %33 = load i8, i8* %ch, align 1, !dbg !192
  %34 = load i32, i32* %ooffset, align 4, !dbg !193
  %inc44 = add nsw i32 %34, 1, !dbg !193
  store i32 %inc44, i32* %ooffset, align 4, !dbg !193
  %idxprom45 = sext i32 %34 to i64, !dbg !194
  %35 = load i8*, i8** %output.addr, align 8, !dbg !194
  %arrayidx46 = getelementptr inbounds i8, i8* %35, i64 %idxprom45, !dbg !194
  store i8 %33, i8* %arrayidx46, align 1, !dbg !195
  br label %if.end.83, !dbg !196

if.else:                                          ; preds = %for.body
  %36 = load i32, i32* %encodedoctets, align 4, !dbg !197
  %cmp47 = icmp sge i32 %36, 1, !dbg !200
  br i1 %cmp47, label %if.then.49, label %if.end, !dbg !201

if.then.49:                                       ; preds = %if.else
  %37 = load i32, i32* %offset.addr, align 4, !dbg !202
  %idxprom50 = sext i32 %37 to i64, !dbg !204
  %38 = load i8*, i8** %input.addr, align 8, !dbg !204
  %arrayidx51 = getelementptr inbounds i8, i8* %38, i64 %idxprom50, !dbg !204
  %39 = load i8, i8* %arrayidx51, align 1, !dbg !204
  %call52 = call i32 @decode_char(i8 signext %39), !dbg !205
  %shl53 = shl i32 %call52, 2, !dbg !206
  %40 = load i32, i32* %offset.addr, align 4, !dbg !207
  %add54 = add nsw i32 %40, 1, !dbg !208
  %idxprom55 = sext i32 %add54 to i64, !dbg !209
  %41 = load i8*, i8** %input.addr, align 8, !dbg !209
  %arrayidx56 = getelementptr inbounds i8, i8* %41, i64 %idxprom55, !dbg !209
  %42 = load i8, i8* %arrayidx56, align 1, !dbg !209
  %call57 = call i32 @decode_char(i8 signext %42), !dbg !210
  %shr58 = ashr i32 %call57, 4, !dbg !211
  %or59 = or i32 %shl53, %shr58, !dbg !212
  %conv60 = trunc i32 %or59 to i8, !dbg !205
  store i8 %conv60, i8* %ch, align 1, !dbg !213
  %43 = load i8, i8* %ch, align 1, !dbg !214
  %44 = load i32, i32* %ooffset, align 4, !dbg !215
  %inc61 = add nsw i32 %44, 1, !dbg !215
  store i32 %inc61, i32* %ooffset, align 4, !dbg !215
  %idxprom62 = sext i32 %44 to i64, !dbg !216
  %45 = load i8*, i8** %output.addr, align 8, !dbg !216
  %arrayidx63 = getelementptr inbounds i8, i8* %45, i64 %idxprom62, !dbg !216
  store i8 %43, i8* %arrayidx63, align 1, !dbg !217
  br label %if.end, !dbg !218

if.end:                                           ; preds = %if.then.49, %if.else
  %46 = load i32, i32* %encodedoctets, align 4, !dbg !219
  %cmp64 = icmp sge i32 %46, 2, !dbg !221
  br i1 %cmp64, label %if.then.66, label %if.end.82, !dbg !222

if.then.66:                                       ; preds = %if.end
  %47 = load i32, i32* %offset.addr, align 4, !dbg !223
  %add67 = add nsw i32 %47, 1, !dbg !225
  %idxprom68 = sext i32 %add67 to i64, !dbg !226
  %48 = load i8*, i8** %input.addr, align 8, !dbg !226
  %arrayidx69 = getelementptr inbounds i8, i8* %48, i64 %idxprom68, !dbg !226
  %49 = load i8, i8* %arrayidx69, align 1, !dbg !226
  %call70 = call i32 @decode_char(i8 signext %49), !dbg !227
  %shl71 = shl i32 %call70, 4, !dbg !228
  %50 = load i32, i32* %offset.addr, align 4, !dbg !229
  %add72 = add nsw i32 %50, 2, !dbg !230
  %idxprom73 = sext i32 %add72 to i64, !dbg !231
  %51 = load i8*, i8** %input.addr, align 8, !dbg !231
  %arrayidx74 = getelementptr inbounds i8, i8* %51, i64 %idxprom73, !dbg !231
  %52 = load i8, i8* %arrayidx74, align 1, !dbg !231
  %call75 = call i32 @decode_char(i8 signext %52), !dbg !232
  %shr76 = ashr i32 %call75, 2, !dbg !233
  %or77 = or i32 %shl71, %shr76, !dbg !234
  %conv78 = trunc i32 %or77 to i8, !dbg !227
  store i8 %conv78, i8* %ch, align 1, !dbg !235
  %53 = load i8, i8* %ch, align 1, !dbg !236
  %54 = load i32, i32* %ooffset, align 4, !dbg !237
  %inc79 = add nsw i32 %54, 1, !dbg !237
  store i32 %inc79, i32* %ooffset, align 4, !dbg !237
  %idxprom80 = sext i32 %54 to i64, !dbg !238
  %55 = load i8*, i8** %output.addr, align 8, !dbg !238
  %arrayidx81 = getelementptr inbounds i8, i8* %55, i64 %idxprom80, !dbg !238
  store i8 %53, i8* %arrayidx81, align 1, !dbg !239
  br label %if.end.82, !dbg !240

if.end.82:                                        ; preds = %if.then.66, %if.end
  br label %if.end.83

if.end.83:                                        ; preds = %if.end.82, %if.then
  br label %for.inc, !dbg !241

for.inc:                                          ; preds = %if.end.83
  %56 = load i32, i32* %offset.addr, align 4, !dbg !242
  %add84 = add nsw i32 %56, 4, !dbg !242
  store i32 %add84, i32* %offset.addr, align 4, !dbg !242
  %57 = load i32, i32* %encodedoctets, align 4, !dbg !243
  %sub = sub nsw i32 %57, 3, !dbg !243
  store i32 %sub, i32* %encodedoctets, align 4, !dbg !243
  br label %for.cond, !dbg !244

for.end:                                          ; preds = %for.cond
  %58 = load i8*, i8** %input.addr, align 8, !dbg !245
  %59 = load i32, i32* %offset.addr, align 4, !dbg !246
  %call85 = call i32 @skip_to_newline(i8* %58, i32 %59), !dbg !247
  store i32 %call85, i32* %offset.addr, align 4, !dbg !248
  br label %while.cond, !dbg !121

while.end:                                        ; preds = %while.cond
  %60 = load i8*, i8** %input.addr, align 8, !dbg !249
  %61 = load i32, i32* %offset.addr, align 4, !dbg !250
  %call86 = call i32 @skip_to_newline(i8* %60, i32 %61), !dbg !251
  store i32 %call86, i32* %offset.addr, align 4, !dbg !252
  %62 = load i32, i32* %offset.addr, align 4, !dbg !253
  %idxprom87 = sext i32 %62 to i64, !dbg !255
  %63 = load i8*, i8** %input.addr, align 8, !dbg !255
  %arrayidx88 = getelementptr inbounds i8, i8* %63, i64 %idxprom87, !dbg !255
  %64 = load i8, i8* %arrayidx88, align 1, !dbg !255
  %conv89 = sext i8 %64 to i32, !dbg !255
  %cmp90 = icmp eq i32 %conv89, 101, !dbg !256
  br i1 %cmp90, label %land.lhs.true, label %if.end.106, !dbg !257

land.lhs.true:                                    ; preds = %while.end
  %65 = load i32, i32* %offset.addr, align 4, !dbg !258
  %add92 = add nsw i32 %65, 1, !dbg !260
  %idxprom93 = sext i32 %add92 to i64, !dbg !261
  %66 = load i8*, i8** %input.addr, align 8, !dbg !261
  %arrayidx94 = getelementptr inbounds i8, i8* %66, i64 %idxprom93, !dbg !261
  %67 = load i8, i8* %arrayidx94, align 1, !dbg !261
  %conv95 = sext i8 %67 to i32, !dbg !261
  %cmp96 = icmp eq i32 %conv95, 110, !dbg !262
  br i1 %cmp96, label %land.lhs.true.98, label %if.end.106, !dbg !263

land.lhs.true.98:                                 ; preds = %land.lhs.true
  %68 = load i32, i32* %offset.addr, align 4, !dbg !264
  %add99 = add nsw i32 %68, 2, !dbg !265
  %idxprom100 = sext i32 %add99 to i64, !dbg !266
  %69 = load i8*, i8** %input.addr, align 8, !dbg !266
  %arrayidx101 = getelementptr inbounds i8, i8* %69, i64 %idxprom100, !dbg !266
  %70 = load i8, i8* %arrayidx101, align 1, !dbg !266
  %conv102 = sext i8 %70 to i32, !dbg !266
  %cmp103 = icmp eq i32 %conv102, 100, !dbg !267
  br i1 %cmp103, label %if.then.105, label %if.end.106, !dbg !268

if.then.105:                                      ; preds = %land.lhs.true.98
  %71 = load i32, i32* %ooffset, align 4, !dbg !269
  ret i32 %71, !dbg !271

if.end.106:                                       ; preds = %land.lhs.true.98, %land.lhs.true, %while.end
  call void @exit(i32 1) #7, !dbg !272
  unreachable, !dbg !272
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) #2

; Function Attrs: nounwind uwtable
define i32 @do_decode(i8* %input, i8* %output, i8* %outfilename) #0 {
entry:
  %input.addr = alloca i8*, align 8
  %output.addr = alloca i8*, align 8
  %outfilename.addr = alloca i8*, align 8
  %mode = alloca i32, align 4
  %namelen = alloca i32, align 4
  store i8* %input, i8** %input.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %input.addr, metadata !273, metadata !92), !dbg !274
  store i8* %output, i8** %output.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %output.addr, metadata !275, metadata !92), !dbg !276
  store i8* %outfilename, i8** %outfilename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %outfilename.addr, metadata !277, metadata !92), !dbg !278
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !279, metadata !92), !dbg !280
  call void @llvm.dbg.declare(metadata i32* %namelen, metadata !281, metadata !92), !dbg !282
  %0 = load i8*, i8** %input.addr, align 8, !dbg !283
  %1 = load i8*, i8** %outfilename.addr, align 8, !dbg !285
  %call = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i32* %mode, i8* %1) #5, !dbg !286
  %cmp = icmp eq i32 %call, 2, !dbg !287
  br i1 %cmp, label %if.then, label %if.end, !dbg !288

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %outfilename.addr, align 8, !dbg !289
  %call1 = call i64 @strlen(i8* %2) #8, !dbg !291
  %conv = trunc i64 %call1 to i32, !dbg !291
  store i32 %conv, i32* %namelen, align 4, !dbg !292
  %3 = load i8*, i8** %input.addr, align 8, !dbg !293
  %4 = load i32, i32* %namelen, align 4, !dbg !294
  %add = add nsw i32 %4, 12, !dbg !295
  %5 = load i8*, i8** %output.addr, align 8, !dbg !296
  %call2 = call i32 @decode(i8* %3, i32 %add, i8* %5), !dbg !297
  ret i32 %call2, !dbg !298

if.end:                                           ; preds = %entry
  call void @exit(i32 1) #7, !dbg !299
  unreachable, !dbg !299
}

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8*, i8*, ...) #3

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %in = alloca %struct._IO_FILE*, align 8
  %out = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %size = alloca i64, align 8
  %outsize = alloca i32, align 4
  %time = alloca i32, align 4
  %inbuf = alloca i8*, align 8
  %outbuf = alloca i8*, align 8
  %temp = alloca i8*, align 8
  %outfilename = alloca [100 x i8], align 16
  %postfix = alloca [3 x i8], align 1
  %pre = alloca %struct.timeval, align 8
  %post = alloca %struct.timeval, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !300, metadata !92), !dbg !301
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !302, metadata !92), !dbg !303
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %in, metadata !304, metadata !92), !dbg !305
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %out, metadata !306, metadata !92), !dbg !307
  call void @llvm.dbg.declare(metadata i32* %i, metadata !308, metadata !92), !dbg !309
  call void @llvm.dbg.declare(metadata i64* %size, metadata !310, metadata !92), !dbg !311
  call void @llvm.dbg.declare(metadata i32* %outsize, metadata !312, metadata !92), !dbg !313
  call void @llvm.dbg.declare(metadata i32* %time, metadata !314, metadata !92), !dbg !315
  call void @llvm.dbg.declare(metadata i8** %inbuf, metadata !316, metadata !92), !dbg !319
  call void @llvm.dbg.declare(metadata i8** %outbuf, metadata !320, metadata !92), !dbg !321
  call void @llvm.dbg.declare(metadata i8** %temp, metadata !322, metadata !92), !dbg !323
  call void @llvm.dbg.declare(metadata [100 x i8]* %outfilename, metadata !324, metadata !92), !dbg !328
  call void @llvm.dbg.declare(metadata [3 x i8]* %postfix, metadata !329, metadata !92), !dbg !333
  %0 = bitcast [3 x i8]* %postfix to i8*, !dbg !333
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @main.postfix, i32 0, i32 0), i64 3, i32 1, i1 false), !dbg !333
  call void @llvm.dbg.declare(metadata %struct.timeval* %pre, metadata !334, metadata !92), !dbg !342
  call void @llvm.dbg.declare(metadata %struct.timeval* %post, metadata !343, metadata !92), !dbg !344
  %call = call noalias i8* @malloc(i64 10000000) #5, !dbg !345
  store i8* %call, i8** %inbuf, align 8, !dbg !346
  %call1 = call noalias i8* @malloc(i64 10000000) #5, !dbg !347
  store i8* %call1, i8** %outbuf, align 8, !dbg !348
  %1 = load i32, i32* %argc.addr, align 4, !dbg !349
  %cmp = icmp sgt i32 %1, 1, !dbg !351
  br i1 %cmp, label %if.then, label %if.else, !dbg !352

if.then:                                          ; preds = %entry
  %2 = load i8**, i8*** %argv.addr, align 8, !dbg !353
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 1, !dbg !353
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !353
  %call2 = call %struct._IO_FILE* @fopen(i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0)), !dbg !356
  store %struct._IO_FILE* %call2, %struct._IO_FILE** %in, align 8, !dbg !357
  %cmp3 = icmp eq %struct._IO_FILE* %call2, null, !dbg !358
  br i1 %cmp3, label %if.then.4, label %if.end, !dbg !359

if.then.4:                                        ; preds = %if.then
  %4 = load i8**, i8*** %argv.addr, align 8, !dbg !360
  %arrayidx5 = getelementptr inbounds i8*, i8** %4, i64 1, !dbg !360
  %5 = load i8*, i8** %arrayidx5, align 8, !dbg !360
  call void @perror(i8* %5), !dbg !362
  call void @exit(i32 1) #7, !dbg !363
  unreachable, !dbg !363

if.end:                                           ; preds = %if.then
  %6 = load i8**, i8*** %argv.addr, align 8, !dbg !364
  %incdec.ptr = getelementptr inbounds i8*, i8** %6, i32 1, !dbg !364
  store i8** %incdec.ptr, i8*** %argv.addr, align 8, !dbg !364
  %7 = load i32, i32* %argc.addr, align 4, !dbg !365
  %dec = add nsw i32 %7, -1, !dbg !365
  store i32 %dec, i32* %argc.addr, align 4, !dbg !365
  br label %if.end.6, !dbg !366

if.else:                                          ; preds = %entry
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !367
  store %struct._IO_FILE* %8, %struct._IO_FILE** %in, align 8, !dbg !369
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !370
  store %struct._IO_FILE* %9, %struct._IO_FILE** %out, align 8, !dbg !371
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.end
  %10 = load i32, i32* %argc.addr, align 4, !dbg !372
  %cmp7 = icmp ne i32 %10, 1, !dbg !374
  br i1 %cmp7, label %if.then.8, label %if.end.10, !dbg !375

if.then.8:                                        ; preds = %if.end.6
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i32 0, i32 0)), !dbg !376
  call void @exit(i32 2) #7, !dbg !378
  unreachable, !dbg !378

if.end.10:                                        ; preds = %if.end.6
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %in, align 8, !dbg !379
  %12 = load i8*, i8** %inbuf, align 8, !dbg !380
  %call11 = call i64 @read_data(%struct._IO_FILE* %11, i8* %12), !dbg !381
  store i64 %call11, i64* %size, align 8, !dbg !382
  %call12 = call i32 @gettimeofday(%struct.timeval* %pre, %struct.timezone* null) #5, !dbg !383
  store i32 0, i32* %i, align 4, !dbg !384
  br label %for.cond, !dbg !386

for.cond:                                         ; preds = %for.inc, %if.end.10
  %13 = load i32, i32* %i, align 4, !dbg !387
  %cmp13 = icmp slt i32 %13, 100, !dbg !391
  br i1 %cmp13, label %for.body, label %for.end, !dbg !392

for.body:                                         ; preds = %for.cond
  %14 = load i8*, i8** %inbuf, align 8, !dbg !393
  %15 = load i8*, i8** %outbuf, align 8, !dbg !395
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %outfilename, i32 0, i32 0, !dbg !396
  %call14 = call i32 @do_decode(i8* %14, i8* %15, i8* %arraydecay), !dbg !397
  store i32 %call14, i32* %outsize, align 4, !dbg !398
  br label %for.inc, !dbg !399

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4, !dbg !400
  %inc = add nsw i32 %16, 1, !dbg !400
  store i32 %inc, i32* %i, align 4, !dbg !400
  br label %for.cond, !dbg !401

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %outsize, align 4, !dbg !402
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %17), !dbg !403
  call void @exit(i32 0) #7, !dbg !404
  unreachable, !dbg !404

return:                                           ; No predecessors!
  %18 = load i32, i32* %retval, !dbg !405
  ret i32 %18, !dbg !405
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #3

declare %struct._IO_FILE* @fopen(i8*, i8*) #6

declare void @perror(i8*) #6

declare i32 @printf(i8*, ...) #6

; Function Attrs: nounwind uwtable
define internal i64 @read_data(%struct._IO_FILE* %in, i8* %buffer) #0 {
entry:
  %in.addr = alloca %struct._IO_FILE*, align 8
  %buffer.addr = alloca i8*, align 8
  store %struct._IO_FILE* %in, %struct._IO_FILE** %in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %in.addr, metadata !406, metadata !92), !dbg !407
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !408, metadata !92), !dbg !409
  %0 = load i8*, i8** %buffer.addr, align 8, !dbg !410
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %in.addr, align 8, !dbg !411
  %call = call i64 @fread(i8* %0, i64 1, i64 10000000, %struct._IO_FILE* %1), !dbg !412
  ret i64 %call, !dbg !413
}

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #3

declare i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #6

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!88, !89}
!llvm.ident = !{!90}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !5)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/BitBench/uudecode")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!5 = !{!6, !13, !16, !19, !22, !26}
!6 = !DISubprogram(name: "skip_to_newline", scope: !7, file: !7, line: 64, type: !8, isLocal: false, isDefinition: true, scopeLine: 64, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i8*, i32)* @skip_to_newline, variables: !2)
!7 = !DIFile(filename: "/home/gleison/tf/Benchmarks/BitBench/uudecode/tmp.c", directory: "/home/gleison/tf/Benchmarks/BitBench/uudecode")
!8 = !DISubroutineType(types: !9)
!9 = !{!10, !11, !10}
!10 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!12 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!13 = !DISubprogram(name: "decode_char", scope: !7, file: !7, line: 72, type: !14, isLocal: false, isDefinition: true, scopeLine: 72, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i8)* @decode_char, variables: !2)
!14 = !DISubroutineType(types: !15)
!15 = !{!10, !12}
!16 = !DISubprogram(name: "decode", scope: !7, file: !7, line: 76, type: !17, isLocal: false, isDefinition: true, scopeLine: 76, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i8*, i32, i8*)* @decode, variables: !2)
!17 = !DISubroutineType(types: !18)
!18 = !{!10, !11, !10, !11}
!19 = !DISubprogram(name: "do_decode", scope: !7, file: !7, line: 116, type: !20, isLocal: false, isDefinition: true, scopeLine: 116, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i8*, i8*, i8*)* @do_decode, variables: !2)
!20 = !DISubroutineType(types: !21)
!21 = !{!10, !11, !11, !11}
!22 = !DISubprogram(name: "main", scope: !7, file: !7, line: 134, type: !23, isLocal: false, isDefinition: true, scopeLine: 134, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!23 = !DISubroutineType(types: !24)
!24 = !{!10, !10, !25}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!26 = !DISubprogram(name: "read_data", scope: !7, file: !7, line: 126, type: !27, isLocal: true, isDefinition: true, scopeLine: 126, flags: DIFlagPrototyped, isOptimized: false, function: i64 (%struct._IO_FILE*, i8*)* @read_data, variables: !2)
!27 = !DISubroutineType(types: !28)
!28 = !{!29, !32, !4}
!29 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !30, line: 62, baseType: !31)
!30 = !DIFile(filename: "/home/gleison/lge/llvm-3.7-src/build-debug/bin/../lib/clang/3.7.0/include/stddef.h", directory: "/home/gleison/tf/Benchmarks/BitBench/uudecode")
!31 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64, align: 64)
!33 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !34, line: 48, baseType: !35)
!34 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/gleison/tf/Benchmarks/BitBench/uudecode")
!35 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !36, line: 241, size: 1728, align: 64, elements: !37)
!36 = !DIFile(filename: "/usr/include/libio.h", directory: "/home/gleison/tf/Benchmarks/BitBench/uudecode")
!37 = !{!38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !58, !59, !60, !61, !65, !67, !69, !73, !76, !78, !79, !80, !81, !82, !83, !84}
!38 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !35, file: !36, line: 242, baseType: !10, size: 32, align: 32)
!39 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !35, file: !36, line: 247, baseType: !11, size: 64, align: 64, offset: 64)
!40 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !35, file: !36, line: 248, baseType: !11, size: 64, align: 64, offset: 128)
!41 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !35, file: !36, line: 249, baseType: !11, size: 64, align: 64, offset: 192)
!42 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !35, file: !36, line: 250, baseType: !11, size: 64, align: 64, offset: 256)
!43 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !35, file: !36, line: 251, baseType: !11, size: 64, align: 64, offset: 320)
!44 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !35, file: !36, line: 252, baseType: !11, size: 64, align: 64, offset: 384)
!45 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !35, file: !36, line: 253, baseType: !11, size: 64, align: 64, offset: 448)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !35, file: !36, line: 254, baseType: !11, size: 64, align: 64, offset: 512)
!47 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !35, file: !36, line: 256, baseType: !11, size: 64, align: 64, offset: 576)
!48 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !35, file: !36, line: 257, baseType: !11, size: 64, align: 64, offset: 640)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !35, file: !36, line: 258, baseType: !11, size: 64, align: 64, offset: 704)
!50 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !35, file: !36, line: 260, baseType: !51, size: 64, align: 64, offset: 768)
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64, align: 64)
!52 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !36, line: 156, size: 192, align: 64, elements: !53)
!53 = !{!54, !55, !57}
!54 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !52, file: !36, line: 157, baseType: !51, size: 64, align: 64)
!55 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !52, file: !36, line: 158, baseType: !56, size: 64, align: 64, offset: 64)
!56 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !35, size: 64, align: 64)
!57 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !52, file: !36, line: 162, baseType: !10, size: 32, align: 32, offset: 128)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !35, file: !36, line: 262, baseType: !56, size: 64, align: 64, offset: 832)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !35, file: !36, line: 264, baseType: !10, size: 32, align: 32, offset: 896)
!60 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !35, file: !36, line: 268, baseType: !10, size: 32, align: 32, offset: 928)
!61 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !35, file: !36, line: 270, baseType: !62, size: 64, align: 64, offset: 960)
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !63, line: 131, baseType: !64)
!63 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/gleison/tf/Benchmarks/BitBench/uudecode")
!64 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !35, file: !36, line: 274, baseType: !66, size: 16, align: 16, offset: 1024)
!66 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !35, file: !36, line: 275, baseType: !68, size: 8, align: 8, offset: 1040)
!68 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!69 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !35, file: !36, line: 276, baseType: !70, size: 8, align: 8, offset: 1048)
!70 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 8, align: 8, elements: !71)
!71 = !{!72}
!72 = !DISubrange(count: 1)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !35, file: !36, line: 280, baseType: !74, size: 64, align: 64, offset: 1088)
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !75, size: 64, align: 64)
!75 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !36, line: 150, baseType: null)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !35, file: !36, line: 289, baseType: !77, size: 64, align: 64, offset: 1152)
!77 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !63, line: 132, baseType: !64)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !35, file: !36, line: 297, baseType: !4, size: 64, align: 64, offset: 1216)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !35, file: !36, line: 298, baseType: !4, size: 64, align: 64, offset: 1280)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !35, file: !36, line: 299, baseType: !4, size: 64, align: 64, offset: 1344)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !35, file: !36, line: 300, baseType: !4, size: 64, align: 64, offset: 1408)
!82 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !35, file: !36, line: 302, baseType: !29, size: 64, align: 64, offset: 1472)
!83 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !35, file: !36, line: 303, baseType: !10, size: 32, align: 32, offset: 1536)
!84 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !35, file: !36, line: 305, baseType: !85, size: 160, align: 8, offset: 1568)
!85 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 160, align: 8, elements: !86)
!86 = !{!87}
!87 = !DISubrange(count: 20)
!88 = !{i32 2, !"Dwarf Version", i32 4}
!89 = !{i32 2, !"Debug Info Version", i32 3}
!90 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!91 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "input", arg: 1, scope: !6, file: !7, line: 64, type: !11)
!92 = !DIExpression()
!93 = !DILocation(line: 64, column: 27, scope: !6)
!94 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "offset", arg: 2, scope: !6, file: !7, line: 64, type: !10)
!95 = !DILocation(line: 64, column: 38, scope: !6)
!96 = !DILocation(line: 65, column: 3, scope: !6)
!97 = !DILocation(line: 65, column: 16, scope: !98)
!98 = !DILexicalBlockFile(scope: !99, file: !7, discriminator: 2)
!99 = !DILexicalBlockFile(scope: !6, file: !7, discriminator: 1)
!100 = !DILocation(line: 65, column: 10, scope: !6)
!101 = !DILocation(line: 65, column: 24, scope: !6)
!102 = !DILocation(line: 67, column: 11, scope: !103)
!103 = distinct !DILexicalBlock(scope: !6, file: !7, line: 66, column: 3)
!104 = !DILocation(line: 69, column: 10, scope: !6)
!105 = !DILocation(line: 69, column: 3, scope: !6)
!106 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "in", arg: 1, scope: !13, file: !7, line: 72, type: !12)
!107 = !DILocation(line: 72, column: 18, scope: !13)
!108 = !DILocation(line: 73, column: 12, scope: !13)
!109 = !DILocation(line: 73, column: 11, scope: !13)
!110 = !DILocation(line: 73, column: 16, scope: !13)
!111 = !DILocation(line: 73, column: 23, scope: !13)
!112 = !DILocation(line: 73, column: 3, scope: !13)
!113 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "input", arg: 1, scope: !16, file: !7, line: 76, type: !11)
!114 = !DILocation(line: 76, column: 18, scope: !16)
!115 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "offset", arg: 2, scope: !16, file: !7, line: 76, type: !10)
!116 = !DILocation(line: 76, column: 29, scope: !16)
!117 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "output", arg: 3, scope: !16, file: !7, line: 76, type: !11)
!118 = !DILocation(line: 76, column: 43, scope: !16)
!119 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ooffset", scope: !16, file: !7, line: 77, type: !10)
!120 = !DILocation(line: 77, column: 7, scope: !16)
!121 = !DILocation(line: 78, column: 3, scope: !16)
!122 = !DILocation(line: 78, column: 16, scope: !123)
!123 = !DILexicalBlockFile(scope: !124, file: !7, discriminator: 2)
!124 = !DILexicalBlockFile(scope: !16, file: !7, discriminator: 1)
!125 = !DILocation(line: 78, column: 10, scope: !16)
!126 = !DILocation(line: 78, column: 24, scope: !16)
!127 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "encodedoctets", scope: !128, file: !7, line: 79, type: !10)
!128 = distinct !DILexicalBlock(scope: !16, file: !7, line: 78, column: 31)
!129 = !DILocation(line: 79, column: 9, scope: !128)
!130 = !DILocation(line: 80, column: 39, scope: !128)
!131 = !DILocation(line: 80, column: 33, scope: !128)
!132 = !DILocation(line: 80, column: 21, scope: !128)
!133 = !DILocation(line: 80, column: 19, scope: !128)
!134 = !DILocation(line: 81, column: 10, scope: !135)
!135 = distinct !DILexicalBlock(scope: !128, file: !7, line: 81, column: 5)
!136 = !DILocation(line: 81, column: 20, scope: !137)
!137 = !DILexicalBlockFile(scope: !138, file: !7, discriminator: 2)
!138 = !DILexicalBlockFile(scope: !139, file: !7, discriminator: 1)
!139 = distinct !DILexicalBlock(scope: !135, file: !7, line: 81, column: 5)
!140 = !DILocation(line: 81, column: 34, scope: !139)
!141 = !DILocation(line: 81, column: 5, scope: !135)
!142 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ch", scope: !143, file: !7, line: 82, type: !12)
!143 = distinct !DILexicalBlock(scope: !139, file: !7, line: 81, column: 72)
!144 = !DILocation(line: 82, column: 12, scope: !143)
!145 = !DILocation(line: 83, column: 11, scope: !146)
!146 = distinct !DILexicalBlock(scope: !143, file: !7, line: 83, column: 11)
!147 = !DILocation(line: 83, column: 25, scope: !146)
!148 = !DILocation(line: 83, column: 11, scope: !143)
!149 = !DILocation(line: 84, column: 32, scope: !150)
!150 = distinct !DILexicalBlock(scope: !146, file: !7, line: 83, column: 31)
!151 = !DILocation(line: 84, column: 26, scope: !150)
!152 = !DILocation(line: 84, column: 14, scope: !150)
!153 = !DILocation(line: 84, column: 41, scope: !150)
!154 = !DILocation(line: 85, column: 32, scope: !150)
!155 = !DILocation(line: 85, column: 39, scope: !150)
!156 = !DILocation(line: 85, column: 26, scope: !150)
!157 = !DILocation(line: 85, column: 14, scope: !150)
!158 = !DILocation(line: 85, column: 45, scope: !150)
!159 = !DILocation(line: 84, column: 46, scope: !150)
!160 = !DILocation(line: 84, column: 12, scope: !150)
!161 = !DILocation(line: 86, column: 29, scope: !150)
!162 = !DILocation(line: 86, column: 23, scope: !150)
!163 = !DILocation(line: 86, column: 9, scope: !150)
!164 = !DILocation(line: 86, column: 27, scope: !150)
!165 = !DILocation(line: 87, column: 32, scope: !150)
!166 = !DILocation(line: 87, column: 39, scope: !150)
!167 = !DILocation(line: 87, column: 26, scope: !150)
!168 = !DILocation(line: 87, column: 14, scope: !150)
!169 = !DILocation(line: 87, column: 45, scope: !150)
!170 = !DILocation(line: 88, column: 32, scope: !150)
!171 = !DILocation(line: 88, column: 39, scope: !150)
!172 = !DILocation(line: 88, column: 26, scope: !150)
!173 = !DILocation(line: 88, column: 14, scope: !150)
!174 = !DILocation(line: 88, column: 45, scope: !150)
!175 = !DILocation(line: 87, column: 50, scope: !150)
!176 = !DILocation(line: 87, column: 12, scope: !150)
!177 = !DILocation(line: 89, column: 29, scope: !150)
!178 = !DILocation(line: 89, column: 23, scope: !150)
!179 = !DILocation(line: 89, column: 9, scope: !150)
!180 = !DILocation(line: 89, column: 27, scope: !150)
!181 = !DILocation(line: 90, column: 32, scope: !150)
!182 = !DILocation(line: 90, column: 39, scope: !150)
!183 = !DILocation(line: 90, column: 26, scope: !150)
!184 = !DILocation(line: 90, column: 14, scope: !150)
!185 = !DILocation(line: 90, column: 45, scope: !150)
!186 = !DILocation(line: 91, column: 32, scope: !150)
!187 = !DILocation(line: 91, column: 39, scope: !150)
!188 = !DILocation(line: 91, column: 26, scope: !150)
!189 = !DILocation(line: 91, column: 14, scope: !150)
!190 = !DILocation(line: 90, column: 50, scope: !150)
!191 = !DILocation(line: 90, column: 12, scope: !150)
!192 = !DILocation(line: 92, column: 29, scope: !150)
!193 = !DILocation(line: 92, column: 23, scope: !150)
!194 = !DILocation(line: 92, column: 9, scope: !150)
!195 = !DILocation(line: 92, column: 27, scope: !150)
!196 = !DILocation(line: 93, column: 7, scope: !150)
!197 = !DILocation(line: 94, column: 13, scope: !198)
!198 = distinct !DILexicalBlock(scope: !199, file: !7, line: 94, column: 13)
!199 = distinct !DILexicalBlock(scope: !146, file: !7, line: 93, column: 14)
!200 = !DILocation(line: 94, column: 27, scope: !198)
!201 = !DILocation(line: 94, column: 13, scope: !199)
!202 = !DILocation(line: 95, column: 34, scope: !203)
!203 = distinct !DILexicalBlock(scope: !198, file: !7, line: 94, column: 33)
!204 = !DILocation(line: 95, column: 28, scope: !203)
!205 = !DILocation(line: 95, column: 16, scope: !203)
!206 = !DILocation(line: 95, column: 43, scope: !203)
!207 = !DILocation(line: 96, column: 34, scope: !203)
!208 = !DILocation(line: 96, column: 41, scope: !203)
!209 = !DILocation(line: 96, column: 28, scope: !203)
!210 = !DILocation(line: 96, column: 16, scope: !203)
!211 = !DILocation(line: 96, column: 47, scope: !203)
!212 = !DILocation(line: 95, column: 48, scope: !203)
!213 = !DILocation(line: 95, column: 14, scope: !203)
!214 = !DILocation(line: 97, column: 31, scope: !203)
!215 = !DILocation(line: 97, column: 25, scope: !203)
!216 = !DILocation(line: 97, column: 11, scope: !203)
!217 = !DILocation(line: 97, column: 29, scope: !203)
!218 = !DILocation(line: 98, column: 9, scope: !203)
!219 = !DILocation(line: 99, column: 13, scope: !220)
!220 = distinct !DILexicalBlock(scope: !199, file: !7, line: 99, column: 13)
!221 = !DILocation(line: 99, column: 27, scope: !220)
!222 = !DILocation(line: 99, column: 13, scope: !199)
!223 = !DILocation(line: 100, column: 34, scope: !224)
!224 = distinct !DILexicalBlock(scope: !220, file: !7, line: 99, column: 33)
!225 = !DILocation(line: 100, column: 41, scope: !224)
!226 = !DILocation(line: 100, column: 28, scope: !224)
!227 = !DILocation(line: 100, column: 16, scope: !224)
!228 = !DILocation(line: 100, column: 47, scope: !224)
!229 = !DILocation(line: 101, column: 34, scope: !224)
!230 = !DILocation(line: 101, column: 41, scope: !224)
!231 = !DILocation(line: 101, column: 28, scope: !224)
!232 = !DILocation(line: 101, column: 16, scope: !224)
!233 = !DILocation(line: 101, column: 47, scope: !224)
!234 = !DILocation(line: 100, column: 52, scope: !224)
!235 = !DILocation(line: 100, column: 14, scope: !224)
!236 = !DILocation(line: 102, column: 31, scope: !224)
!237 = !DILocation(line: 102, column: 25, scope: !224)
!238 = !DILocation(line: 102, column: 11, scope: !224)
!239 = !DILocation(line: 102, column: 29, scope: !224)
!240 = !DILocation(line: 103, column: 9, scope: !224)
!241 = !DILocation(line: 105, column: 5, scope: !143)
!242 = !DILocation(line: 81, column: 46, scope: !139)
!243 = !DILocation(line: 81, column: 66, scope: !139)
!244 = !DILocation(line: 81, column: 5, scope: !139)
!245 = !DILocation(line: 106, column: 30, scope: !128)
!246 = !DILocation(line: 106, column: 37, scope: !128)
!247 = !DILocation(line: 106, column: 14, scope: !128)
!248 = !DILocation(line: 106, column: 12, scope: !128)
!249 = !DILocation(line: 108, column: 28, scope: !16)
!250 = !DILocation(line: 108, column: 35, scope: !16)
!251 = !DILocation(line: 108, column: 12, scope: !16)
!252 = !DILocation(line: 108, column: 10, scope: !16)
!253 = !DILocation(line: 109, column: 13, scope: !254)
!254 = distinct !DILexicalBlock(scope: !16, file: !7, line: 109, column: 7)
!255 = !DILocation(line: 109, column: 7, scope: !254)
!256 = !DILocation(line: 109, column: 21, scope: !254)
!257 = !DILocation(line: 109, column: 28, scope: !254)
!258 = !DILocation(line: 109, column: 37, scope: !259)
!259 = !DILexicalBlockFile(scope: !254, file: !7, discriminator: 1)
!260 = !DILocation(line: 109, column: 44, scope: !254)
!261 = !DILocation(line: 109, column: 31, scope: !254)
!262 = !DILocation(line: 109, column: 49, scope: !254)
!263 = !DILocation(line: 110, column: 7, scope: !254)
!264 = !DILocation(line: 110, column: 16, scope: !259)
!265 = !DILocation(line: 110, column: 23, scope: !254)
!266 = !DILocation(line: 110, column: 10, scope: !254)
!267 = !DILocation(line: 110, column: 28, scope: !254)
!268 = !DILocation(line: 109, column: 7, scope: !16)
!269 = !DILocation(line: 111, column: 12, scope: !270)
!270 = distinct !DILexicalBlock(scope: !254, file: !7, line: 110, column: 36)
!271 = !DILocation(line: 111, column: 5, scope: !270)
!272 = !DILocation(line: 113, column: 3, scope: !16)
!273 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "input", arg: 1, scope: !19, file: !7, line: 116, type: !11)
!274 = !DILocation(line: 116, column: 21, scope: !19)
!275 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "output", arg: 2, scope: !19, file: !7, line: 116, type: !11)
!276 = !DILocation(line: 116, column: 34, scope: !19)
!277 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "outfilename", arg: 3, scope: !19, file: !7, line: 116, type: !11)
!278 = !DILocation(line: 116, column: 48, scope: !19)
!279 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mode", scope: !19, file: !7, line: 117, type: !10)
!280 = !DILocation(line: 117, column: 7, scope: !19)
!281 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "namelen", scope: !19, file: !7, line: 117, type: !10)
!282 = !DILocation(line: 117, column: 13, scope: !19)
!283 = !DILocation(line: 118, column: 14, scope: !284)
!284 = distinct !DILexicalBlock(scope: !19, file: !7, line: 118, column: 7)
!285 = !DILocation(line: 118, column: 46, scope: !284)
!286 = !DILocation(line: 118, column: 7, scope: !284)
!287 = !DILocation(line: 118, column: 59, scope: !284)
!288 = !DILocation(line: 118, column: 7, scope: !19)
!289 = !DILocation(line: 119, column: 22, scope: !290)
!290 = distinct !DILexicalBlock(scope: !284, file: !7, line: 118, column: 65)
!291 = !DILocation(line: 119, column: 15, scope: !290)
!292 = !DILocation(line: 119, column: 13, scope: !290)
!293 = !DILocation(line: 120, column: 19, scope: !290)
!294 = !DILocation(line: 120, column: 26, scope: !290)
!295 = !DILocation(line: 120, column: 34, scope: !290)
!296 = !DILocation(line: 120, column: 40, scope: !290)
!297 = !DILocation(line: 120, column: 12, scope: !290)
!298 = !DILocation(line: 120, column: 5, scope: !290)
!299 = !DILocation(line: 122, column: 3, scope: !19)
!300 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !22, file: !7, line: 134, type: !10)
!301 = !DILocation(line: 134, column: 14, scope: !22)
!302 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !22, file: !7, line: 134, type: !25)
!303 = !DILocation(line: 134, column: 26, scope: !22)
!304 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "in", scope: !22, file: !7, line: 135, type: !32)
!305 = !DILocation(line: 135, column: 9, scope: !22)
!306 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "out", scope: !22, file: !7, line: 135, type: !32)
!307 = !DILocation(line: 135, column: 14, scope: !22)
!308 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !22, file: !7, line: 136, type: !10)
!309 = !DILocation(line: 136, column: 7, scope: !22)
!310 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !22, file: !7, line: 137, type: !29)
!311 = !DILocation(line: 137, column: 10, scope: !22)
!312 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outsize", scope: !22, file: !7, line: 138, type: !10)
!313 = !DILocation(line: 138, column: 7, scope: !22)
!314 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "time", scope: !22, file: !7, line: 138, type: !10)
!315 = !DILocation(line: 138, column: 16, scope: !22)
!316 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "inbuf", scope: !22, file: !7, line: 139, type: !317)
!317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !318, size: 64, align: 64)
!318 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!319 = !DILocation(line: 139, column: 18, scope: !22)
!320 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outbuf", scope: !22, file: !7, line: 139, type: !317)
!321 = !DILocation(line: 139, column: 26, scope: !22)
!322 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "temp", scope: !22, file: !7, line: 139, type: !317)
!323 = !DILocation(line: 139, column: 35, scope: !22)
!324 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outfilename", scope: !22, file: !7, line: 140, type: !325)
!325 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 800, align: 8, elements: !326)
!326 = !{!327}
!327 = !DISubrange(count: 100)
!328 = !DILocation(line: 140, column: 8, scope: !22)
!329 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "postfix", scope: !22, file: !7, line: 141, type: !330)
!330 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 24, align: 8, elements: !331)
!331 = !{!332}
!332 = !DISubrange(count: 3)
!333 = !DILocation(line: 141, column: 8, scope: !22)
!334 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pre", scope: !22, file: !7, line: 142, type: !335)
!335 = !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !336, line: 30, size: 128, align: 64, elements: !337)
!336 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/time.h", directory: "/home/gleison/tf/Benchmarks/BitBench/uudecode")
!337 = !{!338, !340}
!338 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !335, file: !336, line: 32, baseType: !339, size: 64, align: 64)
!339 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !63, line: 139, baseType: !64)
!340 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !335, file: !336, line: 33, baseType: !341, size: 64, align: 64, offset: 64)
!341 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !63, line: 141, baseType: !64)
!342 = !DILocation(line: 142, column: 18, scope: !22)
!343 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "post", scope: !22, file: !7, line: 142, type: !335)
!344 = !DILocation(line: 142, column: 23, scope: !22)
!345 = !DILocation(line: 145, column: 11, scope: !22)
!346 = !DILocation(line: 145, column: 9, scope: !22)
!347 = !DILocation(line: 146, column: 12, scope: !22)
!348 = !DILocation(line: 146, column: 10, scope: !22)
!349 = !DILocation(line: 148, column: 7, scope: !350)
!350 = distinct !DILexicalBlock(scope: !22, file: !7, line: 148, column: 7)
!351 = !DILocation(line: 148, column: 12, scope: !350)
!352 = !DILocation(line: 148, column: 7, scope: !22)
!353 = !DILocation(line: 150, column: 21, scope: !354)
!354 = distinct !DILexicalBlock(scope: !355, file: !7, line: 150, column: 9)
!355 = distinct !DILexicalBlock(scope: !350, file: !7, line: 148, column: 17)
!356 = !DILocation(line: 150, column: 15, scope: !354)
!357 = !DILocation(line: 150, column: 13, scope: !354)
!358 = !DILocation(line: 150, column: 36, scope: !354)
!359 = !DILocation(line: 150, column: 9, scope: !355)
!360 = !DILocation(line: 151, column: 14, scope: !361)
!361 = distinct !DILexicalBlock(scope: !354, file: !7, line: 150, column: 45)
!362 = !DILocation(line: 151, column: 7, scope: !361)
!363 = !DILocation(line: 152, column: 7, scope: !361)
!364 = !DILocation(line: 154, column: 9, scope: !355)
!365 = !DILocation(line: 155, column: 9, scope: !355)
!366 = !DILocation(line: 156, column: 3, scope: !355)
!367 = !DILocation(line: 159, column: 10, scope: !368)
!368 = distinct !DILexicalBlock(scope: !350, file: !7, line: 158, column: 8)
!369 = !DILocation(line: 159, column: 8, scope: !368)
!370 = !DILocation(line: 160, column: 11, scope: !368)
!371 = !DILocation(line: 160, column: 9, scope: !368)
!372 = !DILocation(line: 162, column: 7, scope: !373)
!373 = distinct !DILexicalBlock(scope: !22, file: !7, line: 162, column: 7)
!374 = !DILocation(line: 162, column: 12, scope: !373)
!375 = !DILocation(line: 162, column: 7, scope: !22)
!376 = !DILocation(line: 163, column: 5, scope: !377)
!377 = distinct !DILexicalBlock(scope: !373, file: !7, line: 162, column: 18)
!378 = !DILocation(line: 164, column: 5, scope: !377)
!379 = !DILocation(line: 166, column: 20, scope: !22)
!380 = !DILocation(line: 166, column: 24, scope: !22)
!381 = !DILocation(line: 166, column: 10, scope: !22)
!382 = !DILocation(line: 166, column: 8, scope: !22)
!383 = !DILocation(line: 167, column: 3, scope: !22)
!384 = !DILocation(line: 168, column: 10, scope: !385)
!385 = distinct !DILexicalBlock(scope: !22, file: !7, line: 168, column: 3)
!386 = !DILocation(line: 168, column: 8, scope: !385)
!387 = !DILocation(line: 168, column: 15, scope: !388)
!388 = !DILexicalBlockFile(scope: !389, file: !7, discriminator: 2)
!389 = !DILexicalBlockFile(scope: !390, file: !7, discriminator: 1)
!390 = distinct !DILexicalBlock(scope: !385, file: !7, line: 168, column: 3)
!391 = !DILocation(line: 168, column: 17, scope: !390)
!392 = !DILocation(line: 168, column: 3, scope: !385)
!393 = !DILocation(line: 169, column: 25, scope: !394)
!394 = distinct !DILexicalBlock(scope: !390, file: !7, line: 168, column: 29)
!395 = !DILocation(line: 169, column: 32, scope: !394)
!396 = !DILocation(line: 169, column: 40, scope: !394)
!397 = !DILocation(line: 169, column: 15, scope: !394)
!398 = !DILocation(line: 169, column: 13, scope: !394)
!399 = !DILocation(line: 170, column: 3, scope: !394)
!400 = !DILocation(line: 168, column: 25, scope: !390)
!401 = !DILocation(line: 168, column: 3, scope: !390)
!402 = !DILocation(line: 172, column: 18, scope: !22)
!403 = !DILocation(line: 172, column: 3, scope: !22)
!404 = !DILocation(line: 173, column: 3, scope: !22)
!405 = !DILocation(line: 174, column: 1, scope: !22)
!406 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "in", arg: 1, scope: !26, file: !7, line: 126, type: !32)
!407 = !DILocation(line: 126, column: 31, scope: !26)
!408 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "buffer", arg: 2, scope: !26, file: !7, line: 126, type: !4)
!409 = !DILocation(line: 126, column: 41, scope: !26)
!410 = !DILocation(line: 127, column: 16, scope: !26)
!411 = !DILocation(line: 127, column: 37, scope: !26)
!412 = !DILocation(line: 127, column: 10, scope: !26)
!413 = !DILocation(line: 127, column: 3, scope: !26)
