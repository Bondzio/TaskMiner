; ModuleID = '/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/blas/syrk/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [23 x i8] c"==BEGIN DUMP_ARRAYS==\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"begin dump: %s\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"\0Aend   dump: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"==END   DUMP_ARRAYS==\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %alpha = alloca double, align 8
  %beta = alloca double, align 8
  %C = alloca [1200 x [1200 x double]]*, align 8
  %A = alloca [1200 x [1000 x double]]*, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !42, metadata !43), !dbg !44
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !45, metadata !43), !dbg !46
  call void @llvm.dbg.declare(metadata i32* %n, metadata !47, metadata !43), !dbg !48
  store i32 1200, i32* %n, align 4, !dbg !48
  call void @llvm.dbg.declare(metadata i32* %m, metadata !49, metadata !43), !dbg !50
  store i32 1000, i32* %m, align 4, !dbg !50
  call void @llvm.dbg.declare(metadata double* %alpha, metadata !51, metadata !43), !dbg !52
  call void @llvm.dbg.declare(metadata double* %beta, metadata !53, metadata !43), !dbg !54
  call void @llvm.dbg.declare(metadata [1200 x [1200 x double]]** %C, metadata !55, metadata !43), !dbg !56
  %call = call i8* @polybench_alloc_data(i64 1440000, i32 8), !dbg !56
  %0 = bitcast i8* %call to [1200 x [1200 x double]]*, !dbg !56
  store [1200 x [1200 x double]]* %0, [1200 x [1200 x double]]** %C, align 8, !dbg !56
  call void @llvm.dbg.declare(metadata [1200 x [1000 x double]]** %A, metadata !57, metadata !43), !dbg !58
  %call1 = call i8* @polybench_alloc_data(i64 1200000, i32 8), !dbg !58
  %1 = bitcast i8* %call1 to [1200 x [1000 x double]]*, !dbg !58
  store [1200 x [1000 x double]]* %1, [1200 x [1000 x double]]** %A, align 8, !dbg !58
  %2 = load i32, i32* %n, align 4, !dbg !59
  %3 = load i32, i32* %m, align 4, !dbg !60
  %4 = load [1200 x [1200 x double]]*, [1200 x [1200 x double]]** %C, align 8, !dbg !61
  %arraydecay = getelementptr inbounds [1200 x [1200 x double]], [1200 x [1200 x double]]* %4, i32 0, i32 0, !dbg !61
  %5 = load [1200 x [1000 x double]]*, [1200 x [1000 x double]]** %A, align 8, !dbg !62
  %arraydecay2 = getelementptr inbounds [1200 x [1000 x double]], [1200 x [1000 x double]]* %5, i32 0, i32 0, !dbg !62
  call void @init_array(i32 %2, i32 %3, double* %alpha, double* %beta, [1200 x double]* %arraydecay, [1000 x double]* %arraydecay2), !dbg !63
  %6 = load i32, i32* %n, align 4, !dbg !64
  %7 = load i32, i32* %m, align 4, !dbg !65
  %8 = load double, double* %alpha, align 8, !dbg !66
  %9 = load double, double* %beta, align 8, !dbg !67
  %10 = load [1200 x [1200 x double]]*, [1200 x [1200 x double]]** %C, align 8, !dbg !68
  %arraydecay3 = getelementptr inbounds [1200 x [1200 x double]], [1200 x [1200 x double]]* %10, i32 0, i32 0, !dbg !68
  %11 = load [1200 x [1000 x double]]*, [1200 x [1000 x double]]** %A, align 8, !dbg !69
  %arraydecay4 = getelementptr inbounds [1200 x [1000 x double]], [1200 x [1000 x double]]* %11, i32 0, i32 0, !dbg !69
  call void @kernel_syrk(i32 %6, i32 %7, double %8, double %9, [1200 x double]* %arraydecay3, [1000 x double]* %arraydecay4), !dbg !70
  %12 = load i32, i32* %argc.addr, align 4, !dbg !71
  %cmp = icmp sgt i32 %12, 42, !dbg !71
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !71

land.lhs.true:                                    ; preds = %entry
  %13 = load i8**, i8*** %argv.addr, align 8, !dbg !73
  %arrayidx = getelementptr inbounds i8*, i8** %13, i64 0, !dbg !73
  %14 = load i8*, i8** %arrayidx, align 8, !dbg !73
  %call5 = call i32 @strcmp(i8* %14, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0)) #5, !dbg !73
  %tobool = icmp ne i32 %call5, 0, !dbg !73
  br i1 %tobool, label %if.end, label %if.then, !dbg !75

if.then:                                          ; preds = %land.lhs.true
  %15 = load i32, i32* %n, align 4, !dbg !76
  %16 = load [1200 x [1200 x double]]*, [1200 x [1200 x double]]** %C, align 8, !dbg !76
  %arraydecay6 = getelementptr inbounds [1200 x [1200 x double]], [1200 x [1200 x double]]* %16, i32 0, i32 0, !dbg !76
  call void @print_array(i32 %15, [1200 x double]* %arraydecay6), !dbg !76
  br label %if.end, !dbg !76

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %17 = load [1200 x [1200 x double]]*, [1200 x [1200 x double]]** %C, align 8, !dbg !78
  %18 = bitcast [1200 x [1200 x double]]* %17 to i8*, !dbg !78
  call void @free(i8* %18) #6, !dbg !78
  %19 = load [1200 x [1000 x double]]*, [1200 x [1000 x double]]** %A, align 8, !dbg !79
  %20 = bitcast [1200 x [1000 x double]]* %19 to i8*, !dbg !79
  call void @free(i8* %20) #6, !dbg !79
  ret i32 0, !dbg !80
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i8* @polybench_alloc_data(i64, i32) #2

; Function Attrs: nounwind uwtable
define internal void @init_array(i32 %n, i32 %m, double* %alpha, double* %beta, [1200 x double]* %C, [1000 x double]* %A) #0 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %alpha.addr = alloca double*, align 8
  %beta.addr = alloca double*, align 8
  %C.addr = alloca [1200 x double]*, align 8
  %A.addr = alloca [1000 x double]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !81, metadata !43), !dbg !82
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !83, metadata !43), !dbg !84
  store double* %alpha, double** %alpha.addr, align 8
  call void @llvm.dbg.declare(metadata double** %alpha.addr, metadata !85, metadata !43), !dbg !86
  store double* %beta, double** %beta.addr, align 8
  call void @llvm.dbg.declare(metadata double** %beta.addr, metadata !87, metadata !43), !dbg !88
  store [1200 x double]* %C, [1200 x double]** %C.addr, align 8
  call void @llvm.dbg.declare(metadata [1200 x double]** %C.addr, metadata !89, metadata !43), !dbg !90
  store [1000 x double]* %A, [1000 x double]** %A.addr, align 8
  call void @llvm.dbg.declare(metadata [1000 x double]** %A.addr, metadata !91, metadata !43), !dbg !92
  call void @llvm.dbg.declare(metadata i32* %i, metadata !93, metadata !43), !dbg !94
  call void @llvm.dbg.declare(metadata i32* %j, metadata !95, metadata !43), !dbg !96
  %0 = load double*, double** %alpha.addr, align 8, !dbg !97
  store double 1.500000e+00, double* %0, align 8, !dbg !98
  %1 = load double*, double** %beta.addr, align 8, !dbg !99
  store double 1.200000e+00, double* %1, align 8, !dbg !100
  store i32 0, i32* %i, align 4, !dbg !101
  br label %for.cond, !dbg !103

for.cond:                                         ; preds = %for.inc.7, %entry
  %2 = load i32, i32* %i, align 4, !dbg !104
  %3 = load i32, i32* %n.addr, align 4, !dbg !108
  %cmp = icmp slt i32 %2, %3, !dbg !109
  br i1 %cmp, label %for.body, label %for.end.9, !dbg !110

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !111
  br label %for.cond.1, !dbg !113

for.cond.1:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4, !dbg !114
  %5 = load i32, i32* %m.addr, align 4, !dbg !118
  %cmp2 = icmp slt i32 %4, %5, !dbg !119
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !120

for.body.3:                                       ; preds = %for.cond.1
  %6 = load i32, i32* %i, align 4, !dbg !121
  %7 = load i32, i32* %j, align 4, !dbg !122
  %mul = mul nsw i32 %6, %7, !dbg !123
  %add = add nsw i32 %mul, 1, !dbg !124
  %8 = load i32, i32* %n.addr, align 4, !dbg !125
  %rem = srem i32 %add, %8, !dbg !126
  %conv = sitofp i32 %rem to double, !dbg !127
  %9 = load i32, i32* %n.addr, align 4, !dbg !128
  %conv4 = sitofp i32 %9 to double, !dbg !128
  %div = fdiv double %conv, %conv4, !dbg !129
  %10 = load i32, i32* %j, align 4, !dbg !130
  %idxprom = sext i32 %10 to i64, !dbg !131
  %11 = load i32, i32* %i, align 4, !dbg !132
  %idxprom5 = sext i32 %11 to i64, !dbg !131
  %12 = load [1000 x double]*, [1000 x double]** %A.addr, align 8, !dbg !131
  %arrayidx = getelementptr inbounds [1000 x double], [1000 x double]* %12, i64 %idxprom5, !dbg !131
  %arrayidx6 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx, i32 0, i64 %idxprom, !dbg !131
  store double %div, double* %arrayidx6, align 8, !dbg !133
  br label %for.inc, !dbg !131

for.inc:                                          ; preds = %for.body.3
  %13 = load i32, i32* %j, align 4, !dbg !134
  %inc = add nsw i32 %13, 1, !dbg !134
  store i32 %inc, i32* %j, align 4, !dbg !134
  br label %for.cond.1, !dbg !135

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.7, !dbg !136

for.inc.7:                                        ; preds = %for.end
  %14 = load i32, i32* %i, align 4, !dbg !137
  %inc8 = add nsw i32 %14, 1, !dbg !137
  store i32 %inc8, i32* %i, align 4, !dbg !137
  br label %for.cond, !dbg !138

for.end.9:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !139
  br label %for.cond.10, !dbg !141

for.cond.10:                                      ; preds = %for.inc.31, %for.end.9
  %15 = load i32, i32* %i, align 4, !dbg !142
  %16 = load i32, i32* %n.addr, align 4, !dbg !146
  %cmp11 = icmp slt i32 %15, %16, !dbg !147
  br i1 %cmp11, label %for.body.13, label %for.end.33, !dbg !148

for.body.13:                                      ; preds = %for.cond.10
  store i32 0, i32* %j, align 4, !dbg !149
  br label %for.cond.14, !dbg !151

for.cond.14:                                      ; preds = %for.inc.28, %for.body.13
  %17 = load i32, i32* %j, align 4, !dbg !152
  %18 = load i32, i32* %n.addr, align 4, !dbg !156
  %cmp15 = icmp slt i32 %17, %18, !dbg !157
  br i1 %cmp15, label %for.body.17, label %for.end.30, !dbg !158

for.body.17:                                      ; preds = %for.cond.14
  %19 = load i32, i32* %i, align 4, !dbg !159
  %20 = load i32, i32* %j, align 4, !dbg !160
  %mul18 = mul nsw i32 %19, %20, !dbg !161
  %add19 = add nsw i32 %mul18, 2, !dbg !162
  %21 = load i32, i32* %m.addr, align 4, !dbg !163
  %rem20 = srem i32 %add19, %21, !dbg !164
  %conv21 = sitofp i32 %rem20 to double, !dbg !165
  %22 = load i32, i32* %m.addr, align 4, !dbg !166
  %conv22 = sitofp i32 %22 to double, !dbg !166
  %div23 = fdiv double %conv21, %conv22, !dbg !167
  %23 = load i32, i32* %j, align 4, !dbg !168
  %idxprom24 = sext i32 %23 to i64, !dbg !169
  %24 = load i32, i32* %i, align 4, !dbg !170
  %idxprom25 = sext i32 %24 to i64, !dbg !169
  %25 = load [1200 x double]*, [1200 x double]** %C.addr, align 8, !dbg !169
  %arrayidx26 = getelementptr inbounds [1200 x double], [1200 x double]* %25, i64 %idxprom25, !dbg !169
  %arrayidx27 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx26, i32 0, i64 %idxprom24, !dbg !169
  store double %div23, double* %arrayidx27, align 8, !dbg !171
  br label %for.inc.28, !dbg !169

for.inc.28:                                       ; preds = %for.body.17
  %26 = load i32, i32* %j, align 4, !dbg !172
  %inc29 = add nsw i32 %26, 1, !dbg !172
  store i32 %inc29, i32* %j, align 4, !dbg !172
  br label %for.cond.14, !dbg !173

for.end.30:                                       ; preds = %for.cond.14
  br label %for.inc.31, !dbg !174

for.inc.31:                                       ; preds = %for.end.30
  %27 = load i32, i32* %i, align 4, !dbg !175
  %inc32 = add nsw i32 %27, 1, !dbg !175
  store i32 %inc32, i32* %i, align 4, !dbg !175
  br label %for.cond.10, !dbg !176

for.end.33:                                       ; preds = %for.cond.10
  ret void, !dbg !177
}

; Function Attrs: nounwind uwtable
define internal void @kernel_syrk(i32 %n, i32 %m, double %alpha, double %beta, [1200 x double]* %C, [1000 x double]* %A) #0 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %alpha.addr = alloca double, align 8
  %beta.addr = alloca double, align 8
  %C.addr = alloca [1200 x double]*, align 8
  %A.addr = alloca [1000 x double]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !178, metadata !43), !dbg !179
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !180, metadata !43), !dbg !181
  store double %alpha, double* %alpha.addr, align 8
  call void @llvm.dbg.declare(metadata double* %alpha.addr, metadata !182, metadata !43), !dbg !183
  store double %beta, double* %beta.addr, align 8
  call void @llvm.dbg.declare(metadata double* %beta.addr, metadata !184, metadata !43), !dbg !185
  store [1200 x double]* %C, [1200 x double]** %C.addr, align 8
  call void @llvm.dbg.declare(metadata [1200 x double]** %C.addr, metadata !186, metadata !43), !dbg !187
  store [1000 x double]* %A, [1000 x double]** %A.addr, align 8
  call void @llvm.dbg.declare(metadata [1000 x double]** %A.addr, metadata !188, metadata !43), !dbg !189
  call void @llvm.dbg.declare(metadata i32* %i, metadata !190, metadata !43), !dbg !191
  call void @llvm.dbg.declare(metadata i32* %j, metadata !192, metadata !43), !dbg !193
  call void @llvm.dbg.declare(metadata i32* %k, metadata !194, metadata !43), !dbg !195
  store i32 0, i32* %i, align 4, !dbg !196
  br label %for.cond, !dbg !198

for.cond:                                         ; preds = %for.inc.32, %entry
  %0 = load i32, i32* %i, align 4, !dbg !199
  %1 = load i32, i32* %n.addr, align 4, !dbg !203
  %cmp = icmp slt i32 %0, %1, !dbg !204
  br i1 %cmp, label %for.body, label %for.end.34, !dbg !205

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !206
  br label %for.cond.1, !dbg !209

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !210
  %3 = load i32, i32* %i, align 4, !dbg !214
  %cmp2 = icmp sle i32 %2, %3, !dbg !215
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !216

for.body.3:                                       ; preds = %for.cond.1
  %4 = load double, double* %beta.addr, align 8, !dbg !217
  %5 = load i32, i32* %j, align 4, !dbg !218
  %idxprom = sext i32 %5 to i64, !dbg !219
  %6 = load i32, i32* %i, align 4, !dbg !220
  %idxprom4 = sext i32 %6 to i64, !dbg !219
  %7 = load [1200 x double]*, [1200 x double]** %C.addr, align 8, !dbg !219
  %arrayidx = getelementptr inbounds [1200 x double], [1200 x double]* %7, i64 %idxprom4, !dbg !219
  %arrayidx5 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx, i32 0, i64 %idxprom, !dbg !219
  %8 = load double, double* %arrayidx5, align 8, !dbg !221
  %mul = fmul double %8, %4, !dbg !221
  store double %mul, double* %arrayidx5, align 8, !dbg !221
  br label %for.inc, !dbg !219

for.inc:                                          ; preds = %for.body.3
  %9 = load i32, i32* %j, align 4, !dbg !222
  %inc = add nsw i32 %9, 1, !dbg !222
  store i32 %inc, i32* %j, align 4, !dbg !222
  br label %for.cond.1, !dbg !223

for.end:                                          ; preds = %for.cond.1
  store i32 0, i32* %k, align 4, !dbg !224
  br label %for.cond.6, !dbg !226

for.cond.6:                                       ; preds = %for.inc.29, %for.end
  %10 = load i32, i32* %k, align 4, !dbg !227
  %11 = load i32, i32* %m.addr, align 4, !dbg !231
  %cmp7 = icmp slt i32 %10, %11, !dbg !232
  br i1 %cmp7, label %for.body.8, label %for.end.31, !dbg !233

for.body.8:                                       ; preds = %for.cond.6
  store i32 0, i32* %j, align 4, !dbg !234
  br label %for.cond.9, !dbg !237

for.cond.9:                                       ; preds = %for.inc.26, %for.body.8
  %12 = load i32, i32* %j, align 4, !dbg !238
  %13 = load i32, i32* %i, align 4, !dbg !242
  %cmp10 = icmp sle i32 %12, %13, !dbg !243
  br i1 %cmp10, label %for.body.11, label %for.end.28, !dbg !244

for.body.11:                                      ; preds = %for.cond.9
  %14 = load double, double* %alpha.addr, align 8, !dbg !245
  %15 = load i32, i32* %k, align 4, !dbg !246
  %idxprom12 = sext i32 %15 to i64, !dbg !247
  %16 = load i32, i32* %i, align 4, !dbg !248
  %idxprom13 = sext i32 %16 to i64, !dbg !247
  %17 = load [1000 x double]*, [1000 x double]** %A.addr, align 8, !dbg !247
  %arrayidx14 = getelementptr inbounds [1000 x double], [1000 x double]* %17, i64 %idxprom13, !dbg !247
  %arrayidx15 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx14, i32 0, i64 %idxprom12, !dbg !247
  %18 = load double, double* %arrayidx15, align 8, !dbg !247
  %mul16 = fmul double %14, %18, !dbg !249
  %19 = load i32, i32* %k, align 4, !dbg !250
  %idxprom17 = sext i32 %19 to i64, !dbg !251
  %20 = load i32, i32* %j, align 4, !dbg !252
  %idxprom18 = sext i32 %20 to i64, !dbg !251
  %21 = load [1000 x double]*, [1000 x double]** %A.addr, align 8, !dbg !251
  %arrayidx19 = getelementptr inbounds [1000 x double], [1000 x double]* %21, i64 %idxprom18, !dbg !251
  %arrayidx20 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx19, i32 0, i64 %idxprom17, !dbg !251
  %22 = load double, double* %arrayidx20, align 8, !dbg !251
  %mul21 = fmul double %mul16, %22, !dbg !253
  %23 = load i32, i32* %j, align 4, !dbg !254
  %idxprom22 = sext i32 %23 to i64, !dbg !255
  %24 = load i32, i32* %i, align 4, !dbg !256
  %idxprom23 = sext i32 %24 to i64, !dbg !255
  %25 = load [1200 x double]*, [1200 x double]** %C.addr, align 8, !dbg !255
  %arrayidx24 = getelementptr inbounds [1200 x double], [1200 x double]* %25, i64 %idxprom23, !dbg !255
  %arrayidx25 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx24, i32 0, i64 %idxprom22, !dbg !255
  %26 = load double, double* %arrayidx25, align 8, !dbg !257
  %add = fadd double %26, %mul21, !dbg !257
  store double %add, double* %arrayidx25, align 8, !dbg !257
  br label %for.inc.26, !dbg !255

for.inc.26:                                       ; preds = %for.body.11
  %27 = load i32, i32* %j, align 4, !dbg !258
  %inc27 = add nsw i32 %27, 1, !dbg !258
  store i32 %inc27, i32* %j, align 4, !dbg !258
  br label %for.cond.9, !dbg !259

for.end.28:                                       ; preds = %for.cond.9
  br label %for.inc.29, !dbg !260

for.inc.29:                                       ; preds = %for.end.28
  %28 = load i32, i32* %k, align 4, !dbg !261
  %inc30 = add nsw i32 %28, 1, !dbg !261
  store i32 %inc30, i32* %k, align 4, !dbg !261
  br label %for.cond.6, !dbg !262

for.end.31:                                       ; preds = %for.cond.6
  br label %for.inc.32, !dbg !263

for.inc.32:                                       ; preds = %for.end.31
  %29 = load i32, i32* %i, align 4, !dbg !264
  %inc33 = add nsw i32 %29, 1, !dbg !264
  store i32 %inc33, i32* %i, align 4, !dbg !264
  br label %for.cond, !dbg !265

for.end.34:                                       ; preds = %for.cond
  ret void, !dbg !266
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #3

; Function Attrs: nounwind uwtable
define internal void @print_array(i32 %n, [1200 x double]* %C) #0 {
entry:
  %n.addr = alloca i32, align 4
  %C.addr = alloca [1200 x double]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !267, metadata !43), !dbg !268
  store [1200 x double]* %C, [1200 x double]** %C.addr, align 8
  call void @llvm.dbg.declare(metadata [1200 x double]** %C.addr, metadata !269, metadata !43), !dbg !270
  call void @llvm.dbg.declare(metadata i32* %i, metadata !271, metadata !43), !dbg !272
  call void @llvm.dbg.declare(metadata i32* %j, metadata !273, metadata !43), !dbg !274
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !275
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0)), !dbg !275
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !276
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !276
  store i32 0, i32* %i, align 4, !dbg !277
  br label %for.cond, !dbg !279

for.cond:                                         ; preds = %for.inc.10, %entry
  %2 = load i32, i32* %i, align 4, !dbg !280
  %3 = load i32, i32* %n.addr, align 4, !dbg !284
  %cmp = icmp slt i32 %2, %3, !dbg !285
  br i1 %cmp, label %for.body, label %for.end.12, !dbg !286

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !287
  br label %for.cond.2, !dbg !289

for.cond.2:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4, !dbg !290
  %5 = load i32, i32* %n.addr, align 4, !dbg !294
  %cmp3 = icmp slt i32 %4, %5, !dbg !295
  br i1 %cmp3, label %for.body.4, label %for.end, !dbg !296

for.body.4:                                       ; preds = %for.cond.2
  %6 = load i32, i32* %i, align 4, !dbg !297
  %7 = load i32, i32* %n.addr, align 4, !dbg !300
  %mul = mul nsw i32 %6, %7, !dbg !301
  %8 = load i32, i32* %j, align 4, !dbg !302
  %add = add nsw i32 %mul, %8, !dbg !303
  %rem = srem i32 %add, 20, !dbg !304
  %cmp5 = icmp eq i32 %rem, 0, !dbg !305
  br i1 %cmp5, label %if.then, label %if.end, !dbg !306

if.then:                                          ; preds = %for.body.4
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !307
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0)), !dbg !308
  br label %if.end, !dbg !308

if.end:                                           ; preds = %if.then, %for.body.4
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !309
  %11 = load i32, i32* %j, align 4, !dbg !310
  %idxprom = sext i32 %11 to i64, !dbg !311
  %12 = load i32, i32* %i, align 4, !dbg !312
  %idxprom7 = sext i32 %12 to i64, !dbg !311
  %13 = load [1200 x double]*, [1200 x double]** %C.addr, align 8, !dbg !311
  %arrayidx = getelementptr inbounds [1200 x double], [1200 x double]* %13, i64 %idxprom7, !dbg !311
  %arrayidx8 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx, i32 0, i64 %idxprom, !dbg !311
  %14 = load double, double* %arrayidx8, align 8, !dbg !311
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), double %14), !dbg !313
  br label %for.inc, !dbg !314

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %j, align 4, !dbg !315
  %inc = add nsw i32 %15, 1, !dbg !315
  store i32 %inc, i32* %j, align 4, !dbg !315
  br label %for.cond.2, !dbg !316

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.10, !dbg !317

for.inc.10:                                       ; preds = %for.end
  %16 = load i32, i32* %i, align 4, !dbg !318
  %inc11 = add nsw i32 %16, 1, !dbg !318
  store i32 %inc11, i32* %i, align 4, !dbg !318
  br label %for.cond, !dbg !319

for.end.12:                                       ; preds = %for.cond
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !320
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !320
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !321
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0)), !dbg !321
  ret void, !dbg !322
}

; Function Attrs: nounwind
declare void @free(i8*) #4

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!39, !40}
!llvm.ident = !{!41}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !14)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/blas/syrk")
!2 = !{}
!3 = !{!4, !9, !13, !6}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 92160000, align: 64, elements: !7)
!6 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!7 = !{!8, !8}
!8 = !DISubrange(count: 1200)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 76800000, align: 64, elements: !11)
!11 = !{!8, !12}
!12 = !DISubrange(count: 1000)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!14 = !{!15, !23, !33, !36}
!15 = !DISubprogram(name: "main", scope: !16, file: !16, line: 86, type: !17, isLocal: false, isDefinition: true, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!16 = !DIFile(filename: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/blas/syrk/tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/blas/syrk")
!17 = !DISubroutineType(types: !18)
!18 = !{!19, !19, !20}
!19 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64, align: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64, align: 64)
!22 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!23 = !DISubprogram(name: "init_array", scope: !16, file: !16, line: 24, type: !24, isLocal: true, isDefinition: true, scopeLine: 28, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, double*, double*, [1200 x double]*, [1000 x double]*)* @init_array, variables: !2)
!24 = !DISubroutineType(types: !25)
!25 = !{null, !19, !19, !26, !26, !27, !30}
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64, align: 64)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 76800, align: 64, elements: !29)
!29 = !{!8}
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!31 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 64000, align: 64, elements: !32)
!32 = !{!12}
!33 = !DISubprogram(name: "kernel_syrk", scope: !16, file: !16, line: 61, type: !34, isLocal: true, isDefinition: true, scopeLine: 65, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, double, double, [1200 x double]*, [1000 x double]*)* @kernel_syrk, variables: !2)
!34 = !DISubroutineType(types: !35)
!35 = !{null, !19, !19, !6, !6, !27, !30}
!36 = !DISubprogram(name: "print_array", scope: !16, file: !16, line: 43, type: !37, isLocal: true, isDefinition: true, scopeLine: 44, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, [1200 x double]*)* @print_array, variables: !2)
!37 = !DISubroutineType(types: !38)
!38 = !{null, !19, !27}
!39 = !{i32 2, !"Dwarf Version", i32 4}
!40 = !{i32 2, !"Debug Info Version", i32 3}
!41 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!42 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !15, file: !16, line: 86, type: !19)
!43 = !DIExpression()
!44 = !DILocation(line: 86, column: 14, scope: !15)
!45 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !15, file: !16, line: 86, type: !20)
!46 = !DILocation(line: 86, column: 27, scope: !15)
!47 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !15, file: !16, line: 88, type: !19)
!48 = !DILocation(line: 88, column: 7, scope: !15)
!49 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !15, file: !16, line: 89, type: !19)
!50 = !DILocation(line: 89, column: 7, scope: !15)
!51 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "alpha", scope: !15, file: !16, line: 92, type: !6)
!52 = !DILocation(line: 92, column: 13, scope: !15)
!53 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "beta", scope: !15, file: !16, line: 93, type: !6)
!54 = !DILocation(line: 93, column: 13, scope: !15)
!55 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "C", scope: !15, file: !16, line: 94, type: !4)
!56 = !DILocation(line: 94, column: 3, scope: !15)
!57 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "A", scope: !15, file: !16, line: 95, type: !9)
!58 = !DILocation(line: 95, column: 3, scope: !15)
!59 = !DILocation(line: 98, column: 14, scope: !15)
!60 = !DILocation(line: 98, column: 17, scope: !15)
!61 = !DILocation(line: 98, column: 35, scope: !15)
!62 = !DILocation(line: 98, column: 55, scope: !15)
!63 = !DILocation(line: 98, column: 3, scope: !15)
!64 = !DILocation(line: 104, column: 15, scope: !15)
!65 = !DILocation(line: 104, column: 18, scope: !15)
!66 = !DILocation(line: 104, column: 21, scope: !15)
!67 = !DILocation(line: 104, column: 28, scope: !15)
!68 = !DILocation(line: 104, column: 34, scope: !15)
!69 = !DILocation(line: 104, column: 54, scope: !15)
!70 = !DILocation(line: 104, column: 3, scope: !15)
!71 = !DILocation(line: 112, column: 3, scope: !72)
!72 = distinct !DILexicalBlock(scope: !15, file: !16, line: 112, column: 3)
!73 = !DILocation(line: 112, column: 3, scope: !74)
!74 = !DILexicalBlockFile(scope: !72, file: !16, discriminator: 1)
!75 = !DILocation(line: 112, column: 3, scope: !15)
!76 = !DILocation(line: 112, column: 3, scope: !77)
!77 = !DILexicalBlockFile(scope: !72, file: !16, discriminator: 2)
!78 = !DILocation(line: 115, column: 3, scope: !15)
!79 = !DILocation(line: 116, column: 3, scope: !15)
!80 = !DILocation(line: 118, column: 3, scope: !15)
!81 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !23, file: !16, line: 24, type: !19)
!82 = !DILocation(line: 24, column: 28, scope: !23)
!83 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 2, scope: !23, file: !16, line: 24, type: !19)
!84 = !DILocation(line: 24, column: 35, scope: !23)
!85 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "alpha", arg: 3, scope: !23, file: !16, line: 25, type: !26)
!86 = !DILocation(line: 25, column: 35, scope: !23)
!87 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "beta", arg: 4, scope: !23, file: !16, line: 26, type: !26)
!88 = !DILocation(line: 26, column: 35, scope: !23)
!89 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "C", arg: 5, scope: !23, file: !16, line: 27, type: !27)
!90 = !DILocation(line: 27, column: 34, scope: !23)
!91 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "A", arg: 6, scope: !23, file: !16, line: 28, type: !30)
!92 = !DILocation(line: 28, column: 34, scope: !23)
!93 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !23, file: !16, line: 29, type: !19)
!94 = !DILocation(line: 29, column: 7, scope: !23)
!95 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !23, file: !16, line: 29, type: !19)
!96 = !DILocation(line: 29, column: 10, scope: !23)
!97 = !DILocation(line: 31, column: 4, scope: !23)
!98 = !DILocation(line: 31, column: 10, scope: !23)
!99 = !DILocation(line: 32, column: 4, scope: !23)
!100 = !DILocation(line: 32, column: 9, scope: !23)
!101 = !DILocation(line: 33, column: 10, scope: !102)
!102 = distinct !DILexicalBlock(scope: !23, file: !16, line: 33, column: 3)
!103 = !DILocation(line: 33, column: 8, scope: !102)
!104 = !DILocation(line: 33, column: 15, scope: !105)
!105 = !DILexicalBlockFile(scope: !106, file: !16, discriminator: 2)
!106 = !DILexicalBlockFile(scope: !107, file: !16, discriminator: 1)
!107 = distinct !DILexicalBlock(scope: !102, file: !16, line: 33, column: 3)
!108 = !DILocation(line: 33, column: 19, scope: !107)
!109 = !DILocation(line: 33, column: 17, scope: !107)
!110 = !DILocation(line: 33, column: 3, scope: !102)
!111 = !DILocation(line: 34, column: 12, scope: !112)
!112 = distinct !DILexicalBlock(scope: !107, file: !16, line: 34, column: 5)
!113 = !DILocation(line: 34, column: 10, scope: !112)
!114 = !DILocation(line: 34, column: 17, scope: !115)
!115 = !DILexicalBlockFile(scope: !116, file: !16, discriminator: 2)
!116 = !DILexicalBlockFile(scope: !117, file: !16, discriminator: 1)
!117 = distinct !DILexicalBlock(scope: !112, file: !16, line: 34, column: 5)
!118 = !DILocation(line: 34, column: 21, scope: !117)
!119 = !DILocation(line: 34, column: 19, scope: !117)
!120 = !DILocation(line: 34, column: 5, scope: !112)
!121 = !DILocation(line: 35, column: 30, scope: !117)
!122 = !DILocation(line: 35, column: 34, scope: !117)
!123 = !DILocation(line: 35, column: 32, scope: !117)
!124 = !DILocation(line: 35, column: 36, scope: !117)
!125 = !DILocation(line: 35, column: 43, scope: !117)
!126 = !DILocation(line: 35, column: 41, scope: !117)
!127 = !DILocation(line: 35, column: 17, scope: !117)
!128 = !DILocation(line: 35, column: 48, scope: !117)
!129 = !DILocation(line: 35, column: 46, scope: !117)
!130 = !DILocation(line: 35, column: 12, scope: !117)
!131 = !DILocation(line: 35, column: 7, scope: !117)
!132 = !DILocation(line: 35, column: 9, scope: !117)
!133 = !DILocation(line: 35, column: 15, scope: !117)
!134 = !DILocation(line: 34, column: 25, scope: !117)
!135 = !DILocation(line: 34, column: 5, scope: !117)
!136 = !DILocation(line: 35, column: 48, scope: !112)
!137 = !DILocation(line: 33, column: 23, scope: !107)
!138 = !DILocation(line: 33, column: 3, scope: !107)
!139 = !DILocation(line: 36, column: 10, scope: !140)
!140 = distinct !DILexicalBlock(scope: !23, file: !16, line: 36, column: 3)
!141 = !DILocation(line: 36, column: 8, scope: !140)
!142 = !DILocation(line: 36, column: 15, scope: !143)
!143 = !DILexicalBlockFile(scope: !144, file: !16, discriminator: 2)
!144 = !DILexicalBlockFile(scope: !145, file: !16, discriminator: 1)
!145 = distinct !DILexicalBlock(scope: !140, file: !16, line: 36, column: 3)
!146 = !DILocation(line: 36, column: 19, scope: !145)
!147 = !DILocation(line: 36, column: 17, scope: !145)
!148 = !DILocation(line: 36, column: 3, scope: !140)
!149 = !DILocation(line: 37, column: 12, scope: !150)
!150 = distinct !DILexicalBlock(scope: !145, file: !16, line: 37, column: 5)
!151 = !DILocation(line: 37, column: 10, scope: !150)
!152 = !DILocation(line: 37, column: 17, scope: !153)
!153 = !DILexicalBlockFile(scope: !154, file: !16, discriminator: 2)
!154 = !DILexicalBlockFile(scope: !155, file: !16, discriminator: 1)
!155 = distinct !DILexicalBlock(scope: !150, file: !16, line: 37, column: 5)
!156 = !DILocation(line: 37, column: 21, scope: !155)
!157 = !DILocation(line: 37, column: 19, scope: !155)
!158 = !DILocation(line: 37, column: 5, scope: !150)
!159 = !DILocation(line: 38, column: 30, scope: !155)
!160 = !DILocation(line: 38, column: 34, scope: !155)
!161 = !DILocation(line: 38, column: 32, scope: !155)
!162 = !DILocation(line: 38, column: 36, scope: !155)
!163 = !DILocation(line: 38, column: 43, scope: !155)
!164 = !DILocation(line: 38, column: 41, scope: !155)
!165 = !DILocation(line: 38, column: 17, scope: !155)
!166 = !DILocation(line: 38, column: 48, scope: !155)
!167 = !DILocation(line: 38, column: 46, scope: !155)
!168 = !DILocation(line: 38, column: 12, scope: !155)
!169 = !DILocation(line: 38, column: 7, scope: !155)
!170 = !DILocation(line: 38, column: 9, scope: !155)
!171 = !DILocation(line: 38, column: 15, scope: !155)
!172 = !DILocation(line: 37, column: 25, scope: !155)
!173 = !DILocation(line: 37, column: 5, scope: !155)
!174 = !DILocation(line: 38, column: 48, scope: !150)
!175 = !DILocation(line: 36, column: 23, scope: !145)
!176 = !DILocation(line: 36, column: 3, scope: !145)
!177 = !DILocation(line: 39, column: 1, scope: !23)
!178 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !33, file: !16, line: 61, type: !19)
!179 = !DILocation(line: 61, column: 29, scope: !33)
!180 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 2, scope: !33, file: !16, line: 61, type: !19)
!181 = !DILocation(line: 61, column: 36, scope: !33)
!182 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "alpha", arg: 3, scope: !33, file: !16, line: 62, type: !6)
!183 = !DILocation(line: 62, column: 35, scope: !33)
!184 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "beta", arg: 4, scope: !33, file: !16, line: 63, type: !6)
!185 = !DILocation(line: 63, column: 35, scope: !33)
!186 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "C", arg: 5, scope: !33, file: !16, line: 64, type: !27)
!187 = !DILocation(line: 64, column: 35, scope: !33)
!188 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "A", arg: 6, scope: !33, file: !16, line: 65, type: !30)
!189 = !DILocation(line: 65, column: 35, scope: !33)
!190 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !33, file: !16, line: 66, type: !19)
!191 = !DILocation(line: 66, column: 7, scope: !33)
!192 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !33, file: !16, line: 66, type: !19)
!193 = !DILocation(line: 66, column: 10, scope: !33)
!194 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !33, file: !16, line: 66, type: !19)
!195 = !DILocation(line: 66, column: 13, scope: !33)
!196 = !DILocation(line: 75, column: 10, scope: !197)
!197 = distinct !DILexicalBlock(scope: !33, file: !16, line: 75, column: 3)
!198 = !DILocation(line: 75, column: 8, scope: !197)
!199 = !DILocation(line: 75, column: 15, scope: !200)
!200 = !DILexicalBlockFile(scope: !201, file: !16, discriminator: 2)
!201 = !DILexicalBlockFile(scope: !202, file: !16, discriminator: 1)
!202 = distinct !DILexicalBlock(scope: !197, file: !16, line: 75, column: 3)
!203 = !DILocation(line: 75, column: 19, scope: !202)
!204 = !DILocation(line: 75, column: 17, scope: !202)
!205 = !DILocation(line: 75, column: 3, scope: !197)
!206 = !DILocation(line: 76, column: 12, scope: !207)
!207 = distinct !DILexicalBlock(scope: !208, file: !16, line: 76, column: 5)
!208 = distinct !DILexicalBlock(scope: !202, file: !16, line: 75, column: 31)
!209 = !DILocation(line: 76, column: 10, scope: !207)
!210 = !DILocation(line: 76, column: 17, scope: !211)
!211 = !DILexicalBlockFile(scope: !212, file: !16, discriminator: 2)
!212 = !DILexicalBlockFile(scope: !213, file: !16, discriminator: 1)
!213 = distinct !DILexicalBlock(scope: !207, file: !16, line: 76, column: 5)
!214 = !DILocation(line: 76, column: 22, scope: !213)
!215 = !DILocation(line: 76, column: 19, scope: !213)
!216 = !DILocation(line: 76, column: 5, scope: !207)
!217 = !DILocation(line: 77, column: 18, scope: !213)
!218 = !DILocation(line: 77, column: 12, scope: !213)
!219 = !DILocation(line: 77, column: 7, scope: !213)
!220 = !DILocation(line: 77, column: 9, scope: !213)
!221 = !DILocation(line: 77, column: 15, scope: !213)
!222 = !DILocation(line: 76, column: 26, scope: !213)
!223 = !DILocation(line: 76, column: 5, scope: !213)
!224 = !DILocation(line: 78, column: 12, scope: !225)
!225 = distinct !DILexicalBlock(scope: !208, file: !16, line: 78, column: 5)
!226 = !DILocation(line: 78, column: 10, scope: !225)
!227 = !DILocation(line: 78, column: 17, scope: !228)
!228 = !DILexicalBlockFile(scope: !229, file: !16, discriminator: 2)
!229 = !DILexicalBlockFile(scope: !230, file: !16, discriminator: 1)
!230 = distinct !DILexicalBlock(scope: !225, file: !16, line: 78, column: 5)
!231 = !DILocation(line: 78, column: 21, scope: !230)
!232 = !DILocation(line: 78, column: 19, scope: !230)
!233 = !DILocation(line: 78, column: 5, scope: !225)
!234 = !DILocation(line: 79, column: 14, scope: !235)
!235 = distinct !DILexicalBlock(scope: !236, file: !16, line: 79, column: 7)
!236 = distinct !DILexicalBlock(scope: !230, file: !16, line: 78, column: 33)
!237 = !DILocation(line: 79, column: 12, scope: !235)
!238 = !DILocation(line: 79, column: 19, scope: !239)
!239 = !DILexicalBlockFile(scope: !240, file: !16, discriminator: 2)
!240 = !DILexicalBlockFile(scope: !241, file: !16, discriminator: 1)
!241 = distinct !DILexicalBlock(scope: !235, file: !16, line: 79, column: 7)
!242 = !DILocation(line: 79, column: 24, scope: !241)
!243 = !DILocation(line: 79, column: 21, scope: !241)
!244 = !DILocation(line: 79, column: 7, scope: !235)
!245 = !DILocation(line: 80, column: 20, scope: !241)
!246 = !DILocation(line: 80, column: 33, scope: !241)
!247 = !DILocation(line: 80, column: 28, scope: !241)
!248 = !DILocation(line: 80, column: 30, scope: !241)
!249 = !DILocation(line: 80, column: 26, scope: !241)
!250 = !DILocation(line: 80, column: 43, scope: !241)
!251 = !DILocation(line: 80, column: 38, scope: !241)
!252 = !DILocation(line: 80, column: 40, scope: !241)
!253 = !DILocation(line: 80, column: 36, scope: !241)
!254 = !DILocation(line: 80, column: 14, scope: !241)
!255 = !DILocation(line: 80, column: 9, scope: !241)
!256 = !DILocation(line: 80, column: 11, scope: !241)
!257 = !DILocation(line: 80, column: 17, scope: !241)
!258 = !DILocation(line: 79, column: 28, scope: !241)
!259 = !DILocation(line: 79, column: 7, scope: !241)
!260 = !DILocation(line: 81, column: 5, scope: !236)
!261 = !DILocation(line: 78, column: 29, scope: !230)
!262 = !DILocation(line: 78, column: 5, scope: !230)
!263 = !DILocation(line: 82, column: 3, scope: !208)
!264 = !DILocation(line: 75, column: 27, scope: !202)
!265 = !DILocation(line: 75, column: 3, scope: !202)
!266 = !DILocation(line: 84, column: 1, scope: !33)
!267 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !36, file: !16, line: 43, type: !19)
!268 = !DILocation(line: 43, column: 29, scope: !36)
!269 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "C", arg: 2, scope: !36, file: !16, line: 44, type: !27)
!270 = !DILocation(line: 44, column: 35, scope: !36)
!271 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !36, file: !16, line: 45, type: !19)
!272 = !DILocation(line: 45, column: 7, scope: !36)
!273 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !36, file: !16, line: 45, type: !19)
!274 = !DILocation(line: 45, column: 10, scope: !36)
!275 = !DILocation(line: 47, column: 3, scope: !36)
!276 = !DILocation(line: 48, column: 3, scope: !36)
!277 = !DILocation(line: 49, column: 10, scope: !278)
!278 = distinct !DILexicalBlock(scope: !36, file: !16, line: 49, column: 3)
!279 = !DILocation(line: 49, column: 8, scope: !278)
!280 = !DILocation(line: 49, column: 15, scope: !281)
!281 = !DILexicalBlockFile(scope: !282, file: !16, discriminator: 2)
!282 = !DILexicalBlockFile(scope: !283, file: !16, discriminator: 1)
!283 = distinct !DILexicalBlock(scope: !278, file: !16, line: 49, column: 3)
!284 = !DILocation(line: 49, column: 19, scope: !283)
!285 = !DILocation(line: 49, column: 17, scope: !283)
!286 = !DILocation(line: 49, column: 3, scope: !278)
!287 = !DILocation(line: 50, column: 12, scope: !288)
!288 = distinct !DILexicalBlock(scope: !283, file: !16, line: 50, column: 5)
!289 = !DILocation(line: 50, column: 10, scope: !288)
!290 = !DILocation(line: 50, column: 17, scope: !291)
!291 = !DILexicalBlockFile(scope: !292, file: !16, discriminator: 2)
!292 = !DILexicalBlockFile(scope: !293, file: !16, discriminator: 1)
!293 = distinct !DILexicalBlock(scope: !288, file: !16, line: 50, column: 5)
!294 = !DILocation(line: 50, column: 21, scope: !293)
!295 = !DILocation(line: 50, column: 19, scope: !293)
!296 = !DILocation(line: 50, column: 5, scope: !288)
!297 = !DILocation(line: 51, column: 12, scope: !298)
!298 = distinct !DILexicalBlock(scope: !299, file: !16, line: 51, column: 11)
!299 = distinct !DILexicalBlock(scope: !293, file: !16, line: 50, column: 29)
!300 = !DILocation(line: 51, column: 16, scope: !298)
!301 = !DILocation(line: 51, column: 14, scope: !298)
!302 = !DILocation(line: 51, column: 20, scope: !298)
!303 = !DILocation(line: 51, column: 18, scope: !298)
!304 = !DILocation(line: 51, column: 23, scope: !298)
!305 = !DILocation(line: 51, column: 28, scope: !298)
!306 = !DILocation(line: 51, column: 11, scope: !299)
!307 = !DILocation(line: 52, column: 17, scope: !298)
!308 = !DILocation(line: 52, column: 9, scope: !298)
!309 = !DILocation(line: 53, column: 15, scope: !299)
!310 = !DILocation(line: 53, column: 65, scope: !299)
!311 = !DILocation(line: 53, column: 60, scope: !299)
!312 = !DILocation(line: 53, column: 62, scope: !299)
!313 = !DILocation(line: 53, column: 7, scope: !299)
!314 = !DILocation(line: 54, column: 5, scope: !299)
!315 = !DILocation(line: 50, column: 25, scope: !293)
!316 = !DILocation(line: 50, column: 5, scope: !293)
!317 = !DILocation(line: 54, column: 5, scope: !288)
!318 = !DILocation(line: 49, column: 23, scope: !283)
!319 = !DILocation(line: 49, column: 3, scope: !283)
!320 = !DILocation(line: 55, column: 3, scope: !36)
!321 = !DILocation(line: 56, column: 3, scope: !36)
!322 = !DILocation(line: 57, column: 1, scope: !36)
