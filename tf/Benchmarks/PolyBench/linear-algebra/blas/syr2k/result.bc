; ModuleID = '/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/blas/syr2k/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [23 x i8] c"==BEGIN DUMP_ARRAYS==\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"begin dump: %s\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"\0Aend   dump: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"==END   DUMP_ARRAYS==\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %alpha = alloca double, align 8
  %beta = alloca double, align 8
  %C = alloca [1200 x [1200 x double]]*, align 8
  %A = alloca [1200 x [1000 x double]]*, align 8
  %B = alloca [1200 x [1000 x double]]*, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !42, metadata !43), !dbg !44
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !45, metadata !43), !dbg !46
  call void @llvm.dbg.declare(metadata i32* %n, metadata !47, metadata !43), !dbg !48
  store i32 1200, i32* %n, align 4, !dbg !48
  call void @llvm.dbg.declare(metadata i32* %m, metadata !49, metadata !43), !dbg !50
  store i32 1000, i32* %m, align 4, !dbg !50
  call void @llvm.dbg.declare(metadata double* %alpha, metadata !51, metadata !43), !dbg !52
  call void @llvm.dbg.declare(metadata double* %beta, metadata !53, metadata !43), !dbg !54
  call void @llvm.dbg.declare(metadata [1200 x [1200 x double]]** %C, metadata !55, metadata !43), !dbg !56
  %call = call i8* @polybench_alloc_data(i64 1440000, i32 8), !dbg !56
  %0 = bitcast i8* %call to [1200 x [1200 x double]]*, !dbg !56
  store [1200 x [1200 x double]]* %0, [1200 x [1200 x double]]** %C, align 8, !dbg !56
  call void @llvm.dbg.declare(metadata [1200 x [1000 x double]]** %A, metadata !57, metadata !43), !dbg !58
  %call1 = call i8* @polybench_alloc_data(i64 1200000, i32 8), !dbg !58
  %1 = bitcast i8* %call1 to [1200 x [1000 x double]]*, !dbg !58
  store [1200 x [1000 x double]]* %1, [1200 x [1000 x double]]** %A, align 8, !dbg !58
  call void @llvm.dbg.declare(metadata [1200 x [1000 x double]]** %B, metadata !59, metadata !43), !dbg !60
  %call2 = call i8* @polybench_alloc_data(i64 1200000, i32 8), !dbg !60
  %2 = bitcast i8* %call2 to [1200 x [1000 x double]]*, !dbg !60
  store [1200 x [1000 x double]]* %2, [1200 x [1000 x double]]** %B, align 8, !dbg !60
  %3 = load i32, i32* %n, align 4, !dbg !61
  %4 = load i32, i32* %m, align 4, !dbg !62
  %5 = load [1200 x [1200 x double]]*, [1200 x [1200 x double]]** %C, align 8, !dbg !63
  %arraydecay = getelementptr inbounds [1200 x [1200 x double]], [1200 x [1200 x double]]* %5, i32 0, i32 0, !dbg !63
  %6 = load [1200 x [1000 x double]]*, [1200 x [1000 x double]]** %A, align 8, !dbg !64
  %arraydecay3 = getelementptr inbounds [1200 x [1000 x double]], [1200 x [1000 x double]]* %6, i32 0, i32 0, !dbg !64
  %7 = load [1200 x [1000 x double]]*, [1200 x [1000 x double]]** %B, align 8, !dbg !65
  %arraydecay4 = getelementptr inbounds [1200 x [1000 x double]], [1200 x [1000 x double]]* %7, i32 0, i32 0, !dbg !65
  call void @init_array(i32 %3, i32 %4, double* %alpha, double* %beta, [1200 x double]* %arraydecay, [1000 x double]* %arraydecay3, [1000 x double]* %arraydecay4), !dbg !66
  %8 = load i32, i32* %n, align 4, !dbg !67
  %9 = load i32, i32* %m, align 4, !dbg !68
  %10 = load double, double* %alpha, align 8, !dbg !69
  %11 = load double, double* %beta, align 8, !dbg !70
  %12 = load [1200 x [1200 x double]]*, [1200 x [1200 x double]]** %C, align 8, !dbg !71
  %arraydecay5 = getelementptr inbounds [1200 x [1200 x double]], [1200 x [1200 x double]]* %12, i32 0, i32 0, !dbg !71
  %13 = load [1200 x [1000 x double]]*, [1200 x [1000 x double]]** %A, align 8, !dbg !72
  %arraydecay6 = getelementptr inbounds [1200 x [1000 x double]], [1200 x [1000 x double]]* %13, i32 0, i32 0, !dbg !72
  %14 = load [1200 x [1000 x double]]*, [1200 x [1000 x double]]** %B, align 8, !dbg !73
  %arraydecay7 = getelementptr inbounds [1200 x [1000 x double]], [1200 x [1000 x double]]* %14, i32 0, i32 0, !dbg !73
  call void @kernel_syr2k(i32 %8, i32 %9, double %10, double %11, [1200 x double]* %arraydecay5, [1000 x double]* %arraydecay6, [1000 x double]* %arraydecay7), !dbg !74
  %15 = load i32, i32* %argc.addr, align 4, !dbg !75
  %cmp = icmp sgt i32 %15, 42, !dbg !75
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !75

land.lhs.true:                                    ; preds = %entry
  %16 = load i8**, i8*** %argv.addr, align 8, !dbg !77
  %arrayidx = getelementptr inbounds i8*, i8** %16, i64 0, !dbg !77
  %17 = load i8*, i8** %arrayidx, align 8, !dbg !77
  %call8 = call i32 @strcmp(i8* %17, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0)) #5, !dbg !77
  %tobool = icmp ne i32 %call8, 0, !dbg !77
  br i1 %tobool, label %if.end, label %if.then, !dbg !79

if.then:                                          ; preds = %land.lhs.true
  %18 = load i32, i32* %n, align 4, !dbg !80
  %19 = load [1200 x [1200 x double]]*, [1200 x [1200 x double]]** %C, align 8, !dbg !80
  %arraydecay9 = getelementptr inbounds [1200 x [1200 x double]], [1200 x [1200 x double]]* %19, i32 0, i32 0, !dbg !80
  call void @print_array(i32 %18, [1200 x double]* %arraydecay9), !dbg !80
  br label %if.end, !dbg !80

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %20 = load [1200 x [1200 x double]]*, [1200 x [1200 x double]]** %C, align 8, !dbg !82
  %21 = bitcast [1200 x [1200 x double]]* %20 to i8*, !dbg !82
  call void @free(i8* %21) #6, !dbg !82
  %22 = load [1200 x [1000 x double]]*, [1200 x [1000 x double]]** %A, align 8, !dbg !83
  %23 = bitcast [1200 x [1000 x double]]* %22 to i8*, !dbg !83
  call void @free(i8* %23) #6, !dbg !83
  %24 = load [1200 x [1000 x double]]*, [1200 x [1000 x double]]** %B, align 8, !dbg !84
  %25 = bitcast [1200 x [1000 x double]]* %24 to i8*, !dbg !84
  call void @free(i8* %25) #6, !dbg !84
  ret i32 0, !dbg !85
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i8* @polybench_alloc_data(i64, i32) #2

; Function Attrs: nounwind uwtable
define internal void @init_array(i32 %n, i32 %m, double* %alpha, double* %beta, [1200 x double]* %C, [1000 x double]* %A, [1000 x double]* %B) #0 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %alpha.addr = alloca double*, align 8
  %beta.addr = alloca double*, align 8
  %C.addr = alloca [1200 x double]*, align 8
  %A.addr = alloca [1000 x double]*, align 8
  %B.addr = alloca [1000 x double]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !86, metadata !43), !dbg !87
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !88, metadata !43), !dbg !89
  store double* %alpha, double** %alpha.addr, align 8
  call void @llvm.dbg.declare(metadata double** %alpha.addr, metadata !90, metadata !43), !dbg !91
  store double* %beta, double** %beta.addr, align 8
  call void @llvm.dbg.declare(metadata double** %beta.addr, metadata !92, metadata !43), !dbg !93
  store [1200 x double]* %C, [1200 x double]** %C.addr, align 8
  call void @llvm.dbg.declare(metadata [1200 x double]** %C.addr, metadata !94, metadata !43), !dbg !95
  store [1000 x double]* %A, [1000 x double]** %A.addr, align 8
  call void @llvm.dbg.declare(metadata [1000 x double]** %A.addr, metadata !96, metadata !43), !dbg !97
  store [1000 x double]* %B, [1000 x double]** %B.addr, align 8
  call void @llvm.dbg.declare(metadata [1000 x double]** %B.addr, metadata !98, metadata !43), !dbg !99
  call void @llvm.dbg.declare(metadata i32* %i, metadata !100, metadata !43), !dbg !101
  call void @llvm.dbg.declare(metadata i32* %j, metadata !102, metadata !43), !dbg !103
  %0 = load double*, double** %alpha.addr, align 8, !dbg !104
  store double 1.500000e+00, double* %0, align 8, !dbg !105
  %1 = load double*, double** %beta.addr, align 8, !dbg !106
  store double 1.200000e+00, double* %1, align 8, !dbg !107
  store i32 0, i32* %i, align 4, !dbg !108
  br label %for.cond, !dbg !110

for.cond:                                         ; preds = %for.inc.17, %entry
  %2 = load i32, i32* %i, align 4, !dbg !111
  %3 = load i32, i32* %n.addr, align 4, !dbg !115
  %cmp = icmp slt i32 %2, %3, !dbg !116
  br i1 %cmp, label %for.body, label %for.end.19, !dbg !117

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !118
  br label %for.cond.1, !dbg !120

for.cond.1:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4, !dbg !121
  %5 = load i32, i32* %m.addr, align 4, !dbg !125
  %cmp2 = icmp slt i32 %4, %5, !dbg !126
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !127

for.body.3:                                       ; preds = %for.cond.1
  %6 = load i32, i32* %i, align 4, !dbg !128
  %7 = load i32, i32* %j, align 4, !dbg !130
  %mul = mul nsw i32 %6, %7, !dbg !131
  %add = add nsw i32 %mul, 1, !dbg !132
  %8 = load i32, i32* %n.addr, align 4, !dbg !133
  %rem = srem i32 %add, %8, !dbg !134
  %conv = sitofp i32 %rem to double, !dbg !135
  %9 = load i32, i32* %n.addr, align 4, !dbg !136
  %conv4 = sitofp i32 %9 to double, !dbg !136
  %div = fdiv double %conv, %conv4, !dbg !137
  %10 = load i32, i32* %j, align 4, !dbg !138
  %idxprom = sext i32 %10 to i64, !dbg !139
  %11 = load i32, i32* %i, align 4, !dbg !140
  %idxprom5 = sext i32 %11 to i64, !dbg !139
  %12 = load [1000 x double]*, [1000 x double]** %A.addr, align 8, !dbg !139
  %arrayidx = getelementptr inbounds [1000 x double], [1000 x double]* %12, i64 %idxprom5, !dbg !139
  %arrayidx6 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx, i32 0, i64 %idxprom, !dbg !139
  store double %div, double* %arrayidx6, align 8, !dbg !141
  %13 = load i32, i32* %i, align 4, !dbg !142
  %14 = load i32, i32* %j, align 4, !dbg !143
  %mul7 = mul nsw i32 %13, %14, !dbg !144
  %add8 = add nsw i32 %mul7, 2, !dbg !145
  %15 = load i32, i32* %m.addr, align 4, !dbg !146
  %rem9 = srem i32 %add8, %15, !dbg !147
  %conv10 = sitofp i32 %rem9 to double, !dbg !148
  %16 = load i32, i32* %m.addr, align 4, !dbg !149
  %conv11 = sitofp i32 %16 to double, !dbg !149
  %div12 = fdiv double %conv10, %conv11, !dbg !150
  %17 = load i32, i32* %j, align 4, !dbg !151
  %idxprom13 = sext i32 %17 to i64, !dbg !152
  %18 = load i32, i32* %i, align 4, !dbg !153
  %idxprom14 = sext i32 %18 to i64, !dbg !152
  %19 = load [1000 x double]*, [1000 x double]** %B.addr, align 8, !dbg !152
  %arrayidx15 = getelementptr inbounds [1000 x double], [1000 x double]* %19, i64 %idxprom14, !dbg !152
  %arrayidx16 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx15, i32 0, i64 %idxprom13, !dbg !152
  store double %div12, double* %arrayidx16, align 8, !dbg !154
  br label %for.inc, !dbg !155

for.inc:                                          ; preds = %for.body.3
  %20 = load i32, i32* %j, align 4, !dbg !156
  %inc = add nsw i32 %20, 1, !dbg !156
  store i32 %inc, i32* %j, align 4, !dbg !156
  br label %for.cond.1, !dbg !157

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.17, !dbg !158

for.inc.17:                                       ; preds = %for.end
  %21 = load i32, i32* %i, align 4, !dbg !159
  %inc18 = add nsw i32 %21, 1, !dbg !159
  store i32 %inc18, i32* %i, align 4, !dbg !159
  br label %for.cond, !dbg !160

for.end.19:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !161
  br label %for.cond.20, !dbg !163

for.cond.20:                                      ; preds = %for.inc.41, %for.end.19
  %22 = load i32, i32* %i, align 4, !dbg !164
  %23 = load i32, i32* %n.addr, align 4, !dbg !168
  %cmp21 = icmp slt i32 %22, %23, !dbg !169
  br i1 %cmp21, label %for.body.23, label %for.end.43, !dbg !170

for.body.23:                                      ; preds = %for.cond.20
  store i32 0, i32* %j, align 4, !dbg !171
  br label %for.cond.24, !dbg !173

for.cond.24:                                      ; preds = %for.inc.38, %for.body.23
  %24 = load i32, i32* %j, align 4, !dbg !174
  %25 = load i32, i32* %n.addr, align 4, !dbg !178
  %cmp25 = icmp slt i32 %24, %25, !dbg !179
  br i1 %cmp25, label %for.body.27, label %for.end.40, !dbg !180

for.body.27:                                      ; preds = %for.cond.24
  %26 = load i32, i32* %i, align 4, !dbg !181
  %27 = load i32, i32* %j, align 4, !dbg !183
  %mul28 = mul nsw i32 %26, %27, !dbg !184
  %add29 = add nsw i32 %mul28, 3, !dbg !185
  %28 = load i32, i32* %n.addr, align 4, !dbg !186
  %rem30 = srem i32 %add29, %28, !dbg !187
  %conv31 = sitofp i32 %rem30 to double, !dbg !188
  %29 = load i32, i32* %m.addr, align 4, !dbg !189
  %conv32 = sitofp i32 %29 to double, !dbg !189
  %div33 = fdiv double %conv31, %conv32, !dbg !190
  %30 = load i32, i32* %j, align 4, !dbg !191
  %idxprom34 = sext i32 %30 to i64, !dbg !192
  %31 = load i32, i32* %i, align 4, !dbg !193
  %idxprom35 = sext i32 %31 to i64, !dbg !192
  %32 = load [1200 x double]*, [1200 x double]** %C.addr, align 8, !dbg !192
  %arrayidx36 = getelementptr inbounds [1200 x double], [1200 x double]* %32, i64 %idxprom35, !dbg !192
  %arrayidx37 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx36, i32 0, i64 %idxprom34, !dbg !192
  store double %div33, double* %arrayidx37, align 8, !dbg !194
  br label %for.inc.38, !dbg !195

for.inc.38:                                       ; preds = %for.body.27
  %33 = load i32, i32* %j, align 4, !dbg !196
  %inc39 = add nsw i32 %33, 1, !dbg !196
  store i32 %inc39, i32* %j, align 4, !dbg !196
  br label %for.cond.24, !dbg !197

for.end.40:                                       ; preds = %for.cond.24
  br label %for.inc.41, !dbg !198

for.inc.41:                                       ; preds = %for.end.40
  %34 = load i32, i32* %i, align 4, !dbg !199
  %inc42 = add nsw i32 %34, 1, !dbg !199
  store i32 %inc42, i32* %i, align 4, !dbg !199
  br label %for.cond.20, !dbg !200

for.end.43:                                       ; preds = %for.cond.20
  ret void, !dbg !201
}

; Function Attrs: nounwind uwtable
define internal void @kernel_syr2k(i32 %n, i32 %m, double %alpha, double %beta, [1200 x double]* %C, [1000 x double]* %A, [1000 x double]* %B) #0 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %alpha.addr = alloca double, align 8
  %beta.addr = alloca double, align 8
  %C.addr = alloca [1200 x double]*, align 8
  %A.addr = alloca [1000 x double]*, align 8
  %B.addr = alloca [1000 x double]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !202, metadata !43), !dbg !203
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !204, metadata !43), !dbg !205
  store double %alpha, double* %alpha.addr, align 8
  call void @llvm.dbg.declare(metadata double* %alpha.addr, metadata !206, metadata !43), !dbg !207
  store double %beta, double* %beta.addr, align 8
  call void @llvm.dbg.declare(metadata double* %beta.addr, metadata !208, metadata !43), !dbg !209
  store [1200 x double]* %C, [1200 x double]** %C.addr, align 8
  call void @llvm.dbg.declare(metadata [1200 x double]** %C.addr, metadata !210, metadata !43), !dbg !211
  store [1000 x double]* %A, [1000 x double]** %A.addr, align 8
  call void @llvm.dbg.declare(metadata [1000 x double]** %A.addr, metadata !212, metadata !43), !dbg !213
  store [1000 x double]* %B, [1000 x double]** %B.addr, align 8
  call void @llvm.dbg.declare(metadata [1000 x double]** %B.addr, metadata !214, metadata !43), !dbg !215
  call void @llvm.dbg.declare(metadata i32* %i, metadata !216, metadata !43), !dbg !217
  call void @llvm.dbg.declare(metadata i32* %j, metadata !218, metadata !43), !dbg !219
  call void @llvm.dbg.declare(metadata i32* %k, metadata !220, metadata !43), !dbg !221
  store i32 0, i32* %i, align 4, !dbg !222
  br label %for.cond, !dbg !224

for.cond:                                         ; preds = %for.inc.43, %entry
  %0 = load i32, i32* %i, align 4, !dbg !225
  %1 = load i32, i32* %n.addr, align 4, !dbg !229
  %cmp = icmp slt i32 %0, %1, !dbg !230
  br i1 %cmp, label %for.body, label %for.end.45, !dbg !231

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !232
  br label %for.cond.1, !dbg !235

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !236
  %3 = load i32, i32* %i, align 4, !dbg !240
  %cmp2 = icmp sle i32 %2, %3, !dbg !241
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !242

for.body.3:                                       ; preds = %for.cond.1
  %4 = load double, double* %beta.addr, align 8, !dbg !243
  %5 = load i32, i32* %j, align 4, !dbg !244
  %idxprom = sext i32 %5 to i64, !dbg !245
  %6 = load i32, i32* %i, align 4, !dbg !246
  %idxprom4 = sext i32 %6 to i64, !dbg !245
  %7 = load [1200 x double]*, [1200 x double]** %C.addr, align 8, !dbg !245
  %arrayidx = getelementptr inbounds [1200 x double], [1200 x double]* %7, i64 %idxprom4, !dbg !245
  %arrayidx5 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx, i32 0, i64 %idxprom, !dbg !245
  %8 = load double, double* %arrayidx5, align 8, !dbg !247
  %mul = fmul double %8, %4, !dbg !247
  store double %mul, double* %arrayidx5, align 8, !dbg !247
  br label %for.inc, !dbg !245

for.inc:                                          ; preds = %for.body.3
  %9 = load i32, i32* %j, align 4, !dbg !248
  %inc = add nsw i32 %9, 1, !dbg !248
  store i32 %inc, i32* %j, align 4, !dbg !248
  br label %for.cond.1, !dbg !249

for.end:                                          ; preds = %for.cond.1
  store i32 0, i32* %k, align 4, !dbg !250
  br label %for.cond.6, !dbg !252

for.cond.6:                                       ; preds = %for.inc.40, %for.end
  %10 = load i32, i32* %k, align 4, !dbg !253
  %11 = load i32, i32* %m.addr, align 4, !dbg !257
  %cmp7 = icmp slt i32 %10, %11, !dbg !258
  br i1 %cmp7, label %for.body.8, label %for.end.42, !dbg !259

for.body.8:                                       ; preds = %for.cond.6
  store i32 0, i32* %j, align 4, !dbg !260
  br label %for.cond.9, !dbg !262

for.cond.9:                                       ; preds = %for.inc.37, %for.body.8
  %12 = load i32, i32* %j, align 4, !dbg !263
  %13 = load i32, i32* %i, align 4, !dbg !267
  %cmp10 = icmp sle i32 %12, %13, !dbg !268
  br i1 %cmp10, label %for.body.11, label %for.end.39, !dbg !269

for.body.11:                                      ; preds = %for.cond.9
  %14 = load i32, i32* %k, align 4, !dbg !270
  %idxprom12 = sext i32 %14 to i64, !dbg !272
  %15 = load i32, i32* %j, align 4, !dbg !273
  %idxprom13 = sext i32 %15 to i64, !dbg !272
  %16 = load [1000 x double]*, [1000 x double]** %A.addr, align 8, !dbg !272
  %arrayidx14 = getelementptr inbounds [1000 x double], [1000 x double]* %16, i64 %idxprom13, !dbg !272
  %arrayidx15 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx14, i32 0, i64 %idxprom12, !dbg !272
  %17 = load double, double* %arrayidx15, align 8, !dbg !272
  %18 = load double, double* %alpha.addr, align 8, !dbg !274
  %mul16 = fmul double %17, %18, !dbg !275
  %19 = load i32, i32* %k, align 4, !dbg !276
  %idxprom17 = sext i32 %19 to i64, !dbg !277
  %20 = load i32, i32* %i, align 4, !dbg !278
  %idxprom18 = sext i32 %20 to i64, !dbg !277
  %21 = load [1000 x double]*, [1000 x double]** %B.addr, align 8, !dbg !277
  %arrayidx19 = getelementptr inbounds [1000 x double], [1000 x double]* %21, i64 %idxprom18, !dbg !277
  %arrayidx20 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx19, i32 0, i64 %idxprom17, !dbg !277
  %22 = load double, double* %arrayidx20, align 8, !dbg !277
  %mul21 = fmul double %mul16, %22, !dbg !279
  %23 = load i32, i32* %k, align 4, !dbg !280
  %idxprom22 = sext i32 %23 to i64, !dbg !281
  %24 = load i32, i32* %j, align 4, !dbg !282
  %idxprom23 = sext i32 %24 to i64, !dbg !281
  %25 = load [1000 x double]*, [1000 x double]** %B.addr, align 8, !dbg !281
  %arrayidx24 = getelementptr inbounds [1000 x double], [1000 x double]* %25, i64 %idxprom23, !dbg !281
  %arrayidx25 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx24, i32 0, i64 %idxprom22, !dbg !281
  %26 = load double, double* %arrayidx25, align 8, !dbg !281
  %27 = load double, double* %alpha.addr, align 8, !dbg !283
  %mul26 = fmul double %26, %27, !dbg !284
  %28 = load i32, i32* %k, align 4, !dbg !285
  %idxprom27 = sext i32 %28 to i64, !dbg !286
  %29 = load i32, i32* %i, align 4, !dbg !287
  %idxprom28 = sext i32 %29 to i64, !dbg !286
  %30 = load [1000 x double]*, [1000 x double]** %A.addr, align 8, !dbg !286
  %arrayidx29 = getelementptr inbounds [1000 x double], [1000 x double]* %30, i64 %idxprom28, !dbg !286
  %arrayidx30 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx29, i32 0, i64 %idxprom27, !dbg !286
  %31 = load double, double* %arrayidx30, align 8, !dbg !286
  %mul31 = fmul double %mul26, %31, !dbg !288
  %add = fadd double %mul21, %mul31, !dbg !289
  %32 = load i32, i32* %j, align 4, !dbg !290
  %idxprom32 = sext i32 %32 to i64, !dbg !291
  %33 = load i32, i32* %i, align 4, !dbg !292
  %idxprom33 = sext i32 %33 to i64, !dbg !291
  %34 = load [1200 x double]*, [1200 x double]** %C.addr, align 8, !dbg !291
  %arrayidx34 = getelementptr inbounds [1200 x double], [1200 x double]* %34, i64 %idxprom33, !dbg !291
  %arrayidx35 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx34, i32 0, i64 %idxprom32, !dbg !291
  %35 = load double, double* %arrayidx35, align 8, !dbg !293
  %add36 = fadd double %35, %add, !dbg !293
  store double %add36, double* %arrayidx35, align 8, !dbg !293
  br label %for.inc.37, !dbg !294

for.inc.37:                                       ; preds = %for.body.11
  %36 = load i32, i32* %j, align 4, !dbg !295
  %inc38 = add nsw i32 %36, 1, !dbg !295
  store i32 %inc38, i32* %j, align 4, !dbg !295
  br label %for.cond.9, !dbg !296

for.end.39:                                       ; preds = %for.cond.9
  br label %for.inc.40, !dbg !297

for.inc.40:                                       ; preds = %for.end.39
  %37 = load i32, i32* %k, align 4, !dbg !298
  %inc41 = add nsw i32 %37, 1, !dbg !298
  store i32 %inc41, i32* %k, align 4, !dbg !298
  br label %for.cond.6, !dbg !299

for.end.42:                                       ; preds = %for.cond.6
  br label %for.inc.43, !dbg !300

for.inc.43:                                       ; preds = %for.end.42
  %38 = load i32, i32* %i, align 4, !dbg !301
  %inc44 = add nsw i32 %38, 1, !dbg !301
  store i32 %inc44, i32* %i, align 4, !dbg !301
  br label %for.cond, !dbg !302

for.end.45:                                       ; preds = %for.cond
  ret void, !dbg !303
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #3

; Function Attrs: nounwind uwtable
define internal void @print_array(i32 %n, [1200 x double]* %C) #0 {
entry:
  %n.addr = alloca i32, align 4
  %C.addr = alloca [1200 x double]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !304, metadata !43), !dbg !305
  store [1200 x double]* %C, [1200 x double]** %C.addr, align 8
  call void @llvm.dbg.declare(metadata [1200 x double]** %C.addr, metadata !306, metadata !43), !dbg !307
  call void @llvm.dbg.declare(metadata i32* %i, metadata !308, metadata !43), !dbg !309
  call void @llvm.dbg.declare(metadata i32* %j, metadata !310, metadata !43), !dbg !311
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !312
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0)), !dbg !312
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !313
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !313
  store i32 0, i32* %i, align 4, !dbg !314
  br label %for.cond, !dbg !316

for.cond:                                         ; preds = %for.inc.10, %entry
  %2 = load i32, i32* %i, align 4, !dbg !317
  %3 = load i32, i32* %n.addr, align 4, !dbg !321
  %cmp = icmp slt i32 %2, %3, !dbg !322
  br i1 %cmp, label %for.body, label %for.end.12, !dbg !323

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !324
  br label %for.cond.2, !dbg !326

for.cond.2:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4, !dbg !327
  %5 = load i32, i32* %n.addr, align 4, !dbg !331
  %cmp3 = icmp slt i32 %4, %5, !dbg !332
  br i1 %cmp3, label %for.body.4, label %for.end, !dbg !333

for.body.4:                                       ; preds = %for.cond.2
  %6 = load i32, i32* %i, align 4, !dbg !334
  %7 = load i32, i32* %n.addr, align 4, !dbg !337
  %mul = mul nsw i32 %6, %7, !dbg !338
  %8 = load i32, i32* %j, align 4, !dbg !339
  %add = add nsw i32 %mul, %8, !dbg !340
  %rem = srem i32 %add, 20, !dbg !341
  %cmp5 = icmp eq i32 %rem, 0, !dbg !342
  br i1 %cmp5, label %if.then, label %if.end, !dbg !343

if.then:                                          ; preds = %for.body.4
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !344
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0)), !dbg !345
  br label %if.end, !dbg !345

if.end:                                           ; preds = %if.then, %for.body.4
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !346
  %11 = load i32, i32* %j, align 4, !dbg !347
  %idxprom = sext i32 %11 to i64, !dbg !348
  %12 = load i32, i32* %i, align 4, !dbg !349
  %idxprom7 = sext i32 %12 to i64, !dbg !348
  %13 = load [1200 x double]*, [1200 x double]** %C.addr, align 8, !dbg !348
  %arrayidx = getelementptr inbounds [1200 x double], [1200 x double]* %13, i64 %idxprom7, !dbg !348
  %arrayidx8 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx, i32 0, i64 %idxprom, !dbg !348
  %14 = load double, double* %arrayidx8, align 8, !dbg !348
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), double %14), !dbg !350
  br label %for.inc, !dbg !351

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %j, align 4, !dbg !352
  %inc = add nsw i32 %15, 1, !dbg !352
  store i32 %inc, i32* %j, align 4, !dbg !352
  br label %for.cond.2, !dbg !353

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.10, !dbg !354

for.inc.10:                                       ; preds = %for.end
  %16 = load i32, i32* %i, align 4, !dbg !355
  %inc11 = add nsw i32 %16, 1, !dbg !355
  store i32 %inc11, i32* %i, align 4, !dbg !355
  br label %for.cond, !dbg !356

for.end.12:                                       ; preds = %for.cond
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !357
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !357
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !358
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0)), !dbg !358
  ret void, !dbg !359
}

; Function Attrs: nounwind
declare void @free(i8*) #4

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!39, !40}
!llvm.ident = !{!41}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !14)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/blas/syr2k")
!2 = !{}
!3 = !{!4, !9, !13, !6}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 92160000, align: 64, elements: !7)
!6 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!7 = !{!8, !8}
!8 = !DISubrange(count: 1200)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 76800000, align: 64, elements: !11)
!11 = !{!8, !12}
!12 = !DISubrange(count: 1000)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!14 = !{!15, !23, !33, !36}
!15 = !DISubprogram(name: "main", scope: !16, file: !16, line: 91, type: !17, isLocal: false, isDefinition: true, scopeLine: 91, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!16 = !DIFile(filename: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/blas/syr2k/tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/blas/syr2k")
!17 = !DISubroutineType(types: !18)
!18 = !{!19, !19, !20}
!19 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64, align: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64, align: 64)
!22 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!23 = !DISubprogram(name: "init_array", scope: !16, file: !16, line: 24, type: !24, isLocal: true, isDefinition: true, scopeLine: 29, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, double*, double*, [1200 x double]*, [1000 x double]*, [1000 x double]*)* @init_array, variables: !2)
!24 = !DISubroutineType(types: !25)
!25 = !{null, !19, !19, !26, !26, !27, !30, !30}
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64, align: 64)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 76800, align: 64, elements: !29)
!29 = !{!8}
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!31 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 64000, align: 64, elements: !32)
!32 = !{!12}
!33 = !DISubprogram(name: "kernel_syr2k", scope: !16, file: !16, line: 65, type: !34, isLocal: true, isDefinition: true, scopeLine: 70, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, double, double, [1200 x double]*, [1000 x double]*, [1000 x double]*)* @kernel_syr2k, variables: !2)
!34 = !DISubroutineType(types: !35)
!35 = !{null, !19, !19, !6, !6, !27, !30, !30}
!36 = !DISubprogram(name: "print_array", scope: !16, file: !16, line: 47, type: !37, isLocal: true, isDefinition: true, scopeLine: 48, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, [1200 x double]*)* @print_array, variables: !2)
!37 = !DISubroutineType(types: !38)
!38 = !{null, !19, !27}
!39 = !{i32 2, !"Dwarf Version", i32 4}
!40 = !{i32 2, !"Debug Info Version", i32 3}
!41 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!42 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !15, file: !16, line: 91, type: !19)
!43 = !DIExpression()
!44 = !DILocation(line: 91, column: 14, scope: !15)
!45 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !15, file: !16, line: 91, type: !20)
!46 = !DILocation(line: 91, column: 27, scope: !15)
!47 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !15, file: !16, line: 93, type: !19)
!48 = !DILocation(line: 93, column: 7, scope: !15)
!49 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !15, file: !16, line: 94, type: !19)
!50 = !DILocation(line: 94, column: 7, scope: !15)
!51 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "alpha", scope: !15, file: !16, line: 97, type: !6)
!52 = !DILocation(line: 97, column: 13, scope: !15)
!53 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "beta", scope: !15, file: !16, line: 98, type: !6)
!54 = !DILocation(line: 98, column: 13, scope: !15)
!55 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "C", scope: !15, file: !16, line: 99, type: !4)
!56 = !DILocation(line: 99, column: 3, scope: !15)
!57 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "A", scope: !15, file: !16, line: 100, type: !9)
!58 = !DILocation(line: 100, column: 3, scope: !15)
!59 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "B", scope: !15, file: !16, line: 101, type: !9)
!60 = !DILocation(line: 101, column: 3, scope: !15)
!61 = !DILocation(line: 104, column: 14, scope: !15)
!62 = !DILocation(line: 104, column: 17, scope: !15)
!63 = !DILocation(line: 105, column: 14, scope: !15)
!64 = !DILocation(line: 106, column: 14, scope: !15)
!65 = !DILocation(line: 107, column: 14, scope: !15)
!66 = !DILocation(line: 104, column: 3, scope: !15)
!67 = !DILocation(line: 113, column: 16, scope: !15)
!68 = !DILocation(line: 113, column: 19, scope: !15)
!69 = !DILocation(line: 114, column: 16, scope: !15)
!70 = !DILocation(line: 114, column: 23, scope: !15)
!71 = !DILocation(line: 115, column: 16, scope: !15)
!72 = !DILocation(line: 116, column: 16, scope: !15)
!73 = !DILocation(line: 117, column: 16, scope: !15)
!74 = !DILocation(line: 113, column: 3, scope: !15)
!75 = !DILocation(line: 125, column: 3, scope: !76)
!76 = distinct !DILexicalBlock(scope: !15, file: !16, line: 125, column: 3)
!77 = !DILocation(line: 125, column: 3, scope: !78)
!78 = !DILexicalBlockFile(scope: !76, file: !16, discriminator: 1)
!79 = !DILocation(line: 125, column: 3, scope: !15)
!80 = !DILocation(line: 125, column: 3, scope: !81)
!81 = !DILexicalBlockFile(scope: !76, file: !16, discriminator: 2)
!82 = !DILocation(line: 128, column: 3, scope: !15)
!83 = !DILocation(line: 129, column: 3, scope: !15)
!84 = !DILocation(line: 130, column: 3, scope: !15)
!85 = !DILocation(line: 132, column: 3, scope: !15)
!86 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !23, file: !16, line: 24, type: !19)
!87 = !DILocation(line: 24, column: 28, scope: !23)
!88 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 2, scope: !23, file: !16, line: 24, type: !19)
!89 = !DILocation(line: 24, column: 35, scope: !23)
!90 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "alpha", arg: 3, scope: !23, file: !16, line: 25, type: !26)
!91 = !DILocation(line: 25, column: 35, scope: !23)
!92 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "beta", arg: 4, scope: !23, file: !16, line: 26, type: !26)
!93 = !DILocation(line: 26, column: 35, scope: !23)
!94 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "C", arg: 5, scope: !23, file: !16, line: 27, type: !27)
!95 = !DILocation(line: 27, column: 34, scope: !23)
!96 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "A", arg: 6, scope: !23, file: !16, line: 28, type: !30)
!97 = !DILocation(line: 28, column: 34, scope: !23)
!98 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "B", arg: 7, scope: !23, file: !16, line: 29, type: !30)
!99 = !DILocation(line: 29, column: 34, scope: !23)
!100 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !23, file: !16, line: 30, type: !19)
!101 = !DILocation(line: 30, column: 7, scope: !23)
!102 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !23, file: !16, line: 30, type: !19)
!103 = !DILocation(line: 30, column: 10, scope: !23)
!104 = !DILocation(line: 32, column: 4, scope: !23)
!105 = !DILocation(line: 32, column: 10, scope: !23)
!106 = !DILocation(line: 33, column: 4, scope: !23)
!107 = !DILocation(line: 33, column: 9, scope: !23)
!108 = !DILocation(line: 34, column: 10, scope: !109)
!109 = distinct !DILexicalBlock(scope: !23, file: !16, line: 34, column: 3)
!110 = !DILocation(line: 34, column: 8, scope: !109)
!111 = !DILocation(line: 34, column: 15, scope: !112)
!112 = !DILexicalBlockFile(scope: !113, file: !16, discriminator: 2)
!113 = !DILexicalBlockFile(scope: !114, file: !16, discriminator: 1)
!114 = distinct !DILexicalBlock(scope: !109, file: !16, line: 34, column: 3)
!115 = !DILocation(line: 34, column: 19, scope: !114)
!116 = !DILocation(line: 34, column: 17, scope: !114)
!117 = !DILocation(line: 34, column: 3, scope: !109)
!118 = !DILocation(line: 35, column: 12, scope: !119)
!119 = distinct !DILexicalBlock(scope: !114, file: !16, line: 35, column: 5)
!120 = !DILocation(line: 35, column: 10, scope: !119)
!121 = !DILocation(line: 35, column: 17, scope: !122)
!122 = !DILexicalBlockFile(scope: !123, file: !16, discriminator: 2)
!123 = !DILexicalBlockFile(scope: !124, file: !16, discriminator: 1)
!124 = distinct !DILexicalBlock(scope: !119, file: !16, line: 35, column: 5)
!125 = !DILocation(line: 35, column: 21, scope: !124)
!126 = !DILocation(line: 35, column: 19, scope: !124)
!127 = !DILocation(line: 35, column: 5, scope: !119)
!128 = !DILocation(line: 36, column: 30, scope: !129)
!129 = distinct !DILexicalBlock(scope: !124, file: !16, line: 35, column: 29)
!130 = !DILocation(line: 36, column: 34, scope: !129)
!131 = !DILocation(line: 36, column: 32, scope: !129)
!132 = !DILocation(line: 36, column: 36, scope: !129)
!133 = !DILocation(line: 36, column: 43, scope: !129)
!134 = !DILocation(line: 36, column: 41, scope: !129)
!135 = !DILocation(line: 36, column: 17, scope: !129)
!136 = !DILocation(line: 36, column: 48, scope: !129)
!137 = !DILocation(line: 36, column: 46, scope: !129)
!138 = !DILocation(line: 36, column: 12, scope: !129)
!139 = !DILocation(line: 36, column: 7, scope: !129)
!140 = !DILocation(line: 36, column: 9, scope: !129)
!141 = !DILocation(line: 36, column: 15, scope: !129)
!142 = !DILocation(line: 37, column: 30, scope: !129)
!143 = !DILocation(line: 37, column: 34, scope: !129)
!144 = !DILocation(line: 37, column: 32, scope: !129)
!145 = !DILocation(line: 37, column: 36, scope: !129)
!146 = !DILocation(line: 37, column: 43, scope: !129)
!147 = !DILocation(line: 37, column: 41, scope: !129)
!148 = !DILocation(line: 37, column: 17, scope: !129)
!149 = !DILocation(line: 37, column: 48, scope: !129)
!150 = !DILocation(line: 37, column: 46, scope: !129)
!151 = !DILocation(line: 37, column: 12, scope: !129)
!152 = !DILocation(line: 37, column: 7, scope: !129)
!153 = !DILocation(line: 37, column: 9, scope: !129)
!154 = !DILocation(line: 37, column: 15, scope: !129)
!155 = !DILocation(line: 38, column: 5, scope: !129)
!156 = !DILocation(line: 35, column: 25, scope: !124)
!157 = !DILocation(line: 35, column: 5, scope: !124)
!158 = !DILocation(line: 38, column: 5, scope: !119)
!159 = !DILocation(line: 34, column: 23, scope: !114)
!160 = !DILocation(line: 34, column: 3, scope: !114)
!161 = !DILocation(line: 39, column: 10, scope: !162)
!162 = distinct !DILexicalBlock(scope: !23, file: !16, line: 39, column: 3)
!163 = !DILocation(line: 39, column: 8, scope: !162)
!164 = !DILocation(line: 39, column: 15, scope: !165)
!165 = !DILexicalBlockFile(scope: !166, file: !16, discriminator: 2)
!166 = !DILexicalBlockFile(scope: !167, file: !16, discriminator: 1)
!167 = distinct !DILexicalBlock(scope: !162, file: !16, line: 39, column: 3)
!168 = !DILocation(line: 39, column: 19, scope: !167)
!169 = !DILocation(line: 39, column: 17, scope: !167)
!170 = !DILocation(line: 39, column: 3, scope: !162)
!171 = !DILocation(line: 40, column: 12, scope: !172)
!172 = distinct !DILexicalBlock(scope: !167, file: !16, line: 40, column: 5)
!173 = !DILocation(line: 40, column: 10, scope: !172)
!174 = !DILocation(line: 40, column: 17, scope: !175)
!175 = !DILexicalBlockFile(scope: !176, file: !16, discriminator: 2)
!176 = !DILexicalBlockFile(scope: !177, file: !16, discriminator: 1)
!177 = distinct !DILexicalBlock(scope: !172, file: !16, line: 40, column: 5)
!178 = !DILocation(line: 40, column: 21, scope: !177)
!179 = !DILocation(line: 40, column: 19, scope: !177)
!180 = !DILocation(line: 40, column: 5, scope: !172)
!181 = !DILocation(line: 41, column: 30, scope: !182)
!182 = distinct !DILexicalBlock(scope: !177, file: !16, line: 40, column: 29)
!183 = !DILocation(line: 41, column: 34, scope: !182)
!184 = !DILocation(line: 41, column: 32, scope: !182)
!185 = !DILocation(line: 41, column: 36, scope: !182)
!186 = !DILocation(line: 41, column: 43, scope: !182)
!187 = !DILocation(line: 41, column: 41, scope: !182)
!188 = !DILocation(line: 41, column: 17, scope: !182)
!189 = !DILocation(line: 41, column: 48, scope: !182)
!190 = !DILocation(line: 41, column: 46, scope: !182)
!191 = !DILocation(line: 41, column: 12, scope: !182)
!192 = !DILocation(line: 41, column: 7, scope: !182)
!193 = !DILocation(line: 41, column: 9, scope: !182)
!194 = !DILocation(line: 41, column: 15, scope: !182)
!195 = !DILocation(line: 42, column: 5, scope: !182)
!196 = !DILocation(line: 40, column: 25, scope: !177)
!197 = !DILocation(line: 40, column: 5, scope: !177)
!198 = !DILocation(line: 42, column: 5, scope: !172)
!199 = !DILocation(line: 39, column: 23, scope: !167)
!200 = !DILocation(line: 39, column: 3, scope: !167)
!201 = !DILocation(line: 43, column: 1, scope: !23)
!202 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !33, file: !16, line: 65, type: !19)
!203 = !DILocation(line: 65, column: 30, scope: !33)
!204 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 2, scope: !33, file: !16, line: 65, type: !19)
!205 = !DILocation(line: 65, column: 37, scope: !33)
!206 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "alpha", arg: 3, scope: !33, file: !16, line: 66, type: !6)
!207 = !DILocation(line: 66, column: 36, scope: !33)
!208 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "beta", arg: 4, scope: !33, file: !16, line: 67, type: !6)
!209 = !DILocation(line: 67, column: 36, scope: !33)
!210 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "C", arg: 5, scope: !33, file: !16, line: 68, type: !27)
!211 = !DILocation(line: 68, column: 36, scope: !33)
!212 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "A", arg: 6, scope: !33, file: !16, line: 69, type: !30)
!213 = !DILocation(line: 69, column: 36, scope: !33)
!214 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "B", arg: 7, scope: !33, file: !16, line: 70, type: !30)
!215 = !DILocation(line: 70, column: 36, scope: !33)
!216 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !33, file: !16, line: 71, type: !19)
!217 = !DILocation(line: 71, column: 7, scope: !33)
!218 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !33, file: !16, line: 71, type: !19)
!219 = !DILocation(line: 71, column: 10, scope: !33)
!220 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !33, file: !16, line: 71, type: !19)
!221 = !DILocation(line: 71, column: 13, scope: !33)
!222 = !DILocation(line: 80, column: 10, scope: !223)
!223 = distinct !DILexicalBlock(scope: !33, file: !16, line: 80, column: 3)
!224 = !DILocation(line: 80, column: 8, scope: !223)
!225 = !DILocation(line: 80, column: 15, scope: !226)
!226 = !DILexicalBlockFile(scope: !227, file: !16, discriminator: 2)
!227 = !DILexicalBlockFile(scope: !228, file: !16, discriminator: 1)
!228 = distinct !DILexicalBlock(scope: !223, file: !16, line: 80, column: 3)
!229 = !DILocation(line: 80, column: 19, scope: !228)
!230 = !DILocation(line: 80, column: 17, scope: !228)
!231 = !DILocation(line: 80, column: 3, scope: !223)
!232 = !DILocation(line: 81, column: 12, scope: !233)
!233 = distinct !DILexicalBlock(scope: !234, file: !16, line: 81, column: 5)
!234 = distinct !DILexicalBlock(scope: !228, file: !16, line: 80, column: 31)
!235 = !DILocation(line: 81, column: 10, scope: !233)
!236 = !DILocation(line: 81, column: 17, scope: !237)
!237 = !DILexicalBlockFile(scope: !238, file: !16, discriminator: 2)
!238 = !DILexicalBlockFile(scope: !239, file: !16, discriminator: 1)
!239 = distinct !DILexicalBlock(scope: !233, file: !16, line: 81, column: 5)
!240 = !DILocation(line: 81, column: 22, scope: !239)
!241 = !DILocation(line: 81, column: 19, scope: !239)
!242 = !DILocation(line: 81, column: 5, scope: !233)
!243 = !DILocation(line: 82, column: 18, scope: !239)
!244 = !DILocation(line: 82, column: 12, scope: !239)
!245 = !DILocation(line: 82, column: 7, scope: !239)
!246 = !DILocation(line: 82, column: 9, scope: !239)
!247 = !DILocation(line: 82, column: 15, scope: !239)
!248 = !DILocation(line: 81, column: 26, scope: !239)
!249 = !DILocation(line: 81, column: 5, scope: !239)
!250 = !DILocation(line: 83, column: 12, scope: !251)
!251 = distinct !DILexicalBlock(scope: !234, file: !16, line: 83, column: 5)
!252 = !DILocation(line: 83, column: 10, scope: !251)
!253 = !DILocation(line: 83, column: 17, scope: !254)
!254 = !DILexicalBlockFile(scope: !255, file: !16, discriminator: 2)
!255 = !DILexicalBlockFile(scope: !256, file: !16, discriminator: 1)
!256 = distinct !DILexicalBlock(scope: !251, file: !16, line: 83, column: 5)
!257 = !DILocation(line: 83, column: 21, scope: !256)
!258 = !DILocation(line: 83, column: 19, scope: !256)
!259 = !DILocation(line: 83, column: 5, scope: !251)
!260 = !DILocation(line: 84, column: 14, scope: !261)
!261 = distinct !DILexicalBlock(scope: !256, file: !16, line: 84, column: 7)
!262 = !DILocation(line: 84, column: 12, scope: !261)
!263 = !DILocation(line: 84, column: 19, scope: !264)
!264 = !DILexicalBlockFile(scope: !265, file: !16, discriminator: 2)
!265 = !DILexicalBlockFile(scope: !266, file: !16, discriminator: 1)
!266 = distinct !DILexicalBlock(scope: !261, file: !16, line: 84, column: 7)
!267 = !DILocation(line: 84, column: 24, scope: !266)
!268 = !DILocation(line: 84, column: 21, scope: !266)
!269 = !DILocation(line: 84, column: 7, scope: !261)
!270 = !DILocation(line: 85, column: 25, scope: !271)
!271 = distinct !DILexicalBlock(scope: !266, file: !16, line: 84, column: 32)
!272 = !DILocation(line: 85, column: 20, scope: !271)
!273 = !DILocation(line: 85, column: 22, scope: !271)
!274 = !DILocation(line: 85, column: 30, scope: !271)
!275 = !DILocation(line: 85, column: 28, scope: !271)
!276 = !DILocation(line: 85, column: 43, scope: !271)
!277 = !DILocation(line: 85, column: 38, scope: !271)
!278 = !DILocation(line: 85, column: 40, scope: !271)
!279 = !DILocation(line: 85, column: 36, scope: !271)
!280 = !DILocation(line: 85, column: 53, scope: !271)
!281 = !DILocation(line: 85, column: 48, scope: !271)
!282 = !DILocation(line: 85, column: 50, scope: !271)
!283 = !DILocation(line: 85, column: 58, scope: !271)
!284 = !DILocation(line: 85, column: 56, scope: !271)
!285 = !DILocation(line: 85, column: 71, scope: !271)
!286 = !DILocation(line: 85, column: 66, scope: !271)
!287 = !DILocation(line: 85, column: 68, scope: !271)
!288 = !DILocation(line: 85, column: 64, scope: !271)
!289 = !DILocation(line: 85, column: 46, scope: !271)
!290 = !DILocation(line: 85, column: 14, scope: !271)
!291 = !DILocation(line: 85, column: 9, scope: !271)
!292 = !DILocation(line: 85, column: 11, scope: !271)
!293 = !DILocation(line: 85, column: 17, scope: !271)
!294 = !DILocation(line: 86, column: 7, scope: !271)
!295 = !DILocation(line: 84, column: 28, scope: !266)
!296 = !DILocation(line: 84, column: 7, scope: !266)
!297 = !DILocation(line: 86, column: 7, scope: !261)
!298 = !DILocation(line: 83, column: 29, scope: !256)
!299 = !DILocation(line: 83, column: 5, scope: !256)
!300 = !DILocation(line: 87, column: 3, scope: !234)
!301 = !DILocation(line: 80, column: 27, scope: !228)
!302 = !DILocation(line: 80, column: 3, scope: !228)
!303 = !DILocation(line: 89, column: 1, scope: !33)
!304 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !36, file: !16, line: 47, type: !19)
!305 = !DILocation(line: 47, column: 29, scope: !36)
!306 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "C", arg: 2, scope: !36, file: !16, line: 48, type: !27)
!307 = !DILocation(line: 48, column: 35, scope: !36)
!308 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !36, file: !16, line: 49, type: !19)
!309 = !DILocation(line: 49, column: 7, scope: !36)
!310 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !36, file: !16, line: 49, type: !19)
!311 = !DILocation(line: 49, column: 10, scope: !36)
!312 = !DILocation(line: 51, column: 3, scope: !36)
!313 = !DILocation(line: 52, column: 3, scope: !36)
!314 = !DILocation(line: 53, column: 10, scope: !315)
!315 = distinct !DILexicalBlock(scope: !36, file: !16, line: 53, column: 3)
!316 = !DILocation(line: 53, column: 8, scope: !315)
!317 = !DILocation(line: 53, column: 15, scope: !318)
!318 = !DILexicalBlockFile(scope: !319, file: !16, discriminator: 2)
!319 = !DILexicalBlockFile(scope: !320, file: !16, discriminator: 1)
!320 = distinct !DILexicalBlock(scope: !315, file: !16, line: 53, column: 3)
!321 = !DILocation(line: 53, column: 19, scope: !320)
!322 = !DILocation(line: 53, column: 17, scope: !320)
!323 = !DILocation(line: 53, column: 3, scope: !315)
!324 = !DILocation(line: 54, column: 12, scope: !325)
!325 = distinct !DILexicalBlock(scope: !320, file: !16, line: 54, column: 5)
!326 = !DILocation(line: 54, column: 10, scope: !325)
!327 = !DILocation(line: 54, column: 17, scope: !328)
!328 = !DILexicalBlockFile(scope: !329, file: !16, discriminator: 2)
!329 = !DILexicalBlockFile(scope: !330, file: !16, discriminator: 1)
!330 = distinct !DILexicalBlock(scope: !325, file: !16, line: 54, column: 5)
!331 = !DILocation(line: 54, column: 21, scope: !330)
!332 = !DILocation(line: 54, column: 19, scope: !330)
!333 = !DILocation(line: 54, column: 5, scope: !325)
!334 = !DILocation(line: 55, column: 12, scope: !335)
!335 = distinct !DILexicalBlock(scope: !336, file: !16, line: 55, column: 11)
!336 = distinct !DILexicalBlock(scope: !330, file: !16, line: 54, column: 29)
!337 = !DILocation(line: 55, column: 16, scope: !335)
!338 = !DILocation(line: 55, column: 14, scope: !335)
!339 = !DILocation(line: 55, column: 20, scope: !335)
!340 = !DILocation(line: 55, column: 18, scope: !335)
!341 = !DILocation(line: 55, column: 23, scope: !335)
!342 = !DILocation(line: 55, column: 28, scope: !335)
!343 = !DILocation(line: 55, column: 11, scope: !336)
!344 = !DILocation(line: 56, column: 17, scope: !335)
!345 = !DILocation(line: 56, column: 9, scope: !335)
!346 = !DILocation(line: 57, column: 15, scope: !336)
!347 = !DILocation(line: 57, column: 65, scope: !336)
!348 = !DILocation(line: 57, column: 60, scope: !336)
!349 = !DILocation(line: 57, column: 62, scope: !336)
!350 = !DILocation(line: 57, column: 7, scope: !336)
!351 = !DILocation(line: 58, column: 5, scope: !336)
!352 = !DILocation(line: 54, column: 25, scope: !330)
!353 = !DILocation(line: 54, column: 5, scope: !330)
!354 = !DILocation(line: 58, column: 5, scope: !325)
!355 = !DILocation(line: 53, column: 23, scope: !320)
!356 = !DILocation(line: 53, column: 3, scope: !320)
!357 = !DILocation(line: 59, column: 3, scope: !36)
!358 = !DILocation(line: 60, column: 3, scope: !36)
!359 = !DILocation(line: 61, column: 1, scope: !36)
