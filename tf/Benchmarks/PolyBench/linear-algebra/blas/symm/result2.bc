; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [23 x i8] c"==BEGIN DUMP_ARRAYS==\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"begin dump: %s\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"\0Aend   dump: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"==END   DUMP_ARRAYS==\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %alpha = alloca double, align 8
  %beta = alloca double, align 8
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !42, metadata !43), !dbg !44
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !45, metadata !43), !dbg !46
  call void @llvm.dbg.value(metadata i32 1000, i64 0, metadata !47, metadata !43), !dbg !48
  call void @llvm.dbg.value(metadata i32 1200, i64 0, metadata !49, metadata !43), !dbg !50
  call void @llvm.dbg.declare(metadata double* %alpha, metadata !51, metadata !43), !dbg !52
  call void @llvm.dbg.declare(metadata double* %beta, metadata !53, metadata !43), !dbg !54
  %call = call i8* @polybench_alloc_data(i64 1200000, i32 8), !dbg !55
  %tmp = bitcast i8* %call to [1000 x [1200 x double]]*, !dbg !55
  call void @llvm.dbg.value(metadata [1000 x [1200 x double]]* %tmp, i64 0, metadata !56, metadata !43), !dbg !55
  %call1 = call i8* @polybench_alloc_data(i64 1000000, i32 8), !dbg !57
  %tmp1 = bitcast i8* %call1 to [1000 x [1000 x double]]*, !dbg !57
  call void @llvm.dbg.value(metadata [1000 x [1000 x double]]* %tmp1, i64 0, metadata !58, metadata !43), !dbg !57
  %call2 = call i8* @polybench_alloc_data(i64 1200000, i32 8), !dbg !59
  %tmp2 = bitcast i8* %call2 to [1000 x [1200 x double]]*, !dbg !59
  call void @llvm.dbg.value(metadata [1000 x [1200 x double]]* %tmp2, i64 0, metadata !60, metadata !43), !dbg !59
  %arraydecay = getelementptr inbounds [1000 x [1200 x double]], [1000 x [1200 x double]]* %tmp, i32 0, i32 0, !dbg !61
  %arraydecay3 = getelementptr inbounds [1000 x [1000 x double]], [1000 x [1000 x double]]* %tmp1, i32 0, i32 0, !dbg !62
  %arraydecay4 = getelementptr inbounds [1000 x [1200 x double]], [1000 x [1200 x double]]* %tmp2, i32 0, i32 0, !dbg !63
  call void @init_array(i32 1000, i32 1200, double* %alpha, double* %beta, [1200 x double]* %arraydecay, [1000 x double]* %arraydecay3, [1200 x double]* %arraydecay4), !dbg !64
  %tmp10 = load double, double* %alpha, align 8, !dbg !65
  %tmp11 = load double, double* %beta, align 8, !dbg !66
  %arraydecay5 = getelementptr inbounds [1000 x [1200 x double]], [1000 x [1200 x double]]* %tmp, i32 0, i32 0, !dbg !67
  %arraydecay6 = getelementptr inbounds [1000 x [1000 x double]], [1000 x [1000 x double]]* %tmp1, i32 0, i32 0, !dbg !68
  %arraydecay7 = getelementptr inbounds [1000 x [1200 x double]], [1000 x [1200 x double]]* %tmp2, i32 0, i32 0, !dbg !69
  call void @kernel_symm(i32 1000, i32 1200, double %tmp10, double %tmp11, [1200 x double]* %arraydecay5, [1000 x double]* %arraydecay6, [1200 x double]* %arraydecay7), !dbg !70
  %cmp = icmp sgt i32 %argc, 42, !dbg !71
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !71

land.lhs.true:                                    ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 0, !dbg !73
  %tmp17 = load i8*, i8** %arrayidx, align 8, !dbg !73
  %call8 = call i32 @strcmp(i8* %tmp17, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0)) #5, !dbg !73
  %tobool = icmp ne i32 %call8, 0, !dbg !73
  br i1 %tobool, label %if.end, label %if.then, !dbg !75

if.then:                                          ; preds = %land.lhs.true
  %arraydecay9 = getelementptr inbounds [1000 x [1200 x double]], [1000 x [1200 x double]]* %tmp, i32 0, i32 0, !dbg !76
  call void @print_array(i32 1000, i32 1200, [1200 x double]* %arraydecay9), !dbg !76
  br label %if.end, !dbg !76

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %tmp22 = bitcast [1000 x [1200 x double]]* %tmp to i8*, !dbg !78
  call void @free(i8* %tmp22) #6, !dbg !78
  %tmp24 = bitcast [1000 x [1000 x double]]* %tmp1 to i8*, !dbg !79
  call void @free(i8* %tmp24) #6, !dbg !79
  %tmp26 = bitcast [1000 x [1200 x double]]* %tmp2 to i8*, !dbg !80
  call void @free(i8* %tmp26) #6, !dbg !80
  ret i32 0, !dbg !81
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i8* @polybench_alloc_data(i64, i32) #2

; Function Attrs: nounwind uwtable
define internal void @init_array(i32 %m, i32 %n, double* %alpha, double* %beta, [1200 x double]* %C, [1000 x double]* %A, [1200 x double]* %B) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %m, i64 0, metadata !82, metadata !43), !dbg !83
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !84, metadata !43), !dbg !85
  call void @llvm.dbg.value(metadata double* %alpha, i64 0, metadata !86, metadata !43), !dbg !87
  call void @llvm.dbg.value(metadata double* %beta, i64 0, metadata !88, metadata !43), !dbg !89
  call void @llvm.dbg.value(metadata [1200 x double]* %C, i64 0, metadata !90, metadata !43), !dbg !91
  call void @llvm.dbg.value(metadata [1000 x double]* %A, i64 0, metadata !92, metadata !43), !dbg !93
  call void @llvm.dbg.value(metadata [1200 x double]* %B, i64 0, metadata !94, metadata !43), !dbg !95
  %A44 = bitcast [1000 x double]* %A to double*
  %A45 = ptrtoint [1000 x double]* %A to i64
  %0 = bitcast [1000 x double]* undef to double*
  %1 = ptrtoint [1000 x double]* undef to i64
  %2 = bitcast [1000 x double]* undef to double*
  %3 = ptrtoint [1000 x double]* undef to i64
  %4 = bitcast [1000 x double]* undef to double*
  %5 = ptrtoint [1200 x double]* %B to i64
  %6 = ptrtoint [1000 x double]* undef to i64
  %7 = bitcast [1000 x double]* undef to double*
  %8 = ptrtoint [1000 x double]* undef to i64
  %9 = bitcast [1000 x double]* undef to double*
  %10 = ptrtoint [1200 x double]* %C to i64
  %beta41 = ptrtoint double* %beta to i64
  %alpha40 = ptrtoint double* %alpha to i64
  %11 = ptrtoint [1200 x double]* %B to i64
  %12 = ptrtoint [1200 x double]* %C to i64
  %13 = ptrtoint [1200 x double]* %B to i64
  %14 = ptrtoint [1000 x double]* undef to i64
  %15 = bitcast [1000 x double]* undef to double*
  %16 = ptrtoint [1200 x double]* %C to i64
  %17 = ptrtoint double* undef to i64
  %18 = ptrtoint double* undef to i64
  %19 = ptrtoint [1000 x double]* undef to i64
  %20 = bitcast [1000 x double]* undef to double*
  %21 = ptrtoint [1000 x double]* undef to i64
  %22 = bitcast [1000 x double]* undef to double*
  %23 = ptrtoint [1000 x double]* undef to i64
  %24 = bitcast [1000 x double]* undef to double*
  %25 = ptrtoint [1200 x double]* undef to i64
  %26 = ptrtoint [1000 x double]* undef to i64
  %27 = bitcast [1000 x double]* undef to double*
  %28 = ptrtoint [1000 x double]* undef to i64
  %29 = bitcast [1000 x double]* undef to double*
  %30 = ptrtoint [1200 x double]* undef to i64
  %31 = ptrtoint double* undef to i64
  %32 = ptrtoint double* undef to i64
  %33 = ptrtoint [1200 x double]* %B to i64
  %34 = ptrtoint [1200 x double]* %C to i64
  %B50 = ptrtoint [1200 x double]* %B to i64
  %35 = ptrtoint [1000 x double]* undef to i64
  %36 = bitcast [1000 x double]* undef to double*
  %C43 = ptrtoint [1200 x double]* %C to i64
  %37 = ptrtoint double* undef to i64
  %38 = ptrtoint double* undef to i64
  store double 1.500000e+00, double* %alpha, align 8, !dbg !96
  store double 1.200000e+00, double* %beta, align 8, !dbg !97
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !98, metadata !43), !dbg !99
  %39 = add i64 %alpha40, 8, !dbg !100
  %40 = add i64 %alpha40, 8, !dbg !100
  %41 = add i64 %beta41, 8, !dbg !100
  %42 = add i64 %beta41, 8, !dbg !100
  %scevgep = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !102
  %scevgep46 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !102
  %scevgep4647 = ptrtoint double* %scevgep46 to i64
  %43 = add i32 %m, -1, !dbg !100
  %44 = add i64 %alpha40, 8, !dbg !100
  %45 = add i64 %alpha40, 8, !dbg !100
  %46 = add i64 %beta41, 8, !dbg !100
  %47 = add i64 %beta41, 8, !dbg !100
  %scevgep81 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !102
  %scevgep83 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !102
  %scevgep8384 = ptrtoint double* %scevgep83 to i64
  %48 = add i32 %m, -1, !dbg !100
  br label %for.cond, !dbg !102

for.cond:                                         ; preds = %for.inc.16, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc17, %for.inc.16 ]
  %cmp = icmp slt i32 %i.0, %m, !dbg !103
  %49 = icmp sgt i32 %m, 0, !dbg !100
  %smax = select i1 %49, i32 %m, i32 0, !dbg !100
  %50 = mul i32 1, %smax, !dbg !100
  %51 = add i32 0, %50, !dbg !100
  %52 = icmp sgt i32 %n, 0, !dbg !100
  %smax42 = select i1 %52, i32 %n, i32 0, !dbg !100
  %53 = zext i32 %smax42 to i64, !dbg !100
  %54 = mul i64 8, %53, !dbg !100
  %55 = add i64 %C43, %54, !dbg !100
  %56 = add i64 %55, 8, !dbg !100
  %57 = ptrtoint [1200 x double]* undef to i64, !dbg !100
  %58 = sub i64 %56, %34, !dbg !100
  %59 = icmp ult double* %scevgep, %A44, !dbg !100
  %umin = select i1 %59, double* %scevgep, double* %A44, !dbg !100
  %60 = zext i32 %smax to i64, !dbg !100
  %61 = mul i64 8000, %60, !dbg !100
  %62 = add i64 %A45, %61, !dbg !100
  %63 = mul i64 1, %60, !dbg !100
  %64 = add i64 1, %63, !dbg !100
  %65 = mul i64 8, %64, !dbg !100
  %66 = add i64 %62, %65, !dbg !100
  %67 = mul i64 8008, %60, !dbg !100
  %68 = add i64 %scevgep4647, %67, !dbg !100
  %69 = mul i32 -1, %smax, !dbg !100
  %70 = add i32 %43, %69, !dbg !100
  %71 = sext i32 %70 to i64, !dbg !100
  %72 = mul i64 8, %71, !dbg !100
  %73 = add i64 %68, %72, !dbg !100
  %74 = icmp ugt i64 %73, %66, !dbg !100
  %umax = select i1 %74, i64 %73, i64 %66, !dbg !100
  %75 = add i64 %umax, 8, !dbg !100
  %76 = icmp ult double* %scevgep, %A44, !dbg !100
  %umin48 = select i1 %76, double* %scevgep, double* %A44, !dbg !100
  %77 = icmp ugt i64 %73, %66, !dbg !100
  %umax49 = select i1 %77, i64 %73, i64 %66, !dbg !100
  %78 = add i64 %umax49, 8, !dbg !100
  %79 = mul i64 8, %53, !dbg !100
  %80 = add i64 %B50, %79, !dbg !100
  %81 = add i64 %80, 8, !dbg !100
  %82 = ptrtoint [1200 x double]* undef to i64, !dbg !100
  %83 = sub i64 %81, %33, !dbg !100
  %84 = icmp sgt i32 %m, 0, !dbg !100
  %smax79 = select i1 %84, i32 %m, i32 0, !dbg !100
  %85 = mul i32 1, %smax79, !dbg !100
  %86 = add i32 0, %85, !dbg !100
  %87 = icmp sgt i32 %n, 0, !dbg !100
  %smax80 = select i1 %87, i32 %n, i32 0, !dbg !100
  %88 = zext i32 %smax80 to i64, !dbg !100
  %89 = mul i64 8, %88, !dbg !100
  %90 = add i64 %16, %89, !dbg !100
  %91 = add i64 %90, 8, !dbg !100
  %92 = ptrtoint [1200 x double]* undef to i64, !dbg !100
  %93 = sub i64 %91, %12, !dbg !100
  %94 = icmp ult double* %scevgep81, %A44, !dbg !100
  %umin82 = select i1 %94, double* %scevgep81, double* %A44, !dbg !100
  %95 = zext i32 %smax79 to i64, !dbg !100
  %96 = mul i64 8000, %95, !dbg !100
  %97 = add i64 %A45, %96, !dbg !100
  %98 = mul i64 1, %95, !dbg !100
  %99 = add i64 1, %98, !dbg !100
  %100 = mul i64 8, %99, !dbg !100
  %101 = add i64 %97, %100, !dbg !100
  %102 = mul i64 8008, %95, !dbg !100
  %103 = add i64 %scevgep8384, %102, !dbg !100
  %104 = mul i32 -1, %smax79, !dbg !100
  %105 = add i32 %48, %104, !dbg !100
  %106 = sext i32 %105 to i64, !dbg !100
  %107 = mul i64 8, %106, !dbg !100
  %108 = add i64 %103, %107, !dbg !100
  %109 = icmp ugt i64 %108, %101, !dbg !100
  %umax85 = select i1 %109, i64 %108, i64 %101, !dbg !100
  %110 = add i64 %umax85, 8, !dbg !100
  %111 = icmp ult double* %scevgep81, %A44, !dbg !100
  %umin86 = select i1 %111, double* %scevgep81, double* %A44, !dbg !100
  %112 = icmp ugt i64 %108, %101, !dbg !100
  %umax87 = select i1 %112, i64 %108, i64 %101, !dbg !100
  %113 = add i64 %umax87, 8, !dbg !100
  %114 = mul i64 8, %88, !dbg !100
  %115 = add i64 %13, %114, !dbg !100
  %116 = add i64 %115, 8, !dbg !100
  %117 = ptrtoint [1200 x double]* undef to i64, !dbg !100
  %118 = sub i64 %116, %11, !dbg !100
  br i1 %cmp, label %for.body, label %for.end.18, !dbg !100

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !105, metadata !43), !dbg !106
  br label %for.cond.1, !dbg !107

for.cond.1:                                       ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !109
  %119 = icmp sgt i32 %m, 0, !dbg !111
  %smax51 = select i1 %119, i32 %m, i32 0, !dbg !111
  %120 = zext i32 %smax51 to i64, !dbg !111
  %121 = mul i64 9600, %120, !dbg !111
  %122 = add i64 %34, %121, !dbg !111
  %123 = add i64 %122, 8, !dbg !111
  %124 = icmp sgt i32 %n, 0, !dbg !111
  %smax52 = select i1 %124, i32 %n, i32 0, !dbg !111
  %125 = mul i32 1, %smax52, !dbg !111
  %126 = add i32 0, %125, !dbg !111
  %127 = ptrtoint [1200 x double]* undef to i64, !dbg !111
  %128 = sub i64 %123, %16, !dbg !111
  %129 = mul i64 9600, %120, !dbg !111
  %130 = add i64 %33, %129, !dbg !111
  %131 = add i64 %130, 8, !dbg !111
  %132 = ptrtoint [1200 x double]* undef to i64, !dbg !111
  %133 = sub i64 %131, %13, !dbg !111
  %134 = icmp sgt i32 %m, 0, !dbg !111
  %smax88 = select i1 %134, i32 %m, i32 0, !dbg !111
  %135 = zext i32 %smax88 to i64, !dbg !111
  %136 = mul i64 9600, %135, !dbg !111
  %137 = add i64 %12, %136, !dbg !111
  %138 = add i64 %137, 8, !dbg !111
  %139 = icmp sgt i32 %n, 0, !dbg !111
  %smax89 = select i1 %139, i32 %n, i32 0, !dbg !111
  %140 = mul i32 1, %smax89, !dbg !111
  %141 = add i32 0, %140, !dbg !111
  %142 = ptrtoint [1200 x double]* undef to i64, !dbg !111
  %143 = sub i64 %138, %10, !dbg !111
  %144 = mul i64 9600, %135, !dbg !111
  %145 = add i64 %11, %144, !dbg !111
  %146 = add i64 %145, 8, !dbg !111
  %147 = ptrtoint [1200 x double]* undef to i64, !dbg !111
  %148 = sub i64 %146, %5, !dbg !111
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !111

for.body.3:                                       ; preds = %for.cond.1
  %add = add nsw i32 %i.0, %j.0, !dbg !112
  %rem = srem i32 %add, 100, !dbg !114
  %conv = sitofp i32 %rem to double, !dbg !115
  %conv4 = sitofp i32 %m to double, !dbg !116
  %div = fdiv double %conv, %conv4, !dbg !117
  %idxprom = sext i32 %j.0 to i64, !dbg !118
  %idxprom5 = sext i32 %i.0 to i64, !dbg !118
  %arrayidx = getelementptr inbounds [1200 x double], [1200 x double]* %C, i64 %idxprom5, !dbg !118
  %arrayidx6 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx, i32 0, i64 %idxprom, !dbg !118
  store double %div, double* %arrayidx6, align 8, !dbg !119
  %add7 = add nsw i32 %n, %i.0, !dbg !120
  %sub = sub nsw i32 %add7, %j.0, !dbg !121
  %rem8 = srem i32 %sub, 100, !dbg !122
  %conv9 = sitofp i32 %rem8 to double, !dbg !123
  %conv10 = sitofp i32 %m to double, !dbg !124
  %div11 = fdiv double %conv9, %conv10, !dbg !125
  %idxprom12 = sext i32 %j.0 to i64, !dbg !126
  %idxprom13 = sext i32 %i.0 to i64, !dbg !126
  %arrayidx14 = getelementptr inbounds [1200 x double], [1200 x double]* %B, i64 %idxprom13, !dbg !126
  %arrayidx15 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx14, i32 0, i64 %idxprom12, !dbg !126
  store double %div11, double* %arrayidx15, align 8, !dbg !127
  br label %for.inc, !dbg !128

for.inc:                                          ; preds = %for.body.3
  %inc = add nsw i32 %j.0, 1, !dbg !129
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !105, metadata !43), !dbg !106
  br label %for.cond.1, !dbg !130

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.16, !dbg !131

for.inc.16:                                       ; preds = %for.end
  %inc17 = add nsw i32 %i.0, 1, !dbg !132
  call void @llvm.dbg.value(metadata i32 %inc17, i64 0, metadata !98, metadata !43), !dbg !99
  br label %for.cond, !dbg !133

for.end.18:                                       ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !98, metadata !43), !dbg !99
  %149 = add i64 %alpha40, 8, !dbg !134
  %150 = add i64 %alpha40, 8, !dbg !134
  %151 = add i64 %beta41, 8, !dbg !134
  %152 = add i64 %beta41, 8, !dbg !134
  %scevgep55 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %153 = add i64 %A45, 8, !dbg !134
  %scevgep57 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %scevgep5758 = ptrtoint double* %scevgep57 to i64
  %154 = add i32 %m, -1, !dbg !134
  %scevgep62 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %scevgep65 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %scevgep6566 = ptrtoint double* %scevgep65 to i64
  %155 = add i32 %m, -1, !dbg !137
  %scevgep70 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %scevgep7078 = ptrtoint double* %scevgep70 to i64
  %scevgep73 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %scevgep7374 = ptrtoint double* %scevgep73 to i64
  %156 = add i64 %alpha40, 8, !dbg !134
  %157 = add i64 %alpha40, 8, !dbg !134
  %158 = add i64 %beta41, 8, !dbg !134
  %159 = add i64 %beta41, 8, !dbg !134
  %scevgep92 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %160 = add i64 %A45, 8, !dbg !134
  %scevgep94 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %scevgep9495 = ptrtoint double* %scevgep94 to i64
  %161 = add i32 %m, -1, !dbg !134
  %scevgep99 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %scevgep102 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %scevgep102103 = ptrtoint double* %scevgep102 to i64
  %162 = add i32 %m, -1, !dbg !137
  %scevgep107 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %scevgep107115 = ptrtoint double* %scevgep107 to i64
  %scevgep110 = getelementptr [1000 x double], [1000 x double]* %A, i64 0, i64 1, !dbg !136
  %scevgep110111 = ptrtoint double* %scevgep110 to i64
  br label %for.cond.19, !dbg !136

for.cond.19:                                      ; preds = %for.inc.51, %for.end.18
  %i.1 = phi i32 [ 0, %for.end.18 ], [ %inc52, %for.inc.51 ]
  %cmp20 = icmp slt i32 %i.1, %m, !dbg !141
  %163 = icmp sgt i32 %m, 0, !dbg !134
  %smax53 = select i1 %163, i32 %m, i32 0, !dbg !134
  %164 = mul i32 1, %smax53, !dbg !134
  %165 = add i32 0, %164, !dbg !134
  %166 = zext i32 %smax53 to i64, !dbg !134
  %167 = mul i64 9600, %166, !dbg !134
  %168 = add i64 %16, %167, !dbg !134
  %169 = icmp sgt i32 %n, 0, !dbg !134
  %smax54 = select i1 %169, i32 %n, i32 0, !dbg !134
  %170 = zext i32 %smax54 to i64, !dbg !134
  %171 = mul i64 8, %170, !dbg !134
  %172 = add i64 %168, %171, !dbg !134
  %173 = add i64 %172, 8, !dbg !134
  %174 = icmp ult double* %scevgep55, %A44, !dbg !134
  %umin56 = select i1 %174, double* %scevgep55, double* %A44, !dbg !134
  %175 = sext i32 %154 to i64, !dbg !134
  %176 = mul i64 8, %175, !dbg !134
  %177 = add i64 %scevgep5758, %176, !dbg !134
  %178 = icmp ugt i64 %177, %153, !dbg !134
  %umax59 = select i1 %178, i64 %177, i64 %153, !dbg !134
  %179 = add i64 %umax59, 8, !dbg !134
  %180 = icmp ult double* %scevgep55, %A44, !dbg !134
  %umin60 = select i1 %180, double* %scevgep55, double* %A44, !dbg !134
  %181 = icmp ugt i64 %177, %153, !dbg !134
  %umax61 = select i1 %181, i64 %177, i64 %153, !dbg !134
  %182 = add i64 %umax61, 8, !dbg !134
  %183 = ptrtoint double* %umin56 to i64, !dbg !134
  %184 = sub i64 %179, %183, !dbg !134
  %185 = mul i64 9600, %166, !dbg !134
  %186 = add i64 %13, %185, !dbg !134
  %187 = mul i64 8, %170, !dbg !134
  %188 = add i64 %186, %187, !dbg !134
  %189 = add i64 %188, 8, !dbg !134
  %190 = icmp sgt i32 %m, 0, !dbg !134
  %smax90 = select i1 %190, i32 %m, i32 0, !dbg !134
  %191 = mul i32 1, %smax90, !dbg !134
  %192 = add i32 0, %191, !dbg !134
  %193 = zext i32 %smax90 to i64, !dbg !134
  %194 = mul i64 9600, %193, !dbg !134
  %195 = add i64 %10, %194, !dbg !134
  %196 = icmp sgt i32 %n, 0, !dbg !134
  %smax91 = select i1 %196, i32 %n, i32 0, !dbg !134
  %197 = zext i32 %smax91 to i64, !dbg !134
  %198 = mul i64 8, %197, !dbg !134
  %199 = add i64 %195, %198, !dbg !134
  %200 = add i64 %199, 8, !dbg !134
  %201 = icmp ult double* %scevgep92, %A44, !dbg !134
  %umin93 = select i1 %201, double* %scevgep92, double* %A44, !dbg !134
  %202 = sext i32 %161 to i64, !dbg !134
  %203 = mul i64 8, %202, !dbg !134
  %204 = add i64 %scevgep9495, %203, !dbg !134
  %205 = icmp ugt i64 %204, %160, !dbg !134
  %umax96 = select i1 %205, i64 %204, i64 %160, !dbg !134
  %206 = add i64 %umax96, 8, !dbg !134
  %207 = icmp ult double* %scevgep92, %A44, !dbg !134
  %umin97 = select i1 %207, double* %scevgep92, double* %A44, !dbg !134
  %208 = icmp ugt i64 %204, %160, !dbg !134
  %umax98 = select i1 %208, i64 %204, i64 %160, !dbg !134
  %209 = add i64 %umax98, 8, !dbg !134
  %210 = ptrtoint double* %umin93 to i64, !dbg !134
  %211 = sub i64 %206, %210, !dbg !134
  %212 = mul i64 9600, %193, !dbg !134
  %213 = add i64 %5, %212, !dbg !134
  %214 = mul i64 8, %197, !dbg !134
  %215 = add i64 %213, %214, !dbg !134
  %216 = add i64 %215, 8, !dbg !134
  br i1 %cmp20, label %for.body.22, label %for.end.53, !dbg !134

for.body.22:                                      ; preds = %for.cond.19
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !105, metadata !43), !dbg !106
  br label %for.cond.23, !dbg !142

for.cond.23:                                      ; preds = %for.inc.36, %for.body.22
  %j.1 = phi i32 [ 0, %for.body.22 ], [ %inc37, %for.inc.36 ]
  %cmp24 = icmp sle i32 %j.1, %i.1, !dbg !143
  %217 = icmp ult double* %scevgep62, %A44, !dbg !137
  %umin63 = select i1 %217, double* %scevgep62, double* %A44, !dbg !137
  %218 = icmp sgt i32 %m, 0, !dbg !137
  %smax64 = select i1 %218, i32 %m, i32 0, !dbg !137
  %219 = zext i32 %smax64 to i64, !dbg !137
  %220 = mul i64 8000, %219, !dbg !137
  %221 = add i64 %A45, %220, !dbg !137
  %222 = mul i64 8008, %219, !dbg !137
  %223 = add i64 %scevgep6566, %222, !dbg !137
  %224 = mul i32 -1, %smax64, !dbg !137
  %225 = add i32 %155, %224, !dbg !137
  %226 = sext i32 %225 to i64, !dbg !137
  %227 = mul i64 8, %226, !dbg !137
  %228 = add i64 %223, %227, !dbg !137
  %229 = icmp ugt i64 %228, %221, !dbg !137
  %umax67 = select i1 %229, i64 %228, i64 %221, !dbg !137
  %230 = add i64 %umax67, 8, !dbg !137
  %231 = icmp ult double* %scevgep62, %A44, !dbg !137
  %umin68 = select i1 %231, double* %scevgep62, double* %A44, !dbg !137
  %232 = icmp ugt i64 %228, %221, !dbg !137
  %umax69 = select i1 %232, i64 %228, i64 %221, !dbg !137
  %233 = add i64 %umax69, 8, !dbg !137
  %234 = mul i32 1, %smax64, !dbg !137
  %235 = add i32 1, %234, !dbg !137
  %236 = mul i32 1, %235, !dbg !137
  %237 = add i32 0, %236, !dbg !137
  %238 = ptrtoint double* %umin63 to i64, !dbg !137
  %239 = sub i64 %230, %238, !dbg !137
  %240 = icmp ult double* %scevgep99, %A44, !dbg !137
  %umin100 = select i1 %240, double* %scevgep99, double* %A44, !dbg !137
  %241 = icmp sgt i32 %m, 0, !dbg !137
  %smax101 = select i1 %241, i32 %m, i32 0, !dbg !137
  %242 = zext i32 %smax101 to i64, !dbg !137
  %243 = mul i64 8000, %242, !dbg !137
  %244 = add i64 %A45, %243, !dbg !137
  %245 = mul i64 8008, %242, !dbg !137
  %246 = add i64 %scevgep102103, %245, !dbg !137
  %247 = mul i32 -1, %smax101, !dbg !137
  %248 = add i32 %162, %247, !dbg !137
  %249 = sext i32 %248 to i64, !dbg !137
  %250 = mul i64 8, %249, !dbg !137
  %251 = add i64 %246, %250, !dbg !137
  %252 = icmp ugt i64 %251, %244, !dbg !137
  %umax104 = select i1 %252, i64 %251, i64 %244, !dbg !137
  %253 = add i64 %umax104, 8, !dbg !137
  %254 = icmp ult double* %scevgep99, %A44, !dbg !137
  %umin105 = select i1 %254, double* %scevgep99, double* %A44, !dbg !137
  %255 = icmp ugt i64 %251, %244, !dbg !137
  %umax106 = select i1 %255, i64 %251, i64 %244, !dbg !137
  %256 = add i64 %umax106, 8, !dbg !137
  %257 = mul i32 1, %smax101, !dbg !137
  %258 = add i32 1, %257, !dbg !137
  %259 = mul i32 1, %258, !dbg !137
  %260 = add i32 0, %259, !dbg !137
  %261 = ptrtoint double* %umin100 to i64, !dbg !137
  %262 = sub i64 %253, %261, !dbg !137
  br i1 %cmp24, label %for.body.26, label %for.end.38, !dbg !137

for.body.26:                                      ; preds = %for.cond.23
  %add27 = add nsw i32 %i.1, %j.1, !dbg !145
  %rem28 = srem i32 %add27, 100, !dbg !146
  %conv29 = sitofp i32 %rem28 to double, !dbg !147
  %conv30 = sitofp i32 %m to double, !dbg !148
  %div31 = fdiv double %conv29, %conv30, !dbg !149
  %idxprom32 = sext i32 %j.1 to i64, !dbg !150
  %idxprom33 = sext i32 %i.1 to i64, !dbg !150
  %arrayidx34 = getelementptr inbounds [1000 x double], [1000 x double]* %A, i64 %idxprom33, !dbg !150
  %arrayidx35 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx34, i32 0, i64 %idxprom32, !dbg !150
  store double %div31, double* %arrayidx35, align 8, !dbg !151
  br label %for.inc.36, !dbg !150

for.inc.36:                                       ; preds = %for.body.26
  %inc37 = add nsw i32 %j.1, 1, !dbg !152
  call void @llvm.dbg.value(metadata i32 %inc37, i64 0, metadata !105, metadata !43), !dbg !106
  br label %for.cond.23, !dbg !153

for.end.38:                                       ; preds = %for.cond.23
  %add39 = add nsw i32 %i.1, 1, !dbg !154
  call void @llvm.dbg.value(metadata i32 %add39, i64 0, metadata !105, metadata !43), !dbg !106
  br label %for.cond.40, !dbg !156

for.cond.40:                                      ; preds = %for.inc.48, %for.end.38
  %j.2 = phi i32 [ %add39, %for.end.38 ], [ %inc49, %for.inc.48 ]
  %cmp41 = icmp slt i32 %j.2, %m, !dbg !157
  %263 = icmp ult double* %scevgep70, %A44, !dbg !159
  %umin71 = select i1 %263, double* %scevgep70, double* %A44, !dbg !159
  %264 = icmp sgt i32 %m, 0, !dbg !159
  %smax72 = select i1 %264, i32 %m, i32 0, !dbg !159
  %265 = zext i32 %smax72 to i64, !dbg !159
  %266 = mul i64 8000, %265, !dbg !159
  %267 = add i64 %A45, %266, !dbg !159
  %268 = mul i64 1, %265, !dbg !159
  %269 = add i64 1, %268, !dbg !159
  %270 = mul i64 8, %269, !dbg !159
  %271 = add i64 %267, %270, !dbg !159
  %272 = mul i64 8008, %265, !dbg !159
  %273 = add i64 %scevgep7374, %272, !dbg !159
  %274 = icmp ugt i64 %273, %271, !dbg !159
  %umax75 = select i1 %274, i64 %273, i64 %271, !dbg !159
  %275 = add i64 %umax75, 8, !dbg !159
  %276 = icmp ult double* %scevgep70, %A44, !dbg !159
  %umin76 = select i1 %276, double* %scevgep70, double* %A44, !dbg !159
  %277 = icmp ugt i64 %273, %271, !dbg !159
  %umax77 = select i1 %277, i64 %273, i64 %271, !dbg !159
  %278 = add i64 %umax77, 8, !dbg !159
  %279 = icmp ult double* %scevgep107, %A44, !dbg !159
  %umin108 = select i1 %279, double* %scevgep107, double* %A44, !dbg !159
  %280 = icmp sgt i32 %m, 0, !dbg !159
  %smax109 = select i1 %280, i32 %m, i32 0, !dbg !159
  %281 = zext i32 %smax109 to i64, !dbg !159
  %282 = mul i64 8000, %281, !dbg !159
  %283 = add i64 %A45, %282, !dbg !159
  %284 = mul i64 1, %281, !dbg !159
  %285 = add i64 1, %284, !dbg !159
  %286 = mul i64 8, %285, !dbg !159
  %287 = add i64 %283, %286, !dbg !159
  %288 = mul i64 8008, %281, !dbg !159
  %289 = add i64 %scevgep110111, %288, !dbg !159
  %290 = icmp ugt i64 %289, %287, !dbg !159
  %umax112 = select i1 %290, i64 %289, i64 %287, !dbg !159
  %291 = add i64 %umax112, 8, !dbg !159
  %292 = icmp ult double* %scevgep107, %A44, !dbg !159
  %umin113 = select i1 %292, double* %scevgep107, double* %A44, !dbg !159
  %293 = icmp ugt i64 %289, %287, !dbg !159
  %umax114 = select i1 %293, i64 %289, i64 %287, !dbg !159
  %294 = add i64 %umax114, 8, !dbg !159
  br i1 %cmp41, label %for.body.43, label %for.end.50, !dbg !159

for.body.43:                                      ; preds = %for.cond.40
  %idxprom44 = sext i32 %j.2 to i64, !dbg !160
  %idxprom45 = sext i32 %i.1 to i64, !dbg !160
  %arrayidx46 = getelementptr inbounds [1000 x double], [1000 x double]* %A, i64 %idxprom45, !dbg !160
  %arrayidx47 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx46, i32 0, i64 %idxprom44, !dbg !160
  store double -9.990000e+02, double* %arrayidx47, align 8, !dbg !161
  br label %for.inc.48, !dbg !160

for.inc.48:                                       ; preds = %for.body.43
  %inc49 = add nsw i32 %j.2, 1, !dbg !162
  call void @llvm.dbg.value(metadata i32 %inc49, i64 0, metadata !105, metadata !43), !dbg !106
  br label %for.cond.40, !dbg !163

for.end.50:                                       ; preds = %for.cond.40
  br label %for.inc.51, !dbg !164

for.inc.51:                                       ; preds = %for.end.50
  %inc52 = add nsw i32 %i.1, 1, !dbg !165
  call void @llvm.dbg.value(metadata i32 %inc52, i64 0, metadata !98, metadata !43), !dbg !99
  br label %for.cond.19, !dbg !166

for.end.53:                                       ; preds = %for.cond.19
  ret void, !dbg !167
}

; Function Attrs: nounwind uwtable
define internal void @kernel_symm(i32 %m, i32 %n, double %alpha, double %beta, [1200 x double]* %C, [1000 x double]* %A, [1200 x double]* %B) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %m, i64 0, metadata !168, metadata !43), !dbg !169
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !170, metadata !43), !dbg !171
  call void @llvm.dbg.value(metadata double %alpha, i64 0, metadata !172, metadata !43), !dbg !173
  call void @llvm.dbg.value(metadata double %beta, i64 0, metadata !174, metadata !43), !dbg !175
  call void @llvm.dbg.value(metadata [1200 x double]* %C, i64 0, metadata !176, metadata !43), !dbg !177
  call void @llvm.dbg.value(metadata [1000 x double]* %A, i64 0, metadata !178, metadata !43), !dbg !179
  call void @llvm.dbg.value(metadata [1200 x double]* %B, i64 0, metadata !180, metadata !43), !dbg !181
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !182, metadata !43), !dbg !183
  %B77 = ptrtoint [1200 x double]* %B to i64
  %A64 = ptrtoint [1000 x double]* %A to i64
  %C52 = ptrtoint [1200 x double]* %C to i64
  %0 = ptrtoint [1200 x double]* undef to i64
  %1 = ptrtoint [1000 x double]* undef to i64
  %2 = ptrtoint [1200 x double]* undef to i64
  %3 = ptrtoint [1200 x double]* undef to i64
  %4 = ptrtoint [1000 x double]* undef to i64
  %5 = ptrtoint [1200 x double]* undef to i64
  %6 = ptrtoint [1200 x double]* undef to i64
  %7 = ptrtoint [1000 x double]* undef to i64
  %8 = ptrtoint [1200 x double]* undef to i64
  %9 = ptrtoint [1200 x double]* undef to i64
  %10 = ptrtoint [1000 x double]* undef to i64
  %11 = ptrtoint [1200 x double]* undef to i64
  %12 = ptrtoint [1200 x double]* undef to i64
  %13 = ptrtoint [1000 x double]* undef to i64
  %14 = ptrtoint [1200 x double]* undef to i64
  %15 = add i64 %A64, 0, !dbg !184
  %16 = add i64 %A64, 0, !dbg !184
  br label %for.cond, !dbg !186

for.cond:                                         ; preds = %for.inc.53, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc54, %for.inc.53 ]
  %cmp = icmp slt i32 %i.0, %m, !dbg !187
  %17 = icmp ult [1200 x double]* %C, %C, !dbg !184
  %umin = select i1 %17, [1200 x double]* %C, [1200 x double]* %C, !dbg !184
  %18 = icmp ult [1200 x double]* %C, %umin, !dbg !184
  %umin50 = select i1 %18, [1200 x double]* %C, [1200 x double]* %umin, !dbg !184
  %19 = icmp ult [1200 x double]* %C, %umin50, !dbg !184
  %umin51 = select i1 %19, [1200 x double]* %C, [1200 x double]* %umin50, !dbg !184
  %20 = icmp sgt i32 %n, 0, !dbg !184
  %smax = select i1 %20, i32 %n, i32 0, !dbg !184
  %21 = zext i32 %smax to i64, !dbg !184
  %22 = mul i64 8, %21, !dbg !184
  %23 = add i64 %C52, %22, !dbg !184
  %24 = add i64 %23, 0, !dbg !184
  %25 = icmp ugt i64 %24, %24, !dbg !184
  %umax = select i1 %25, i64 %24, i64 %24, !dbg !184
  %26 = icmp ugt i64 %23, %umax, !dbg !184
  %umax53 = select i1 %26, i64 %23, i64 %umax, !dbg !184
  %27 = icmp ugt i64 %23, %umax53, !dbg !184
  %umax54 = select i1 %27, i64 %23, i64 %umax53, !dbg !184
  %28 = add i64 %umax54, 8, !dbg !184
  %29 = icmp ult [1200 x double]* %C, %C, !dbg !184
  %umin55 = select i1 %29, [1200 x double]* %C, [1200 x double]* %C, !dbg !184
  %30 = icmp ult [1200 x double]* %C, %umin55, !dbg !184
  %umin56 = select i1 %30, [1200 x double]* %C, [1200 x double]* %umin55, !dbg !184
  %31 = icmp ult [1200 x double]* %C, %umin56, !dbg !184
  %umin57 = select i1 %31, [1200 x double]* %C, [1200 x double]* %umin56, !dbg !184
  %32 = icmp ugt i64 %24, %24, !dbg !184
  %umax58 = select i1 %32, i64 %24, i64 %24, !dbg !184
  %33 = icmp ugt i64 %23, %umax58, !dbg !184
  %umax59 = select i1 %33, i64 %23, i64 %umax58, !dbg !184
  %34 = icmp ugt i64 %23, %umax59, !dbg !184
  %umax60 = select i1 %34, i64 %23, i64 %umax59, !dbg !184
  %35 = add i64 %umax60, 8, !dbg !184
  %36 = icmp sgt i32 %m, 0, !dbg !184
  %smax61 = select i1 %36, i32 %m, i32 0, !dbg !184
  %37 = mul i32 1, %smax61, !dbg !184
  %38 = add i32 0, %37, !dbg !184
  %39 = ptrtoint [1200 x double]* %umin51 to i64, !dbg !184
  %40 = sub i64 %28, %39, !dbg !184
  %41 = icmp ult [1000 x double]* %A, %A, !dbg !184
  %umin62 = select i1 %41, [1000 x double]* %A, [1000 x double]* %A, !dbg !184
  %42 = icmp ult [1000 x double]* %A, %umin62, !dbg !184
  %umin63 = select i1 %42, [1000 x double]* %A, [1000 x double]* %umin62, !dbg !184
  %43 = icmp ugt i64 %15, %15, !dbg !184
  %umax65 = select i1 %43, i64 %15, i64 %15, !dbg !184
  %umax6566 = inttoptr i64 %umax65 to [1000 x double]*
  %44 = icmp ugt [1000 x double]* %A, %umax6566, !dbg !184
  %umax67 = select i1 %44, [1000 x double]* %A, [1000 x double]* %umax6566, !dbg !184
  %umax6768 = ptrtoint [1000 x double]* %umax67 to i64
  %45 = add i64 %umax6768, 8, !dbg !184
  %46 = icmp ult [1000 x double]* %A, %A, !dbg !184
  %umin69 = select i1 %46, [1000 x double]* %A, [1000 x double]* %A, !dbg !184
  %47 = icmp ult [1000 x double]* %A, %umin69, !dbg !184
  %umin70 = select i1 %47, [1000 x double]* %A, [1000 x double]* %umin69, !dbg !184
  %48 = icmp ugt i64 %15, %15, !dbg !184
  %umax71 = select i1 %48, i64 %15, i64 %15, !dbg !184
  %umax7172 = inttoptr i64 %umax71 to [1000 x double]*
  %49 = icmp ugt [1000 x double]* %A, %umax7172, !dbg !184
  %umax73 = select i1 %49, [1000 x double]* %A, [1000 x double]* %umax7172, !dbg !184
  %umax7374 = ptrtoint [1000 x double]* %umax73 to i64
  %50 = add i64 %umax7374, 8, !dbg !184
  %51 = ptrtoint [1000 x double]* %umin63 to i64, !dbg !184
  %52 = sub i64 %45, %51, !dbg !184
  %53 = icmp ult [1200 x double]* %B, %B, !dbg !184
  %umin75 = select i1 %53, [1200 x double]* %B, [1200 x double]* %B, !dbg !184
  %54 = icmp ult [1200 x double]* %B, %umin75, !dbg !184
  %umin76 = select i1 %54, [1200 x double]* %B, [1200 x double]* %umin75, !dbg !184
  %55 = mul i64 8, %21, !dbg !184
  %56 = add i64 %B77, %55, !dbg !184
  %57 = add i64 %56, 0, !dbg !184
  %58 = icmp ugt i64 %57, %56, !dbg !184
  %umax78 = select i1 %58, i64 %57, i64 %56, !dbg !184
  %59 = icmp ugt i64 %56, %umax78, !dbg !184
  %umax79 = select i1 %59, i64 %56, i64 %umax78, !dbg !184
  %60 = add i64 %umax79, 8, !dbg !184
  %61 = icmp ult [1200 x double]* %B, %B, !dbg !184
  %umin80 = select i1 %61, [1200 x double]* %B, [1200 x double]* %B, !dbg !184
  %62 = icmp ult [1200 x double]* %B, %umin80, !dbg !184
  %umin81 = select i1 %62, [1200 x double]* %B, [1200 x double]* %umin80, !dbg !184
  %63 = icmp ugt i64 %57, %56, !dbg !184
  %umax82 = select i1 %63, i64 %57, i64 %56, !dbg !184
  %64 = icmp ugt i64 %56, %umax82, !dbg !184
  %umax83 = select i1 %64, i64 %56, i64 %umax82, !dbg !184
  %65 = add i64 %umax83, 8, !dbg !184
  %66 = ptrtoint [1200 x double]* %umin76 to i64, !dbg !184
  %67 = sub i64 %60, %66, !dbg !184
  %68 = icmp ult [1200 x double]* %C, %C, !dbg !184
  %umin144 = select i1 %68, [1200 x double]* %C, [1200 x double]* %C, !dbg !184
  %69 = icmp ult [1200 x double]* %C, %umin144, !dbg !184
  %umin145 = select i1 %69, [1200 x double]* %C, [1200 x double]* %umin144, !dbg !184
  %70 = icmp ult [1200 x double]* %C, %umin145, !dbg !184
  %umin146 = select i1 %70, [1200 x double]* %C, [1200 x double]* %umin145, !dbg !184
  %71 = icmp sgt i32 %n, 0, !dbg !184
  %smax147 = select i1 %71, i32 %n, i32 0, !dbg !184
  %72 = zext i32 %smax147 to i64, !dbg !184
  %73 = mul i64 8, %72, !dbg !184
  %74 = add i64 %C52, %73, !dbg !184
  %75 = add i64 %74, 0, !dbg !184
  %76 = icmp ugt i64 %75, %75, !dbg !184
  %umax148 = select i1 %76, i64 %75, i64 %75, !dbg !184
  %77 = icmp ugt i64 %74, %umax148, !dbg !184
  %umax149 = select i1 %77, i64 %74, i64 %umax148, !dbg !184
  %78 = icmp ugt i64 %74, %umax149, !dbg !184
  %umax150 = select i1 %78, i64 %74, i64 %umax149, !dbg !184
  %79 = add i64 %umax150, 8, !dbg !184
  %80 = icmp ult [1200 x double]* %C, %C, !dbg !184
  %umin151 = select i1 %80, [1200 x double]* %C, [1200 x double]* %C, !dbg !184
  %81 = icmp ult [1200 x double]* %C, %umin151, !dbg !184
  %umin152 = select i1 %81, [1200 x double]* %C, [1200 x double]* %umin151, !dbg !184
  %82 = icmp ult [1200 x double]* %C, %umin152, !dbg !184
  %umin153 = select i1 %82, [1200 x double]* %C, [1200 x double]* %umin152, !dbg !184
  %83 = icmp ugt i64 %75, %75, !dbg !184
  %umax154 = select i1 %83, i64 %75, i64 %75, !dbg !184
  %84 = icmp ugt i64 %74, %umax154, !dbg !184
  %umax155 = select i1 %84, i64 %74, i64 %umax154, !dbg !184
  %85 = icmp ugt i64 %74, %umax155, !dbg !184
  %umax156 = select i1 %85, i64 %74, i64 %umax155, !dbg !184
  %86 = add i64 %umax156, 8, !dbg !184
  %87 = icmp sgt i32 %m, 0, !dbg !184
  %smax157 = select i1 %87, i32 %m, i32 0, !dbg !184
  %88 = mul i32 1, %smax157, !dbg !184
  %89 = add i32 0, %88, !dbg !184
  %90 = ptrtoint [1200 x double]* %umin146 to i64, !dbg !184
  %91 = sub i64 %79, %90, !dbg !184
  %92 = icmp ult [1000 x double]* %A, %A, !dbg !184
  %umin158 = select i1 %92, [1000 x double]* %A, [1000 x double]* %A, !dbg !184
  %93 = icmp ult [1000 x double]* %A, %umin158, !dbg !184
  %umin159 = select i1 %93, [1000 x double]* %A, [1000 x double]* %umin158, !dbg !184
  %94 = icmp ugt i64 %16, %16, !dbg !184
  %umax160 = select i1 %94, i64 %16, i64 %16, !dbg !184
  %umax160161 = inttoptr i64 %umax160 to [1000 x double]*
  %95 = icmp ugt [1000 x double]* %A, %umax160161, !dbg !184
  %umax162 = select i1 %95, [1000 x double]* %A, [1000 x double]* %umax160161, !dbg !184
  %umax162163 = ptrtoint [1000 x double]* %umax162 to i64
  %96 = add i64 %umax162163, 8, !dbg !184
  %97 = icmp ult [1000 x double]* %A, %A, !dbg !184
  %umin164 = select i1 %97, [1000 x double]* %A, [1000 x double]* %A, !dbg !184
  %98 = icmp ult [1000 x double]* %A, %umin164, !dbg !184
  %umin165 = select i1 %98, [1000 x double]* %A, [1000 x double]* %umin164, !dbg !184
  %99 = icmp ugt i64 %16, %16, !dbg !184
  %umax166 = select i1 %99, i64 %16, i64 %16, !dbg !184
  %umax166167 = inttoptr i64 %umax166 to [1000 x double]*
  %100 = icmp ugt [1000 x double]* %A, %umax166167, !dbg !184
  %umax168 = select i1 %100, [1000 x double]* %A, [1000 x double]* %umax166167, !dbg !184
  %umax168169 = ptrtoint [1000 x double]* %umax168 to i64
  %101 = add i64 %umax168169, 8, !dbg !184
  %102 = ptrtoint [1000 x double]* %umin159 to i64, !dbg !184
  %103 = sub i64 %96, %102, !dbg !184
  %104 = icmp ult [1200 x double]* %B, %B, !dbg !184
  %umin170 = select i1 %104, [1200 x double]* %B, [1200 x double]* %B, !dbg !184
  %105 = icmp ult [1200 x double]* %B, %umin170, !dbg !184
  %umin171 = select i1 %105, [1200 x double]* %B, [1200 x double]* %umin170, !dbg !184
  %106 = mul i64 8, %72, !dbg !184
  %107 = add i64 %B77, %106, !dbg !184
  %108 = add i64 %107, 0, !dbg !184
  %109 = icmp ugt i64 %108, %107, !dbg !184
  %umax172 = select i1 %109, i64 %108, i64 %107, !dbg !184
  %110 = icmp ugt i64 %107, %umax172, !dbg !184
  %umax173 = select i1 %110, i64 %107, i64 %umax172, !dbg !184
  %111 = add i64 %umax173, 8, !dbg !184
  %112 = icmp ult [1200 x double]* %B, %B, !dbg !184
  %umin174 = select i1 %112, [1200 x double]* %B, [1200 x double]* %B, !dbg !184
  %113 = icmp ult [1200 x double]* %B, %umin174, !dbg !184
  %umin175 = select i1 %113, [1200 x double]* %B, [1200 x double]* %umin174, !dbg !184
  %114 = icmp ugt i64 %108, %107, !dbg !184
  %umax176 = select i1 %114, i64 %108, i64 %107, !dbg !184
  %115 = icmp ugt i64 %107, %umax176, !dbg !184
  %umax177 = select i1 %115, i64 %107, i64 %umax176, !dbg !184
  %116 = add i64 %umax177, 8, !dbg !184
  %117 = ptrtoint [1200 x double]* %umin171 to i64, !dbg !184
  %118 = sub i64 %111, %117, !dbg !184
  br i1 %cmp, label %for.body, label %for.end.55, !dbg !184

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !189, metadata !43), !dbg !190
  br label %for.cond.1, !dbg !191

for.cond.1:                                       ; preds = %for.inc.50, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc51, %for.inc.50 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !193
  %119 = icmp ult [1200 x double]* %C, %C, !dbg !195
  %umin84 = select i1 %119, [1200 x double]* %C, [1200 x double]* %C, !dbg !195
  %120 = icmp ult [1200 x double]* %C, %umin84, !dbg !195
  %umin85 = select i1 %120, [1200 x double]* %C, [1200 x double]* %umin84, !dbg !195
  %121 = icmp ult [1200 x double]* %C, %umin85, !dbg !195
  %umin86 = select i1 %121, [1200 x double]* %C, [1200 x double]* %umin85, !dbg !195
  %122 = icmp sgt i32 %m, 0, !dbg !195
  %smax87 = select i1 %122, i32 %m, i32 0, !dbg !195
  %123 = zext i32 %smax87 to i64, !dbg !195
  %124 = mul i64 1, %123, !dbg !195
  %125 = add i64 0, %124, !dbg !195
  %126 = mul i64 9600, %125, !dbg !195
  %127 = add i64 %C52, %126, !dbg !195
  %128 = icmp ugt i64 %127, %127, !dbg !195
  %umax88 = select i1 %128, i64 %127, i64 %127, !dbg !195
  %129 = mul i64 9600, %123, !dbg !195
  %130 = add i64 %C52, %129, !dbg !195
  %131 = icmp ugt i64 %130, %umax88, !dbg !195
  %umax89 = select i1 %131, i64 %130, i64 %umax88, !dbg !195
  %132 = icmp ugt i64 %130, %umax89, !dbg !195
  %umax90 = select i1 %132, i64 %130, i64 %umax89, !dbg !195
  %133 = add i64 %umax90, 8, !dbg !195
  %134 = icmp ult [1200 x double]* %C, %C, !dbg !195
  %umin91 = select i1 %134, [1200 x double]* %C, [1200 x double]* %C, !dbg !195
  %135 = icmp ult [1200 x double]* %C, %umin91, !dbg !195
  %umin92 = select i1 %135, [1200 x double]* %C, [1200 x double]* %umin91, !dbg !195
  %136 = icmp ult [1200 x double]* %C, %umin92, !dbg !195
  %umin93 = select i1 %136, [1200 x double]* %C, [1200 x double]* %umin92, !dbg !195
  %137 = icmp ugt i64 %127, %127, !dbg !195
  %umax94 = select i1 %137, i64 %127, i64 %127, !dbg !195
  %138 = icmp ugt i64 %130, %umax94, !dbg !195
  %umax95 = select i1 %138, i64 %130, i64 %umax94, !dbg !195
  %139 = icmp ugt i64 %130, %umax95, !dbg !195
  %umax96 = select i1 %139, i64 %130, i64 %umax95, !dbg !195
  %140 = add i64 %umax96, 8, !dbg !195
  %141 = icmp sgt i32 %n, 0, !dbg !195
  %smax97 = select i1 %141, i32 %n, i32 0, !dbg !195
  %142 = mul i32 1, %smax97, !dbg !195
  %143 = add i32 0, %142, !dbg !195
  %144 = ptrtoint [1200 x double]* %umin86 to i64, !dbg !195
  %145 = sub i64 %133, %144, !dbg !195
  %146 = icmp ult [1000 x double]* %A, %A, !dbg !195
  %umin98 = select i1 %146, [1000 x double]* %A, [1000 x double]* %A, !dbg !195
  %147 = icmp ult [1000 x double]* %A, %umin98, !dbg !195
  %umin99 = select i1 %147, [1000 x double]* %A, [1000 x double]* %umin98, !dbg !195
  %148 = mul i64 8000, %123, !dbg !195
  %149 = add i64 %A64, %148, !dbg !195
  %150 = mul i64 8, %125, !dbg !195
  %151 = add i64 %149, %150, !dbg !195
  %152 = icmp ugt i64 %151, %151, !dbg !195
  %umax100 = select i1 %152, i64 %151, i64 %151, !dbg !195
  %153 = mul i64 8008, %123, !dbg !195
  %154 = add i64 %A64, %153, !dbg !195
  %155 = icmp ugt i64 %154, %umax100, !dbg !195
  %umax101 = select i1 %155, i64 %154, i64 %umax100, !dbg !195
  %156 = add i64 %umax101, 8, !dbg !195
  %157 = icmp ult [1000 x double]* %A, %A, !dbg !195
  %umin102 = select i1 %157, [1000 x double]* %A, [1000 x double]* %A, !dbg !195
  %158 = icmp ult [1000 x double]* %A, %umin102, !dbg !195
  %umin103 = select i1 %158, [1000 x double]* %A, [1000 x double]* %umin102, !dbg !195
  %159 = icmp ugt i64 %151, %151, !dbg !195
  %umax104 = select i1 %159, i64 %151, i64 %151, !dbg !195
  %160 = icmp ugt i64 %154, %umax104, !dbg !195
  %umax105 = select i1 %160, i64 %154, i64 %umax104, !dbg !195
  %161 = add i64 %umax105, 8, !dbg !195
  %162 = icmp ult [1200 x double]* %B, %B, !dbg !195
  %umin106 = select i1 %162, [1200 x double]* %B, [1200 x double]* %B, !dbg !195
  %163 = icmp ult [1200 x double]* %B, %umin106, !dbg !195
  %umin107 = select i1 %163, [1200 x double]* %B, [1200 x double]* %umin106, !dbg !195
  %164 = mul i64 9600, %123, !dbg !195
  %165 = add i64 %B77, %164, !dbg !195
  %166 = mul i64 9600, %125, !dbg !195
  %167 = add i64 %B77, %166, !dbg !195
  %168 = icmp ugt i64 %167, %165, !dbg !195
  %umax108 = select i1 %168, i64 %167, i64 %165, !dbg !195
  %169 = icmp ugt i64 %165, %umax108, !dbg !195
  %umax109 = select i1 %169, i64 %165, i64 %umax108, !dbg !195
  %170 = add i64 %umax109, 8, !dbg !195
  %171 = icmp ult [1200 x double]* %B, %B, !dbg !195
  %umin110 = select i1 %171, [1200 x double]* %B, [1200 x double]* %B, !dbg !195
  %172 = icmp ult [1200 x double]* %B, %umin110, !dbg !195
  %umin111 = select i1 %172, [1200 x double]* %B, [1200 x double]* %umin110, !dbg !195
  %173 = icmp ugt i64 %167, %165, !dbg !195
  %umax112 = select i1 %173, i64 %167, i64 %165, !dbg !195
  %174 = icmp ugt i64 %165, %umax112, !dbg !195
  %umax113 = select i1 %174, i64 %165, i64 %umax112, !dbg !195
  %175 = add i64 %umax113, 8, !dbg !195
  %176 = ptrtoint [1200 x double]* %umin107 to i64, !dbg !195
  %177 = sub i64 %170, %176, !dbg !195
  %178 = icmp ult [1200 x double]* %C, %C, !dbg !195
  %umin178 = select i1 %178, [1200 x double]* %C, [1200 x double]* %C, !dbg !195
  %179 = icmp ult [1200 x double]* %C, %umin178, !dbg !195
  %umin179 = select i1 %179, [1200 x double]* %C, [1200 x double]* %umin178, !dbg !195
  %180 = icmp ult [1200 x double]* %C, %umin179, !dbg !195
  %umin180 = select i1 %180, [1200 x double]* %C, [1200 x double]* %umin179, !dbg !195
  %181 = icmp sgt i32 %m, 0, !dbg !195
  %smax181 = select i1 %181, i32 %m, i32 0, !dbg !195
  %182 = zext i32 %smax181 to i64, !dbg !195
  %183 = mul i64 1, %182, !dbg !195
  %184 = add i64 0, %183, !dbg !195
  %185 = mul i64 9600, %184, !dbg !195
  %186 = add i64 %C52, %185, !dbg !195
  %187 = icmp ugt i64 %186, %186, !dbg !195
  %umax182 = select i1 %187, i64 %186, i64 %186, !dbg !195
  %188 = mul i64 9600, %182, !dbg !195
  %189 = add i64 %C52, %188, !dbg !195
  %190 = icmp ugt i64 %189, %umax182, !dbg !195
  %umax183 = select i1 %190, i64 %189, i64 %umax182, !dbg !195
  %191 = icmp ugt i64 %189, %umax183, !dbg !195
  %umax184 = select i1 %191, i64 %189, i64 %umax183, !dbg !195
  %192 = add i64 %umax184, 8, !dbg !195
  %193 = icmp ult [1200 x double]* %C, %C, !dbg !195
  %umin185 = select i1 %193, [1200 x double]* %C, [1200 x double]* %C, !dbg !195
  %194 = icmp ult [1200 x double]* %C, %umin185, !dbg !195
  %umin186 = select i1 %194, [1200 x double]* %C, [1200 x double]* %umin185, !dbg !195
  %195 = icmp ult [1200 x double]* %C, %umin186, !dbg !195
  %umin187 = select i1 %195, [1200 x double]* %C, [1200 x double]* %umin186, !dbg !195
  %196 = icmp ugt i64 %186, %186, !dbg !195
  %umax188 = select i1 %196, i64 %186, i64 %186, !dbg !195
  %197 = icmp ugt i64 %189, %umax188, !dbg !195
  %umax189 = select i1 %197, i64 %189, i64 %umax188, !dbg !195
  %198 = icmp ugt i64 %189, %umax189, !dbg !195
  %umax190 = select i1 %198, i64 %189, i64 %umax189, !dbg !195
  %199 = add i64 %umax190, 8, !dbg !195
  %200 = icmp sgt i32 %n, 0, !dbg !195
  %smax191 = select i1 %200, i32 %n, i32 0, !dbg !195
  %201 = mul i32 1, %smax191, !dbg !195
  %202 = add i32 0, %201, !dbg !195
  %203 = ptrtoint [1200 x double]* %umin180 to i64, !dbg !195
  %204 = sub i64 %192, %203, !dbg !195
  %205 = icmp ult [1000 x double]* %A, %A, !dbg !195
  %umin192 = select i1 %205, [1000 x double]* %A, [1000 x double]* %A, !dbg !195
  %206 = icmp ult [1000 x double]* %A, %umin192, !dbg !195
  %umin193 = select i1 %206, [1000 x double]* %A, [1000 x double]* %umin192, !dbg !195
  %207 = mul i64 8000, %182, !dbg !195
  %208 = add i64 %A64, %207, !dbg !195
  %209 = mul i64 8, %184, !dbg !195
  %210 = add i64 %208, %209, !dbg !195
  %211 = icmp ugt i64 %210, %210, !dbg !195
  %umax194 = select i1 %211, i64 %210, i64 %210, !dbg !195
  %212 = mul i64 8008, %182, !dbg !195
  %213 = add i64 %A64, %212, !dbg !195
  %214 = icmp ugt i64 %213, %umax194, !dbg !195
  %umax195 = select i1 %214, i64 %213, i64 %umax194, !dbg !195
  %215 = add i64 %umax195, 8, !dbg !195
  %216 = icmp ult [1000 x double]* %A, %A, !dbg !195
  %umin196 = select i1 %216, [1000 x double]* %A, [1000 x double]* %A, !dbg !195
  %217 = icmp ult [1000 x double]* %A, %umin196, !dbg !195
  %umin197 = select i1 %217, [1000 x double]* %A, [1000 x double]* %umin196, !dbg !195
  %218 = icmp ugt i64 %210, %210, !dbg !195
  %umax198 = select i1 %218, i64 %210, i64 %210, !dbg !195
  %219 = icmp ugt i64 %213, %umax198, !dbg !195
  %umax199 = select i1 %219, i64 %213, i64 %umax198, !dbg !195
  %220 = add i64 %umax199, 8, !dbg !195
  %221 = icmp ult [1200 x double]* %B, %B, !dbg !195
  %umin200 = select i1 %221, [1200 x double]* %B, [1200 x double]* %B, !dbg !195
  %222 = icmp ult [1200 x double]* %B, %umin200, !dbg !195
  %umin201 = select i1 %222, [1200 x double]* %B, [1200 x double]* %umin200, !dbg !195
  %223 = mul i64 9600, %182, !dbg !195
  %224 = add i64 %B77, %223, !dbg !195
  %225 = mul i64 9600, %184, !dbg !195
  %226 = add i64 %B77, %225, !dbg !195
  %227 = icmp ugt i64 %226, %224, !dbg !195
  %umax202 = select i1 %227, i64 %226, i64 %224, !dbg !195
  %228 = icmp ugt i64 %224, %umax202, !dbg !195
  %umax203 = select i1 %228, i64 %224, i64 %umax202, !dbg !195
  %229 = add i64 %umax203, 8, !dbg !195
  %230 = icmp ult [1200 x double]* %B, %B, !dbg !195
  %umin204 = select i1 %230, [1200 x double]* %B, [1200 x double]* %B, !dbg !195
  %231 = icmp ult [1200 x double]* %B, %umin204, !dbg !195
  %umin205 = select i1 %231, [1200 x double]* %B, [1200 x double]* %umin204, !dbg !195
  %232 = icmp ugt i64 %226, %224, !dbg !195
  %umax206 = select i1 %232, i64 %226, i64 %224, !dbg !195
  %233 = icmp ugt i64 %224, %umax206, !dbg !195
  %umax207 = select i1 %233, i64 %224, i64 %umax206, !dbg !195
  %234 = add i64 %umax207, 8, !dbg !195
  %235 = ptrtoint [1200 x double]* %umin201 to i64, !dbg !195
  %236 = sub i64 %229, %235, !dbg !195
  br i1 %cmp2, label %for.body.3, label %for.end.52, !dbg !195

for.body.3:                                       ; preds = %for.cond.1
  call void @llvm.dbg.value(metadata double 0.000000e+00, i64 0, metadata !196, metadata !43), !dbg !197
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !198, metadata !43), !dbg !199
  br label %for.cond.4, !dbg !200

for.cond.4:                                       ; preds = %for.inc, %for.body.3
  %k.0 = phi i32 [ 0, %for.body.3 ], [ %inc, %for.inc ]
  %temp2.0 = phi double [ 0.000000e+00, %for.body.3 ], [ %add27, %for.inc ]
  %cmp5 = icmp slt i32 %k.0, %i.0, !dbg !203
  %237 = icmp ult [1200 x double]* %C, %C, !dbg !205
  %umin114 = select i1 %237, [1200 x double]* %C, [1200 x double]* %C, !dbg !205
  %238 = icmp ult [1200 x double]* %C, %umin114, !dbg !205
  %umin115 = select i1 %238, [1200 x double]* %C, [1200 x double]* %umin114, !dbg !205
  %239 = icmp ult [1200 x double]* %C, %umin115, !dbg !205
  %umin116 = select i1 %239, [1200 x double]* %C, [1200 x double]* %umin115, !dbg !205
  %240 = icmp sgt i32 %n, 0, !dbg !205
  %smax117 = select i1 %240, i32 %n, i32 0, !dbg !205
  %241 = zext i32 %smax117 to i64, !dbg !205
  %242 = mul i64 8, %241, !dbg !205
  %243 = add i64 %C52, %242, !dbg !205
  %244 = icmp ugt i64 %243, %243, !dbg !205
  %umax118 = select i1 %244, i64 %243, i64 %243, !dbg !205
  %245 = icmp sgt i32 %m, 0, !dbg !205
  %smax119 = select i1 %245, i32 %m, i32 0, !dbg !205
  %246 = zext i32 %smax119 to i64, !dbg !205
  %247 = mul i64 9600, %246, !dbg !205
  %248 = add i64 %C52, %247, !dbg !205
  %249 = mul i64 8, %241, !dbg !205
  %250 = add i64 %248, %249, !dbg !205
  %251 = icmp ugt i64 %250, %umax118, !dbg !205
  %umax120 = select i1 %251, i64 %250, i64 %umax118, !dbg !205
  %252 = icmp ugt i64 %250, %umax120, !dbg !205
  %umax121 = select i1 %252, i64 %250, i64 %umax120, !dbg !205
  %253 = add i64 %umax121, 8, !dbg !205
  %254 = icmp ult [1200 x double]* %C, %C, !dbg !205
  %umin122 = select i1 %254, [1200 x double]* %C, [1200 x double]* %C, !dbg !205
  %255 = icmp ult [1200 x double]* %C, %umin122, !dbg !205
  %umin123 = select i1 %255, [1200 x double]* %C, [1200 x double]* %umin122, !dbg !205
  %256 = icmp ult [1200 x double]* %C, %umin123, !dbg !205
  %umin124 = select i1 %256, [1200 x double]* %C, [1200 x double]* %umin123, !dbg !205
  %257 = icmp ugt i64 %243, %243, !dbg !205
  %umax125 = select i1 %257, i64 %243, i64 %243, !dbg !205
  %258 = icmp ugt i64 %250, %umax125, !dbg !205
  %umax126 = select i1 %258, i64 %250, i64 %umax125, !dbg !205
  %259 = icmp ugt i64 %250, %umax126, !dbg !205
  %umax127 = select i1 %259, i64 %250, i64 %umax126, !dbg !205
  %260 = add i64 %umax127, 8, !dbg !205
  %261 = mul i32 1, %smax119, !dbg !205
  %262 = add i32 0, %261, !dbg !205
  %263 = mul i32 1, %262, !dbg !205
  %264 = add i32 0, %263, !dbg !205
  %265 = ptrtoint [1200 x double]* %umin116 to i64, !dbg !205
  %266 = sub i64 %253, %265, !dbg !205
  %267 = icmp ult [1000 x double]* %A, %A, !dbg !205
  %umin128 = select i1 %267, [1000 x double]* %A, [1000 x double]* %A, !dbg !205
  %268 = icmp ult [1000 x double]* %A, %umin128, !dbg !205
  %umin129 = select i1 %268, [1000 x double]* %A, [1000 x double]* %umin128, !dbg !205
  %269 = mul i64 8000, %246, !dbg !205
  %270 = add i64 %A64, %269, !dbg !205
  %271 = icmp ugt i64 %270, %270, !dbg !205
  %umax130 = select i1 %271, i64 %270, i64 %270, !dbg !205
  %272 = mul i64 8008, %246, !dbg !205
  %273 = add i64 %A64, %272, !dbg !205
  %274 = icmp ugt i64 %273, %umax130, !dbg !205
  %umax131 = select i1 %274, i64 %273, i64 %umax130, !dbg !205
  %275 = add i64 %umax131, 8, !dbg !205
  %276 = icmp ult [1000 x double]* %A, %A, !dbg !205
  %umin132 = select i1 %276, [1000 x double]* %A, [1000 x double]* %A, !dbg !205
  %277 = icmp ult [1000 x double]* %A, %umin132, !dbg !205
  %umin133 = select i1 %277, [1000 x double]* %A, [1000 x double]* %umin132, !dbg !205
  %278 = icmp ugt i64 %270, %270, !dbg !205
  %umax134 = select i1 %278, i64 %270, i64 %270, !dbg !205
  %279 = icmp ugt i64 %273, %umax134, !dbg !205
  %umax135 = select i1 %279, i64 %273, i64 %umax134, !dbg !205
  %280 = add i64 %umax135, 8, !dbg !205
  %281 = ptrtoint [1000 x double]* %umin129 to i64, !dbg !205
  %282 = sub i64 %275, %281, !dbg !205
  %283 = icmp ult [1200 x double]* %B, %B, !dbg !205
  %umin136 = select i1 %283, [1200 x double]* %B, [1200 x double]* %B, !dbg !205
  %284 = icmp ult [1200 x double]* %B, %umin136, !dbg !205
  %umin137 = select i1 %284, [1200 x double]* %B, [1200 x double]* %umin136, !dbg !205
  %285 = mul i64 9600, %246, !dbg !205
  %286 = add i64 %B77, %285, !dbg !205
  %287 = mul i64 8, %241, !dbg !205
  %288 = add i64 %286, %287, !dbg !205
  %289 = add i64 %B77, %287, !dbg !205
  %290 = icmp ugt i64 %289, %288, !dbg !205
  %umax138 = select i1 %290, i64 %289, i64 %288, !dbg !205
  %291 = icmp ugt i64 %288, %umax138, !dbg !205
  %umax139 = select i1 %291, i64 %288, i64 %umax138, !dbg !205
  %292 = add i64 %umax139, 8, !dbg !205
  %293 = icmp ult [1200 x double]* %B, %B, !dbg !205
  %umin140 = select i1 %293, [1200 x double]* %B, [1200 x double]* %B, !dbg !205
  %294 = icmp ult [1200 x double]* %B, %umin140, !dbg !205
  %umin141 = select i1 %294, [1200 x double]* %B, [1200 x double]* %umin140, !dbg !205
  %295 = icmp ugt i64 %289, %288, !dbg !205
  %umax142 = select i1 %295, i64 %289, i64 %288, !dbg !205
  %296 = icmp ugt i64 %288, %umax142, !dbg !205
  %umax143 = select i1 %296, i64 %288, i64 %umax142, !dbg !205
  %297 = add i64 %umax143, 8, !dbg !205
  %298 = ptrtoint [1200 x double]* %umin137 to i64, !dbg !205
  %299 = sub i64 %292, %298, !dbg !205
  %300 = icmp ult [1200 x double]* %C, %C, !dbg !205
  %umin208 = select i1 %300, [1200 x double]* %C, [1200 x double]* %C, !dbg !205
  %301 = icmp ult [1200 x double]* %C, %umin208, !dbg !205
  %umin209 = select i1 %301, [1200 x double]* %C, [1200 x double]* %umin208, !dbg !205
  %302 = icmp ult [1200 x double]* %C, %umin209, !dbg !205
  %umin210 = select i1 %302, [1200 x double]* %C, [1200 x double]* %umin209, !dbg !205
  %303 = icmp sgt i32 %n, 0, !dbg !205
  %smax211 = select i1 %303, i32 %n, i32 0, !dbg !205
  %304 = zext i32 %smax211 to i64, !dbg !205
  %305 = mul i64 8, %304, !dbg !205
  %306 = add i64 %C52, %305, !dbg !205
  %307 = icmp ugt i64 %306, %306, !dbg !205
  %umax212 = select i1 %307, i64 %306, i64 %306, !dbg !205
  %308 = icmp sgt i32 %m, 0, !dbg !205
  %smax213 = select i1 %308, i32 %m, i32 0, !dbg !205
  %309 = zext i32 %smax213 to i64, !dbg !205
  %310 = mul i64 9600, %309, !dbg !205
  %311 = add i64 %C52, %310, !dbg !205
  %312 = mul i64 8, %304, !dbg !205
  %313 = add i64 %311, %312, !dbg !205
  %314 = icmp ugt i64 %313, %umax212, !dbg !205
  %umax214 = select i1 %314, i64 %313, i64 %umax212, !dbg !205
  %315 = icmp ugt i64 %313, %umax214, !dbg !205
  %umax215 = select i1 %315, i64 %313, i64 %umax214, !dbg !205
  %316 = add i64 %umax215, 8, !dbg !205
  %317 = icmp ult [1200 x double]* %C, %C, !dbg !205
  %umin216 = select i1 %317, [1200 x double]* %C, [1200 x double]* %C, !dbg !205
  %318 = icmp ult [1200 x double]* %C, %umin216, !dbg !205
  %umin217 = select i1 %318, [1200 x double]* %C, [1200 x double]* %umin216, !dbg !205
  %319 = icmp ult [1200 x double]* %C, %umin217, !dbg !205
  %umin218 = select i1 %319, [1200 x double]* %C, [1200 x double]* %umin217, !dbg !205
  %320 = icmp ugt i64 %306, %306, !dbg !205
  %umax219 = select i1 %320, i64 %306, i64 %306, !dbg !205
  %321 = icmp ugt i64 %313, %umax219, !dbg !205
  %umax220 = select i1 %321, i64 %313, i64 %umax219, !dbg !205
  %322 = icmp ugt i64 %313, %umax220, !dbg !205
  %umax221 = select i1 %322, i64 %313, i64 %umax220, !dbg !205
  %323 = add i64 %umax221, 8, !dbg !205
  %324 = mul i32 1, %smax213, !dbg !205
  %325 = add i32 0, %324, !dbg !205
  %326 = mul i32 1, %325, !dbg !205
  %327 = add i32 0, %326, !dbg !205
  %328 = ptrtoint [1200 x double]* %umin210 to i64, !dbg !205
  %329 = sub i64 %316, %328, !dbg !205
  %330 = icmp ult [1000 x double]* %A, %A, !dbg !205
  %umin222 = select i1 %330, [1000 x double]* %A, [1000 x double]* %A, !dbg !205
  %331 = icmp ult [1000 x double]* %A, %umin222, !dbg !205
  %umin223 = select i1 %331, [1000 x double]* %A, [1000 x double]* %umin222, !dbg !205
  %332 = mul i64 8000, %309, !dbg !205
  %333 = add i64 %A64, %332, !dbg !205
  %334 = icmp ugt i64 %333, %333, !dbg !205
  %umax224 = select i1 %334, i64 %333, i64 %333, !dbg !205
  %335 = mul i64 8008, %309, !dbg !205
  %336 = add i64 %A64, %335, !dbg !205
  %337 = icmp ugt i64 %336, %umax224, !dbg !205
  %umax225 = select i1 %337, i64 %336, i64 %umax224, !dbg !205
  %338 = add i64 %umax225, 8, !dbg !205
  %339 = icmp ult [1000 x double]* %A, %A, !dbg !205
  %umin226 = select i1 %339, [1000 x double]* %A, [1000 x double]* %A, !dbg !205
  %340 = icmp ult [1000 x double]* %A, %umin226, !dbg !205
  %umin227 = select i1 %340, [1000 x double]* %A, [1000 x double]* %umin226, !dbg !205
  %341 = icmp ugt i64 %333, %333, !dbg !205
  %umax228 = select i1 %341, i64 %333, i64 %333, !dbg !205
  %342 = icmp ugt i64 %336, %umax228, !dbg !205
  %umax229 = select i1 %342, i64 %336, i64 %umax228, !dbg !205
  %343 = add i64 %umax229, 8, !dbg !205
  %344 = ptrtoint [1000 x double]* %umin223 to i64, !dbg !205
  %345 = sub i64 %338, %344, !dbg !205
  %346 = icmp ult [1200 x double]* %B, %B, !dbg !205
  %umin230 = select i1 %346, [1200 x double]* %B, [1200 x double]* %B, !dbg !205
  %347 = icmp ult [1200 x double]* %B, %umin230, !dbg !205
  %umin231 = select i1 %347, [1200 x double]* %B, [1200 x double]* %umin230, !dbg !205
  %348 = mul i64 9600, %309, !dbg !205
  %349 = add i64 %B77, %348, !dbg !205
  %350 = mul i64 8, %304, !dbg !205
  %351 = add i64 %349, %350, !dbg !205
  %352 = add i64 %B77, %350, !dbg !205
  %353 = icmp ugt i64 %352, %351, !dbg !205
  %umax232 = select i1 %353, i64 %352, i64 %351, !dbg !205
  %354 = icmp ugt i64 %351, %umax232, !dbg !205
  %umax233 = select i1 %354, i64 %351, i64 %umax232, !dbg !205
  %355 = add i64 %umax233, 8, !dbg !205
  %356 = icmp ult [1200 x double]* %B, %B, !dbg !205
  %umin234 = select i1 %356, [1200 x double]* %B, [1200 x double]* %B, !dbg !205
  %357 = icmp ult [1200 x double]* %B, %umin234, !dbg !205
  %umin235 = select i1 %357, [1200 x double]* %B, [1200 x double]* %umin234, !dbg !205
  %358 = icmp ugt i64 %352, %351, !dbg !205
  %umax236 = select i1 %358, i64 %352, i64 %351, !dbg !205
  %359 = icmp ugt i64 %351, %umax236, !dbg !205
  %umax237 = select i1 %359, i64 %351, i64 %umax236, !dbg !205
  %360 = add i64 %umax237, 8, !dbg !205
  %361 = ptrtoint [1200 x double]* %umin231 to i64, !dbg !205
  %362 = sub i64 %355, %361, !dbg !205
  br i1 %cmp5, label %for.body.6, label %for.end, !dbg !205

for.body.6:                                       ; preds = %for.cond.4
  %idxprom = sext i32 %j.0 to i64, !dbg !206
  %idxprom7 = sext i32 %i.0 to i64, !dbg !206
  %arrayidx = getelementptr inbounds [1200 x double], [1200 x double]* %B, i64 %idxprom7, !dbg !206
  %arrayidx8 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx, i32 0, i64 %idxprom, !dbg !206
  %tmp10 = load double, double* %arrayidx8, align 8, !dbg !206
  %mul = fmul double %alpha, %tmp10, !dbg !208
  %idxprom9 = sext i32 %k.0 to i64, !dbg !209
  %idxprom10 = sext i32 %i.0 to i64, !dbg !209
  %arrayidx11 = getelementptr inbounds [1000 x double], [1000 x double]* %A, i64 %idxprom10, !dbg !209
  %arrayidx12 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx11, i32 0, i64 %idxprom9, !dbg !209
  %tmp14 = load double, double* %arrayidx12, align 8, !dbg !209
  %mul13 = fmul double %mul, %tmp14, !dbg !210
  %idxprom14 = sext i32 %j.0 to i64, !dbg !211
  %idxprom15 = sext i32 %k.0 to i64, !dbg !211
  %arrayidx16 = getelementptr inbounds [1200 x double], [1200 x double]* %C, i64 %idxprom15, !dbg !211
  %arrayidx17 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx16, i32 0, i64 %idxprom14, !dbg !211
  %tmp18 = load double, double* %arrayidx17, align 8, !dbg !212
  %add = fadd double %tmp18, %mul13, !dbg !212
  store double %add, double* %arrayidx17, align 8, !dbg !212
  %idxprom18 = sext i32 %j.0 to i64, !dbg !213
  %idxprom19 = sext i32 %k.0 to i64, !dbg !213
  %arrayidx20 = getelementptr inbounds [1200 x double], [1200 x double]* %B, i64 %idxprom19, !dbg !213
  %arrayidx21 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx20, i32 0, i64 %idxprom18, !dbg !213
  %tmp22 = load double, double* %arrayidx21, align 8, !dbg !213
  %idxprom22 = sext i32 %k.0 to i64, !dbg !214
  %idxprom23 = sext i32 %i.0 to i64, !dbg !214
  %arrayidx24 = getelementptr inbounds [1000 x double], [1000 x double]* %A, i64 %idxprom23, !dbg !214
  %arrayidx25 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx24, i32 0, i64 %idxprom22, !dbg !214
  %tmp26 = load double, double* %arrayidx25, align 8, !dbg !214
  %mul26 = fmul double %tmp22, %tmp26, !dbg !215
  %add27 = fadd double %temp2.0, %mul26, !dbg !216
  call void @llvm.dbg.value(metadata double %add27, i64 0, metadata !196, metadata !43), !dbg !197
  br label %for.inc, !dbg !217

for.inc:                                          ; preds = %for.body.6
  %inc = add nsw i32 %k.0, 1, !dbg !218
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !198, metadata !43), !dbg !199
  br label %for.cond.4, !dbg !219

for.end:                                          ; preds = %for.cond.4
  %temp2.0.lcssa = phi double [ %temp2.0, %for.cond.4 ]
  %idxprom28 = sext i32 %j.0 to i64, !dbg !220
  %idxprom29 = sext i32 %i.0 to i64, !dbg !220
  %arrayidx30 = getelementptr inbounds [1200 x double], [1200 x double]* %C, i64 %idxprom29, !dbg !220
  %arrayidx31 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx30, i32 0, i64 %idxprom28, !dbg !220
  %tmp33 = load double, double* %arrayidx31, align 8, !dbg !220
  %mul32 = fmul double %beta, %tmp33, !dbg !221
  %idxprom33 = sext i32 %j.0 to i64, !dbg !222
  %idxprom34 = sext i32 %i.0 to i64, !dbg !222
  %arrayidx35 = getelementptr inbounds [1200 x double], [1200 x double]* %B, i64 %idxprom34, !dbg !222
  %arrayidx36 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx35, i32 0, i64 %idxprom33, !dbg !222
  %tmp38 = load double, double* %arrayidx36, align 8, !dbg !222
  %mul37 = fmul double %alpha, %tmp38, !dbg !223
  %idxprom38 = sext i32 %i.0 to i64, !dbg !224
  %idxprom39 = sext i32 %i.0 to i64, !dbg !224
  %arrayidx40 = getelementptr inbounds [1000 x double], [1000 x double]* %A, i64 %idxprom39, !dbg !224
  %arrayidx41 = getelementptr inbounds [1000 x double], [1000 x double]* %arrayidx40, i32 0, i64 %idxprom38, !dbg !224
  %tmp42 = load double, double* %arrayidx41, align 8, !dbg !224
  %mul42 = fmul double %mul37, %tmp42, !dbg !225
  %add43 = fadd double %mul32, %mul42, !dbg !226
  %mul44 = fmul double %alpha, %temp2.0.lcssa, !dbg !227
  %add45 = fadd double %add43, %mul44, !dbg !228
  %idxprom46 = sext i32 %j.0 to i64, !dbg !229
  %idxprom47 = sext i32 %i.0 to i64, !dbg !229
  %arrayidx48 = getelementptr inbounds [1200 x double], [1200 x double]* %C, i64 %idxprom47, !dbg !229
  %arrayidx49 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx48, i32 0, i64 %idxprom46, !dbg !229
  store double %add45, double* %arrayidx49, align 8, !dbg !230
  br label %for.inc.50, !dbg !231

for.inc.50:                                       ; preds = %for.end
  %inc51 = add nsw i32 %j.0, 1, !dbg !232
  call void @llvm.dbg.value(metadata i32 %inc51, i64 0, metadata !189, metadata !43), !dbg !190
  br label %for.cond.1, !dbg !233

for.end.52:                                       ; preds = %for.cond.1
  br label %for.inc.53, !dbg !234

for.inc.53:                                       ; preds = %for.end.52
  %inc54 = add nsw i32 %i.0, 1, !dbg !235
  call void @llvm.dbg.value(metadata i32 %inc54, i64 0, metadata !182, metadata !43), !dbg !183
  br label %for.cond, !dbg !236

for.end.55:                                       ; preds = %for.cond
  ret void, !dbg !237
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #3

; Function Attrs: nounwind uwtable
define internal void @print_array(i32 %m, i32 %n, [1200 x double]* %C) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %m, i64 0, metadata !238, metadata !43), !dbg !239
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !240, metadata !43), !dbg !241
  call void @llvm.dbg.value(metadata [1200 x double]* %C, i64 0, metadata !242, metadata !43), !dbg !243
  %tmp = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !244
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0)), !dbg !244
  %tmp1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !245
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !245
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !246, metadata !43), !dbg !247
  br label %for.cond, !dbg !248

for.cond:                                         ; preds = %for.inc.10, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc11, %for.inc.10 ]
  %cmp = icmp slt i32 %i.0, %m, !dbg !250
  br i1 %cmp, label %for.body, label %for.end.12, !dbg !252

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !253, metadata !43), !dbg !254
  br label %for.cond.2, !dbg !255

for.cond.2:                                       ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ]
  %cmp3 = icmp slt i32 %j.0, %n, !dbg !257
  br i1 %cmp3, label %for.body.4, label %for.end, !dbg !259

for.body.4:                                       ; preds = %for.cond.2
  %mul = mul nsw i32 %i.0, %m, !dbg !260
  %add = add nsw i32 %mul, %j.0, !dbg !263
  %rem = srem i32 %add, 20, !dbg !264
  %cmp5 = icmp eq i32 %rem, 0, !dbg !265
  br i1 %cmp5, label %if.then, label %if.end, !dbg !266

if.then:                                          ; preds = %for.body.4
  %tmp9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !267
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0)), !dbg !268
  br label %if.end, !dbg !268

if.end:                                           ; preds = %if.then, %for.body.4
  %tmp10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !269
  %idxprom = sext i32 %j.0 to i64, !dbg !270
  %idxprom7 = sext i32 %i.0 to i64, !dbg !270
  %arrayidx = getelementptr inbounds [1200 x double], [1200 x double]* %C, i64 %idxprom7, !dbg !270
  %arrayidx8 = getelementptr inbounds [1200 x double], [1200 x double]* %arrayidx, i32 0, i64 %idxprom, !dbg !270
  %tmp14 = load double, double* %arrayidx8, align 8, !dbg !270
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), double %tmp14), !dbg !271
  br label %for.inc, !dbg !272

for.inc:                                          ; preds = %if.end
  %inc = add nsw i32 %j.0, 1, !dbg !273
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !253, metadata !43), !dbg !254
  br label %for.cond.2, !dbg !274

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.10, !dbg !275

for.inc.10:                                       ; preds = %for.end
  %inc11 = add nsw i32 %i.0, 1, !dbg !276
  call void @llvm.dbg.value(metadata i32 %inc11, i64 0, metadata !246, metadata !43), !dbg !247
  br label %for.cond, !dbg !277

for.end.12:                                       ; preds = %for.cond
  %tmp17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !278
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp17, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !278
  %tmp18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !279
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp18, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0)), !dbg !279
  ret void, !dbg !280
}

; Function Attrs: nounwind
declare void @free(i8*) #4

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!39, !40}
!llvm.ident = !{!41}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !14)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/blas/symm")
!2 = !{}
!3 = !{!4, !10, !13, !6}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 76800000, align: 64, elements: !7)
!6 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!7 = !{!8, !9}
!8 = !DISubrange(count: 1000)
!9 = !DISubrange(count: 1200)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 64000000, align: 64, elements: !12)
!12 = !{!8, !8}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!14 = !{!15, !23, !33, !36}
!15 = !DISubprogram(name: "main", scope: !16, file: !16, line: 97, type: !17, isLocal: false, isDefinition: true, scopeLine: 97, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!16 = !DIFile(filename: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/blas/symm/tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/blas/symm")
!17 = !DISubroutineType(types: !18)
!18 = !{!19, !19, !20}
!19 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64, align: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64, align: 64)
!22 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!23 = !DISubprogram(name: "init_array", scope: !16, file: !16, line: 24, type: !24, isLocal: true, isDefinition: true, scopeLine: 29, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, double*, double*, [1200 x double]*, [1000 x double]*, [1200 x double]*)* @init_array, variables: !2)
!24 = !DISubroutineType(types: !25)
!25 = !{null, !19, !19, !26, !26, !27, !30, !27}
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64, align: 64)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 76800, align: 64, elements: !29)
!29 = !{!9}
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!31 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 64000, align: 64, elements: !32)
!32 = !{!8}
!33 = !DISubprogram(name: "kernel_symm", scope: !16, file: !16, line: 67, type: !34, isLocal: true, isDefinition: true, scopeLine: 72, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, double, double, [1200 x double]*, [1000 x double]*, [1200 x double]*)* @kernel_symm, variables: !2)
!34 = !DISubroutineType(types: !35)
!35 = !{null, !19, !19, !6, !6, !27, !30, !27}
!36 = !DISubprogram(name: "print_array", scope: !16, file: !16, line: 49, type: !37, isLocal: true, isDefinition: true, scopeLine: 50, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, [1200 x double]*)* @print_array, variables: !2)
!37 = !DISubroutineType(types: !38)
!38 = !{null, !19, !19, !27}
!39 = !{i32 2, !"Dwarf Version", i32 4}
!40 = !{i32 2, !"Debug Info Version", i32 3}
!41 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!42 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !15, file: !16, line: 97, type: !19)
!43 = !DIExpression()
!44 = !DILocation(line: 97, column: 14, scope: !15)
!45 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !15, file: !16, line: 97, type: !20)
!46 = !DILocation(line: 97, column: 27, scope: !15)
!47 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !15, file: !16, line: 99, type: !19)
!48 = !DILocation(line: 99, column: 7, scope: !15)
!49 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !15, file: !16, line: 100, type: !19)
!50 = !DILocation(line: 100, column: 7, scope: !15)
!51 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "alpha", scope: !15, file: !16, line: 103, type: !6)
!52 = !DILocation(line: 103, column: 13, scope: !15)
!53 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "beta", scope: !15, file: !16, line: 104, type: !6)
!54 = !DILocation(line: 104, column: 13, scope: !15)
!55 = !DILocation(line: 105, column: 3, scope: !15)
!56 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "C", scope: !15, file: !16, line: 105, type: !4)
!57 = !DILocation(line: 106, column: 3, scope: !15)
!58 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "A", scope: !15, file: !16, line: 106, type: !10)
!59 = !DILocation(line: 107, column: 3, scope: !15)
!60 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "B", scope: !15, file: !16, line: 107, type: !4)
!61 = !DILocation(line: 111, column: 14, scope: !15)
!62 = !DILocation(line: 112, column: 14, scope: !15)
!63 = !DILocation(line: 113, column: 14, scope: !15)
!64 = !DILocation(line: 110, column: 3, scope: !15)
!65 = !DILocation(line: 120, column: 15, scope: !15)
!66 = !DILocation(line: 120, column: 22, scope: !15)
!67 = !DILocation(line: 121, column: 15, scope: !15)
!68 = !DILocation(line: 122, column: 15, scope: !15)
!69 = !DILocation(line: 123, column: 15, scope: !15)
!70 = !DILocation(line: 119, column: 3, scope: !15)
!71 = !DILocation(line: 131, column: 3, scope: !72)
!72 = distinct !DILexicalBlock(scope: !15, file: !16, line: 131, column: 3)
!73 = !DILocation(line: 131, column: 3, scope: !74)
!74 = !DILexicalBlockFile(scope: !72, file: !16, discriminator: 1)
!75 = !DILocation(line: 131, column: 3, scope: !15)
!76 = !DILocation(line: 131, column: 3, scope: !77)
!77 = !DILexicalBlockFile(scope: !72, file: !16, discriminator: 2)
!78 = !DILocation(line: 134, column: 3, scope: !15)
!79 = !DILocation(line: 135, column: 3, scope: !15)
!80 = !DILocation(line: 136, column: 3, scope: !15)
!81 = !DILocation(line: 138, column: 3, scope: !15)
!82 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 1, scope: !23, file: !16, line: 24, type: !19)
!83 = !DILocation(line: 24, column: 28, scope: !23)
!84 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 2, scope: !23, file: !16, line: 24, type: !19)
!85 = !DILocation(line: 24, column: 35, scope: !23)
!86 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "alpha", arg: 3, scope: !23, file: !16, line: 25, type: !26)
!87 = !DILocation(line: 25, column: 35, scope: !23)
!88 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "beta", arg: 4, scope: !23, file: !16, line: 26, type: !26)
!89 = !DILocation(line: 26, column: 35, scope: !23)
!90 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "C", arg: 5, scope: !23, file: !16, line: 27, type: !27)
!91 = !DILocation(line: 27, column: 34, scope: !23)
!92 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "A", arg: 6, scope: !23, file: !16, line: 28, type: !30)
!93 = !DILocation(line: 28, column: 34, scope: !23)
!94 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "B", arg: 7, scope: !23, file: !16, line: 29, type: !27)
!95 = !DILocation(line: 29, column: 34, scope: !23)
!96 = !DILocation(line: 32, column: 10, scope: !23)
!97 = !DILocation(line: 33, column: 9, scope: !23)
!98 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !23, file: !16, line: 30, type: !19)
!99 = !DILocation(line: 30, column: 7, scope: !23)
!100 = !DILocation(line: 34, column: 3, scope: !101)
!101 = distinct !DILexicalBlock(scope: !23, file: !16, line: 34, column: 3)
!102 = !DILocation(line: 34, column: 8, scope: !101)
!103 = !DILocation(line: 34, column: 17, scope: !104)
!104 = distinct !DILexicalBlock(scope: !101, file: !16, line: 34, column: 3)
!105 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !23, file: !16, line: 30, type: !19)
!106 = !DILocation(line: 30, column: 10, scope: !23)
!107 = !DILocation(line: 35, column: 10, scope: !108)
!108 = distinct !DILexicalBlock(scope: !104, file: !16, line: 35, column: 5)
!109 = !DILocation(line: 35, column: 19, scope: !110)
!110 = distinct !DILexicalBlock(scope: !108, file: !16, line: 35, column: 5)
!111 = !DILocation(line: 35, column: 5, scope: !108)
!112 = !DILocation(line: 36, column: 32, scope: !113)
!113 = distinct !DILexicalBlock(scope: !110, file: !16, line: 35, column: 29)
!114 = !DILocation(line: 36, column: 37, scope: !113)
!115 = !DILocation(line: 36, column: 17, scope: !113)
!116 = !DILocation(line: 36, column: 46, scope: !113)
!117 = !DILocation(line: 36, column: 44, scope: !113)
!118 = !DILocation(line: 36, column: 7, scope: !113)
!119 = !DILocation(line: 36, column: 15, scope: !113)
!120 = !DILocation(line: 37, column: 32, scope: !113)
!121 = !DILocation(line: 37, column: 36, scope: !113)
!122 = !DILocation(line: 37, column: 41, scope: !113)
!123 = !DILocation(line: 37, column: 17, scope: !113)
!124 = !DILocation(line: 37, column: 50, scope: !113)
!125 = !DILocation(line: 37, column: 48, scope: !113)
!126 = !DILocation(line: 37, column: 7, scope: !113)
!127 = !DILocation(line: 37, column: 15, scope: !113)
!128 = !DILocation(line: 38, column: 5, scope: !113)
!129 = !DILocation(line: 35, column: 25, scope: !110)
!130 = !DILocation(line: 35, column: 5, scope: !110)
!131 = !DILocation(line: 38, column: 5, scope: !108)
!132 = !DILocation(line: 34, column: 23, scope: !104)
!133 = !DILocation(line: 34, column: 3, scope: !104)
!134 = !DILocation(line: 39, column: 3, scope: !135)
!135 = distinct !DILexicalBlock(scope: !23, file: !16, line: 39, column: 3)
!136 = !DILocation(line: 39, column: 8, scope: !135)
!137 = !DILocation(line: 40, column: 5, scope: !138)
!138 = distinct !DILexicalBlock(scope: !139, file: !16, line: 40, column: 5)
!139 = distinct !DILexicalBlock(scope: !140, file: !16, line: 39, column: 27)
!140 = distinct !DILexicalBlock(scope: !135, file: !16, line: 39, column: 3)
!141 = !DILocation(line: 39, column: 17, scope: !140)
!142 = !DILocation(line: 40, column: 10, scope: !138)
!143 = !DILocation(line: 40, column: 19, scope: !144)
!144 = distinct !DILexicalBlock(scope: !138, file: !16, line: 40, column: 5)
!145 = !DILocation(line: 41, column: 32, scope: !144)
!146 = !DILocation(line: 41, column: 37, scope: !144)
!147 = !DILocation(line: 41, column: 17, scope: !144)
!148 = !DILocation(line: 41, column: 46, scope: !144)
!149 = !DILocation(line: 41, column: 44, scope: !144)
!150 = !DILocation(line: 41, column: 7, scope: !144)
!151 = !DILocation(line: 41, column: 15, scope: !144)
!152 = !DILocation(line: 40, column: 26, scope: !144)
!153 = !DILocation(line: 40, column: 5, scope: !144)
!154 = !DILocation(line: 42, column: 16, scope: !155)
!155 = distinct !DILexicalBlock(scope: !139, file: !16, line: 42, column: 5)
!156 = !DILocation(line: 42, column: 10, scope: !155)
!157 = !DILocation(line: 42, column: 23, scope: !158)
!158 = distinct !DILexicalBlock(scope: !155, file: !16, line: 42, column: 5)
!159 = !DILocation(line: 42, column: 5, scope: !155)
!160 = !DILocation(line: 43, column: 7, scope: !158)
!161 = !DILocation(line: 43, column: 15, scope: !158)
!162 = !DILocation(line: 42, column: 29, scope: !158)
!163 = !DILocation(line: 42, column: 5, scope: !158)
!164 = !DILocation(line: 44, column: 3, scope: !139)
!165 = !DILocation(line: 39, column: 23, scope: !140)
!166 = !DILocation(line: 39, column: 3, scope: !140)
!167 = !DILocation(line: 45, column: 1, scope: !23)
!168 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 1, scope: !33, file: !16, line: 67, type: !19)
!169 = !DILocation(line: 67, column: 29, scope: !33)
!170 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 2, scope: !33, file: !16, line: 67, type: !19)
!171 = !DILocation(line: 67, column: 36, scope: !33)
!172 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "alpha", arg: 3, scope: !33, file: !16, line: 68, type: !6)
!173 = !DILocation(line: 68, column: 35, scope: !33)
!174 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "beta", arg: 4, scope: !33, file: !16, line: 69, type: !6)
!175 = !DILocation(line: 69, column: 35, scope: !33)
!176 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "C", arg: 5, scope: !33, file: !16, line: 70, type: !27)
!177 = !DILocation(line: 70, column: 35, scope: !33)
!178 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "A", arg: 6, scope: !33, file: !16, line: 71, type: !30)
!179 = !DILocation(line: 71, column: 35, scope: !33)
!180 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "B", arg: 7, scope: !33, file: !16, line: 72, type: !27)
!181 = !DILocation(line: 72, column: 35, scope: !33)
!182 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !33, file: !16, line: 73, type: !19)
!183 = !DILocation(line: 73, column: 7, scope: !33)
!184 = !DILocation(line: 85, column: 3, scope: !185)
!185 = distinct !DILexicalBlock(scope: !33, file: !16, line: 85, column: 3)
!186 = !DILocation(line: 85, column: 8, scope: !185)
!187 = !DILocation(line: 85, column: 17, scope: !188)
!188 = distinct !DILexicalBlock(scope: !185, file: !16, line: 85, column: 3)
!189 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !33, file: !16, line: 73, type: !19)
!190 = !DILocation(line: 73, column: 10, scope: !33)
!191 = !DILocation(line: 86, column: 10, scope: !192)
!192 = distinct !DILexicalBlock(scope: !188, file: !16, line: 86, column: 5)
!193 = !DILocation(line: 86, column: 19, scope: !194)
!194 = distinct !DILexicalBlock(scope: !192, file: !16, line: 86, column: 5)
!195 = !DILocation(line: 86, column: 5, scope: !192)
!196 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "temp2", scope: !33, file: !16, line: 74, type: !6)
!197 = !DILocation(line: 74, column: 13, scope: !33)
!198 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !33, file: !16, line: 73, type: !19)
!199 = !DILocation(line: 73, column: 13, scope: !33)
!200 = !DILocation(line: 88, column: 12, scope: !201)
!201 = distinct !DILexicalBlock(scope: !202, file: !16, line: 88, column: 7)
!202 = distinct !DILexicalBlock(scope: !194, file: !16, line: 86, column: 33)
!203 = !DILocation(line: 88, column: 21, scope: !204)
!204 = distinct !DILexicalBlock(scope: !201, file: !16, line: 88, column: 7)
!205 = !DILocation(line: 88, column: 7, scope: !201)
!206 = !DILocation(line: 89, column: 28, scope: !207)
!207 = distinct !DILexicalBlock(scope: !204, file: !16, line: 88, column: 31)
!208 = !DILocation(line: 89, column: 26, scope: !207)
!209 = !DILocation(line: 89, column: 38, scope: !207)
!210 = !DILocation(line: 89, column: 36, scope: !207)
!211 = !DILocation(line: 89, column: 9, scope: !207)
!212 = !DILocation(line: 89, column: 17, scope: !207)
!213 = !DILocation(line: 90, column: 18, scope: !207)
!214 = !DILocation(line: 90, column: 28, scope: !207)
!215 = !DILocation(line: 90, column: 26, scope: !207)
!216 = !DILocation(line: 90, column: 15, scope: !207)
!217 = !DILocation(line: 91, column: 7, scope: !207)
!218 = !DILocation(line: 88, column: 27, scope: !204)
!219 = !DILocation(line: 88, column: 7, scope: !204)
!220 = !DILocation(line: 92, column: 24, scope: !202)
!221 = !DILocation(line: 92, column: 22, scope: !202)
!222 = !DILocation(line: 92, column: 42, scope: !202)
!223 = !DILocation(line: 92, column: 40, scope: !202)
!224 = !DILocation(line: 92, column: 52, scope: !202)
!225 = !DILocation(line: 92, column: 50, scope: !202)
!226 = !DILocation(line: 92, column: 32, scope: !202)
!227 = !DILocation(line: 92, column: 68, scope: !202)
!228 = !DILocation(line: 92, column: 60, scope: !202)
!229 = !DILocation(line: 92, column: 7, scope: !202)
!230 = !DILocation(line: 92, column: 15, scope: !202)
!231 = !DILocation(line: 93, column: 5, scope: !202)
!232 = !DILocation(line: 86, column: 29, scope: !194)
!233 = !DILocation(line: 86, column: 5, scope: !194)
!234 = !DILocation(line: 93, column: 5, scope: !192)
!235 = !DILocation(line: 85, column: 27, scope: !188)
!236 = !DILocation(line: 85, column: 3, scope: !188)
!237 = !DILocation(line: 95, column: 1, scope: !33)
!238 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 1, scope: !36, file: !16, line: 49, type: !19)
!239 = !DILocation(line: 49, column: 29, scope: !36)
!240 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 2, scope: !36, file: !16, line: 49, type: !19)
!241 = !DILocation(line: 49, column: 36, scope: !36)
!242 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "C", arg: 3, scope: !36, file: !16, line: 50, type: !27)
!243 = !DILocation(line: 50, column: 35, scope: !36)
!244 = !DILocation(line: 53, column: 3, scope: !36)
!245 = !DILocation(line: 54, column: 3, scope: !36)
!246 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !36, file: !16, line: 51, type: !19)
!247 = !DILocation(line: 51, column: 7, scope: !36)
!248 = !DILocation(line: 55, column: 8, scope: !249)
!249 = distinct !DILexicalBlock(scope: !36, file: !16, line: 55, column: 3)
!250 = !DILocation(line: 55, column: 17, scope: !251)
!251 = distinct !DILexicalBlock(scope: !249, file: !16, line: 55, column: 3)
!252 = !DILocation(line: 55, column: 3, scope: !249)
!253 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !36, file: !16, line: 51, type: !19)
!254 = !DILocation(line: 51, column: 10, scope: !36)
!255 = !DILocation(line: 56, column: 10, scope: !256)
!256 = distinct !DILexicalBlock(scope: !251, file: !16, line: 56, column: 5)
!257 = !DILocation(line: 56, column: 19, scope: !258)
!258 = distinct !DILexicalBlock(scope: !256, file: !16, line: 56, column: 5)
!259 = !DILocation(line: 56, column: 5, scope: !256)
!260 = !DILocation(line: 57, column: 14, scope: !261)
!261 = distinct !DILexicalBlock(scope: !262, file: !16, line: 57, column: 11)
!262 = distinct !DILexicalBlock(scope: !258, file: !16, line: 56, column: 29)
!263 = !DILocation(line: 57, column: 18, scope: !261)
!264 = !DILocation(line: 57, column: 23, scope: !261)
!265 = !DILocation(line: 57, column: 28, scope: !261)
!266 = !DILocation(line: 57, column: 11, scope: !262)
!267 = !DILocation(line: 58, column: 17, scope: !261)
!268 = !DILocation(line: 58, column: 9, scope: !261)
!269 = !DILocation(line: 59, column: 15, scope: !262)
!270 = !DILocation(line: 59, column: 60, scope: !262)
!271 = !DILocation(line: 59, column: 7, scope: !262)
!272 = !DILocation(line: 60, column: 5, scope: !262)
!273 = !DILocation(line: 56, column: 25, scope: !258)
!274 = !DILocation(line: 56, column: 5, scope: !258)
!275 = !DILocation(line: 60, column: 5, scope: !256)
!276 = !DILocation(line: 55, column: 23, scope: !251)
!277 = !DILocation(line: 55, column: 3, scope: !251)
!278 = !DILocation(line: 61, column: 3, scope: !36)
!279 = !DILocation(line: 62, column: 3, scope: !36)
!280 = !DILocation(line: 63, column: 1, scope: !36)
