; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [23 x i8] c"==BEGIN DUMP_ARRAYS==\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"begin dump: %s\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"\0Aend   dump: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"==END   DUMP_ARRAYS==\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !33, metadata !34), !dbg !35
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !36, metadata !34), !dbg !37
  call void @llvm.dbg.value(metadata i32 2000, i64 0, metadata !38, metadata !34), !dbg !39
  %call = call i8* @polybench_alloc_data(i64 4000000, i32 8), !dbg !40
  %tmp = bitcast i8* %call to [2000 x [2000 x double]]*, !dbg !40
  call void @llvm.dbg.value(metadata [2000 x [2000 x double]]* %tmp, i64 0, metadata !41, metadata !34), !dbg !40
  %call1 = call i8* @polybench_alloc_data(i64 2000, i32 8), !dbg !42
  %tmp1 = bitcast i8* %call1 to [2000 x double]*, !dbg !42
  call void @llvm.dbg.value(metadata [2000 x double]* %tmp1, i64 0, metadata !43, metadata !34), !dbg !42
  %call2 = call i8* @polybench_alloc_data(i64 2000, i32 8), !dbg !44
  %tmp2 = bitcast i8* %call2 to [2000 x double]*, !dbg !44
  call void @llvm.dbg.value(metadata [2000 x double]* %tmp2, i64 0, metadata !45, metadata !34), !dbg !44
  %arraydecay = getelementptr inbounds [2000 x [2000 x double]], [2000 x [2000 x double]]* %tmp, i32 0, i32 0, !dbg !46
  %arraydecay3 = getelementptr inbounds [2000 x double], [2000 x double]* %tmp1, i32 0, i32 0, !dbg !47
  %arraydecay4 = getelementptr inbounds [2000 x double], [2000 x double]* %tmp2, i32 0, i32 0, !dbg !48
  call void @init_array(i32 2000, [2000 x double]* %arraydecay, double* %arraydecay3, double* %arraydecay4), !dbg !49
  %arraydecay5 = getelementptr inbounds [2000 x [2000 x double]], [2000 x [2000 x double]]* %tmp, i32 0, i32 0, !dbg !50
  %arraydecay6 = getelementptr inbounds [2000 x double], [2000 x double]* %tmp1, i32 0, i32 0, !dbg !51
  %arraydecay7 = getelementptr inbounds [2000 x double], [2000 x double]* %tmp2, i32 0, i32 0, !dbg !52
  call void @kernel_trisolv(i32 2000, [2000 x double]* %arraydecay5, double* %arraydecay6, double* %arraydecay7), !dbg !53
  %cmp = icmp sgt i32 %argc, 42, !dbg !54
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !54

land.lhs.true:                                    ; preds = %entry
  %arrayidx = getelementptr inbounds i8*, i8** %argv, i64 0, !dbg !56
  %tmp13 = load i8*, i8** %arrayidx, align 8, !dbg !56
  %call8 = call i32 @strcmp(i8* %tmp13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0)) #5, !dbg !56
  %tobool = icmp ne i32 %call8, 0, !dbg !56
  br i1 %tobool, label %if.end, label %if.then, !dbg !58

if.then:                                          ; preds = %land.lhs.true
  %arraydecay9 = getelementptr inbounds [2000 x double], [2000 x double]* %tmp1, i32 0, i32 0, !dbg !59
  call void @print_array(i32 2000, double* %arraydecay9), !dbg !59
  br label %if.end, !dbg !59

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %tmp17 = bitcast [2000 x [2000 x double]]* %tmp to i8*, !dbg !61
  call void @free(i8* %tmp17) #6, !dbg !61
  %tmp19 = bitcast [2000 x double]* %tmp1 to i8*, !dbg !62
  call void @free(i8* %tmp19) #6, !dbg !62
  %tmp21 = bitcast [2000 x double]* %tmp2 to i8*, !dbg !63
  call void @free(i8* %tmp21) #6, !dbg !63
  ret i32 0, !dbg !64
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i8* @polybench_alloc_data(i64, i32) #2

; Function Attrs: nounwind uwtable
define internal void @init_array(i32 %n, [2000 x double]* %L, double* %x, double* %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !65, metadata !34), !dbg !66
  call void @llvm.dbg.value(metadata [2000 x double]* %L, i64 0, metadata !67, metadata !34), !dbg !68
  call void @llvm.dbg.value(metadata double* %x, i64 0, metadata !69, metadata !34), !dbg !70
  call void @llvm.dbg.value(metadata double* %b, i64 0, metadata !71, metadata !34), !dbg !72
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !73, metadata !34), !dbg !74
  %0 = ptrtoint double* %b to i64
  %1 = ptrtoint double* %x to i64
  %2 = ptrtoint [2000 x double]* %L to i64
  %3 = ptrtoint double* %b to i64
  %4 = ptrtoint double* %x to i64
  %5 = ptrtoint [2000 x double]* %L to i64
  %6 = ptrtoint double* undef to i64
  %7 = ptrtoint double* undef to i64
  %8 = ptrtoint [2000 x double]* %L to i64
  %b20 = ptrtoint double* %b to i64
  %x19 = ptrtoint double* %x to i64
  %L18 = ptrtoint [2000 x double]* %L to i64
  %9 = add i64 %L18, 8, !dbg !75
  %10 = add i64 %9, 8, !dbg !75
  %11 = add i64 %9, 8, !dbg !75
  %12 = add i64 %x19, 8, !dbg !75
  %13 = add i64 %x19, 8, !dbg !75
  %14 = add i64 %b20, 8, !dbg !75
  %15 = add i64 %b20, 8, !dbg !75
  %16 = add i64 %5, 8, !dbg !75
  %17 = add i64 %16, 8, !dbg !75
  %18 = add i64 %16, 8, !dbg !75
  %19 = add i64 %4, 8, !dbg !75
  %20 = add i64 %4, 8, !dbg !75
  %21 = add i64 %3, 8, !dbg !75
  %22 = add i64 %3, 8, !dbg !75
  br label %for.cond, !dbg !77

for.cond:                                         ; preds = %for.inc.14, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc15, %for.inc.14 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !78
  %23 = icmp sgt i32 %n, 0, !dbg !75
  %smax = select i1 %23, i32 %n, i32 0, !dbg !75
  %24 = mul i32 1, %smax, !dbg !75
  %25 = add i32 0, %24, !dbg !75
  %26 = ptrtoint [2000 x double]* undef to i64, !dbg !75
  %27 = sub i64 %10, %8, !dbg !75
  %28 = ptrtoint double* undef to i64, !dbg !75
  %29 = sub i64 %12, %4, !dbg !75
  %30 = ptrtoint double* undef to i64, !dbg !75
  %31 = sub i64 %14, %3, !dbg !75
  %32 = icmp sgt i32 %n, 0, !dbg !75
  %smax22 = select i1 %32, i32 %n, i32 0, !dbg !75
  %33 = mul i32 1, %smax22, !dbg !75
  %34 = add i32 0, %33, !dbg !75
  %35 = ptrtoint [2000 x double]* undef to i64, !dbg !75
  %36 = sub i64 %17, %2, !dbg !75
  %37 = ptrtoint double* undef to i64, !dbg !75
  %38 = sub i64 %19, %1, !dbg !75
  %39 = ptrtoint double* undef to i64, !dbg !75
  %40 = sub i64 %21, %0, !dbg !75
  br i1 %cmp, label %for.body, label %for.end.16, !dbg !75

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64, !dbg !80
  %arrayidx = getelementptr inbounds double, double* %x, i64 %idxprom, !dbg !80
  store double -9.990000e+02, double* %arrayidx, align 8, !dbg !82
  %conv = sitofp i32 %i.0 to double, !dbg !83
  %idxprom1 = sext i32 %i.0 to i64, !dbg !84
  %arrayidx2 = getelementptr inbounds double, double* %b, i64 %idxprom1, !dbg !84
  store double %conv, double* %arrayidx2, align 8, !dbg !85
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !86, metadata !34), !dbg !87
  br label %for.cond.3, !dbg !88

for.cond.3:                                       ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ]
  %cmp4 = icmp sle i32 %j.0, %i.0, !dbg !90
  %41 = icmp sgt i32 %n, 0, !dbg !92
  %smax21 = select i1 %41, i32 %n, i32 0, !dbg !92
  %42 = zext i32 %smax21 to i64, !dbg !92
  %43 = mul i64 16000, %42, !dbg !92
  %44 = add i64 %8, %43, !dbg !92
  %45 = add i64 %44, 8, !dbg !92
  %46 = mul i32 1, %smax21, !dbg !92
  %47 = add i32 1, %46, !dbg !92
  %48 = mul i32 1, %47, !dbg !92
  %49 = add i32 0, %48, !dbg !92
  %50 = ptrtoint [2000 x double]* undef to i64, !dbg !92
  %51 = sub i64 %45, %5, !dbg !92
  %52 = mul i64 8, %42, !dbg !92
  %53 = add i64 %4, %52, !dbg !92
  %54 = add i64 %53, 8, !dbg !92
  %55 = add i64 %3, %52, !dbg !92
  %56 = add i64 %55, 8, !dbg !92
  %57 = icmp sgt i32 %n, 0, !dbg !92
  %smax23 = select i1 %57, i32 %n, i32 0, !dbg !92
  %58 = zext i32 %smax23 to i64, !dbg !92
  %59 = mul i64 16000, %58, !dbg !92
  %60 = add i64 %2, %59, !dbg !92
  %61 = add i64 %60, 8, !dbg !92
  %62 = mul i32 1, %smax23, !dbg !92
  %63 = add i32 1, %62, !dbg !92
  %64 = mul i32 1, %63, !dbg !92
  %65 = add i32 0, %64, !dbg !92
  %66 = ptrtoint [2000 x double]* %L to i64, !dbg !92
  %67 = sub i64 %61, %66, !dbg !92
  %68 = mul i64 8, %58, !dbg !92
  %69 = add i64 %1, %68, !dbg !92
  %70 = add i64 %69, 8, !dbg !92
  %71 = add i64 %0, %68, !dbg !92
  %72 = add i64 %71, 8, !dbg !92
  br i1 %cmp4, label %for.body.6, label %for.end, !dbg !92

for.body.6:                                       ; preds = %for.cond.3
  %add = add nsw i32 %i.0, %n, !dbg !93
  %sub = sub nsw i32 %add, %j.0, !dbg !94
  %add7 = add nsw i32 %sub, 1, !dbg !95
  %conv8 = sitofp i32 %add7 to double, !dbg !96
  %mul = fmul double %conv8, 2.000000e+00, !dbg !97
  %conv9 = sitofp i32 %n to double, !dbg !98
  %div = fdiv double %mul, %conv9, !dbg !99
  %idxprom10 = sext i32 %j.0 to i64, !dbg !100
  %idxprom11 = sext i32 %i.0 to i64, !dbg !100
  %arrayidx12 = getelementptr inbounds [2000 x double], [2000 x double]* %L, i64 %idxprom11, !dbg !100
  %arrayidx13 = getelementptr inbounds [2000 x double], [2000 x double]* %arrayidx12, i32 0, i64 %idxprom10, !dbg !100
  store double %div, double* %arrayidx13, align 8, !dbg !101
  br label %for.inc, !dbg !100

for.inc:                                          ; preds = %for.body.6
  %inc = add nsw i32 %j.0, 1, !dbg !102
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !86, metadata !34), !dbg !87
  br label %for.cond.3, !dbg !103

for.end:                                          ; preds = %for.cond.3
  br label %for.inc.14, !dbg !104

for.inc.14:                                       ; preds = %for.end
  %inc15 = add nsw i32 %i.0, 1, !dbg !105
  call void @llvm.dbg.value(metadata i32 %inc15, i64 0, metadata !73, metadata !34), !dbg !74
  br label %for.cond, !dbg !106

for.end.16:                                       ; preds = %for.cond
  ret void, !dbg !107
}

; Function Attrs: nounwind uwtable
define internal void @kernel_trisolv(i32 %n, [2000 x double]* %L, double* %x, double* %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !108, metadata !34), !dbg !109
  call void @llvm.dbg.value(metadata [2000 x double]* %L, i64 0, metadata !110, metadata !34), !dbg !111
  call void @llvm.dbg.value(metadata double* %x, i64 0, metadata !112, metadata !34), !dbg !113
  call void @llvm.dbg.value(metadata double* %b, i64 0, metadata !114, metadata !34), !dbg !115
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !116, metadata !34), !dbg !117
  %0 = ptrtoint double* %b to i64
  %x40 = ptrtoint double* %x to i64
  %L30 = ptrtoint [2000 x double]* %L to i64
  %1 = ptrtoint double* %b to i64
  %2 = ptrtoint double* undef to i64
  %3 = ptrtoint [2000 x double]* undef to i64
  %4 = ptrtoint double* undef to i64
  %5 = ptrtoint double* undef to i64
  %6 = ptrtoint [2000 x double]* undef to i64
  %b60 = ptrtoint double* %b to i64
  %7 = ptrtoint double* undef to i64
  %8 = ptrtoint [2000 x double]* undef to i64
  %9 = add i64 %L30, 0, !dbg !118
  %10 = inttoptr i64 %9 to [2000 x double]*
  %11 = add i64 %x40, 0, !dbg !118
  %12 = add i64 %b60, 8, !dbg !118
  %13 = add i64 %b60, 8, !dbg !118
  %14 = add i64 %L30, 0, !dbg !118
  %15 = inttoptr i64 %14 to [2000 x double]*
  %16 = add i64 %x40, 0, !dbg !118
  %17 = add i64 %1, 8, !dbg !118
  %18 = add i64 %1, 8, !dbg !118
  br label %for.cond, !dbg !120

for.cond:                                         ; preds = %for.inc.22, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc23, %for.inc.22 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !121
  %19 = icmp ult [2000 x double]* %L, %L, !dbg !118
  %umin = select i1 %19, [2000 x double]* %L, [2000 x double]* %L, !dbg !118
  %20 = icmp ugt [2000 x double]* %L, %10, !dbg !118
  %umax = select i1 %20, [2000 x double]* %L, [2000 x double]* %10, !dbg !118
  %umax31 = ptrtoint [2000 x double]* %umax to i64
  %21 = add i64 %umax31, 8, !dbg !118
  %22 = icmp ult [2000 x double]* %L, %L, !dbg !118
  %umin32 = select i1 %22, [2000 x double]* %L, [2000 x double]* %L, !dbg !118
  %23 = icmp ugt [2000 x double]* %L, %10, !dbg !118
  %umax33 = select i1 %23, [2000 x double]* %L, [2000 x double]* %10, !dbg !118
  %umax3334 = ptrtoint [2000 x double]* %umax33 to i64
  %24 = add i64 %umax3334, 8, !dbg !118
  %25 = icmp sgt i32 %n, 0, !dbg !118
  %smax = select i1 %25, i32 %n, i32 0, !dbg !118
  %26 = mul i32 1, %smax, !dbg !118
  %27 = add i32 0, %26, !dbg !118
  %28 = ptrtoint [2000 x double]* %umin to i64, !dbg !118
  %29 = sub i64 %21, %28, !dbg !118
  %30 = icmp ult double* %x, %x, !dbg !118
  %umin35 = select i1 %30, double* %x, double* %x, !dbg !118
  %31 = icmp ult double* %x, %umin35, !dbg !118
  %umin36 = select i1 %31, double* %x, double* %umin35, !dbg !118
  %32 = icmp ult double* %x, %umin36, !dbg !118
  %umin37 = select i1 %32, double* %x, double* %umin36, !dbg !118
  %33 = icmp ult double* %x, %umin37, !dbg !118
  %umin38 = select i1 %33, double* %x, double* %umin37, !dbg !118
  %34 = icmp ult double* %x, %umin38, !dbg !118
  %umin39 = select i1 %34, double* %x, double* %umin38, !dbg !118
  %35 = icmp ugt i64 %11, %x40, !dbg !118
  %umax41 = select i1 %35, i64 %11, i64 %x40, !dbg !118
  %umax4142 = inttoptr i64 %umax41 to double*
  %36 = icmp ugt double* %x, %umax4142, !dbg !118
  %umax43 = select i1 %36, double* %x, double* %umax4142, !dbg !118
  %37 = icmp ugt double* %x, %umax43, !dbg !118
  %umax44 = select i1 %37, double* %x, double* %umax43, !dbg !118
  %38 = icmp ugt double* %x, %umax44, !dbg !118
  %umax45 = select i1 %38, double* %x, double* %umax44, !dbg !118
  %39 = icmp ugt double* %x, %umax45, !dbg !118
  %umax46 = select i1 %39, double* %x, double* %umax45, !dbg !118
  %umax4647 = ptrtoint double* %umax46 to i64
  %40 = add i64 %umax4647, 8, !dbg !118
  %41 = icmp ult double* %x, %x, !dbg !118
  %umin48 = select i1 %41, double* %x, double* %x, !dbg !118
  %42 = icmp ult double* %x, %umin48, !dbg !118
  %umin49 = select i1 %42, double* %x, double* %umin48, !dbg !118
  %43 = icmp ult double* %x, %umin49, !dbg !118
  %umin50 = select i1 %43, double* %x, double* %umin49, !dbg !118
  %44 = icmp ult double* %x, %umin50, !dbg !118
  %umin51 = select i1 %44, double* %x, double* %umin50, !dbg !118
  %45 = icmp ult double* %x, %umin51, !dbg !118
  %umin52 = select i1 %45, double* %x, double* %umin51, !dbg !118
  %46 = icmp ugt i64 %11, %x40, !dbg !118
  %umax53 = select i1 %46, i64 %11, i64 %x40, !dbg !118
  %umax5354 = inttoptr i64 %umax53 to double*
  %47 = icmp ugt double* %x, %umax5354, !dbg !118
  %umax55 = select i1 %47, double* %x, double* %umax5354, !dbg !118
  %48 = icmp ugt double* %x, %umax55, !dbg !118
  %umax56 = select i1 %48, double* %x, double* %umax55, !dbg !118
  %49 = icmp ugt double* %x, %umax56, !dbg !118
  %umax57 = select i1 %49, double* %x, double* %umax56, !dbg !118
  %50 = icmp ugt double* %x, %umax57, !dbg !118
  %umax58 = select i1 %50, double* %x, double* %umax57, !dbg !118
  %umax5859 = ptrtoint double* %umax58 to i64
  %51 = add i64 %umax5859, 8, !dbg !118
  %52 = ptrtoint double* %umin39 to i64, !dbg !118
  %53 = sub i64 %40, %52, !dbg !118
  %54 = ptrtoint double* undef to i64, !dbg !118
  %55 = sub i64 %12, %1, !dbg !118
  %56 = icmp ult [2000 x double]* %L, %L, !dbg !118
  %umin88 = select i1 %56, [2000 x double]* %L, [2000 x double]* %L, !dbg !118
  %57 = icmp ugt [2000 x double]* %L, %15, !dbg !118
  %umax89 = select i1 %57, [2000 x double]* %L, [2000 x double]* %15, !dbg !118
  %umax8990 = ptrtoint [2000 x double]* %umax89 to i64
  %58 = add i64 %umax8990, 8, !dbg !118
  %59 = icmp ult [2000 x double]* %L, %L, !dbg !118
  %umin91 = select i1 %59, [2000 x double]* %L, [2000 x double]* %L, !dbg !118
  %60 = icmp ugt [2000 x double]* %L, %15, !dbg !118
  %umax92 = select i1 %60, [2000 x double]* %L, [2000 x double]* %15, !dbg !118
  %umax9293 = ptrtoint [2000 x double]* %umax92 to i64
  %61 = add i64 %umax9293, 8, !dbg !118
  %62 = icmp sgt i32 %n, 0, !dbg !118
  %smax94 = select i1 %62, i32 %n, i32 0, !dbg !118
  %63 = mul i32 1, %smax94, !dbg !118
  %64 = add i32 0, %63, !dbg !118
  %65 = ptrtoint [2000 x double]* %umin88 to i64, !dbg !118
  %66 = sub i64 %58, %65, !dbg !118
  %67 = icmp ult double* %x, %x, !dbg !118
  %umin95 = select i1 %67, double* %x, double* %x, !dbg !118
  %68 = icmp ult double* %x, %umin95, !dbg !118
  %umin96 = select i1 %68, double* %x, double* %umin95, !dbg !118
  %69 = icmp ult double* %x, %umin96, !dbg !118
  %umin97 = select i1 %69, double* %x, double* %umin96, !dbg !118
  %70 = icmp ult double* %x, %umin97, !dbg !118
  %umin98 = select i1 %70, double* %x, double* %umin97, !dbg !118
  %71 = icmp ult double* %x, %umin98, !dbg !118
  %umin99 = select i1 %71, double* %x, double* %umin98, !dbg !118
  %72 = icmp ugt i64 %16, %x40, !dbg !118
  %umax100 = select i1 %72, i64 %16, i64 %x40, !dbg !118
  %umax100101 = inttoptr i64 %umax100 to double*
  %73 = icmp ugt double* %x, %umax100101, !dbg !118
  %umax102 = select i1 %73, double* %x, double* %umax100101, !dbg !118
  %74 = icmp ugt double* %x, %umax102, !dbg !118
  %umax103 = select i1 %74, double* %x, double* %umax102, !dbg !118
  %75 = icmp ugt double* %x, %umax103, !dbg !118
  %umax104 = select i1 %75, double* %x, double* %umax103, !dbg !118
  %76 = icmp ugt double* %x, %umax104, !dbg !118
  %umax105 = select i1 %76, double* %x, double* %umax104, !dbg !118
  %umax105106 = ptrtoint double* %umax105 to i64
  %77 = add i64 %umax105106, 8, !dbg !118
  %78 = icmp ult double* %x, %x, !dbg !118
  %umin107 = select i1 %78, double* %x, double* %x, !dbg !118
  %79 = icmp ult double* %x, %umin107, !dbg !118
  %umin108 = select i1 %79, double* %x, double* %umin107, !dbg !118
  %80 = icmp ult double* %x, %umin108, !dbg !118
  %umin109 = select i1 %80, double* %x, double* %umin108, !dbg !118
  %81 = icmp ult double* %x, %umin109, !dbg !118
  %umin110 = select i1 %81, double* %x, double* %umin109, !dbg !118
  %82 = icmp ult double* %x, %umin110, !dbg !118
  %umin111 = select i1 %82, double* %x, double* %umin110, !dbg !118
  %83 = icmp ugt i64 %16, %x40, !dbg !118
  %umax112 = select i1 %83, i64 %16, i64 %x40, !dbg !118
  %umax112113 = inttoptr i64 %umax112 to double*
  %84 = icmp ugt double* %x, %umax112113, !dbg !118
  %umax114 = select i1 %84, double* %x, double* %umax112113, !dbg !118
  %85 = icmp ugt double* %x, %umax114, !dbg !118
  %umax115 = select i1 %85, double* %x, double* %umax114, !dbg !118
  %86 = icmp ugt double* %x, %umax115, !dbg !118
  %umax116 = select i1 %86, double* %x, double* %umax115, !dbg !118
  %87 = icmp ugt double* %x, %umax116, !dbg !118
  %umax117 = select i1 %87, double* %x, double* %umax116, !dbg !118
  %umax117118 = ptrtoint double* %umax117 to i64
  %88 = add i64 %umax117118, 8, !dbg !118
  %89 = ptrtoint double* %umin99 to i64, !dbg !118
  %90 = sub i64 %77, %89, !dbg !118
  %91 = ptrtoint double* undef to i64, !dbg !118
  %92 = sub i64 %17, %0, !dbg !118
  br i1 %cmp, label %for.body, label %for.end.24, !dbg !118

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64, !dbg !123
  %arrayidx = getelementptr inbounds double, double* %b, i64 %idxprom, !dbg !123
  %tmp4 = load double, double* %arrayidx, align 8, !dbg !123
  %idxprom1 = sext i32 %i.0 to i64, !dbg !125
  %arrayidx2 = getelementptr inbounds double, double* %x, i64 %idxprom1, !dbg !125
  store double %tmp4, double* %arrayidx2, align 8, !dbg !126
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !127, metadata !34), !dbg !128
  br label %for.cond.3, !dbg !129

for.cond.3:                                       ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ]
  %cmp4 = icmp slt i32 %j.0, %i.0, !dbg !131
  %93 = icmp ult [2000 x double]* %L, %L, !dbg !133
  %umin61 = select i1 %93, [2000 x double]* %L, [2000 x double]* %L, !dbg !133
  %94 = icmp sgt i32 %n, 0, !dbg !133
  %smax62 = select i1 %94, i32 %n, i32 0, !dbg !133
  %95 = zext i32 %smax62 to i64, !dbg !133
  %96 = mul i64 16000, %95, !dbg !133
  %97 = add i64 %L30, %96, !dbg !133
  %98 = mul i64 16008, %95, !dbg !133
  %99 = add i64 %L30, %98, !dbg !133
  %100 = icmp ugt i64 %99, %97, !dbg !133
  %umax63 = select i1 %100, i64 %99, i64 %97, !dbg !133
  %101 = add i64 %umax63, 8, !dbg !133
  %102 = icmp ult [2000 x double]* %L, %L, !dbg !133
  %umin64 = select i1 %102, [2000 x double]* %L, [2000 x double]* %L, !dbg !133
  %103 = icmp ugt i64 %99, %97, !dbg !133
  %umax65 = select i1 %103, i64 %99, i64 %97, !dbg !133
  %104 = add i64 %umax65, 8, !dbg !133
  %105 = mul i32 1, %smax62, !dbg !133
  %106 = add i32 0, %105, !dbg !133
  %107 = mul i32 1, %106, !dbg !133
  %108 = add i32 0, %107, !dbg !133
  %109 = ptrtoint [2000 x double]* %umin61 to i64, !dbg !133
  %110 = sub i64 %101, %109, !dbg !133
  %111 = icmp ult double* %x, %x, !dbg !133
  %umin66 = select i1 %111, double* %x, double* %x, !dbg !133
  %112 = icmp ult double* %x, %umin66, !dbg !133
  %umin67 = select i1 %112, double* %x, double* %umin66, !dbg !133
  %113 = icmp ult double* %x, %umin67, !dbg !133
  %umin68 = select i1 %113, double* %x, double* %umin67, !dbg !133
  %114 = icmp ult double* %x, %umin68, !dbg !133
  %umin69 = select i1 %114, double* %x, double* %umin68, !dbg !133
  %115 = icmp ult double* %x, %umin69, !dbg !133
  %umin70 = select i1 %115, double* %x, double* %umin69, !dbg !133
  %116 = mul i64 8, %95, !dbg !133
  %117 = add i64 %x40, %116, !dbg !133
  %118 = inttoptr i64 %117 to double*
  %119 = icmp ugt double* %x, %118, !dbg !133
  %umax71 = select i1 %119, double* %x, double* %118, !dbg !133
  %umax7172 = ptrtoint double* %umax71 to i64
  %120 = icmp ugt i64 %117, %umax7172, !dbg !133
  %umax73 = select i1 %120, i64 %117, i64 %umax7172, !dbg !133
  %121 = icmp ugt i64 %117, %umax73, !dbg !133
  %umax74 = select i1 %121, i64 %117, i64 %umax73, !dbg !133
  %122 = icmp ugt i64 %117, %umax74, !dbg !133
  %umax75 = select i1 %122, i64 %117, i64 %umax74, !dbg !133
  %123 = icmp ugt i64 %117, %umax75, !dbg !133
  %umax76 = select i1 %123, i64 %117, i64 %umax75, !dbg !133
  %124 = add i64 %umax76, 8, !dbg !133
  %125 = icmp ult double* %x, %x, !dbg !133
  %umin77 = select i1 %125, double* %x, double* %x, !dbg !133
  %126 = icmp ult double* %x, %umin77, !dbg !133
  %umin78 = select i1 %126, double* %x, double* %umin77, !dbg !133
  %127 = icmp ult double* %x, %umin78, !dbg !133
  %umin79 = select i1 %127, double* %x, double* %umin78, !dbg !133
  %128 = icmp ult double* %x, %umin79, !dbg !133
  %umin80 = select i1 %128, double* %x, double* %umin79, !dbg !133
  %129 = icmp ult double* %x, %umin80, !dbg !133
  %umin81 = select i1 %129, double* %x, double* %umin80, !dbg !133
  %130 = icmp ugt double* %x, %118, !dbg !133
  %umax82 = select i1 %130, double* %x, double* %118, !dbg !133
  %umax8283 = ptrtoint double* %umax82 to i64
  %131 = icmp ugt i64 %117, %umax8283, !dbg !133
  %umax84 = select i1 %131, i64 %117, i64 %umax8283, !dbg !133
  %132 = icmp ugt i64 %117, %umax84, !dbg !133
  %umax85 = select i1 %132, i64 %117, i64 %umax84, !dbg !133
  %133 = icmp ugt i64 %117, %umax85, !dbg !133
  %umax86 = select i1 %133, i64 %117, i64 %umax85, !dbg !133
  %134 = icmp ugt i64 %117, %umax86, !dbg !133
  %umax87 = select i1 %134, i64 %117, i64 %umax86, !dbg !133
  %135 = add i64 %umax87, 8, !dbg !133
  %136 = ptrtoint double* %umin70 to i64, !dbg !133
  %137 = sub i64 %124, %136, !dbg !133
  %138 = mul i64 8, %95, !dbg !133
  %139 = add i64 %1, %138, !dbg !133
  %140 = add i64 %139, 8, !dbg !133
  %141 = icmp ult [2000 x double]* %L, %L, !dbg !133
  %umin119 = select i1 %141, [2000 x double]* %L, [2000 x double]* %L, !dbg !133
  %142 = icmp sgt i32 %n, 0, !dbg !133
  %smax120 = select i1 %142, i32 %n, i32 0, !dbg !133
  %143 = zext i32 %smax120 to i64, !dbg !133
  %144 = mul i64 16000, %143, !dbg !133
  %145 = add i64 %L30, %144, !dbg !133
  %146 = mul i64 16008, %143, !dbg !133
  %147 = add i64 %L30, %146, !dbg !133
  %148 = icmp ugt i64 %147, %145, !dbg !133
  %umax121 = select i1 %148, i64 %147, i64 %145, !dbg !133
  %149 = add i64 %umax121, 8, !dbg !133
  %150 = icmp ult [2000 x double]* %L, %L, !dbg !133
  %umin122 = select i1 %150, [2000 x double]* %L, [2000 x double]* %L, !dbg !133
  %151 = icmp ugt i64 %147, %145, !dbg !133
  %umax123 = select i1 %151, i64 %147, i64 %145, !dbg !133
  %152 = add i64 %umax123, 8, !dbg !133
  %153 = mul i32 1, %smax120, !dbg !133
  %154 = add i32 0, %153, !dbg !133
  %155 = mul i32 1, %154, !dbg !133
  %156 = add i32 0, %155, !dbg !133
  %157 = ptrtoint [2000 x double]* %umin119 to i64, !dbg !133
  %158 = sub i64 %149, %157, !dbg !133
  %159 = icmp ult double* %x, %x, !dbg !133
  %umin124 = select i1 %159, double* %x, double* %x, !dbg !133
  %160 = icmp ult double* %x, %umin124, !dbg !133
  %umin125 = select i1 %160, double* %x, double* %umin124, !dbg !133
  %161 = icmp ult double* %x, %umin125, !dbg !133
  %umin126 = select i1 %161, double* %x, double* %umin125, !dbg !133
  %162 = icmp ult double* %x, %umin126, !dbg !133
  %umin127 = select i1 %162, double* %x, double* %umin126, !dbg !133
  %163 = icmp ult double* %x, %umin127, !dbg !133
  %umin128 = select i1 %163, double* %x, double* %umin127, !dbg !133
  %164 = mul i64 8, %143, !dbg !133
  %165 = add i64 %x40, %164, !dbg !133
  %166 = inttoptr i64 %165 to double*
  %167 = icmp ugt double* %x, %166, !dbg !133
  %umax129 = select i1 %167, double* %x, double* %166, !dbg !133
  %umax129130 = ptrtoint double* %umax129 to i64
  %168 = icmp ugt i64 %165, %umax129130, !dbg !133
  %umax131 = select i1 %168, i64 %165, i64 %umax129130, !dbg !133
  %169 = icmp ugt i64 %165, %umax131, !dbg !133
  %umax132 = select i1 %169, i64 %165, i64 %umax131, !dbg !133
  %170 = icmp ugt i64 %165, %umax132, !dbg !133
  %umax133 = select i1 %170, i64 %165, i64 %umax132, !dbg !133
  %171 = icmp ugt i64 %165, %umax133, !dbg !133
  %umax134 = select i1 %171, i64 %165, i64 %umax133, !dbg !133
  %172 = add i64 %umax134, 8, !dbg !133
  %173 = icmp ult double* %x, %x, !dbg !133
  %umin135 = select i1 %173, double* %x, double* %x, !dbg !133
  %174 = icmp ult double* %x, %umin135, !dbg !133
  %umin136 = select i1 %174, double* %x, double* %umin135, !dbg !133
  %175 = icmp ult double* %x, %umin136, !dbg !133
  %umin137 = select i1 %175, double* %x, double* %umin136, !dbg !133
  %176 = icmp ult double* %x, %umin137, !dbg !133
  %umin138 = select i1 %176, double* %x, double* %umin137, !dbg !133
  %177 = icmp ult double* %x, %umin138, !dbg !133
  %umin139 = select i1 %177, double* %x, double* %umin138, !dbg !133
  %178 = icmp ugt double* %x, %166, !dbg !133
  %umax140 = select i1 %178, double* %x, double* %166, !dbg !133
  %umax140141 = ptrtoint double* %umax140 to i64
  %179 = icmp ugt i64 %165, %umax140141, !dbg !133
  %umax142 = select i1 %179, i64 %165, i64 %umax140141, !dbg !133
  %180 = icmp ugt i64 %165, %umax142, !dbg !133
  %umax143 = select i1 %180, i64 %165, i64 %umax142, !dbg !133
  %181 = icmp ugt i64 %165, %umax143, !dbg !133
  %umax144 = select i1 %181, i64 %165, i64 %umax143, !dbg !133
  %182 = icmp ugt i64 %165, %umax144, !dbg !133
  %umax145 = select i1 %182, i64 %165, i64 %umax144, !dbg !133
  %183 = add i64 %umax145, 8, !dbg !133
  %184 = ptrtoint double* %umin128 to i64, !dbg !133
  %185 = sub i64 %172, %184, !dbg !133
  %186 = mul i64 8, %143, !dbg !133
  %187 = add i64 %0, %186, !dbg !133
  %188 = add i64 %187, 8, !dbg !133
  br i1 %cmp4, label %for.body.5, label %for.end, !dbg !133

for.body.5:                                       ; preds = %for.cond.3
  %idxprom6 = sext i32 %j.0 to i64, !dbg !134
  %idxprom7 = sext i32 %i.0 to i64, !dbg !134
  %arrayidx8 = getelementptr inbounds [2000 x double], [2000 x double]* %L, i64 %idxprom7, !dbg !134
  %arrayidx9 = getelementptr inbounds [2000 x double], [2000 x double]* %arrayidx8, i32 0, i64 %idxprom6, !dbg !134
  %tmp12 = load double, double* %arrayidx9, align 8, !dbg !134
  %idxprom10 = sext i32 %j.0 to i64, !dbg !135
  %arrayidx11 = getelementptr inbounds double, double* %x, i64 %idxprom10, !dbg !135
  %tmp15 = load double, double* %arrayidx11, align 8, !dbg !135
  %mul = fmul double %tmp12, %tmp15, !dbg !136
  %idxprom12 = sext i32 %i.0 to i64, !dbg !137
  %arrayidx13 = getelementptr inbounds double, double* %x, i64 %idxprom12, !dbg !137
  %tmp18 = load double, double* %arrayidx13, align 8, !dbg !138
  %sub = fsub double %tmp18, %mul, !dbg !138
  store double %sub, double* %arrayidx13, align 8, !dbg !138
  br label %for.inc, !dbg !137

for.inc:                                          ; preds = %for.body.5
  %inc = add nsw i32 %j.0, 1, !dbg !139
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !127, metadata !34), !dbg !128
  br label %for.cond.3, !dbg !140

for.end:                                          ; preds = %for.cond.3
  %idxprom14 = sext i32 %i.0 to i64, !dbg !141
  %arrayidx15 = getelementptr inbounds double, double* %x, i64 %idxprom14, !dbg !141
  %tmp22 = load double, double* %arrayidx15, align 8, !dbg !141
  %idxprom16 = sext i32 %i.0 to i64, !dbg !142
  %idxprom17 = sext i32 %i.0 to i64, !dbg !142
  %arrayidx18 = getelementptr inbounds [2000 x double], [2000 x double]* %L, i64 %idxprom17, !dbg !142
  %arrayidx19 = getelementptr inbounds [2000 x double], [2000 x double]* %arrayidx18, i32 0, i64 %idxprom16, !dbg !142
  %tmp26 = load double, double* %arrayidx19, align 8, !dbg !142
  %div = fdiv double %tmp22, %tmp26, !dbg !143
  %idxprom20 = sext i32 %i.0 to i64, !dbg !144
  %arrayidx21 = getelementptr inbounds double, double* %x, i64 %idxprom20, !dbg !144
  store double %div, double* %arrayidx21, align 8, !dbg !145
  br label %for.inc.22, !dbg !146

for.inc.22:                                       ; preds = %for.end
  %inc23 = add nsw i32 %i.0, 1, !dbg !147
  call void @llvm.dbg.value(metadata i32 %inc23, i64 0, metadata !116, metadata !34), !dbg !117
  br label %for.cond, !dbg !148

for.end.24:                                       ; preds = %for.cond
  ret void, !dbg !149
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #3

; Function Attrs: nounwind uwtable
define internal void @print_array(i32 %n, double* %x) #0 {
entry:
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !150, metadata !34), !dbg !151
  call void @llvm.dbg.value(metadata double* %x, i64 0, metadata !152, metadata !34), !dbg !153
  %tmp = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !154
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0)), !dbg !154
  %tmp1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !155
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !155
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !156, metadata !34), !dbg !157
  br label %for.cond, !dbg !158

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !160
  br i1 %cmp, label %for.body, label %for.end, !dbg !162

for.body:                                         ; preds = %for.cond
  %tmp4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !163
  %idxprom = sext i32 %i.0 to i64, !dbg !165
  %arrayidx = getelementptr inbounds double, double* %x, i64 %idxprom, !dbg !165
  %tmp7 = load double, double* %arrayidx, align 8, !dbg !165
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), double %tmp7), !dbg !166
  %rem = srem i32 %i.0, 20, !dbg !167
  %cmp3 = icmp eq i32 %rem, 0, !dbg !169
  br i1 %cmp3, label %if.then, label %if.end, !dbg !170

if.then:                                          ; preds = %for.body
  %tmp9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !171
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)), !dbg !172
  br label %if.end, !dbg !172

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !173

for.inc:                                          ; preds = %if.end
  %inc = add nsw i32 %i.0, 1, !dbg !174
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !156, metadata !34), !dbg !157
  br label %for.cond, !dbg !175

for.end:                                          ; preds = %for.cond
  %tmp11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !176
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp11, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !176
  %tmp12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !177
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp12, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0)), !dbg !177
  ret void, !dbg !178
}

; Function Attrs: nounwind
declare void @free(i8*) #4

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!30, !31}
!llvm.ident = !{!32}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !13)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/solvers/trisolv")
!2 = !{}
!3 = !{!4, !9, !12, !6}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 256000000, align: 64, elements: !7)
!6 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!7 = !{!8, !8}
!8 = !DISubrange(count: 2000)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 128000, align: 64, elements: !11)
!11 = !{!8}
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!13 = !{!14, !22, !26, !27}
!14 = !DISubprogram(name: "main", scope: !15, file: !15, line: 75, type: !16, isLocal: false, isDefinition: true, scopeLine: 75, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!15 = !DIFile(filename: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/solvers/trisolv/tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/solvers/trisolv")
!16 = !DISubroutineType(types: !17)
!17 = !{!18, !18, !19}
!18 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64, align: 64)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64, align: 64)
!21 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!22 = !DISubprogram(name: "init_array", scope: !15, file: !15, line: 24, type: !23, isLocal: true, isDefinition: true, scopeLine: 27, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, [2000 x double]*, double*, double*)* @init_array, variables: !2)
!23 = !DISubroutineType(types: !24)
!24 = !{null, !18, !9, !25, !25}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!26 = !DISubprogram(name: "kernel_trisolv", scope: !15, file: !15, line: 59, type: !23, isLocal: true, isDefinition: true, scopeLine: 62, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, [2000 x double]*, double*, double*)* @kernel_trisolv, variables: !2)
!27 = !DISubprogram(name: "print_array", scope: !15, file: !15, line: 40, type: !28, isLocal: true, isDefinition: true, scopeLine: 43, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, double*)* @print_array, variables: !2)
!28 = !DISubroutineType(types: !29)
!29 = !{null, !18, !25}
!30 = !{i32 2, !"Dwarf Version", i32 4}
!31 = !{i32 2, !"Debug Info Version", i32 3}
!32 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!33 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !14, file: !15, line: 75, type: !18)
!34 = !DIExpression()
!35 = !DILocation(line: 75, column: 14, scope: !14)
!36 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !14, file: !15, line: 75, type: !19)
!37 = !DILocation(line: 75, column: 27, scope: !14)
!38 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !14, file: !15, line: 77, type: !18)
!39 = !DILocation(line: 77, column: 7, scope: !14)
!40 = !DILocation(line: 80, column: 3, scope: !14)
!41 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "L", scope: !14, file: !15, line: 80, type: !4)
!42 = !DILocation(line: 81, column: 3, scope: !14)
!43 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !14, file: !15, line: 81, type: !9)
!44 = !DILocation(line: 82, column: 3, scope: !14)
!45 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !14, file: !15, line: 82, type: !9)
!46 = !DILocation(line: 85, column: 17, scope: !14)
!47 = !DILocation(line: 85, column: 37, scope: !14)
!48 = !DILocation(line: 85, column: 57, scope: !14)
!49 = !DILocation(line: 85, column: 3, scope: !14)
!50 = !DILocation(line: 91, column: 21, scope: !14)
!51 = !DILocation(line: 91, column: 41, scope: !14)
!52 = !DILocation(line: 91, column: 61, scope: !14)
!53 = !DILocation(line: 91, column: 3, scope: !14)
!54 = !DILocation(line: 99, column: 3, scope: !55)
!55 = distinct !DILexicalBlock(scope: !14, file: !15, line: 99, column: 3)
!56 = !DILocation(line: 99, column: 3, scope: !57)
!57 = !DILexicalBlockFile(scope: !55, file: !15, discriminator: 1)
!58 = !DILocation(line: 99, column: 3, scope: !14)
!59 = !DILocation(line: 99, column: 3, scope: !60)
!60 = !DILexicalBlockFile(scope: !55, file: !15, discriminator: 2)
!61 = !DILocation(line: 102, column: 3, scope: !14)
!62 = !DILocation(line: 103, column: 3, scope: !14)
!63 = !DILocation(line: 104, column: 3, scope: !14)
!64 = !DILocation(line: 106, column: 3, scope: !14)
!65 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !22, file: !15, line: 24, type: !18)
!66 = !DILocation(line: 24, column: 28, scope: !22)
!67 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "L", arg: 2, scope: !22, file: !15, line: 25, type: !9)
!68 = !DILocation(line: 25, column: 34, scope: !22)
!69 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 3, scope: !22, file: !15, line: 26, type: !25)
!70 = !DILocation(line: 26, column: 34, scope: !22)
!71 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 4, scope: !22, file: !15, line: 27, type: !25)
!72 = !DILocation(line: 27, column: 34, scope: !22)
!73 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !22, file: !15, line: 28, type: !18)
!74 = !DILocation(line: 28, column: 7, scope: !22)
!75 = !DILocation(line: 30, column: 3, scope: !76)
!76 = distinct !DILexicalBlock(scope: !22, file: !15, line: 30, column: 3)
!77 = !DILocation(line: 30, column: 8, scope: !76)
!78 = !DILocation(line: 30, column: 17, scope: !79)
!79 = distinct !DILexicalBlock(scope: !76, file: !15, line: 30, column: 3)
!80 = !DILocation(line: 31, column: 5, scope: !81)
!81 = distinct !DILexicalBlock(scope: !79, file: !15, line: 30, column: 27)
!82 = !DILocation(line: 31, column: 10, scope: !81)
!83 = !DILocation(line: 32, column: 12, scope: !81)
!84 = !DILocation(line: 32, column: 5, scope: !81)
!85 = !DILocation(line: 32, column: 10, scope: !81)
!86 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !22, file: !15, line: 28, type: !18)
!87 = !DILocation(line: 28, column: 10, scope: !22)
!88 = !DILocation(line: 33, column: 10, scope: !89)
!89 = distinct !DILexicalBlock(scope: !81, file: !15, line: 33, column: 5)
!90 = !DILocation(line: 33, column: 19, scope: !91)
!91 = distinct !DILexicalBlock(scope: !89, file: !15, line: 33, column: 5)
!92 = !DILocation(line: 33, column: 5, scope: !89)
!93 = !DILocation(line: 34, column: 31, scope: !91)
!94 = !DILocation(line: 34, column: 35, scope: !91)
!95 = !DILocation(line: 34, column: 39, scope: !91)
!96 = !DILocation(line: 34, column: 17, scope: !91)
!97 = !DILocation(line: 34, column: 44, scope: !91)
!98 = !DILocation(line: 34, column: 50, scope: !91)
!99 = !DILocation(line: 34, column: 48, scope: !91)
!100 = !DILocation(line: 34, column: 7, scope: !91)
!101 = !DILocation(line: 34, column: 15, scope: !91)
!102 = !DILocation(line: 33, column: 26, scope: !91)
!103 = !DILocation(line: 33, column: 5, scope: !91)
!104 = !DILocation(line: 35, column: 3, scope: !81)
!105 = !DILocation(line: 30, column: 23, scope: !79)
!106 = !DILocation(line: 30, column: 3, scope: !79)
!107 = !DILocation(line: 36, column: 1, scope: !22)
!108 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !26, file: !15, line: 59, type: !18)
!109 = !DILocation(line: 59, column: 32, scope: !26)
!110 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "L", arg: 2, scope: !26, file: !15, line: 60, type: !9)
!111 = !DILocation(line: 60, column: 38, scope: !26)
!112 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 3, scope: !26, file: !15, line: 61, type: !25)
!113 = !DILocation(line: 61, column: 38, scope: !26)
!114 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 4, scope: !26, file: !15, line: 62, type: !25)
!115 = !DILocation(line: 62, column: 38, scope: !26)
!116 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !15, line: 63, type: !18)
!117 = !DILocation(line: 63, column: 7, scope: !26)
!118 = !DILocation(line: 66, column: 3, scope: !119)
!119 = distinct !DILexicalBlock(scope: !26, file: !15, line: 66, column: 3)
!120 = !DILocation(line: 66, column: 8, scope: !119)
!121 = !DILocation(line: 66, column: 17, scope: !122)
!122 = distinct !DILexicalBlock(scope: !119, file: !15, line: 66, column: 3)
!123 = !DILocation(line: 67, column: 12, scope: !124)
!124 = distinct !DILexicalBlock(scope: !122, file: !15, line: 66, column: 31)
!125 = !DILocation(line: 67, column: 5, scope: !124)
!126 = !DILocation(line: 67, column: 10, scope: !124)
!127 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !26, file: !15, line: 63, type: !18)
!128 = !DILocation(line: 63, column: 10, scope: !26)
!129 = !DILocation(line: 68, column: 10, scope: !130)
!130 = distinct !DILexicalBlock(scope: !124, file: !15, line: 68, column: 5)
!131 = !DILocation(line: 68, column: 19, scope: !132)
!132 = distinct !DILexicalBlock(scope: !130, file: !15, line: 68, column: 5)
!133 = !DILocation(line: 68, column: 5, scope: !130)
!134 = !DILocation(line: 69, column: 15, scope: !132)
!135 = !DILocation(line: 69, column: 25, scope: !132)
!136 = !DILocation(line: 69, column: 23, scope: !132)
!137 = !DILocation(line: 69, column: 7, scope: !132)
!138 = !DILocation(line: 69, column: 12, scope: !132)
!139 = !DILocation(line: 68, column: 25, scope: !132)
!140 = !DILocation(line: 68, column: 5, scope: !132)
!141 = !DILocation(line: 70, column: 12, scope: !124)
!142 = !DILocation(line: 70, column: 19, scope: !124)
!143 = !DILocation(line: 70, column: 17, scope: !124)
!144 = !DILocation(line: 70, column: 5, scope: !124)
!145 = !DILocation(line: 70, column: 10, scope: !124)
!146 = !DILocation(line: 71, column: 3, scope: !124)
!147 = !DILocation(line: 66, column: 27, scope: !122)
!148 = !DILocation(line: 66, column: 3, scope: !122)
!149 = !DILocation(line: 73, column: 1, scope: !26)
!150 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !27, file: !15, line: 40, type: !18)
!151 = !DILocation(line: 40, column: 29, scope: !27)
!152 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 2, scope: !27, file: !15, line: 41, type: !25)
!153 = !DILocation(line: 41, column: 35, scope: !27)
!154 = !DILocation(line: 46, column: 3, scope: !27)
!155 = !DILocation(line: 47, column: 3, scope: !27)
!156 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !27, file: !15, line: 44, type: !18)
!157 = !DILocation(line: 44, column: 7, scope: !27)
!158 = !DILocation(line: 48, column: 8, scope: !159)
!159 = distinct !DILexicalBlock(scope: !27, file: !15, line: 48, column: 3)
!160 = !DILocation(line: 48, column: 17, scope: !161)
!161 = distinct !DILexicalBlock(scope: !159, file: !15, line: 48, column: 3)
!162 = !DILocation(line: 48, column: 3, scope: !159)
!163 = !DILocation(line: 49, column: 13, scope: !164)
!164 = distinct !DILexicalBlock(scope: !161, file: !15, line: 48, column: 27)
!165 = !DILocation(line: 49, column: 58, scope: !164)
!166 = !DILocation(line: 49, column: 5, scope: !164)
!167 = !DILocation(line: 50, column: 11, scope: !168)
!168 = distinct !DILexicalBlock(scope: !164, file: !15, line: 50, column: 9)
!169 = !DILocation(line: 50, column: 16, scope: !168)
!170 = !DILocation(line: 50, column: 9, scope: !164)
!171 = !DILocation(line: 51, column: 15, scope: !168)
!172 = !DILocation(line: 51, column: 7, scope: !168)
!173 = !DILocation(line: 52, column: 3, scope: !164)
!174 = !DILocation(line: 48, column: 23, scope: !161)
!175 = !DILocation(line: 48, column: 3, scope: !161)
!176 = !DILocation(line: 53, column: 3, scope: !27)
!177 = !DILocation(line: 54, column: 3, scope: !27)
!178 = !DILocation(line: 55, column: 1, scope: !27)
