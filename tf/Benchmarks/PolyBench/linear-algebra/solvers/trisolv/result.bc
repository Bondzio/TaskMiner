; ModuleID = '/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/solvers/trisolv/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [23 x i8] c"==BEGIN DUMP_ARRAYS==\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"begin dump: %s\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"%0.2lf \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"\0Aend   dump: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"==END   DUMP_ARRAYS==\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %n = alloca i32, align 4
  %L = alloca [2000 x [2000 x double]]*, align 8
  %x = alloca [2000 x double]*, align 8
  %b = alloca [2000 x double]*, align 8
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !33, metadata !34), !dbg !35
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !36, metadata !34), !dbg !37
  call void @llvm.dbg.declare(metadata i32* %n, metadata !38, metadata !34), !dbg !39
  store i32 2000, i32* %n, align 4, !dbg !39
  call void @llvm.dbg.declare(metadata [2000 x [2000 x double]]** %L, metadata !40, metadata !34), !dbg !41
  %call = call i8* @polybench_alloc_data(i64 4000000, i32 8), !dbg !41
  %0 = bitcast i8* %call to [2000 x [2000 x double]]*, !dbg !41
  store [2000 x [2000 x double]]* %0, [2000 x [2000 x double]]** %L, align 8, !dbg !41
  call void @llvm.dbg.declare(metadata [2000 x double]** %x, metadata !42, metadata !34), !dbg !43
  %call1 = call i8* @polybench_alloc_data(i64 2000, i32 8), !dbg !43
  %1 = bitcast i8* %call1 to [2000 x double]*, !dbg !43
  store [2000 x double]* %1, [2000 x double]** %x, align 8, !dbg !43
  call void @llvm.dbg.declare(metadata [2000 x double]** %b, metadata !44, metadata !34), !dbg !45
  %call2 = call i8* @polybench_alloc_data(i64 2000, i32 8), !dbg !45
  %2 = bitcast i8* %call2 to [2000 x double]*, !dbg !45
  store [2000 x double]* %2, [2000 x double]** %b, align 8, !dbg !45
  %3 = load i32, i32* %n, align 4, !dbg !46
  %4 = load [2000 x [2000 x double]]*, [2000 x [2000 x double]]** %L, align 8, !dbg !47
  %arraydecay = getelementptr inbounds [2000 x [2000 x double]], [2000 x [2000 x double]]* %4, i32 0, i32 0, !dbg !47
  %5 = load [2000 x double]*, [2000 x double]** %x, align 8, !dbg !48
  %arraydecay3 = getelementptr inbounds [2000 x double], [2000 x double]* %5, i32 0, i32 0, !dbg !48
  %6 = load [2000 x double]*, [2000 x double]** %b, align 8, !dbg !49
  %arraydecay4 = getelementptr inbounds [2000 x double], [2000 x double]* %6, i32 0, i32 0, !dbg !49
  call void @init_array(i32 %3, [2000 x double]* %arraydecay, double* %arraydecay3, double* %arraydecay4), !dbg !50
  %7 = load i32, i32* %n, align 4, !dbg !51
  %8 = load [2000 x [2000 x double]]*, [2000 x [2000 x double]]** %L, align 8, !dbg !52
  %arraydecay5 = getelementptr inbounds [2000 x [2000 x double]], [2000 x [2000 x double]]* %8, i32 0, i32 0, !dbg !52
  %9 = load [2000 x double]*, [2000 x double]** %x, align 8, !dbg !53
  %arraydecay6 = getelementptr inbounds [2000 x double], [2000 x double]* %9, i32 0, i32 0, !dbg !53
  %10 = load [2000 x double]*, [2000 x double]** %b, align 8, !dbg !54
  %arraydecay7 = getelementptr inbounds [2000 x double], [2000 x double]* %10, i32 0, i32 0, !dbg !54
  call void @kernel_trisolv(i32 %7, [2000 x double]* %arraydecay5, double* %arraydecay6, double* %arraydecay7), !dbg !55
  %11 = load i32, i32* %argc.addr, align 4, !dbg !56
  %cmp = icmp sgt i32 %11, 42, !dbg !56
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !56

land.lhs.true:                                    ; preds = %entry
  %12 = load i8**, i8*** %argv.addr, align 8, !dbg !58
  %arrayidx = getelementptr inbounds i8*, i8** %12, i64 0, !dbg !58
  %13 = load i8*, i8** %arrayidx, align 8, !dbg !58
  %call8 = call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0)) #5, !dbg !58
  %tobool = icmp ne i32 %call8, 0, !dbg !58
  br i1 %tobool, label %if.end, label %if.then, !dbg !60

if.then:                                          ; preds = %land.lhs.true
  %14 = load i32, i32* %n, align 4, !dbg !61
  %15 = load [2000 x double]*, [2000 x double]** %x, align 8, !dbg !61
  %arraydecay9 = getelementptr inbounds [2000 x double], [2000 x double]* %15, i32 0, i32 0, !dbg !61
  call void @print_array(i32 %14, double* %arraydecay9), !dbg !61
  br label %if.end, !dbg !61

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %16 = load [2000 x [2000 x double]]*, [2000 x [2000 x double]]** %L, align 8, !dbg !63
  %17 = bitcast [2000 x [2000 x double]]* %16 to i8*, !dbg !63
  call void @free(i8* %17) #6, !dbg !63
  %18 = load [2000 x double]*, [2000 x double]** %x, align 8, !dbg !64
  %19 = bitcast [2000 x double]* %18 to i8*, !dbg !64
  call void @free(i8* %19) #6, !dbg !64
  %20 = load [2000 x double]*, [2000 x double]** %b, align 8, !dbg !65
  %21 = bitcast [2000 x double]* %20 to i8*, !dbg !65
  call void @free(i8* %21) #6, !dbg !65
  ret i32 0, !dbg !66
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i8* @polybench_alloc_data(i64, i32) #2

; Function Attrs: nounwind uwtable
define internal void @init_array(i32 %n, [2000 x double]* %L, double* %x, double* %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %L.addr = alloca [2000 x double]*, align 8
  %x.addr = alloca double*, align 8
  %b.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !67, metadata !34), !dbg !68
  store [2000 x double]* %L, [2000 x double]** %L.addr, align 8
  call void @llvm.dbg.declare(metadata [2000 x double]** %L.addr, metadata !69, metadata !34), !dbg !70
  store double* %x, double** %x.addr, align 8
  call void @llvm.dbg.declare(metadata double** %x.addr, metadata !71, metadata !34), !dbg !72
  store double* %b, double** %b.addr, align 8
  call void @llvm.dbg.declare(metadata double** %b.addr, metadata !73, metadata !34), !dbg !74
  call void @llvm.dbg.declare(metadata i32* %i, metadata !75, metadata !34), !dbg !76
  call void @llvm.dbg.declare(metadata i32* %j, metadata !77, metadata !34), !dbg !78
  store i32 0, i32* %i, align 4, !dbg !79
  br label %for.cond, !dbg !81

for.cond:                                         ; preds = %for.inc.14, %entry
  %0 = load i32, i32* %i, align 4, !dbg !82
  %1 = load i32, i32* %n.addr, align 4, !dbg !86
  %cmp = icmp slt i32 %0, %1, !dbg !87
  br i1 %cmp, label %for.body, label %for.end.16, !dbg !88

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !89
  %idxprom = sext i32 %2 to i64, !dbg !91
  %3 = load double*, double** %x.addr, align 8, !dbg !91
  %arrayidx = getelementptr inbounds double, double* %3, i64 %idxprom, !dbg !91
  store double -9.990000e+02, double* %arrayidx, align 8, !dbg !92
  %4 = load i32, i32* %i, align 4, !dbg !93
  %conv = sitofp i32 %4 to double, !dbg !93
  %5 = load i32, i32* %i, align 4, !dbg !94
  %idxprom1 = sext i32 %5 to i64, !dbg !95
  %6 = load double*, double** %b.addr, align 8, !dbg !95
  %arrayidx2 = getelementptr inbounds double, double* %6, i64 %idxprom1, !dbg !95
  store double %conv, double* %arrayidx2, align 8, !dbg !96
  store i32 0, i32* %j, align 4, !dbg !97
  br label %for.cond.3, !dbg !99

for.cond.3:                                       ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4, !dbg !100
  %8 = load i32, i32* %i, align 4, !dbg !104
  %cmp4 = icmp sle i32 %7, %8, !dbg !105
  br i1 %cmp4, label %for.body.6, label %for.end, !dbg !106

for.body.6:                                       ; preds = %for.cond.3
  %9 = load i32, i32* %i, align 4, !dbg !107
  %10 = load i32, i32* %n.addr, align 4, !dbg !108
  %add = add nsw i32 %9, %10, !dbg !109
  %11 = load i32, i32* %j, align 4, !dbg !110
  %sub = sub nsw i32 %add, %11, !dbg !111
  %add7 = add nsw i32 %sub, 1, !dbg !112
  %conv8 = sitofp i32 %add7 to double, !dbg !113
  %mul = fmul double %conv8, 2.000000e+00, !dbg !114
  %12 = load i32, i32* %n.addr, align 4, !dbg !115
  %conv9 = sitofp i32 %12 to double, !dbg !115
  %div = fdiv double %mul, %conv9, !dbg !116
  %13 = load i32, i32* %j, align 4, !dbg !117
  %idxprom10 = sext i32 %13 to i64, !dbg !118
  %14 = load i32, i32* %i, align 4, !dbg !119
  %idxprom11 = sext i32 %14 to i64, !dbg !118
  %15 = load [2000 x double]*, [2000 x double]** %L.addr, align 8, !dbg !118
  %arrayidx12 = getelementptr inbounds [2000 x double], [2000 x double]* %15, i64 %idxprom11, !dbg !118
  %arrayidx13 = getelementptr inbounds [2000 x double], [2000 x double]* %arrayidx12, i32 0, i64 %idxprom10, !dbg !118
  store double %div, double* %arrayidx13, align 8, !dbg !120
  br label %for.inc, !dbg !118

for.inc:                                          ; preds = %for.body.6
  %16 = load i32, i32* %j, align 4, !dbg !121
  %inc = add nsw i32 %16, 1, !dbg !121
  store i32 %inc, i32* %j, align 4, !dbg !121
  br label %for.cond.3, !dbg !122

for.end:                                          ; preds = %for.cond.3
  br label %for.inc.14, !dbg !123

for.inc.14:                                       ; preds = %for.end
  %17 = load i32, i32* %i, align 4, !dbg !124
  %inc15 = add nsw i32 %17, 1, !dbg !124
  store i32 %inc15, i32* %i, align 4, !dbg !124
  br label %for.cond, !dbg !125

for.end.16:                                       ; preds = %for.cond
  ret void, !dbg !126
}

; Function Attrs: nounwind uwtable
define internal void @kernel_trisolv(i32 %n, [2000 x double]* %L, double* %x, double* %b) #0 {
entry:
  %n.addr = alloca i32, align 4
  %L.addr = alloca [2000 x double]*, align 8
  %x.addr = alloca double*, align 8
  %b.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !127, metadata !34), !dbg !128
  store [2000 x double]* %L, [2000 x double]** %L.addr, align 8
  call void @llvm.dbg.declare(metadata [2000 x double]** %L.addr, metadata !129, metadata !34), !dbg !130
  store double* %x, double** %x.addr, align 8
  call void @llvm.dbg.declare(metadata double** %x.addr, metadata !131, metadata !34), !dbg !132
  store double* %b, double** %b.addr, align 8
  call void @llvm.dbg.declare(metadata double** %b.addr, metadata !133, metadata !34), !dbg !134
  call void @llvm.dbg.declare(metadata i32* %i, metadata !135, metadata !34), !dbg !136
  call void @llvm.dbg.declare(metadata i32* %j, metadata !137, metadata !34), !dbg !138
  store i32 0, i32* %i, align 4, !dbg !139
  br label %for.cond, !dbg !141

for.cond:                                         ; preds = %for.inc.22, %entry
  %0 = load i32, i32* %i, align 4, !dbg !142
  %1 = load i32, i32* %n.addr, align 4, !dbg !146
  %cmp = icmp slt i32 %0, %1, !dbg !147
  br i1 %cmp, label %for.body, label %for.end.24, !dbg !148

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !149
  %idxprom = sext i32 %2 to i64, !dbg !151
  %3 = load double*, double** %b.addr, align 8, !dbg !151
  %arrayidx = getelementptr inbounds double, double* %3, i64 %idxprom, !dbg !151
  %4 = load double, double* %arrayidx, align 8, !dbg !151
  %5 = load i32, i32* %i, align 4, !dbg !152
  %idxprom1 = sext i32 %5 to i64, !dbg !153
  %6 = load double*, double** %x.addr, align 8, !dbg !153
  %arrayidx2 = getelementptr inbounds double, double* %6, i64 %idxprom1, !dbg !153
  store double %4, double* %arrayidx2, align 8, !dbg !154
  store i32 0, i32* %j, align 4, !dbg !155
  br label %for.cond.3, !dbg !157

for.cond.3:                                       ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4, !dbg !158
  %8 = load i32, i32* %i, align 4, !dbg !162
  %cmp4 = icmp slt i32 %7, %8, !dbg !163
  br i1 %cmp4, label %for.body.5, label %for.end, !dbg !164

for.body.5:                                       ; preds = %for.cond.3
  %9 = load i32, i32* %j, align 4, !dbg !165
  %idxprom6 = sext i32 %9 to i64, !dbg !166
  %10 = load i32, i32* %i, align 4, !dbg !167
  %idxprom7 = sext i32 %10 to i64, !dbg !166
  %11 = load [2000 x double]*, [2000 x double]** %L.addr, align 8, !dbg !166
  %arrayidx8 = getelementptr inbounds [2000 x double], [2000 x double]* %11, i64 %idxprom7, !dbg !166
  %arrayidx9 = getelementptr inbounds [2000 x double], [2000 x double]* %arrayidx8, i32 0, i64 %idxprom6, !dbg !166
  %12 = load double, double* %arrayidx9, align 8, !dbg !166
  %13 = load i32, i32* %j, align 4, !dbg !168
  %idxprom10 = sext i32 %13 to i64, !dbg !169
  %14 = load double*, double** %x.addr, align 8, !dbg !169
  %arrayidx11 = getelementptr inbounds double, double* %14, i64 %idxprom10, !dbg !169
  %15 = load double, double* %arrayidx11, align 8, !dbg !169
  %mul = fmul double %12, %15, !dbg !170
  %16 = load i32, i32* %i, align 4, !dbg !171
  %idxprom12 = sext i32 %16 to i64, !dbg !172
  %17 = load double*, double** %x.addr, align 8, !dbg !172
  %arrayidx13 = getelementptr inbounds double, double* %17, i64 %idxprom12, !dbg !172
  %18 = load double, double* %arrayidx13, align 8, !dbg !173
  %sub = fsub double %18, %mul, !dbg !173
  store double %sub, double* %arrayidx13, align 8, !dbg !173
  br label %for.inc, !dbg !172

for.inc:                                          ; preds = %for.body.5
  %19 = load i32, i32* %j, align 4, !dbg !174
  %inc = add nsw i32 %19, 1, !dbg !174
  store i32 %inc, i32* %j, align 4, !dbg !174
  br label %for.cond.3, !dbg !175

for.end:                                          ; preds = %for.cond.3
  %20 = load i32, i32* %i, align 4, !dbg !176
  %idxprom14 = sext i32 %20 to i64, !dbg !177
  %21 = load double*, double** %x.addr, align 8, !dbg !177
  %arrayidx15 = getelementptr inbounds double, double* %21, i64 %idxprom14, !dbg !177
  %22 = load double, double* %arrayidx15, align 8, !dbg !177
  %23 = load i32, i32* %i, align 4, !dbg !178
  %idxprom16 = sext i32 %23 to i64, !dbg !179
  %24 = load i32, i32* %i, align 4, !dbg !180
  %idxprom17 = sext i32 %24 to i64, !dbg !179
  %25 = load [2000 x double]*, [2000 x double]** %L.addr, align 8, !dbg !179
  %arrayidx18 = getelementptr inbounds [2000 x double], [2000 x double]* %25, i64 %idxprom17, !dbg !179
  %arrayidx19 = getelementptr inbounds [2000 x double], [2000 x double]* %arrayidx18, i32 0, i64 %idxprom16, !dbg !179
  %26 = load double, double* %arrayidx19, align 8, !dbg !179
  %div = fdiv double %22, %26, !dbg !181
  %27 = load i32, i32* %i, align 4, !dbg !182
  %idxprom20 = sext i32 %27 to i64, !dbg !183
  %28 = load double*, double** %x.addr, align 8, !dbg !183
  %arrayidx21 = getelementptr inbounds double, double* %28, i64 %idxprom20, !dbg !183
  store double %div, double* %arrayidx21, align 8, !dbg !184
  br label %for.inc.22, !dbg !185

for.inc.22:                                       ; preds = %for.end
  %29 = load i32, i32* %i, align 4, !dbg !186
  %inc23 = add nsw i32 %29, 1, !dbg !186
  store i32 %inc23, i32* %i, align 4, !dbg !186
  br label %for.cond, !dbg !187

for.end.24:                                       ; preds = %for.cond
  ret void, !dbg !188
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #3

; Function Attrs: nounwind uwtable
define internal void @print_array(i32 %n, double* %x) #0 {
entry:
  %n.addr = alloca i32, align 4
  %x.addr = alloca double*, align 8
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !189, metadata !34), !dbg !190
  store double* %x, double** %x.addr, align 8
  call void @llvm.dbg.declare(metadata double** %x.addr, metadata !191, metadata !34), !dbg !192
  call void @llvm.dbg.declare(metadata i32* %i, metadata !193, metadata !34), !dbg !194
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !195
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0)), !dbg !195
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !196
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !196
  store i32 0, i32* %i, align 4, !dbg !197
  br label %for.cond, !dbg !199

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !200
  %3 = load i32, i32* %n.addr, align 4, !dbg !204
  %cmp = icmp slt i32 %2, %3, !dbg !205
  br i1 %cmp, label %for.body, label %for.end, !dbg !206

for.body:                                         ; preds = %for.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !207
  %5 = load i32, i32* %i, align 4, !dbg !209
  %idxprom = sext i32 %5 to i64, !dbg !210
  %6 = load double*, double** %x.addr, align 8, !dbg !210
  %arrayidx = getelementptr inbounds double, double* %6, i64 %idxprom, !dbg !210
  %7 = load double, double* %arrayidx, align 8, !dbg !210
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), double %7), !dbg !211
  %8 = load i32, i32* %i, align 4, !dbg !212
  %rem = srem i32 %8, 20, !dbg !214
  %cmp3 = icmp eq i32 %rem, 0, !dbg !215
  br i1 %cmp3, label %if.then, label %if.end, !dbg !216

if.then:                                          ; preds = %for.body
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !217
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)), !dbg !218
  br label %if.end, !dbg !218

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !219

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !220
  %inc = add nsw i32 %10, 1, !dbg !220
  store i32 %inc, i32* %i, align 4, !dbg !220
  br label %for.cond, !dbg !221

for.end:                                          ; preds = %for.cond
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !222
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0)), !dbg !222
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !223
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0)), !dbg !223
  ret void, !dbg !224
}

; Function Attrs: nounwind
declare void @free(i8*) #4

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!30, !31}
!llvm.ident = !{!32}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !13)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/solvers/trisolv")
!2 = !{}
!3 = !{!4, !9, !12, !6}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 256000000, align: 64, elements: !7)
!6 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!7 = !{!8, !8}
!8 = !DISubrange(count: 2000)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 128000, align: 64, elements: !11)
!11 = !{!8}
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!13 = !{!14, !22, !26, !27}
!14 = !DISubprogram(name: "main", scope: !15, file: !15, line: 75, type: !16, isLocal: false, isDefinition: true, scopeLine: 75, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!15 = !DIFile(filename: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/solvers/trisolv/tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/linear-algebra/solvers/trisolv")
!16 = !DISubroutineType(types: !17)
!17 = !{!18, !18, !19}
!18 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64, align: 64)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64, align: 64)
!21 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!22 = !DISubprogram(name: "init_array", scope: !15, file: !15, line: 24, type: !23, isLocal: true, isDefinition: true, scopeLine: 27, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, [2000 x double]*, double*, double*)* @init_array, variables: !2)
!23 = !DISubroutineType(types: !24)
!24 = !{null, !18, !9, !25, !25}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!26 = !DISubprogram(name: "kernel_trisolv", scope: !15, file: !15, line: 59, type: !23, isLocal: true, isDefinition: true, scopeLine: 62, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, [2000 x double]*, double*, double*)* @kernel_trisolv, variables: !2)
!27 = !DISubprogram(name: "print_array", scope: !15, file: !15, line: 40, type: !28, isLocal: true, isDefinition: true, scopeLine: 43, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, double*)* @print_array, variables: !2)
!28 = !DISubroutineType(types: !29)
!29 = !{null, !18, !25}
!30 = !{i32 2, !"Dwarf Version", i32 4}
!31 = !{i32 2, !"Debug Info Version", i32 3}
!32 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!33 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !14, file: !15, line: 75, type: !18)
!34 = !DIExpression()
!35 = !DILocation(line: 75, column: 14, scope: !14)
!36 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !14, file: !15, line: 75, type: !19)
!37 = !DILocation(line: 75, column: 27, scope: !14)
!38 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !14, file: !15, line: 77, type: !18)
!39 = !DILocation(line: 77, column: 7, scope: !14)
!40 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "L", scope: !14, file: !15, line: 80, type: !4)
!41 = !DILocation(line: 80, column: 3, scope: !14)
!42 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !14, file: !15, line: 81, type: !9)
!43 = !DILocation(line: 81, column: 3, scope: !14)
!44 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "b", scope: !14, file: !15, line: 82, type: !9)
!45 = !DILocation(line: 82, column: 3, scope: !14)
!46 = !DILocation(line: 85, column: 14, scope: !14)
!47 = !DILocation(line: 85, column: 17, scope: !14)
!48 = !DILocation(line: 85, column: 37, scope: !14)
!49 = !DILocation(line: 85, column: 57, scope: !14)
!50 = !DILocation(line: 85, column: 3, scope: !14)
!51 = !DILocation(line: 91, column: 18, scope: !14)
!52 = !DILocation(line: 91, column: 21, scope: !14)
!53 = !DILocation(line: 91, column: 41, scope: !14)
!54 = !DILocation(line: 91, column: 61, scope: !14)
!55 = !DILocation(line: 91, column: 3, scope: !14)
!56 = !DILocation(line: 99, column: 3, scope: !57)
!57 = distinct !DILexicalBlock(scope: !14, file: !15, line: 99, column: 3)
!58 = !DILocation(line: 99, column: 3, scope: !59)
!59 = !DILexicalBlockFile(scope: !57, file: !15, discriminator: 1)
!60 = !DILocation(line: 99, column: 3, scope: !14)
!61 = !DILocation(line: 99, column: 3, scope: !62)
!62 = !DILexicalBlockFile(scope: !57, file: !15, discriminator: 2)
!63 = !DILocation(line: 102, column: 3, scope: !14)
!64 = !DILocation(line: 103, column: 3, scope: !14)
!65 = !DILocation(line: 104, column: 3, scope: !14)
!66 = !DILocation(line: 106, column: 3, scope: !14)
!67 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !22, file: !15, line: 24, type: !18)
!68 = !DILocation(line: 24, column: 28, scope: !22)
!69 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "L", arg: 2, scope: !22, file: !15, line: 25, type: !9)
!70 = !DILocation(line: 25, column: 34, scope: !22)
!71 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 3, scope: !22, file: !15, line: 26, type: !25)
!72 = !DILocation(line: 26, column: 34, scope: !22)
!73 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 4, scope: !22, file: !15, line: 27, type: !25)
!74 = !DILocation(line: 27, column: 34, scope: !22)
!75 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !22, file: !15, line: 28, type: !18)
!76 = !DILocation(line: 28, column: 7, scope: !22)
!77 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !22, file: !15, line: 28, type: !18)
!78 = !DILocation(line: 28, column: 10, scope: !22)
!79 = !DILocation(line: 30, column: 10, scope: !80)
!80 = distinct !DILexicalBlock(scope: !22, file: !15, line: 30, column: 3)
!81 = !DILocation(line: 30, column: 8, scope: !80)
!82 = !DILocation(line: 30, column: 15, scope: !83)
!83 = !DILexicalBlockFile(scope: !84, file: !15, discriminator: 2)
!84 = !DILexicalBlockFile(scope: !85, file: !15, discriminator: 1)
!85 = distinct !DILexicalBlock(scope: !80, file: !15, line: 30, column: 3)
!86 = !DILocation(line: 30, column: 19, scope: !85)
!87 = !DILocation(line: 30, column: 17, scope: !85)
!88 = !DILocation(line: 30, column: 3, scope: !80)
!89 = !DILocation(line: 31, column: 7, scope: !90)
!90 = distinct !DILexicalBlock(scope: !85, file: !15, line: 30, column: 27)
!91 = !DILocation(line: 31, column: 5, scope: !90)
!92 = !DILocation(line: 31, column: 10, scope: !90)
!93 = !DILocation(line: 32, column: 12, scope: !90)
!94 = !DILocation(line: 32, column: 7, scope: !90)
!95 = !DILocation(line: 32, column: 5, scope: !90)
!96 = !DILocation(line: 32, column: 10, scope: !90)
!97 = !DILocation(line: 33, column: 12, scope: !98)
!98 = distinct !DILexicalBlock(scope: !90, file: !15, line: 33, column: 5)
!99 = !DILocation(line: 33, column: 10, scope: !98)
!100 = !DILocation(line: 33, column: 17, scope: !101)
!101 = !DILexicalBlockFile(scope: !102, file: !15, discriminator: 2)
!102 = !DILexicalBlockFile(scope: !103, file: !15, discriminator: 1)
!103 = distinct !DILexicalBlock(scope: !98, file: !15, line: 33, column: 5)
!104 = !DILocation(line: 33, column: 22, scope: !103)
!105 = !DILocation(line: 33, column: 19, scope: !103)
!106 = !DILocation(line: 33, column: 5, scope: !98)
!107 = !DILocation(line: 34, column: 29, scope: !103)
!108 = !DILocation(line: 34, column: 33, scope: !103)
!109 = !DILocation(line: 34, column: 31, scope: !103)
!110 = !DILocation(line: 34, column: 37, scope: !103)
!111 = !DILocation(line: 34, column: 35, scope: !103)
!112 = !DILocation(line: 34, column: 39, scope: !103)
!113 = !DILocation(line: 34, column: 17, scope: !103)
!114 = !DILocation(line: 34, column: 44, scope: !103)
!115 = !DILocation(line: 34, column: 50, scope: !103)
!116 = !DILocation(line: 34, column: 48, scope: !103)
!117 = !DILocation(line: 34, column: 12, scope: !103)
!118 = !DILocation(line: 34, column: 7, scope: !103)
!119 = !DILocation(line: 34, column: 9, scope: !103)
!120 = !DILocation(line: 34, column: 15, scope: !103)
!121 = !DILocation(line: 33, column: 26, scope: !103)
!122 = !DILocation(line: 33, column: 5, scope: !103)
!123 = !DILocation(line: 35, column: 3, scope: !90)
!124 = !DILocation(line: 30, column: 23, scope: !85)
!125 = !DILocation(line: 30, column: 3, scope: !85)
!126 = !DILocation(line: 36, column: 1, scope: !22)
!127 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !26, file: !15, line: 59, type: !18)
!128 = !DILocation(line: 59, column: 32, scope: !26)
!129 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "L", arg: 2, scope: !26, file: !15, line: 60, type: !9)
!130 = !DILocation(line: 60, column: 38, scope: !26)
!131 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 3, scope: !26, file: !15, line: 61, type: !25)
!132 = !DILocation(line: 61, column: 38, scope: !26)
!133 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 4, scope: !26, file: !15, line: 62, type: !25)
!134 = !DILocation(line: 62, column: 38, scope: !26)
!135 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !15, line: 63, type: !18)
!136 = !DILocation(line: 63, column: 7, scope: !26)
!137 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !26, file: !15, line: 63, type: !18)
!138 = !DILocation(line: 63, column: 10, scope: !26)
!139 = !DILocation(line: 66, column: 10, scope: !140)
!140 = distinct !DILexicalBlock(scope: !26, file: !15, line: 66, column: 3)
!141 = !DILocation(line: 66, column: 8, scope: !140)
!142 = !DILocation(line: 66, column: 15, scope: !143)
!143 = !DILexicalBlockFile(scope: !144, file: !15, discriminator: 2)
!144 = !DILexicalBlockFile(scope: !145, file: !15, discriminator: 1)
!145 = distinct !DILexicalBlock(scope: !140, file: !15, line: 66, column: 3)
!146 = !DILocation(line: 66, column: 19, scope: !145)
!147 = !DILocation(line: 66, column: 17, scope: !145)
!148 = !DILocation(line: 66, column: 3, scope: !140)
!149 = !DILocation(line: 67, column: 14, scope: !150)
!150 = distinct !DILexicalBlock(scope: !145, file: !15, line: 66, column: 31)
!151 = !DILocation(line: 67, column: 12, scope: !150)
!152 = !DILocation(line: 67, column: 7, scope: !150)
!153 = !DILocation(line: 67, column: 5, scope: !150)
!154 = !DILocation(line: 67, column: 10, scope: !150)
!155 = !DILocation(line: 68, column: 12, scope: !156)
!156 = distinct !DILexicalBlock(scope: !150, file: !15, line: 68, column: 5)
!157 = !DILocation(line: 68, column: 10, scope: !156)
!158 = !DILocation(line: 68, column: 17, scope: !159)
!159 = !DILexicalBlockFile(scope: !160, file: !15, discriminator: 2)
!160 = !DILexicalBlockFile(scope: !161, file: !15, discriminator: 1)
!161 = distinct !DILexicalBlock(scope: !156, file: !15, line: 68, column: 5)
!162 = !DILocation(line: 68, column: 21, scope: !161)
!163 = !DILocation(line: 68, column: 19, scope: !161)
!164 = !DILocation(line: 68, column: 5, scope: !156)
!165 = !DILocation(line: 69, column: 20, scope: !161)
!166 = !DILocation(line: 69, column: 15, scope: !161)
!167 = !DILocation(line: 69, column: 17, scope: !161)
!168 = !DILocation(line: 69, column: 27, scope: !161)
!169 = !DILocation(line: 69, column: 25, scope: !161)
!170 = !DILocation(line: 69, column: 23, scope: !161)
!171 = !DILocation(line: 69, column: 9, scope: !161)
!172 = !DILocation(line: 69, column: 7, scope: !161)
!173 = !DILocation(line: 69, column: 12, scope: !161)
!174 = !DILocation(line: 68, column: 25, scope: !161)
!175 = !DILocation(line: 68, column: 5, scope: !161)
!176 = !DILocation(line: 70, column: 14, scope: !150)
!177 = !DILocation(line: 70, column: 12, scope: !150)
!178 = !DILocation(line: 70, column: 24, scope: !150)
!179 = !DILocation(line: 70, column: 19, scope: !150)
!180 = !DILocation(line: 70, column: 21, scope: !150)
!181 = !DILocation(line: 70, column: 17, scope: !150)
!182 = !DILocation(line: 70, column: 7, scope: !150)
!183 = !DILocation(line: 70, column: 5, scope: !150)
!184 = !DILocation(line: 70, column: 10, scope: !150)
!185 = !DILocation(line: 71, column: 3, scope: !150)
!186 = !DILocation(line: 66, column: 27, scope: !145)
!187 = !DILocation(line: 66, column: 3, scope: !145)
!188 = !DILocation(line: 73, column: 1, scope: !26)
!189 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !27, file: !15, line: 40, type: !18)
!190 = !DILocation(line: 40, column: 29, scope: !27)
!191 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 2, scope: !27, file: !15, line: 41, type: !25)
!192 = !DILocation(line: 41, column: 35, scope: !27)
!193 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !27, file: !15, line: 44, type: !18)
!194 = !DILocation(line: 44, column: 7, scope: !27)
!195 = !DILocation(line: 46, column: 3, scope: !27)
!196 = !DILocation(line: 47, column: 3, scope: !27)
!197 = !DILocation(line: 48, column: 10, scope: !198)
!198 = distinct !DILexicalBlock(scope: !27, file: !15, line: 48, column: 3)
!199 = !DILocation(line: 48, column: 8, scope: !198)
!200 = !DILocation(line: 48, column: 15, scope: !201)
!201 = !DILexicalBlockFile(scope: !202, file: !15, discriminator: 2)
!202 = !DILexicalBlockFile(scope: !203, file: !15, discriminator: 1)
!203 = distinct !DILexicalBlock(scope: !198, file: !15, line: 48, column: 3)
!204 = !DILocation(line: 48, column: 19, scope: !203)
!205 = !DILocation(line: 48, column: 17, scope: !203)
!206 = !DILocation(line: 48, column: 3, scope: !198)
!207 = !DILocation(line: 49, column: 13, scope: !208)
!208 = distinct !DILexicalBlock(scope: !203, file: !15, line: 48, column: 27)
!209 = !DILocation(line: 49, column: 60, scope: !208)
!210 = !DILocation(line: 49, column: 58, scope: !208)
!211 = !DILocation(line: 49, column: 5, scope: !208)
!212 = !DILocation(line: 50, column: 9, scope: !213)
!213 = distinct !DILexicalBlock(scope: !208, file: !15, line: 50, column: 9)
!214 = !DILocation(line: 50, column: 11, scope: !213)
!215 = !DILocation(line: 50, column: 16, scope: !213)
!216 = !DILocation(line: 50, column: 9, scope: !208)
!217 = !DILocation(line: 51, column: 15, scope: !213)
!218 = !DILocation(line: 51, column: 7, scope: !213)
!219 = !DILocation(line: 52, column: 3, scope: !208)
!220 = !DILocation(line: 48, column: 23, scope: !203)
!221 = !DILocation(line: 48, column: 3, scope: !203)
!222 = !DILocation(line: 53, column: 3, scope: !27)
!223 = !DILocation(line: 54, column: 3, scope: !27)
!224 = !DILocation(line: 55, column: 1, scope: !27)
