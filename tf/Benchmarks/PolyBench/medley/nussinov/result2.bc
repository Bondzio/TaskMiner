; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@polybench_papi_counters_threadid = global i32 0, align 4
@polybench_program_total_flops = global double 0.000000e+00, align 8
@.str = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"/home/gleison/tf/Benchmarks/PolyBench/medley/nussinov/tmp.c\00", align 1
@__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
@polybench_t_start = common global double 0.000000e+00, align 8
@polybench_t_end = common global double 0.000000e+00, align 8
@.str.2 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
@polybench_c_start = common global i64 0, align 8
@polybench_c_end = common global i64 0, align 8
@polybench_inter_array_padding_sz = internal global i64 0, align 8
@stderr = external global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1

; Function Attrs: nounwind uwtable
define void @polybench_flush_cache() #0 {
entry:
  call void @llvm.dbg.value(metadata i32 4194560, i64 0, metadata !44, metadata !45), !dbg !46
  %conv = sext i32 4194560 to i64, !dbg !47
  %call = call noalias i8* @calloc(i64 %conv, i64 8) #5, !dbg !48
  %0 = ptrtoint i8* %call to i64
  %call13 = ptrtoint i8* %call to i64
  %tmp2 = bitcast i8* %call to double*, !dbg !49
  call void @llvm.dbg.value(metadata double* %tmp2, i64 0, metadata !50, metadata !45), !dbg !51
  call void @llvm.dbg.value(metadata double 0.000000e+00, i64 0, metadata !52, metadata !45), !dbg !53
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !54, metadata !45), !dbg !55
  %1 = add i64 %call13, 1, !dbg !56
  %2 = add i64 %call13, 1, !dbg !56
  %3 = add i64 %0, 1, !dbg !56
  %4 = add i64 %0, 1, !dbg !56
  br label %for.cond, !dbg !58

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %tmp.0 = phi double [ 0.000000e+00, %entry ], [ %add, %for.inc ]
  %cmp = icmp slt i32 %i.0, 4194560, !dbg !59
  %5 = ptrtoint i8* undef to i64, !dbg !56
  %6 = sub i64 %1, %0, !dbg !56
  %7 = ptrtoint i8* %call to i64, !dbg !56
  %8 = sub i64 %3, %7, !dbg !56
  br i1 %cmp, label %for.body, label %for.end, !dbg !56

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64, !dbg !61
  %arrayidx = getelementptr inbounds double, double* %tmp2, i64 %idxprom, !dbg !61
  %tmp7 = load double, double* %arrayidx, align 8, !dbg !61
  %add = fadd double %tmp.0, %tmp7, !dbg !62
  call void @llvm.dbg.value(metadata double %add, i64 0, metadata !52, metadata !45), !dbg !53
  br label %for.inc, !dbg !63

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1, !dbg !64
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !54, metadata !45), !dbg !55
  br label %for.cond, !dbg !65

for.end:                                          ; preds = %for.cond
  %tmp.0.lcssa = phi double [ %tmp.0, %for.cond ]
  %cmp2 = fcmp ole double %tmp.0.lcssa, 1.000000e+01, !dbg !66
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !66

cond.true:                                        ; preds = %for.end
  br label %cond.end, !dbg !67

cond.false:                                       ; preds = %for.end
  call void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i32 0, i32 0), i32 115, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__PRETTY_FUNCTION__.polybench_flush_cache, i32 0, i32 0)) #6, !dbg !69
  unreachable, !dbg !69

bb:                                               ; No predecessors!
  br label %cond.end, !dbg !66

cond.end:                                         ; preds = %bb, %cond.true
  %tmp12 = bitcast double* %tmp2 to i8*, !dbg !71
  call void @free(i8* %tmp12) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #2

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) #3

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: nounwind uwtable
define void @polybench_prepare_instruments() #0 {
entry:
  call void @polybench_flush_cache(), !dbg !74
  ret void, !dbg !75
}

; Function Attrs: nounwind uwtable
define void @polybench_timer_start() #0 {
entry:
  call void @polybench_prepare_instruments(), !dbg !76
  %call = call double @rtclock(), !dbg !77
  store double %call, double* @polybench_t_start, align 8, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: nounwind uwtable
define void @polybench_timer_stop() #0 {
entry:
  %call = call double @rtclock(), !dbg !80
  store double %call, double* @polybench_t_end, align 8, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: nounwind uwtable
define void @polybench_timer_print() #0 {
entry:
  %tmp = load double, double* @polybench_t_end, align 8, !dbg !83
  %tmp1 = load double, double* @polybench_t_start, align 8, !dbg !84
  %sub = fsub double %tmp, %tmp1, !dbg !85
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), double %sub), !dbg !86
  ret void, !dbg !87
}

declare i32 @printf(i8*, ...) #4

; Function Attrs: nounwind uwtable
define void @polybench_free_data(i8* %ptr) #0 {
entry:
  call void @llvm.dbg.value(metadata i8* %ptr, i64 0, metadata !88, metadata !45), !dbg !89
  call void @free(i8* %ptr) #5, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: nounwind uwtable
define i8* @polybench_alloc_data(i64 %n, i32 %elt_size) #0 {
entry:
  call void @llvm.dbg.value(metadata i64 %n, i64 0, metadata !92, metadata !45), !dbg !93
  call void @llvm.dbg.value(metadata i32 %elt_size, i64 0, metadata !94, metadata !45), !dbg !95
  call void @llvm.dbg.value(metadata i64 %n, i64 0, metadata !96, metadata !45), !dbg !97
  %conv = sext i32 %elt_size to i64, !dbg !98
  %mul = mul i64 %n, %conv, !dbg !99
  call void @llvm.dbg.value(metadata i64 %mul, i64 0, metadata !96, metadata !45), !dbg !97
  %call = call i8* @xmalloc(i64 %mul), !dbg !100
  call void @llvm.dbg.value(metadata i8* %call, i64 0, metadata !101, metadata !45), !dbg !102
  ret i8* %call, !dbg !103
}

; Function Attrs: nounwind uwtable
define internal i8* @xmalloc(i64 %alloc_sz) #0 {
entry:
  %ret = alloca i8*, align 8
  call void @llvm.dbg.value(metadata i64 %alloc_sz, i64 0, metadata !104, metadata !45), !dbg !105
  call void @llvm.dbg.declare(metadata i8** %ret, metadata !106, metadata !45), !dbg !107
  store i8* null, i8** %ret, align 8, !dbg !107
  %tmp = load i64, i64* @polybench_inter_array_padding_sz, align 8, !dbg !108
  %add = add i64 %tmp, 0, !dbg !108
  store i64 %add, i64* @polybench_inter_array_padding_sz, align 8, !dbg !108
  %tmp2 = load i64, i64* @polybench_inter_array_padding_sz, align 8, !dbg !109
  %add1 = add i64 %alloc_sz, %tmp2, !dbg !110
  call void @llvm.dbg.value(metadata i64 %add1, i64 0, metadata !111, metadata !45), !dbg !112
  %call = call i32 @posix_memalign(i8** %ret, i64 4096, i64 %add1) #5, !dbg !113
  call void @llvm.dbg.value(metadata i32 %call, i64 0, metadata !114, metadata !45), !dbg !115
  %tmp4 = load i8*, i8** %ret, align 8, !dbg !116
  %tobool = icmp ne i8* %tmp4, null, !dbg !116
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !118

lor.lhs.false:                                    ; preds = %entry
  %tobool2 = icmp ne i32 %call, 0, !dbg !119
  br i1 %tobool2, label %if.then, label %if.end, !dbg !121

if.then:                                          ; preds = %lor.lhs.false, %entry
  %tmp6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !122
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %tmp6, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.3, i32 0, i32 0)), !dbg !124
  call void @exit(i32 1) #6, !dbg !125
  unreachable, !dbg !125

if.end:                                           ; preds = %lor.lhs.false
  %tmp7 = load i8*, i8** %ret, align 8, !dbg !126
  ret i8* %tmp7, !dbg !127
}

; Function Attrs: nounwind uwtable
define internal double @rtclock() #0 {
entry:
  ret double 0.000000e+00, !dbg !128
}

; Function Attrs: nounwind
declare i32 @posix_memalign(i8**, i64, i64) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!41, !42}
!llvm.ident = !{!43}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !7, globals: !33)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/medley/nussinov")
!2 = !{}
!3 = !{!4, !6}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!7 = !{!8, !12, !13, !14, !15, !16, !19, !24, !27}
!8 = !DISubprogram(name: "polybench_flush_cache", scope: !9, file: !9, line: 105, type: !10, isLocal: false, isDefinition: true, scopeLine: 105, isOptimized: false, function: void ()* @polybench_flush_cache, variables: !2)
!9 = !DIFile(filename: "/home/gleison/tf/Benchmarks/PolyBench/medley/nussinov/tmp.c", directory: "/home/gleison/tf/Benchmarks/PolyBench/medley/nussinov")
!10 = !DISubroutineType(types: !11)
!11 = !{null}
!12 = !DISubprogram(name: "polybench_prepare_instruments", scope: !9, file: !9, line: 312, type: !10, isLocal: false, isDefinition: true, scopeLine: 312, isOptimized: false, function: void ()* @polybench_prepare_instruments, variables: !2)
!13 = !DISubprogram(name: "polybench_timer_start", scope: !9, file: !9, line: 321, type: !10, isLocal: false, isDefinition: true, scopeLine: 321, isOptimized: false, function: void ()* @polybench_timer_start, variables: !2)
!14 = !DISubprogram(name: "polybench_timer_stop", scope: !9, file: !9, line: 330, type: !10, isLocal: false, isDefinition: true, scopeLine: 330, isOptimized: false, function: void ()* @polybench_timer_stop, variables: !2)
!15 = !DISubprogram(name: "polybench_timer_print", scope: !9, file: !9, line: 341, type: !10, isLocal: false, isDefinition: true, scopeLine: 341, isOptimized: false, function: void ()* @polybench_timer_print, variables: !2)
!16 = !DISubprogram(name: "polybench_free_data", scope: !9, file: !9, line: 477, type: !17, isLocal: false, isDefinition: true, scopeLine: 477, flags: DIFlagPrototyped, isOptimized: false, function: void (i8*)* @polybench_free_data, variables: !2)
!17 = !DISubroutineType(types: !18)
!18 = !{null, !6}
!19 = !DISubprogram(name: "polybench_alloc_data", scope: !9, file: !9, line: 485, type: !20, isLocal: false, isDefinition: true, scopeLine: 485, flags: DIFlagPrototyped, isOptimized: false, function: i8* (i64, i32)* @polybench_alloc_data, variables: !2)
!20 = !DISubroutineType(types: !21)
!21 = !{!6, !22, !23}
!22 = !DIBasicType(name: "long long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!23 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!24 = !DISubprogram(name: "rtclock", scope: !9, file: !9, line: 79, type: !25, isLocal: true, isDefinition: true, scopeLine: 79, isOptimized: false, function: double ()* @rtclock, variables: !2)
!25 = !DISubroutineType(types: !26)
!26 = !{!5}
!27 = !DISubprogram(name: "xmalloc", scope: !9, file: !9, line: 450, type: !28, isLocal: true, isDefinition: true, scopeLine: 450, flags: DIFlagPrototyped, isOptimized: false, function: i8* (i64)* @xmalloc, variables: !2)
!28 = !DISubroutineType(types: !29)
!29 = !{!6, !30}
!30 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !31, line: 62, baseType: !32)
!31 = !DIFile(filename: "/home/gleison/lge/llvm-3.7-src/build-debug/bin/../lib/clang/3.7.0/include/stddef.h", directory: "/home/gleison/tf/Benchmarks/PolyBench/medley/nussinov")
!32 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!33 = !{!34, !35, !36, !37, !38, !39, !40}
!34 = !DIGlobalVariable(name: "polybench_papi_counters_threadid", scope: !0, file: !9, line: 44, type: !23, isLocal: false, isDefinition: true, variable: i32* @polybench_papi_counters_threadid)
!35 = !DIGlobalVariable(name: "polybench_program_total_flops", scope: !0, file: !9, line: 45, type: !5, isLocal: false, isDefinition: true, variable: double* @polybench_program_total_flops)
!36 = !DIGlobalVariable(name: "polybench_t_start", scope: !0, file: !9, line: 75, type: !5, isLocal: false, isDefinition: true, variable: double* @polybench_t_start)
!37 = !DIGlobalVariable(name: "polybench_t_end", scope: !0, file: !9, line: 75, type: !5, isLocal: false, isDefinition: true, variable: double* @polybench_t_end)
!38 = !DIGlobalVariable(name: "polybench_c_start", scope: !0, file: !9, line: 77, type: !22, isLocal: false, isDefinition: true, variable: i64* @polybench_c_start)
!39 = !DIGlobalVariable(name: "polybench_c_end", scope: !0, file: !9, line: 77, type: !22, isLocal: false, isDefinition: true, variable: i64* @polybench_c_end)
!40 = !DIGlobalVariable(name: "polybench_inter_array_padding_sz", scope: !0, file: !9, line: 72, type: !30, isLocal: true, isDefinition: true, variable: i64* @polybench_inter_array_padding_sz)
!41 = !{i32 2, !"Dwarf Version", i32 4}
!42 = !{i32 2, !"Debug Info Version", i32 3}
!43 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!44 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cs", scope: !8, file: !9, line: 106, type: !23)
!45 = !DIExpression()
!46 = !DILocation(line: 106, column: 7, scope: !8)
!47 = !DILocation(line: 107, column: 36, scope: !8)
!48 = !DILocation(line: 107, column: 29, scope: !8)
!49 = !DILocation(line: 107, column: 19, scope: !8)
!50 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flush", scope: !8, file: !9, line: 107, type: !4)
!51 = !DILocation(line: 107, column: 11, scope: !8)
!52 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !8, file: !9, line: 109, type: !5)
!53 = !DILocation(line: 109, column: 10, scope: !8)
!54 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !8, file: !9, line: 108, type: !23)
!55 = !DILocation(line: 108, column: 7, scope: !8)
!56 = !DILocation(line: 113, column: 3, scope: !57)
!57 = distinct !DILexicalBlock(scope: !8, file: !9, line: 113, column: 3)
!58 = !DILocation(line: 113, column: 8, scope: !57)
!59 = !DILocation(line: 113, column: 17, scope: !60)
!60 = distinct !DILexicalBlock(scope: !57, file: !9, line: 113, column: 3)
!61 = !DILocation(line: 114, column: 12, scope: !60)
!62 = !DILocation(line: 114, column: 9, scope: !60)
!63 = !DILocation(line: 114, column: 5, scope: !60)
!64 = !DILocation(line: 113, column: 24, scope: !60)
!65 = !DILocation(line: 113, column: 3, scope: !60)
!66 = !DILocation(line: 115, column: 3, scope: !8)
!67 = !DILocation(line: 115, column: 3, scope: !68)
!68 = !DILexicalBlockFile(scope: !8, file: !9, discriminator: 1)
!69 = !DILocation(line: 115, column: 3, scope: !70)
!70 = !DILexicalBlockFile(scope: !8, file: !9, discriminator: 2)
!71 = !DILocation(line: 116, column: 8, scope: !8)
!72 = !DILocation(line: 116, column: 3, scope: !8)
!73 = !DILocation(line: 117, column: 1, scope: !8)
!74 = !DILocation(line: 314, column: 3, scope: !12)
!75 = !DILocation(line: 319, column: 1, scope: !12)
!76 = !DILocation(line: 322, column: 3, scope: !13)
!77 = !DILocation(line: 324, column: 23, scope: !13)
!78 = !DILocation(line: 324, column: 21, scope: !13)
!79 = !DILocation(line: 328, column: 1, scope: !13)
!80 = !DILocation(line: 332, column: 21, scope: !14)
!81 = !DILocation(line: 332, column: 19, scope: !14)
!82 = !DILocation(line: 339, column: 1, scope: !14)
!83 = !DILocation(line: 353, column: 21, scope: !15)
!84 = !DILocation(line: 353, column: 39, scope: !15)
!85 = !DILocation(line: 353, column: 37, scope: !15)
!86 = !DILocation(line: 353, column: 3, scope: !15)
!87 = !DILocation(line: 358, column: 1, scope: !15)
!88 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "ptr", arg: 1, scope: !16, file: !9, line: 477, type: !6)
!89 = !DILocation(line: 477, column: 32, scope: !16)
!90 = !DILocation(line: 481, column: 3, scope: !16)
!91 = !DILocation(line: 483, column: 1, scope: !16)
!92 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !19, file: !9, line: 485, type: !22)
!93 = !DILocation(line: 485, column: 51, scope: !19)
!94 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "elt_size", arg: 2, scope: !19, file: !9, line: 485, type: !23)
!95 = !DILocation(line: 485, column: 58, scope: !19)
!96 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "val", scope: !19, file: !9, line: 491, type: !30)
!97 = !DILocation(line: 491, column: 10, scope: !19)
!98 = !DILocation(line: 492, column: 10, scope: !19)
!99 = !DILocation(line: 492, column: 7, scope: !19)
!100 = !DILocation(line: 493, column: 15, scope: !19)
!101 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !19, file: !9, line: 493, type: !6)
!102 = !DILocation(line: 493, column: 9, scope: !19)
!103 = !DILocation(line: 495, column: 3, scope: !19)
!104 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "alloc_sz", arg: 1, scope: !27, file: !9, line: 450, type: !30)
!105 = !DILocation(line: 450, column: 16, scope: !27)
!106 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !27, file: !9, line: 451, type: !6)
!107 = !DILocation(line: 451, column: 9, scope: !27)
!108 = !DILocation(line: 453, column: 36, scope: !27)
!109 = !DILocation(line: 454, column: 33, scope: !27)
!110 = !DILocation(line: 454, column: 31, scope: !27)
!111 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "padded_sz", scope: !27, file: !9, line: 454, type: !30)
!112 = !DILocation(line: 454, column: 10, scope: !27)
!113 = !DILocation(line: 455, column: 13, scope: !27)
!114 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "err", scope: !27, file: !9, line: 455, type: !23)
!115 = !DILocation(line: 455, column: 7, scope: !27)
!116 = !DILocation(line: 456, column: 8, scope: !117)
!117 = distinct !DILexicalBlock(scope: !27, file: !9, line: 456, column: 7)
!118 = !DILocation(line: 456, column: 12, scope: !117)
!119 = !DILocation(line: 456, column: 15, scope: !120)
!120 = !DILexicalBlockFile(scope: !117, file: !9, discriminator: 1)
!121 = !DILocation(line: 456, column: 7, scope: !27)
!122 = !DILocation(line: 457, column: 13, scope: !123)
!123 = distinct !DILexicalBlock(scope: !117, file: !9, line: 456, column: 20)
!124 = !DILocation(line: 457, column: 5, scope: !123)
!125 = !DILocation(line: 458, column: 5, scope: !123)
!126 = !DILocation(line: 474, column: 10, scope: !27)
!127 = !DILocation(line: 474, column: 3, scope: !27)
!128 = !DILocation(line: 88, column: 3, scope: !24)
