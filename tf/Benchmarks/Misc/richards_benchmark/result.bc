; ModuleID = '/home/gleison/tf/Benchmarks/Misc/richards_benchmark/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.task = type { %struct.task*, i32, i32, %struct.packet*, i32, %struct.task* (%struct.packet*)*, i64, i64 }
%struct.packet = type { %struct.packet*, i32, i32, i32, [4 x i8] }

@alphabet = global [28 x i8] c"0ABCDEFGHIJKLMNOPQRSTUVWXYZ\00", align 16
@tasktab = global [11 x %struct.task*] zeroinitializer, align 16
@tasklist = global %struct.task* null, align 8
@qpktcount = global i32 0, align 4
@holdcount = global i32 0, align 4
@tracing = global i32 1, align 4
@layout = global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@tcb = common global %struct.task* null, align 8
@taskid = common global i64 0, align 8
@v1 = common global i64 0, align 8
@v2 = common global i64 0, align 8
@.str.2 = private unnamed_addr constant [17 x i8] c"\0ABad task id %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Bench mark starting\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Starting\0A\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"finished\0A\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"qpkt count = %d  holdcount = %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"These results are \00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"correct\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"incorrect\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"\0Aend of run\0A\00", align 1

; Function Attrs: nounwind uwtable
define void @createtask(i32 %id, i32 %pri, %struct.packet* %wkq, i32 %state, %struct.task* (%struct.packet*)* %fn, i64 %v1, i64 %v2) #0 {
entry:
  %id.addr = alloca i32, align 4
  %pri.addr = alloca i32, align 4
  %wkq.addr = alloca %struct.packet*, align 8
  %state.addr = alloca i32, align 4
  %fn.addr = alloca %struct.task* (%struct.packet*)*, align 8
  %v1.addr = alloca i64, align 8
  %v2.addr = alloca i64, align 8
  %t = alloca %struct.task*, align 8
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !86, metadata !87), !dbg !88
  store i32 %pri, i32* %pri.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pri.addr, metadata !89, metadata !87), !dbg !90
  store %struct.packet* %wkq, %struct.packet** %wkq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.packet** %wkq.addr, metadata !91, metadata !87), !dbg !92
  store i32 %state, i32* %state.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %state.addr, metadata !93, metadata !87), !dbg !94
  store %struct.task* (%struct.packet*)* %fn, %struct.task* (%struct.packet*)** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.task* (%struct.packet*)** %fn.addr, metadata !95, metadata !87), !dbg !96
  store i64 %v1, i64* %v1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v1.addr, metadata !97, metadata !87), !dbg !98
  store i64 %v2, i64* %v2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %v2.addr, metadata !99, metadata !87), !dbg !100
  call void @llvm.dbg.declare(metadata %struct.task** %t, metadata !101, metadata !87), !dbg !102
  %call = call noalias i8* @malloc(i64 56) #4, !dbg !103
  %0 = bitcast i8* %call to %struct.task*, !dbg !104
  store %struct.task* %0, %struct.task** %t, align 8, !dbg !102
  %1 = load %struct.task*, %struct.task** %t, align 8, !dbg !105
  %2 = load i32, i32* %id.addr, align 4, !dbg !106
  %idxprom = sext i32 %2 to i64, !dbg !107
  %arrayidx = getelementptr inbounds [11 x %struct.task*], [11 x %struct.task*]* @tasktab, i32 0, i64 %idxprom, !dbg !107
  store %struct.task* %1, %struct.task** %arrayidx, align 8, !dbg !108
  %3 = load %struct.task*, %struct.task** @tasklist, align 8, !dbg !109
  %4 = load %struct.task*, %struct.task** %t, align 8, !dbg !110
  %t_link = getelementptr inbounds %struct.task, %struct.task* %4, i32 0, i32 0, !dbg !111
  store %struct.task* %3, %struct.task** %t_link, align 8, !dbg !112
  %5 = load i32, i32* %id.addr, align 4, !dbg !113
  %6 = load %struct.task*, %struct.task** %t, align 8, !dbg !114
  %t_id = getelementptr inbounds %struct.task, %struct.task* %6, i32 0, i32 1, !dbg !115
  store i32 %5, i32* %t_id, align 4, !dbg !116
  %7 = load i32, i32* %pri.addr, align 4, !dbg !117
  %8 = load %struct.task*, %struct.task** %t, align 8, !dbg !118
  %t_pri = getelementptr inbounds %struct.task, %struct.task* %8, i32 0, i32 2, !dbg !119
  store i32 %7, i32* %t_pri, align 4, !dbg !120
  %9 = load %struct.packet*, %struct.packet** %wkq.addr, align 8, !dbg !121
  %10 = load %struct.task*, %struct.task** %t, align 8, !dbg !122
  %t_wkq = getelementptr inbounds %struct.task, %struct.task* %10, i32 0, i32 3, !dbg !123
  store %struct.packet* %9, %struct.packet** %t_wkq, align 8, !dbg !124
  %11 = load i32, i32* %state.addr, align 4, !dbg !125
  %12 = load %struct.task*, %struct.task** %t, align 8, !dbg !126
  %t_state = getelementptr inbounds %struct.task, %struct.task* %12, i32 0, i32 4, !dbg !127
  store i32 %11, i32* %t_state, align 4, !dbg !128
  %13 = load %struct.task* (%struct.packet*)*, %struct.task* (%struct.packet*)** %fn.addr, align 8, !dbg !129
  %14 = load %struct.task*, %struct.task** %t, align 8, !dbg !130
  %t_fn = getelementptr inbounds %struct.task, %struct.task* %14, i32 0, i32 5, !dbg !131
  store %struct.task* (%struct.packet*)* %13, %struct.task* (%struct.packet*)** %t_fn, align 8, !dbg !132
  %15 = load i64, i64* %v1.addr, align 8, !dbg !133
  %16 = load %struct.task*, %struct.task** %t, align 8, !dbg !134
  %t_v1 = getelementptr inbounds %struct.task, %struct.task* %16, i32 0, i32 6, !dbg !135
  store i64 %15, i64* %t_v1, align 8, !dbg !136
  %17 = load i64, i64* %v2.addr, align 8, !dbg !137
  %18 = load %struct.task*, %struct.task** %t, align 8, !dbg !138
  %t_v2 = getelementptr inbounds %struct.task, %struct.task* %18, i32 0, i32 7, !dbg !139
  store i64 %17, i64* %t_v2, align 8, !dbg !140
  %19 = load %struct.task*, %struct.task** %t, align 8, !dbg !141
  store %struct.task* %19, %struct.task** @tasklist, align 8, !dbg !142
  ret void, !dbg !143
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind uwtable
define %struct.packet* @pkt(%struct.packet* %link, i32 %id, i32 %kind) #0 {
entry:
  %link.addr = alloca %struct.packet*, align 8
  %id.addr = alloca i32, align 4
  %kind.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca %struct.packet*, align 8
  store %struct.packet* %link, %struct.packet** %link.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.packet** %link.addr, metadata !144, metadata !87), !dbg !145
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !146, metadata !87), !dbg !147
  store i32 %kind, i32* %kind.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kind.addr, metadata !148, metadata !87), !dbg !149
  call void @llvm.dbg.declare(metadata i32* %i, metadata !150, metadata !87), !dbg !151
  call void @llvm.dbg.declare(metadata %struct.packet** %p, metadata !152, metadata !87), !dbg !153
  %call = call noalias i8* @malloc(i64 24) #4, !dbg !154
  %0 = bitcast i8* %call to %struct.packet*, !dbg !155
  store %struct.packet* %0, %struct.packet** %p, align 8, !dbg !153
  store i32 0, i32* %i, align 4, !dbg !156
  br label %for.cond, !dbg !158

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !159
  %cmp = icmp sle i32 %1, 3, !dbg !163
  br i1 %cmp, label %for.body, label %for.end, !dbg !164

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !165
  %idxprom = sext i32 %2 to i64, !dbg !166
  %3 = load %struct.packet*, %struct.packet** %p, align 8, !dbg !166
  %p_a2 = getelementptr inbounds %struct.packet, %struct.packet* %3, i32 0, i32 4, !dbg !167
  %arrayidx = getelementptr inbounds [4 x i8], [4 x i8]* %p_a2, i32 0, i64 %idxprom, !dbg !166
  store i8 0, i8* %arrayidx, align 1, !dbg !168
  br label %for.inc, !dbg !166

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !169
  %inc = add nsw i32 %4, 1, !dbg !169
  store i32 %inc, i32* %i, align 4, !dbg !169
  br label %for.cond, !dbg !170

for.end:                                          ; preds = %for.cond
  %5 = load %struct.packet*, %struct.packet** %link.addr, align 8, !dbg !171
  %6 = load %struct.packet*, %struct.packet** %p, align 8, !dbg !172
  %p_link = getelementptr inbounds %struct.packet, %struct.packet* %6, i32 0, i32 0, !dbg !173
  store %struct.packet* %5, %struct.packet** %p_link, align 8, !dbg !174
  %7 = load i32, i32* %id.addr, align 4, !dbg !175
  %8 = load %struct.packet*, %struct.packet** %p, align 8, !dbg !176
  %p_id = getelementptr inbounds %struct.packet, %struct.packet* %8, i32 0, i32 1, !dbg !177
  store i32 %7, i32* %p_id, align 4, !dbg !178
  %9 = load i32, i32* %kind.addr, align 4, !dbg !179
  %10 = load %struct.packet*, %struct.packet** %p, align 8, !dbg !180
  %p_kind = getelementptr inbounds %struct.packet, %struct.packet* %10, i32 0, i32 2, !dbg !181
  store i32 %9, i32* %p_kind, align 4, !dbg !182
  %11 = load %struct.packet*, %struct.packet** %p, align 8, !dbg !183
  %p_a1 = getelementptr inbounds %struct.packet, %struct.packet* %11, i32 0, i32 3, !dbg !184
  store i32 0, i32* %p_a1, align 4, !dbg !185
  %12 = load %struct.packet*, %struct.packet** %p, align 8, !dbg !186
  ret %struct.packet* %12, !dbg !187
}

; Function Attrs: nounwind uwtable
define void @trace(i8 signext %a) #0 {
entry:
  %a.addr = alloca i8, align 1
  store i8 %a, i8* %a.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %a.addr, metadata !188, metadata !87), !dbg !189
  %0 = load i32, i32* @layout, align 4, !dbg !190
  %dec = add nsw i32 %0, -1, !dbg !190
  store i32 %dec, i32* @layout, align 4, !dbg !190
  %cmp = icmp sle i32 %dec, 0, !dbg !192
  br i1 %cmp, label %if.then, label %if.end, !dbg !193

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0)), !dbg !194
  store i32 50, i32* @layout, align 4, !dbg !196
  br label %if.end, !dbg !197

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8, i8* %a.addr, align 1, !dbg !198
  %conv = sext i8 %1 to i32, !dbg !198
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv), !dbg !199
  ret void, !dbg !200
}

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind uwtable
define void @schedule() #0 {
entry:
  %pkt = alloca %struct.packet*, align 8
  %newtcb = alloca %struct.task*, align 8
  br label %while.cond, !dbg !201

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !202
  %cmp = icmp ne %struct.task* %0, null, !dbg !205
  br i1 %cmp, label %while.body, label %while.end, !dbg !201

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.packet** %pkt, metadata !206, metadata !87), !dbg !208
  call void @llvm.dbg.declare(metadata %struct.task** %newtcb, metadata !209, metadata !87), !dbg !210
  store %struct.packet* null, %struct.packet** %pkt, align 8, !dbg !211
  %1 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !212
  %t_state = getelementptr inbounds %struct.task, %struct.task* %1, i32 0, i32 4, !dbg !213
  %2 = load i32, i32* %t_state, align 4, !dbg !213
  switch i32 %2, label %sw.default [
    i32 3, label %sw.bb
    i32 0, label %sw.bb.5
    i32 1, label %sw.bb.5
    i32 2, label %sw.bb.11
    i32 4, label %sw.bb.11
    i32 5, label %sw.bb.11
    i32 6, label %sw.bb.11
    i32 7, label %sw.bb.11
  ], !dbg !214

sw.bb:                                            ; preds = %while.body
  %3 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !215
  %t_wkq = getelementptr inbounds %struct.task, %struct.task* %3, i32 0, i32 3, !dbg !217
  %4 = load %struct.packet*, %struct.packet** %t_wkq, align 8, !dbg !217
  store %struct.packet* %4, %struct.packet** %pkt, align 8, !dbg !218
  %5 = load %struct.packet*, %struct.packet** %pkt, align 8, !dbg !219
  %p_link = getelementptr inbounds %struct.packet, %struct.packet* %5, i32 0, i32 0, !dbg !220
  %6 = load %struct.packet*, %struct.packet** %p_link, align 8, !dbg !220
  %7 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !221
  %t_wkq1 = getelementptr inbounds %struct.task, %struct.task* %7, i32 0, i32 3, !dbg !222
  store %struct.packet* %6, %struct.packet** %t_wkq1, align 8, !dbg !223
  %8 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !224
  %t_wkq2 = getelementptr inbounds %struct.task, %struct.task* %8, i32 0, i32 3, !dbg !225
  %9 = load %struct.packet*, %struct.packet** %t_wkq2, align 8, !dbg !225
  %cmp3 = icmp eq %struct.packet* %9, null, !dbg !226
  %cond = select i1 %cmp3, i32 0, i32 1, !dbg !224
  %10 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !227
  %t_state4 = getelementptr inbounds %struct.task, %struct.task* %10, i32 0, i32 4, !dbg !228
  store i32 %cond, i32* %t_state4, align 4, !dbg !229
  br label %sw.bb.5, !dbg !227

sw.bb.5:                                          ; preds = %while.body, %while.body, %sw.bb
  %11 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !230
  %t_id = getelementptr inbounds %struct.task, %struct.task* %11, i32 0, i32 1, !dbg !231
  %12 = load i32, i32* %t_id, align 4, !dbg !231
  %conv = sext i32 %12 to i64, !dbg !230
  store i64 %conv, i64* @taskid, align 8, !dbg !232
  %13 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !233
  %t_v1 = getelementptr inbounds %struct.task, %struct.task* %13, i32 0, i32 6, !dbg !234
  %14 = load i64, i64* %t_v1, align 8, !dbg !234
  store i64 %14, i64* @v1, align 8, !dbg !235
  %15 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !236
  %t_v2 = getelementptr inbounds %struct.task, %struct.task* %15, i32 0, i32 7, !dbg !237
  %16 = load i64, i64* %t_v2, align 8, !dbg !237
  store i64 %16, i64* @v2, align 8, !dbg !238
  %17 = load i32, i32* @tracing, align 4, !dbg !239
  %cmp6 = icmp eq i32 %17, 1, !dbg !241
  br i1 %cmp6, label %if.then, label %if.end, !dbg !242

if.then:                                          ; preds = %sw.bb.5
  %18 = load i64, i64* @taskid, align 8, !dbg !243
  %add = add nsw i64 %18, 48, !dbg !244
  %conv8 = trunc i64 %add to i8, !dbg !243
  call void @trace(i8 signext %conv8), !dbg !245
  br label %if.end, !dbg !245

if.end:                                           ; preds = %if.then, %sw.bb.5
  %19 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !246
  %t_fn = getelementptr inbounds %struct.task, %struct.task* %19, i32 0, i32 5, !dbg !247
  %20 = load %struct.task* (%struct.packet*)*, %struct.task* (%struct.packet*)** %t_fn, align 8, !dbg !247
  %21 = load %struct.packet*, %struct.packet** %pkt, align 8, !dbg !248
  %call = call %struct.task* %20(%struct.packet* %21), !dbg !249
  store %struct.task* %call, %struct.task** %newtcb, align 8, !dbg !250
  %22 = load i64, i64* @v1, align 8, !dbg !251
  %23 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !252
  %t_v19 = getelementptr inbounds %struct.task, %struct.task* %23, i32 0, i32 6, !dbg !253
  store i64 %22, i64* %t_v19, align 8, !dbg !254
  %24 = load i64, i64* @v2, align 8, !dbg !255
  %25 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !256
  %t_v210 = getelementptr inbounds %struct.task, %struct.task* %25, i32 0, i32 7, !dbg !257
  store i64 %24, i64* %t_v210, align 8, !dbg !258
  %26 = load %struct.task*, %struct.task** %newtcb, align 8, !dbg !259
  store %struct.task* %26, %struct.task** @tcb, align 8, !dbg !260
  br label %sw.epilog, !dbg !261

sw.bb.11:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body
  %27 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !262
  %t_link = getelementptr inbounds %struct.task, %struct.task* %27, i32 0, i32 0, !dbg !263
  %28 = load %struct.task*, %struct.task** %t_link, align 8, !dbg !263
  store %struct.task* %28, %struct.task** @tcb, align 8, !dbg !264
  br label %sw.epilog, !dbg !265

sw.default:                                       ; preds = %while.body
  br label %while.end, !dbg !266

sw.epilog:                                        ; preds = %sw.bb.11, %if.end
  br label %while.cond, !dbg !201

while.end:                                        ; preds = %sw.default, %while.cond
  ret void, !dbg !267
}

; Function Attrs: nounwind uwtable
define %struct.task* @Wait() #0 {
entry:
  %0 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !268
  %t_state = getelementptr inbounds %struct.task, %struct.task* %0, i32 0, i32 4, !dbg !269
  %1 = load i32, i32* %t_state, align 4, !dbg !270
  %or = or i32 %1, 2, !dbg !270
  store i32 %or, i32* %t_state, align 4, !dbg !270
  %2 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !271
  ret %struct.task* %2, !dbg !272
}

; Function Attrs: nounwind uwtable
define %struct.task* @holdself() #0 {
entry:
  %0 = load i32, i32* @holdcount, align 4, !dbg !273
  %inc = add nsw i32 %0, 1, !dbg !273
  store i32 %inc, i32* @holdcount, align 4, !dbg !273
  %1 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !274
  %t_state = getelementptr inbounds %struct.task, %struct.task* %1, i32 0, i32 4, !dbg !275
  %2 = load i32, i32* %t_state, align 4, !dbg !276
  %or = or i32 %2, 4, !dbg !276
  store i32 %or, i32* %t_state, align 4, !dbg !276
  %3 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !277
  %t_link = getelementptr inbounds %struct.task, %struct.task* %3, i32 0, i32 0, !dbg !278
  %4 = load %struct.task*, %struct.task** %t_link, align 8, !dbg !278
  ret %struct.task* %4, !dbg !279
}

; Function Attrs: nounwind uwtable
define %struct.task* @findtcb(i32 %id) #0 {
entry:
  %id.addr = alloca i32, align 4
  %t = alloca %struct.task*, align 8
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !280, metadata !87), !dbg !281
  call void @llvm.dbg.declare(metadata %struct.task** %t, metadata !282, metadata !87), !dbg !283
  store %struct.task* null, %struct.task** %t, align 8, !dbg !283
  %0 = load i32, i32* %id.addr, align 4, !dbg !284
  %cmp = icmp sle i32 1, %0, !dbg !286
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !287

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %id.addr, align 4, !dbg !288
  %conv = sext i32 %1 to i64, !dbg !288
  %cmp1 = icmp sle i64 %conv, 10, !dbg !290
  br i1 %cmp1, label %if.then, label %if.end, !dbg !291

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* %id.addr, align 4, !dbg !292
  %idxprom = sext i32 %2 to i64, !dbg !293
  %arrayidx = getelementptr inbounds [11 x %struct.task*], [11 x %struct.task*]* @tasktab, i32 0, i64 %idxprom, !dbg !293
  %3 = load %struct.task*, %struct.task** %arrayidx, align 8, !dbg !293
  store %struct.task* %3, %struct.task** %t, align 8, !dbg !294
  br label %if.end, !dbg !295

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load %struct.task*, %struct.task** %t, align 8, !dbg !296
  %cmp3 = icmp eq %struct.task* %4, null, !dbg !298
  br i1 %cmp3, label %if.then.5, label %if.end.6, !dbg !299

if.then.5:                                        ; preds = %if.end
  %5 = load i32, i32* %id.addr, align 4, !dbg !300
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), i32 %5), !dbg !301
  br label %if.end.6, !dbg !301

if.end.6:                                         ; preds = %if.then.5, %if.end
  %6 = load %struct.task*, %struct.task** %t, align 8, !dbg !302
  ret %struct.task* %6, !dbg !303
}

; Function Attrs: nounwind uwtable
define %struct.task* @release(i32 %id) #0 {
entry:
  %retval = alloca %struct.task*, align 8
  %id.addr = alloca i32, align 4
  %t = alloca %struct.task*, align 8
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !304, metadata !87), !dbg !305
  call void @llvm.dbg.declare(metadata %struct.task** %t, metadata !306, metadata !87), !dbg !307
  %0 = load i32, i32* %id.addr, align 4, !dbg !308
  %call = call %struct.task* @findtcb(i32 %0), !dbg !309
  store %struct.task* %call, %struct.task** %t, align 8, !dbg !310
  %1 = load %struct.task*, %struct.task** %t, align 8, !dbg !311
  %cmp = icmp eq %struct.task* %1, null, !dbg !313
  br i1 %cmp, label %if.then, label %if.end, !dbg !314

if.then:                                          ; preds = %entry
  store %struct.task* null, %struct.task** %retval, !dbg !315
  br label %return, !dbg !315

if.end:                                           ; preds = %entry
  %2 = load %struct.task*, %struct.task** %t, align 8, !dbg !316
  %t_state = getelementptr inbounds %struct.task, %struct.task* %2, i32 0, i32 4, !dbg !317
  %3 = load i32, i32* %t_state, align 4, !dbg !318
  %and = and i32 %3, 65531, !dbg !318
  store i32 %and, i32* %t_state, align 4, !dbg !318
  %4 = load %struct.task*, %struct.task** %t, align 8, !dbg !319
  %t_pri = getelementptr inbounds %struct.task, %struct.task* %4, i32 0, i32 2, !dbg !321
  %5 = load i32, i32* %t_pri, align 4, !dbg !321
  %6 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !322
  %t_pri1 = getelementptr inbounds %struct.task, %struct.task* %6, i32 0, i32 2, !dbg !323
  %7 = load i32, i32* %t_pri1, align 4, !dbg !323
  %cmp2 = icmp sgt i32 %5, %7, !dbg !324
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !325

if.then.3:                                        ; preds = %if.end
  %8 = load %struct.task*, %struct.task** %t, align 8, !dbg !326
  store %struct.task* %8, %struct.task** %retval, !dbg !327
  br label %return, !dbg !327

if.end.4:                                         ; preds = %if.end
  %9 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !328
  store %struct.task* %9, %struct.task** %retval, !dbg !329
  br label %return, !dbg !329

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %10 = load %struct.task*, %struct.task** %retval, !dbg !330
  ret %struct.task* %10, !dbg !330
}

; Function Attrs: nounwind uwtable
define %struct.task* @qpkt(%struct.packet* %pkt) #0 {
entry:
  %retval = alloca %struct.task*, align 8
  %pkt.addr = alloca %struct.packet*, align 8
  %t = alloca %struct.task*, align 8
  store %struct.packet* %pkt, %struct.packet** %pkt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.packet** %pkt.addr, metadata !331, metadata !87), !dbg !332
  call void @llvm.dbg.declare(metadata %struct.task** %t, metadata !333, metadata !87), !dbg !334
  %0 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !335
  %p_id = getelementptr inbounds %struct.packet, %struct.packet* %0, i32 0, i32 1, !dbg !336
  %1 = load i32, i32* %p_id, align 4, !dbg !336
  %call = call %struct.task* @findtcb(i32 %1), !dbg !337
  store %struct.task* %call, %struct.task** %t, align 8, !dbg !338
  %2 = load %struct.task*, %struct.task** %t, align 8, !dbg !339
  %cmp = icmp eq %struct.task* %2, null, !dbg !341
  br i1 %cmp, label %if.then, label %if.end, !dbg !342

if.then:                                          ; preds = %entry
  %3 = load %struct.task*, %struct.task** %t, align 8, !dbg !343
  store %struct.task* %3, %struct.task** %retval, !dbg !344
  br label %return, !dbg !344

if.end:                                           ; preds = %entry
  %4 = load i32, i32* @qpktcount, align 4, !dbg !345
  %inc = add nsw i32 %4, 1, !dbg !345
  store i32 %inc, i32* @qpktcount, align 4, !dbg !345
  %5 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !346
  %p_link = getelementptr inbounds %struct.packet, %struct.packet* %5, i32 0, i32 0, !dbg !347
  store %struct.packet* null, %struct.packet** %p_link, align 8, !dbg !348
  %6 = load i64, i64* @taskid, align 8, !dbg !349
  %conv = trunc i64 %6 to i32, !dbg !349
  %7 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !350
  %p_id1 = getelementptr inbounds %struct.packet, %struct.packet* %7, i32 0, i32 1, !dbg !351
  store i32 %conv, i32* %p_id1, align 4, !dbg !352
  %8 = load %struct.task*, %struct.task** %t, align 8, !dbg !353
  %t_wkq = getelementptr inbounds %struct.task, %struct.task* %8, i32 0, i32 3, !dbg !355
  %9 = load %struct.packet*, %struct.packet** %t_wkq, align 8, !dbg !355
  %cmp2 = icmp eq %struct.packet* %9, null, !dbg !356
  br i1 %cmp2, label %if.then.4, label %if.else, !dbg !357

if.then.4:                                        ; preds = %if.end
  %10 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !358
  %11 = load %struct.task*, %struct.task** %t, align 8, !dbg !360
  %t_wkq5 = getelementptr inbounds %struct.task, %struct.task* %11, i32 0, i32 3, !dbg !361
  store %struct.packet* %10, %struct.packet** %t_wkq5, align 8, !dbg !362
  %12 = load %struct.task*, %struct.task** %t, align 8, !dbg !363
  %t_state = getelementptr inbounds %struct.task, %struct.task* %12, i32 0, i32 4, !dbg !364
  %13 = load i32, i32* %t_state, align 4, !dbg !365
  %or = or i32 %13, 1, !dbg !365
  store i32 %or, i32* %t_state, align 4, !dbg !365
  %14 = load %struct.task*, %struct.task** %t, align 8, !dbg !366
  %t_pri = getelementptr inbounds %struct.task, %struct.task* %14, i32 0, i32 2, !dbg !368
  %15 = load i32, i32* %t_pri, align 4, !dbg !368
  %16 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !369
  %t_pri6 = getelementptr inbounds %struct.task, %struct.task* %16, i32 0, i32 2, !dbg !370
  %17 = load i32, i32* %t_pri6, align 4, !dbg !370
  %cmp7 = icmp sgt i32 %15, %17, !dbg !371
  br i1 %cmp7, label %if.then.9, label %if.end.10, !dbg !372

if.then.9:                                        ; preds = %if.then.4
  %18 = load %struct.task*, %struct.task** %t, align 8, !dbg !373
  store %struct.task* %18, %struct.task** %retval, !dbg !374
  br label %return, !dbg !374

if.end.10:                                        ; preds = %if.then.4
  br label %if.end.12, !dbg !375

if.else:                                          ; preds = %if.end
  %19 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !376
  %20 = load %struct.task*, %struct.task** %t, align 8, !dbg !378
  %t_wkq11 = getelementptr inbounds %struct.task, %struct.task* %20, i32 0, i32 3, !dbg !379
  %21 = bitcast %struct.packet** %t_wkq11 to %struct.packet*, !dbg !380
  call void @append(%struct.packet* %19, %struct.packet* %21), !dbg !381
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.end.10
  %22 = load %struct.task*, %struct.task** @tcb, align 8, !dbg !382
  store %struct.task* %22, %struct.task** %retval, !dbg !383
  br label %return, !dbg !383

return:                                           ; preds = %if.end.12, %if.then.9, %if.then
  %23 = load %struct.task*, %struct.task** %retval, !dbg !384
  ret %struct.task* %23, !dbg !384
}

; Function Attrs: nounwind uwtable
define void @append(%struct.packet* %pkt, %struct.packet* %ptr) #0 {
entry:
  %pkt.addr = alloca %struct.packet*, align 8
  %ptr.addr = alloca %struct.packet*, align 8
  store %struct.packet* %pkt, %struct.packet** %pkt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.packet** %pkt.addr, metadata !385, metadata !87), !dbg !386
  store %struct.packet* %ptr, %struct.packet** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.packet** %ptr.addr, metadata !387, metadata !87), !dbg !388
  %0 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !389
  %p_link = getelementptr inbounds %struct.packet, %struct.packet* %0, i32 0, i32 0, !dbg !390
  store %struct.packet* null, %struct.packet** %p_link, align 8, !dbg !391
  br label %while.cond, !dbg !392

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.packet*, %struct.packet** %ptr.addr, align 8, !dbg !393
  %p_link1 = getelementptr inbounds %struct.packet, %struct.packet* %1, i32 0, i32 0, !dbg !396
  %2 = load %struct.packet*, %struct.packet** %p_link1, align 8, !dbg !396
  %tobool = icmp ne %struct.packet* %2, null, !dbg !392
  br i1 %tobool, label %while.body, label %while.end, !dbg !392

while.body:                                       ; preds = %while.cond
  %3 = load %struct.packet*, %struct.packet** %ptr.addr, align 8, !dbg !397
  %p_link2 = getelementptr inbounds %struct.packet, %struct.packet* %3, i32 0, i32 0, !dbg !398
  %4 = load %struct.packet*, %struct.packet** %p_link2, align 8, !dbg !398
  store %struct.packet* %4, %struct.packet** %ptr.addr, align 8, !dbg !399
  br label %while.cond, !dbg !392

while.end:                                        ; preds = %while.cond
  %5 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !400
  %6 = load %struct.packet*, %struct.packet** %ptr.addr, align 8, !dbg !401
  %p_link3 = getelementptr inbounds %struct.packet, %struct.packet* %6, i32 0, i32 0, !dbg !402
  store %struct.packet* %5, %struct.packet** %p_link3, align 8, !dbg !403
  ret void, !dbg !404
}

; Function Attrs: nounwind uwtable
define %struct.task* @idlefn(%struct.packet* %pkt) #0 {
entry:
  %retval = alloca %struct.task*, align 8
  %pkt.addr = alloca %struct.packet*, align 8
  store %struct.packet* %pkt, %struct.packet** %pkt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.packet** %pkt.addr, metadata !405, metadata !87), !dbg !406
  %0 = load i64, i64* @v2, align 8, !dbg !407
  %dec = add nsw i64 %0, -1, !dbg !407
  store i64 %dec, i64* @v2, align 8, !dbg !407
  %1 = load i64, i64* @v2, align 8, !dbg !408
  %cmp = icmp eq i64 %1, 0, !dbg !410
  br i1 %cmp, label %if.then, label %if.end, !dbg !411

if.then:                                          ; preds = %entry
  %call = call %struct.task* @holdself(), !dbg !412
  store %struct.task* %call, %struct.task** %retval, !dbg !413
  br label %return, !dbg !413

if.end:                                           ; preds = %entry
  %2 = load i64, i64* @v1, align 8, !dbg !414
  %and = and i64 %2, 1, !dbg !416
  %cmp1 = icmp eq i64 %and, 0, !dbg !417
  br i1 %cmp1, label %if.then.2, label %if.else, !dbg !418

if.then.2:                                        ; preds = %if.end
  %3 = load i64, i64* @v1, align 8, !dbg !419
  %shr = ashr i64 %3, 1, !dbg !421
  %and3 = and i64 %shr, 32767, !dbg !422
  store i64 %and3, i64* @v1, align 8, !dbg !423
  %call4 = call %struct.task* @release(i32 5), !dbg !424
  store %struct.task* %call4, %struct.task** %retval, !dbg !425
  br label %return, !dbg !425

if.else:                                          ; preds = %if.end
  %4 = load i64, i64* @v1, align 8, !dbg !426
  %shr5 = ashr i64 %4, 1, !dbg !428
  %and6 = and i64 %shr5, 32767, !dbg !429
  %xor = xor i64 %and6, 53256, !dbg !430
  store i64 %xor, i64* @v1, align 8, !dbg !431
  %call7 = call %struct.task* @release(i32 6), !dbg !432
  store %struct.task* %call7, %struct.task** %retval, !dbg !433
  br label %return, !dbg !433

return:                                           ; preds = %if.else, %if.then.2, %if.then
  %5 = load %struct.task*, %struct.task** %retval, !dbg !434
  ret %struct.task* %5, !dbg !434
}

; Function Attrs: nounwind uwtable
define %struct.task* @workfn(%struct.packet* %pkt) #0 {
entry:
  %retval = alloca %struct.task*, align 8
  %pkt.addr = alloca %struct.packet*, align 8
  %i = alloca i32, align 4
  store %struct.packet* %pkt, %struct.packet** %pkt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.packet** %pkt.addr, metadata !435, metadata !87), !dbg !436
  %0 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !437
  %cmp = icmp eq %struct.packet* %0, null, !dbg !439
  br i1 %cmp, label %if.then, label %if.else, !dbg !440

if.then:                                          ; preds = %entry
  %call = call %struct.task* @Wait(), !dbg !441
  store %struct.task* %call, %struct.task** %retval, !dbg !442
  br label %return, !dbg !442

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !443, metadata !87), !dbg !445
  %1 = load i64, i64* @v1, align 8, !dbg !446
  %sub = sub nsw i64 7, %1, !dbg !447
  store i64 %sub, i64* @v1, align 8, !dbg !448
  %2 = load i64, i64* @v1, align 8, !dbg !449
  %conv = trunc i64 %2 to i32, !dbg !449
  %3 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !450
  %p_id = getelementptr inbounds %struct.packet, %struct.packet* %3, i32 0, i32 1, !dbg !451
  store i32 %conv, i32* %p_id, align 4, !dbg !452
  %4 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !453
  %p_a1 = getelementptr inbounds %struct.packet, %struct.packet* %4, i32 0, i32 3, !dbg !454
  store i32 0, i32* %p_a1, align 4, !dbg !455
  store i32 0, i32* %i, align 4, !dbg !456
  br label %for.cond, !dbg !458

for.cond:                                         ; preds = %for.inc, %if.else
  %5 = load i32, i32* %i, align 4, !dbg !459
  %cmp1 = icmp sle i32 %5, 3, !dbg !463
  br i1 %cmp1, label %for.body, label %for.end, !dbg !464

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* @v2, align 8, !dbg !465
  %inc = add nsw i64 %6, 1, !dbg !465
  store i64 %inc, i64* @v2, align 8, !dbg !465
  %7 = load i64, i64* @v2, align 8, !dbg !467
  %cmp3 = icmp sgt i64 %7, 26, !dbg !469
  br i1 %cmp3, label %if.then.5, label %if.end, !dbg !470

if.then.5:                                        ; preds = %for.body
  store i64 1, i64* @v2, align 8, !dbg !471
  br label %if.end, !dbg !472

if.end:                                           ; preds = %if.then.5, %for.body
  %8 = load i64, i64* @v2, align 8, !dbg !473
  %arrayidx = getelementptr inbounds [28 x i8], [28 x i8]* @alphabet, i32 0, i64 %8, !dbg !474
  %9 = load i8, i8* %arrayidx, align 1, !dbg !474
  %10 = load i32, i32* %i, align 4, !dbg !475
  %idxprom = sext i32 %10 to i64, !dbg !476
  %11 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !477
  %p_a2 = getelementptr inbounds %struct.packet, %struct.packet* %11, i32 0, i32 4, !dbg !478
  %arrayidx6 = getelementptr inbounds [4 x i8], [4 x i8]* %p_a2, i32 0, i64 %idxprom, !dbg !476
  store i8 %9, i8* %arrayidx6, align 1, !dbg !479
  br label %for.inc, !dbg !480

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !481
  %inc7 = add nsw i32 %12, 1, !dbg !481
  store i32 %inc7, i32* %i, align 4, !dbg !481
  br label %for.cond, !dbg !482

for.end:                                          ; preds = %for.cond
  %13 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !483
  %call8 = call %struct.task* @qpkt(%struct.packet* %13), !dbg !484
  store %struct.task* %call8, %struct.task** %retval, !dbg !485
  br label %return, !dbg !485

return:                                           ; preds = %for.end, %if.then
  %14 = load %struct.task*, %struct.task** %retval, !dbg !486
  ret %struct.task* %14, !dbg !486
}

; Function Attrs: nounwind uwtable
define %struct.task* @handlerfn(%struct.packet* %pkt) #0 {
entry:
  %retval = alloca %struct.task*, align 8
  %pkt.addr = alloca %struct.packet*, align 8
  %count = alloca i32, align 4
  %workpkt = alloca %struct.packet*, align 8
  %devpkt = alloca %struct.packet*, align 8
  store %struct.packet* %pkt, %struct.packet** %pkt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.packet** %pkt.addr, metadata !487, metadata !87), !dbg !488
  %0 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !489
  %cmp = icmp ne %struct.packet* %0, null, !dbg !491
  br i1 %cmp, label %if.then, label %if.end, !dbg !492

if.then:                                          ; preds = %entry
  %1 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !493
  %2 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !494
  %p_kind = getelementptr inbounds %struct.packet, %struct.packet* %2, i32 0, i32 2, !dbg !495
  %3 = load i32, i32* %p_kind, align 4, !dbg !495
  %cmp1 = icmp eq i32 %3, 1001, !dbg !496
  %cond = select i1 %cmp1, i64* @v1, i64* @v2, !dbg !494
  %4 = bitcast i64* %cond to %struct.packet*, !dbg !497
  call void @append(%struct.packet* %1, %struct.packet* %4), !dbg !498
  br label %if.end, !dbg !498

if.end:                                           ; preds = %if.then, %entry
  %5 = load i64, i64* @v1, align 8, !dbg !499
  %cmp2 = icmp ne i64 %5, 0, !dbg !501
  br i1 %cmp2, label %if.then.3, label %if.end.14, !dbg !502

if.then.3:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %count, metadata !503, metadata !87), !dbg !505
  call void @llvm.dbg.declare(metadata %struct.packet** %workpkt, metadata !506, metadata !87), !dbg !507
  %6 = load i64, i64* @v1, align 8, !dbg !508
  %7 = inttoptr i64 %6 to %struct.packet*, !dbg !509
  store %struct.packet* %7, %struct.packet** %workpkt, align 8, !dbg !507
  %8 = load %struct.packet*, %struct.packet** %workpkt, align 8, !dbg !510
  %p_a1 = getelementptr inbounds %struct.packet, %struct.packet* %8, i32 0, i32 3, !dbg !511
  %9 = load i32, i32* %p_a1, align 4, !dbg !511
  store i32 %9, i32* %count, align 4, !dbg !512
  %10 = load i32, i32* %count, align 4, !dbg !513
  %cmp4 = icmp sgt i32 %10, 3, !dbg !515
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !516

if.then.5:                                        ; preds = %if.then.3
  %11 = load i64, i64* @v1, align 8, !dbg !517
  %12 = inttoptr i64 %11 to %struct.packet*, !dbg !519
  %p_link = getelementptr inbounds %struct.packet, %struct.packet* %12, i32 0, i32 0, !dbg !520
  %13 = load %struct.packet*, %struct.packet** %p_link, align 8, !dbg !520
  %14 = ptrtoint %struct.packet* %13 to i64, !dbg !521
  store i64 %14, i64* @v1, align 8, !dbg !522
  %15 = load %struct.packet*, %struct.packet** %workpkt, align 8, !dbg !523
  %call = call %struct.task* @qpkt(%struct.packet* %15), !dbg !524
  store %struct.task* %call, %struct.task** %retval, !dbg !525
  br label %return, !dbg !525

if.end.6:                                         ; preds = %if.then.3
  %16 = load i64, i64* @v2, align 8, !dbg !526
  %cmp7 = icmp ne i64 %16, 0, !dbg !528
  br i1 %cmp7, label %if.then.8, label %if.end.13, !dbg !529

if.then.8:                                        ; preds = %if.end.6
  call void @llvm.dbg.declare(metadata %struct.packet** %devpkt, metadata !530, metadata !87), !dbg !532
  %17 = load i64, i64* @v2, align 8, !dbg !533
  %18 = inttoptr i64 %17 to %struct.packet*, !dbg !534
  store %struct.packet* %18, %struct.packet** %devpkt, align 8, !dbg !535
  %19 = load i64, i64* @v2, align 8, !dbg !536
  %20 = inttoptr i64 %19 to %struct.packet*, !dbg !537
  %p_link9 = getelementptr inbounds %struct.packet, %struct.packet* %20, i32 0, i32 0, !dbg !538
  %21 = load %struct.packet*, %struct.packet** %p_link9, align 8, !dbg !538
  %22 = ptrtoint %struct.packet* %21 to i64, !dbg !539
  store i64 %22, i64* @v2, align 8, !dbg !540
  %23 = load i32, i32* %count, align 4, !dbg !541
  %idxprom = sext i32 %23 to i64, !dbg !542
  %24 = load %struct.packet*, %struct.packet** %workpkt, align 8, !dbg !542
  %p_a2 = getelementptr inbounds %struct.packet, %struct.packet* %24, i32 0, i32 4, !dbg !543
  %arrayidx = getelementptr inbounds [4 x i8], [4 x i8]* %p_a2, i32 0, i64 %idxprom, !dbg !542
  %25 = load i8, i8* %arrayidx, align 1, !dbg !542
  %conv = sext i8 %25 to i32, !dbg !542
  %26 = load %struct.packet*, %struct.packet** %devpkt, align 8, !dbg !544
  %p_a110 = getelementptr inbounds %struct.packet, %struct.packet* %26, i32 0, i32 3, !dbg !545
  store i32 %conv, i32* %p_a110, align 4, !dbg !546
  %27 = load i32, i32* %count, align 4, !dbg !547
  %add = add nsw i32 %27, 1, !dbg !548
  %28 = load %struct.packet*, %struct.packet** %workpkt, align 8, !dbg !549
  %p_a111 = getelementptr inbounds %struct.packet, %struct.packet* %28, i32 0, i32 3, !dbg !550
  store i32 %add, i32* %p_a111, align 4, !dbg !551
  %29 = load %struct.packet*, %struct.packet** %devpkt, align 8, !dbg !552
  %call12 = call %struct.task* @qpkt(%struct.packet* %29), !dbg !553
  store %struct.task* %call12, %struct.task** %retval, !dbg !554
  br label %return, !dbg !554

if.end.13:                                        ; preds = %if.end.6
  br label %if.end.14, !dbg !555

if.end.14:                                        ; preds = %if.end.13, %if.end
  %call15 = call %struct.task* @Wait(), !dbg !556
  store %struct.task* %call15, %struct.task** %retval, !dbg !557
  br label %return, !dbg !557

return:                                           ; preds = %if.end.14, %if.then.8, %if.then.5
  %30 = load %struct.task*, %struct.task** %retval, !dbg !558
  ret %struct.task* %30, !dbg !558
}

; Function Attrs: nounwind uwtable
define %struct.task* @devfn(%struct.packet* %pkt) #0 {
entry:
  %retval = alloca %struct.task*, align 8
  %pkt.addr = alloca %struct.packet*, align 8
  store %struct.packet* %pkt, %struct.packet** %pkt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.packet** %pkt.addr, metadata !559, metadata !87), !dbg !560
  %0 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !561
  %cmp = icmp eq %struct.packet* %0, null, !dbg !563
  br i1 %cmp, label %if.then, label %if.else, !dbg !564

if.then:                                          ; preds = %entry
  %1 = load i64, i64* @v1, align 8, !dbg !565
  %cmp1 = icmp eq i64 %1, 0, !dbg !568
  br i1 %cmp1, label %if.then.2, label %if.end, !dbg !569

if.then.2:                                        ; preds = %if.then
  %call = call %struct.task* @Wait(), !dbg !570
  store %struct.task* %call, %struct.task** %retval, !dbg !571
  br label %return, !dbg !571

if.end:                                           ; preds = %if.then
  %2 = load i64, i64* @v1, align 8, !dbg !572
  %3 = inttoptr i64 %2 to %struct.packet*, !dbg !573
  store %struct.packet* %3, %struct.packet** %pkt.addr, align 8, !dbg !574
  store i64 0, i64* @v1, align 8, !dbg !575
  %4 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !576
  %call3 = call %struct.task* @qpkt(%struct.packet* %4), !dbg !577
  store %struct.task* %call3, %struct.task** %retval, !dbg !578
  br label %return, !dbg !578

if.else:                                          ; preds = %entry
  %5 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !579
  %6 = ptrtoint %struct.packet* %5 to i64, !dbg !581
  store i64 %6, i64* @v1, align 8, !dbg !582
  %7 = load i32, i32* @tracing, align 4, !dbg !583
  %cmp4 = icmp eq i32 %7, 1, !dbg !585
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !586

if.then.5:                                        ; preds = %if.else
  %8 = load %struct.packet*, %struct.packet** %pkt.addr, align 8, !dbg !587
  %p_a1 = getelementptr inbounds %struct.packet, %struct.packet* %8, i32 0, i32 3, !dbg !588
  %9 = load i32, i32* %p_a1, align 4, !dbg !588
  %conv = trunc i32 %9 to i8, !dbg !587
  call void @trace(i8 signext %conv), !dbg !589
  br label %if.end.6, !dbg !589

if.end.6:                                         ; preds = %if.then.5, %if.else
  %call7 = call %struct.task* @holdself(), !dbg !590
  store %struct.task* %call7, %struct.task** %retval, !dbg !591
  br label %return, !dbg !591

return:                                           ; preds = %if.end.6, %if.end, %if.then.2
  %10 = load %struct.task*, %struct.task** %retval, !dbg !592
  ret %struct.task* %10, !dbg !592
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %wkq = alloca %struct.packet*, align 8
  %retval1 = alloca i32, align 4
  store i32 0, i32* %retval
  call void @llvm.dbg.declare(metadata %struct.packet** %wkq, metadata !593, metadata !87), !dbg !594
  store %struct.packet* null, %struct.packet** %wkq, align 8, !dbg !594
  call void @llvm.dbg.declare(metadata i32* %retval1, metadata !595, metadata !87), !dbg !596
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0)), !dbg !597
  %0 = load %struct.packet*, %struct.packet** %wkq, align 8, !dbg !598
  call void @createtask(i32 1, i32 0, %struct.packet* %0, i32 0, %struct.task* (%struct.packet*)* @idlefn, i64 1, i64 10000000), !dbg !599
  %call2 = call %struct.packet* @pkt(%struct.packet* null, i32 0, i32 1001), !dbg !600
  store %struct.packet* %call2, %struct.packet** %wkq, align 8, !dbg !601
  %1 = load %struct.packet*, %struct.packet** %wkq, align 8, !dbg !602
  %call3 = call %struct.packet* @pkt(%struct.packet* %1, i32 0, i32 1001), !dbg !603
  store %struct.packet* %call3, %struct.packet** %wkq, align 8, !dbg !604
  %2 = load %struct.packet*, %struct.packet** %wkq, align 8, !dbg !605
  call void @createtask(i32 2, i32 1000, %struct.packet* %2, i32 3, %struct.task* (%struct.packet*)* @workfn, i64 3, i64 0), !dbg !606
  %call4 = call %struct.packet* @pkt(%struct.packet* null, i32 5, i32 1000), !dbg !607
  store %struct.packet* %call4, %struct.packet** %wkq, align 8, !dbg !608
  %3 = load %struct.packet*, %struct.packet** %wkq, align 8, !dbg !609
  %call5 = call %struct.packet* @pkt(%struct.packet* %3, i32 5, i32 1000), !dbg !610
  store %struct.packet* %call5, %struct.packet** %wkq, align 8, !dbg !611
  %4 = load %struct.packet*, %struct.packet** %wkq, align 8, !dbg !612
  %call6 = call %struct.packet* @pkt(%struct.packet* %4, i32 5, i32 1000), !dbg !613
  store %struct.packet* %call6, %struct.packet** %wkq, align 8, !dbg !614
  %5 = load %struct.packet*, %struct.packet** %wkq, align 8, !dbg !615
  call void @createtask(i32 3, i32 2000, %struct.packet* %5, i32 3, %struct.task* (%struct.packet*)* @handlerfn, i64 0, i64 0), !dbg !616
  %call7 = call %struct.packet* @pkt(%struct.packet* null, i32 6, i32 1000), !dbg !617
  store %struct.packet* %call7, %struct.packet** %wkq, align 8, !dbg !618
  %6 = load %struct.packet*, %struct.packet** %wkq, align 8, !dbg !619
  %call8 = call %struct.packet* @pkt(%struct.packet* %6, i32 6, i32 1000), !dbg !620
  store %struct.packet* %call8, %struct.packet** %wkq, align 8, !dbg !621
  %7 = load %struct.packet*, %struct.packet** %wkq, align 8, !dbg !622
  %call9 = call %struct.packet* @pkt(%struct.packet* %7, i32 6, i32 1000), !dbg !623
  store %struct.packet* %call9, %struct.packet** %wkq, align 8, !dbg !624
  %8 = load %struct.packet*, %struct.packet** %wkq, align 8, !dbg !625
  call void @createtask(i32 4, i32 3000, %struct.packet* %8, i32 3, %struct.task* (%struct.packet*)* @handlerfn, i64 0, i64 0), !dbg !626
  store %struct.packet* null, %struct.packet** %wkq, align 8, !dbg !627
  %9 = load %struct.packet*, %struct.packet** %wkq, align 8, !dbg !628
  call void @createtask(i32 5, i32 4000, %struct.packet* %9, i32 2, %struct.task* (%struct.packet*)* @devfn, i64 0, i64 0), !dbg !629
  %10 = load %struct.packet*, %struct.packet** %wkq, align 8, !dbg !630
  call void @createtask(i32 6, i32 5000, %struct.packet* %10, i32 2, %struct.task* (%struct.packet*)* @devfn, i64 0, i64 0), !dbg !631
  %11 = load %struct.task*, %struct.task** @tasklist, align 8, !dbg !632
  store %struct.task* %11, %struct.task** @tcb, align 8, !dbg !633
  store i32 0, i32* @holdcount, align 4, !dbg !634
  store i32 0, i32* @qpktcount, align 4, !dbg !635
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0)), !dbg !636
  store i32 0, i32* @tracing, align 4, !dbg !637
  store i32 0, i32* @layout, align 4, !dbg !638
  call void @schedule(), !dbg !639
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0)), !dbg !640
  %12 = load i32, i32* @qpktcount, align 4, !dbg !641
  %13 = load i32, i32* @holdcount, align 4, !dbg !642
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i32 0, i32 0), i32 %12, i32 %13), !dbg !643
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0)), !dbg !644
  %14 = load i32, i32* @qpktcount, align 4, !dbg !645
  %cmp = icmp eq i32 %14, 23263894, !dbg !647
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !648

land.lhs.true:                                    ; preds = %entry
  %15 = load i32, i32* @holdcount, align 4, !dbg !649
  %cmp14 = icmp eq i32 %15, 9305557, !dbg !651
  br i1 %cmp14, label %if.then, label %if.else, !dbg !652

if.then:                                          ; preds = %land.lhs.true
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0)), !dbg !653
  store i32 0, i32* %retval1, align 4, !dbg !655
  br label %if.end, !dbg !656

if.else:                                          ; preds = %land.lhs.true, %entry
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)), !dbg !657
  store i32 1, i32* %retval1, align 4, !dbg !659
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i32 0, i32 0)), !dbg !660
  %16 = load i32, i32* %retval1, align 4, !dbg !661
  ret i32 %16, !dbg !662
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!83, !84}
!llvm.ident = !{!85}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !33, globals: !65)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Misc/richards_benchmark")
!2 = !{}
!3 = !{!4, !13, !31}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DICompositeType(tag: DW_TAG_structure_type, name: "task", file: !6, line: 72, size: 448, align: 64, elements: !7)
!6 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Misc/richards_benchmark/tmp.c", directory: "/home/gleison/tf/Benchmarks/Misc/richards_benchmark")
!7 = !{!8, !9, !11, !12, !25, !26, !30, !32}
!8 = !DIDerivedType(tag: DW_TAG_member, name: "t_link", scope: !5, file: !6, line: 73, baseType: !4, size: 64, align: 64)
!9 = !DIDerivedType(tag: DW_TAG_member, name: "t_id", scope: !5, file: !6, line: 74, baseType: !10, size: 32, align: 32, offset: 64)
!10 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "t_pri", scope: !5, file: !6, line: 75, baseType: !10, size: 32, align: 32, offset: 96)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "t_wkq", scope: !5, file: !6, line: 76, baseType: !13, size: 64, align: 64, offset: 128)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!14 = !DICompositeType(tag: DW_TAG_structure_type, name: "packet", file: !6, line: 64, size: 192, align: 64, elements: !15)
!15 = !{!16, !17, !18, !19, !20}
!16 = !DIDerivedType(tag: DW_TAG_member, name: "p_link", scope: !14, file: !6, line: 65, baseType: !13, size: 64, align: 64)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "p_id", scope: !14, file: !6, line: 66, baseType: !10, size: 32, align: 32, offset: 64)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "p_kind", scope: !14, file: !6, line: 67, baseType: !10, size: 32, align: 32, offset: 96)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "p_a1", scope: !14, file: !6, line: 68, baseType: !10, size: 32, align: 32, offset: 128)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "p_a2", scope: !14, file: !6, line: 69, baseType: !21, size: 32, align: 8, offset: 160)
!21 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 32, align: 8, elements: !23)
!22 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!23 = !{!24}
!24 = !DISubrange(count: 4)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "t_state", scope: !5, file: !6, line: 77, baseType: !10, size: 32, align: 32, offset: 192)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "t_fn", scope: !5, file: !6, line: 78, baseType: !27, size: 64, align: 64, offset: 256)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64, align: 64)
!28 = !DISubroutineType(types: !29)
!29 = !{!4, !13}
!30 = !DIDerivedType(tag: DW_TAG_member, name: "t_v1", scope: !5, file: !6, line: 79, baseType: !31, size: 64, align: 64, offset: 320)
!31 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "t_v2", scope: !5, file: !6, line: 80, baseType: !31, size: 64, align: 64, offset: 384)
!33 = !{!34, !37, !40, !43, !46, !49, !50, !53, !54, !55, !56, !57, !58, !59, !62}
!34 = !DISubprogram(name: "createtask", scope: !6, file: !6, line: 97, type: !35, isLocal: false, isDefinition: true, scopeLine: 103, flags: DIFlagPrototyped, isOptimized: false, function: void (i32, i32, %struct.packet*, i32, %struct.task* (%struct.packet*)*, i64, i64)* @createtask, variables: !2)
!35 = !DISubroutineType(types: !36)
!36 = !{null, !10, !10, !13, !10, !27, !31, !31}
!37 = !DISubprogram(name: "pkt", scope: !6, file: !6, line: 118, type: !38, isLocal: false, isDefinition: true, scopeLine: 118, flags: DIFlagPrototyped, isOptimized: false, function: %struct.packet* (%struct.packet*, i32, i32)* @pkt, variables: !2)
!38 = !DISubroutineType(types: !39)
!39 = !{!13, !13, !10, !10}
!40 = !DISubprogram(name: "trace", scope: !6, file: !6, line: 133, type: !41, isLocal: false, isDefinition: true, scopeLine: 133, flags: DIFlagPrototyped, isOptimized: false, function: void (i8)* @trace, variables: !2)
!41 = !DISubroutineType(types: !42)
!42 = !{null, !22}
!43 = !DISubprogram(name: "schedule", scope: !6, file: !6, line: 142, type: !44, isLocal: false, isDefinition: true, scopeLine: 142, isOptimized: false, function: void ()* @schedule, variables: !2)
!44 = !DISubroutineType(types: !45)
!45 = !{null}
!46 = !DISubprogram(name: "Wait", scope: !6, file: !6, line: 183, type: !47, isLocal: false, isDefinition: true, scopeLine: 183, flags: DIFlagPrototyped, isOptimized: false, function: %struct.task* ()* @Wait, variables: !2)
!47 = !DISubroutineType(types: !48)
!48 = !{!4}
!49 = !DISubprogram(name: "holdself", scope: !6, file: !6, line: 188, type: !47, isLocal: false, isDefinition: true, scopeLine: 188, flags: DIFlagPrototyped, isOptimized: false, function: %struct.task* ()* @holdself, variables: !2)
!50 = !DISubprogram(name: "findtcb", scope: !6, file: !6, line: 194, type: !51, isLocal: false, isDefinition: true, scopeLine: 194, flags: DIFlagPrototyped, isOptimized: false, function: %struct.task* (i32)* @findtcb, variables: !2)
!51 = !DISubroutineType(types: !52)
!52 = !{!4, !10}
!53 = !DISubprogram(name: "release", scope: !6, file: !6, line: 204, type: !51, isLocal: false, isDefinition: true, scopeLine: 204, flags: DIFlagPrototyped, isOptimized: false, function: %struct.task* (i32)* @release, variables: !2)
!54 = !DISubprogram(name: "qpkt", scope: !6, file: !6, line: 218, type: !28, isLocal: false, isDefinition: true, scopeLine: 218, flags: DIFlagPrototyped, isOptimized: false, function: %struct.task* (%struct.packet*)* @qpkt, variables: !2)
!55 = !DISubprogram(name: "idlefn", scope: !6, file: !6, line: 242, type: !28, isLocal: false, isDefinition: true, scopeLine: 242, flags: DIFlagPrototyped, isOptimized: false, function: %struct.task* (%struct.packet*)* @idlefn, variables: !2)
!56 = !DISubprogram(name: "workfn", scope: !6, file: !6, line: 256, type: !28, isLocal: false, isDefinition: true, scopeLine: 256, flags: DIFlagPrototyped, isOptimized: false, function: %struct.task* (%struct.packet*)* @workfn, variables: !2)
!57 = !DISubprogram(name: "handlerfn", scope: !6, file: !6, line: 276, type: !28, isLocal: false, isDefinition: true, scopeLine: 276, flags: DIFlagPrototyped, isOptimized: false, function: %struct.task* (%struct.packet*)* @handlerfn, variables: !2)
!58 = !DISubprogram(name: "devfn", scope: !6, file: !6, line: 304, type: !28, isLocal: false, isDefinition: true, scopeLine: 304, flags: DIFlagPrototyped, isOptimized: false, function: %struct.task* (%struct.packet*)* @devfn, variables: !2)
!59 = !DISubprogram(name: "append", scope: !6, file: !6, line: 319, type: !60, isLocal: false, isDefinition: true, scopeLine: 319, flags: DIFlagPrototyped, isOptimized: false, function: void (%struct.packet*, %struct.packet*)* @append, variables: !2)
!60 = !DISubroutineType(types: !61)
!61 = !{null, !13, !13}
!62 = !DISubprogram(name: "main", scope: !6, file: !6, line: 328, type: !63, isLocal: false, isDefinition: true, scopeLine: 328, isOptimized: false, function: i32 ()* @main, variables: !2)
!63 = !DISubroutineType(types: !64)
!64 = !{!10}
!65 = !{!66, !70, !74, !75, !76, !77, !78, !79, !80, !81, !82}
!66 = !DIGlobalVariable(name: "alphabet", scope: !0, file: !6, line: 83, type: !67, isLocal: false, isDefinition: true, variable: [28 x i8]* @alphabet)
!67 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 224, align: 8, elements: !68)
!68 = !{!69}
!69 = !DISubrange(count: 28)
!70 = !DIGlobalVariable(name: "tasktab", scope: !0, file: !6, line: 84, type: !71, isLocal: false, isDefinition: true, variable: [11 x %struct.task*]* @tasktab)
!71 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 704, align: 64, elements: !72)
!72 = !{!73}
!73 = !DISubrange(count: 11)
!74 = !DIGlobalVariable(name: "tasklist", scope: !0, file: !6, line: 85, type: !4, isLocal: false, isDefinition: true, variable: %struct.task** @tasklist)
!75 = !DIGlobalVariable(name: "qpktcount", scope: !0, file: !6, line: 90, type: !10, isLocal: false, isDefinition: true, variable: i32* @qpktcount)
!76 = !DIGlobalVariable(name: "holdcount", scope: !0, file: !6, line: 91, type: !10, isLocal: false, isDefinition: true, variable: i32* @holdcount)
!77 = !DIGlobalVariable(name: "tracing", scope: !0, file: !6, line: 92, type: !10, isLocal: false, isDefinition: true, variable: i32* @tracing)
!78 = !DIGlobalVariable(name: "layout", scope: !0, file: !6, line: 93, type: !10, isLocal: false, isDefinition: true, variable: i32* @layout)
!79 = !DIGlobalVariable(name: "tcb", scope: !0, file: !6, line: 86, type: !4, isLocal: false, isDefinition: true, variable: %struct.task** @tcb)
!80 = !DIGlobalVariable(name: "taskid", scope: !0, file: !6, line: 87, type: !31, isLocal: false, isDefinition: true, variable: i64* @taskid)
!81 = !DIGlobalVariable(name: "v1", scope: !0, file: !6, line: 88, type: !31, isLocal: false, isDefinition: true, variable: i64* @v1)
!82 = !DIGlobalVariable(name: "v2", scope: !0, file: !6, line: 89, type: !31, isLocal: false, isDefinition: true, variable: i64* @v2)
!83 = !{i32 2, !"Dwarf Version", i32 4}
!84 = !{i32 2, !"Debug Info Version", i32 3}
!85 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!86 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "id", arg: 1, scope: !34, file: !6, line: 97, type: !10)
!87 = !DIExpression()
!88 = !DILocation(line: 97, column: 21, scope: !34)
!89 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "pri", arg: 2, scope: !34, file: !6, line: 98, type: !10)
!90 = !DILocation(line: 98, column: 21, scope: !34)
!91 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "wkq", arg: 3, scope: !34, file: !6, line: 99, type: !13)
!92 = !DILocation(line: 99, column: 32, scope: !34)
!93 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "state", arg: 4, scope: !34, file: !6, line: 100, type: !10)
!94 = !DILocation(line: 100, column: 21, scope: !34)
!95 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fn", arg: 5, scope: !34, file: !6, line: 101, type: !27)
!96 = !DILocation(line: 101, column: 32, scope: !34)
!97 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v1", arg: 6, scope: !34, file: !6, line: 102, type: !31)
!98 = !DILocation(line: 102, column: 22, scope: !34)
!99 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v2", arg: 7, scope: !34, file: !6, line: 103, type: !31)
!100 = !DILocation(line: 103, column: 22, scope: !34)
!101 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !34, file: !6, line: 104, type: !4)
!102 = !DILocation(line: 104, column: 16, scope: !34)
!103 = !DILocation(line: 104, column: 35, scope: !34)
!104 = !DILocation(line: 104, column: 20, scope: !34)
!105 = !DILocation(line: 106, column: 17, scope: !34)
!106 = !DILocation(line: 106, column: 11, scope: !34)
!107 = !DILocation(line: 106, column: 3, scope: !34)
!108 = !DILocation(line: 106, column: 15, scope: !34)
!109 = !DILocation(line: 107, column: 15, scope: !34)
!110 = !DILocation(line: 107, column: 3, scope: !34)
!111 = !DILocation(line: 107, column: 6, scope: !34)
!112 = !DILocation(line: 107, column: 13, scope: !34)
!113 = !DILocation(line: 108, column: 13, scope: !34)
!114 = !DILocation(line: 108, column: 3, scope: !34)
!115 = !DILocation(line: 108, column: 6, scope: !34)
!116 = !DILocation(line: 108, column: 11, scope: !34)
!117 = !DILocation(line: 109, column: 14, scope: !34)
!118 = !DILocation(line: 109, column: 3, scope: !34)
!119 = !DILocation(line: 109, column: 6, scope: !34)
!120 = !DILocation(line: 109, column: 12, scope: !34)
!121 = !DILocation(line: 110, column: 14, scope: !34)
!122 = !DILocation(line: 110, column: 3, scope: !34)
!123 = !DILocation(line: 110, column: 6, scope: !34)
!124 = !DILocation(line: 110, column: 12, scope: !34)
!125 = !DILocation(line: 111, column: 16, scope: !34)
!126 = !DILocation(line: 111, column: 3, scope: !34)
!127 = !DILocation(line: 111, column: 6, scope: !34)
!128 = !DILocation(line: 111, column: 14, scope: !34)
!129 = !DILocation(line: 112, column: 13, scope: !34)
!130 = !DILocation(line: 112, column: 3, scope: !34)
!131 = !DILocation(line: 112, column: 6, scope: !34)
!132 = !DILocation(line: 112, column: 11, scope: !34)
!133 = !DILocation(line: 113, column: 13, scope: !34)
!134 = !DILocation(line: 113, column: 3, scope: !34)
!135 = !DILocation(line: 113, column: 6, scope: !34)
!136 = !DILocation(line: 113, column: 11, scope: !34)
!137 = !DILocation(line: 114, column: 13, scope: !34)
!138 = !DILocation(line: 114, column: 3, scope: !34)
!139 = !DILocation(line: 114, column: 6, scope: !34)
!140 = !DILocation(line: 114, column: 11, scope: !34)
!141 = !DILocation(line: 115, column: 14, scope: !34)
!142 = !DILocation(line: 115, column: 12, scope: !34)
!143 = !DILocation(line: 116, column: 1, scope: !34)
!144 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "link", arg: 1, scope: !37, file: !6, line: 118, type: !13)
!145 = !DILocation(line: 118, column: 35, scope: !37)
!146 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "id", arg: 2, scope: !37, file: !6, line: 118, type: !10)
!147 = !DILocation(line: 118, column: 45, scope: !37)
!148 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kind", arg: 3, scope: !37, file: !6, line: 118, type: !10)
!149 = !DILocation(line: 118, column: 53, scope: !37)
!150 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !37, file: !6, line: 119, type: !10)
!151 = !DILocation(line: 119, column: 7, scope: !37)
!152 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !37, file: !6, line: 120, type: !13)
!153 = !DILocation(line: 120, column: 18, scope: !37)
!154 = !DILocation(line: 120, column: 39, scope: !37)
!155 = !DILocation(line: 120, column: 22, scope: !37)
!156 = !DILocation(line: 122, column: 10, scope: !157)
!157 = distinct !DILexicalBlock(scope: !37, file: !6, line: 122, column: 3)
!158 = !DILocation(line: 122, column: 8, scope: !157)
!159 = !DILocation(line: 122, column: 15, scope: !160)
!160 = !DILexicalBlockFile(scope: !161, file: !6, discriminator: 2)
!161 = !DILexicalBlockFile(scope: !162, file: !6, discriminator: 1)
!162 = distinct !DILexicalBlock(scope: !157, file: !6, line: 122, column: 3)
!163 = !DILocation(line: 122, column: 17, scope: !162)
!164 = !DILocation(line: 122, column: 3, scope: !157)
!165 = !DILocation(line: 123, column: 13, scope: !162)
!166 = !DILocation(line: 123, column: 5, scope: !162)
!167 = !DILocation(line: 123, column: 8, scope: !162)
!168 = !DILocation(line: 123, column: 16, scope: !162)
!169 = !DILocation(line: 122, column: 30, scope: !162)
!170 = !DILocation(line: 122, column: 3, scope: !162)
!171 = !DILocation(line: 125, column: 15, scope: !37)
!172 = !DILocation(line: 125, column: 3, scope: !37)
!173 = !DILocation(line: 125, column: 6, scope: !37)
!174 = !DILocation(line: 125, column: 13, scope: !37)
!175 = !DILocation(line: 126, column: 13, scope: !37)
!176 = !DILocation(line: 126, column: 3, scope: !37)
!177 = !DILocation(line: 126, column: 6, scope: !37)
!178 = !DILocation(line: 126, column: 11, scope: !37)
!179 = !DILocation(line: 127, column: 15, scope: !37)
!180 = !DILocation(line: 127, column: 3, scope: !37)
!181 = !DILocation(line: 127, column: 6, scope: !37)
!182 = !DILocation(line: 127, column: 13, scope: !37)
!183 = !DILocation(line: 128, column: 3, scope: !37)
!184 = !DILocation(line: 128, column: 6, scope: !37)
!185 = !DILocation(line: 128, column: 11, scope: !37)
!186 = !DILocation(line: 130, column: 11, scope: !37)
!187 = !DILocation(line: 130, column: 3, scope: !37)
!188 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !40, file: !6, line: 133, type: !22)
!189 = !DILocation(line: 133, column: 17, scope: !40)
!190 = !DILocation(line: 134, column: 7, scope: !191)
!191 = distinct !DILexicalBlock(scope: !40, file: !6, line: 134, column: 7)
!192 = !DILocation(line: 134, column: 16, scope: !191)
!193 = !DILocation(line: 134, column: 7, scope: !40)
!194 = !DILocation(line: 135, column: 5, scope: !195)
!195 = distinct !DILexicalBlock(scope: !191, file: !6, line: 134, column: 22)
!196 = !DILocation(line: 136, column: 12, scope: !195)
!197 = !DILocation(line: 137, column: 3, scope: !195)
!198 = !DILocation(line: 139, column: 16, scope: !40)
!199 = !DILocation(line: 139, column: 3, scope: !40)
!200 = !DILocation(line: 140, column: 1, scope: !40)
!201 = !DILocation(line: 143, column: 3, scope: !43)
!202 = !DILocation(line: 143, column: 10, scope: !203)
!203 = !DILexicalBlockFile(scope: !204, file: !6, discriminator: 2)
!204 = !DILexicalBlockFile(scope: !43, file: !6, discriminator: 1)
!205 = !DILocation(line: 143, column: 14, scope: !43)
!206 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pkt", scope: !207, file: !6, line: 144, type: !13)
!207 = distinct !DILexicalBlock(scope: !43, file: !6, line: 143, column: 20)
!208 = !DILocation(line: 144, column: 20, scope: !207)
!209 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newtcb", scope: !207, file: !6, line: 145, type: !4)
!210 = !DILocation(line: 145, column: 18, scope: !207)
!211 = !DILocation(line: 147, column: 9, scope: !207)
!212 = !DILocation(line: 149, column: 13, scope: !207)
!213 = !DILocation(line: 149, column: 18, scope: !207)
!214 = !DILocation(line: 149, column: 5, scope: !207)
!215 = !DILocation(line: 151, column: 13, scope: !216)
!216 = distinct !DILexicalBlock(scope: !207, file: !6, line: 149, column: 27)
!217 = !DILocation(line: 151, column: 18, scope: !216)
!218 = !DILocation(line: 151, column: 11, scope: !216)
!219 = !DILocation(line: 152, column: 20, scope: !216)
!220 = !DILocation(line: 152, column: 25, scope: !216)
!221 = !DILocation(line: 152, column: 7, scope: !216)
!222 = !DILocation(line: 152, column: 12, scope: !216)
!223 = !DILocation(line: 152, column: 18, scope: !216)
!224 = !DILocation(line: 153, column: 22, scope: !216)
!225 = !DILocation(line: 153, column: 27, scope: !216)
!226 = !DILocation(line: 153, column: 33, scope: !216)
!227 = !DILocation(line: 153, column: 7, scope: !216)
!228 = !DILocation(line: 153, column: 12, scope: !216)
!229 = !DILocation(line: 153, column: 20, scope: !216)
!230 = !DILocation(line: 157, column: 16, scope: !216)
!231 = !DILocation(line: 157, column: 21, scope: !216)
!232 = !DILocation(line: 157, column: 14, scope: !216)
!233 = !DILocation(line: 158, column: 12, scope: !216)
!234 = !DILocation(line: 158, column: 17, scope: !216)
!235 = !DILocation(line: 158, column: 10, scope: !216)
!236 = !DILocation(line: 159, column: 12, scope: !216)
!237 = !DILocation(line: 159, column: 17, scope: !216)
!238 = !DILocation(line: 159, column: 10, scope: !216)
!239 = !DILocation(line: 160, column: 11, scope: !240)
!240 = distinct !DILexicalBlock(scope: !216, file: !6, line: 160, column: 11)
!241 = !DILocation(line: 160, column: 19, scope: !240)
!242 = !DILocation(line: 160, column: 11, scope: !216)
!243 = !DILocation(line: 161, column: 15, scope: !240)
!244 = !DILocation(line: 161, column: 22, scope: !240)
!245 = !DILocation(line: 161, column: 9, scope: !240)
!246 = !DILocation(line: 163, column: 19, scope: !216)
!247 = !DILocation(line: 163, column: 24, scope: !216)
!248 = !DILocation(line: 163, column: 31, scope: !216)
!249 = !DILocation(line: 163, column: 16, scope: !216)
!250 = !DILocation(line: 163, column: 14, scope: !216)
!251 = !DILocation(line: 164, column: 19, scope: !216)
!252 = !DILocation(line: 164, column: 7, scope: !216)
!253 = !DILocation(line: 164, column: 12, scope: !216)
!254 = !DILocation(line: 164, column: 17, scope: !216)
!255 = !DILocation(line: 165, column: 19, scope: !216)
!256 = !DILocation(line: 165, column: 7, scope: !216)
!257 = !DILocation(line: 165, column: 12, scope: !216)
!258 = !DILocation(line: 165, column: 17, scope: !216)
!259 = !DILocation(line: 166, column: 13, scope: !216)
!260 = !DILocation(line: 166, column: 11, scope: !216)
!261 = !DILocation(line: 167, column: 7, scope: !216)
!262 = !DILocation(line: 174, column: 13, scope: !216)
!263 = !DILocation(line: 174, column: 18, scope: !216)
!264 = !DILocation(line: 174, column: 11, scope: !216)
!265 = !DILocation(line: 175, column: 7, scope: !216)
!266 = !DILocation(line: 178, column: 7, scope: !216)
!267 = !DILocation(line: 181, column: 1, scope: !43)
!268 = !DILocation(line: 184, column: 3, scope: !46)
!269 = !DILocation(line: 184, column: 8, scope: !46)
!270 = !DILocation(line: 184, column: 16, scope: !46)
!271 = !DILocation(line: 185, column: 11, scope: !46)
!272 = !DILocation(line: 185, column: 3, scope: !46)
!273 = !DILocation(line: 189, column: 3, scope: !49)
!274 = !DILocation(line: 190, column: 3, scope: !49)
!275 = !DILocation(line: 190, column: 8, scope: !49)
!276 = !DILocation(line: 190, column: 16, scope: !49)
!277 = !DILocation(line: 191, column: 11, scope: !49)
!278 = !DILocation(line: 191, column: 16, scope: !49)
!279 = !DILocation(line: 191, column: 3, scope: !49)
!280 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "id", arg: 1, scope: !50, file: !6, line: 194, type: !10)
!281 = !DILocation(line: 194, column: 26, scope: !50)
!282 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !50, file: !6, line: 195, type: !4)
!283 = !DILocation(line: 195, column: 16, scope: !50)
!284 = !DILocation(line: 197, column: 12, scope: !285)
!285 = distinct !DILexicalBlock(scope: !50, file: !6, line: 197, column: 7)
!286 = !DILocation(line: 197, column: 9, scope: !285)
!287 = !DILocation(line: 197, column: 15, scope: !285)
!288 = !DILocation(line: 197, column: 18, scope: !289)
!289 = !DILexicalBlockFile(scope: !285, file: !6, discriminator: 1)
!290 = !DILocation(line: 197, column: 21, scope: !285)
!291 = !DILocation(line: 197, column: 7, scope: !50)
!292 = !DILocation(line: 198, column: 17, scope: !285)
!293 = !DILocation(line: 198, column: 9, scope: !285)
!294 = !DILocation(line: 198, column: 7, scope: !285)
!295 = !DILocation(line: 198, column: 5, scope: !285)
!296 = !DILocation(line: 199, column: 7, scope: !297)
!297 = distinct !DILexicalBlock(scope: !50, file: !6, line: 199, column: 7)
!298 = !DILocation(line: 199, column: 9, scope: !297)
!299 = !DILocation(line: 199, column: 7, scope: !50)
!300 = !DILocation(line: 200, column: 34, scope: !297)
!301 = !DILocation(line: 200, column: 5, scope: !297)
!302 = !DILocation(line: 201, column: 11, scope: !50)
!303 = !DILocation(line: 201, column: 3, scope: !50)
!304 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "id", arg: 1, scope: !53, file: !6, line: 204, type: !10)
!305 = !DILocation(line: 204, column: 26, scope: !53)
!306 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !53, file: !6, line: 205, type: !4)
!307 = !DILocation(line: 205, column: 16, scope: !53)
!308 = !DILocation(line: 207, column: 15, scope: !53)
!309 = !DILocation(line: 207, column: 7, scope: !53)
!310 = !DILocation(line: 207, column: 5, scope: !53)
!311 = !DILocation(line: 208, column: 7, scope: !312)
!312 = distinct !DILexicalBlock(scope: !53, file: !6, line: 208, column: 7)
!313 = !DILocation(line: 208, column: 9, scope: !312)
!314 = !DILocation(line: 208, column: 7, scope: !53)
!315 = !DILocation(line: 209, column: 5, scope: !312)
!316 = !DILocation(line: 211, column: 3, scope: !53)
!317 = !DILocation(line: 211, column: 6, scope: !53)
!318 = !DILocation(line: 211, column: 14, scope: !53)
!319 = !DILocation(line: 212, column: 7, scope: !320)
!320 = distinct !DILexicalBlock(scope: !53, file: !6, line: 212, column: 7)
!321 = !DILocation(line: 212, column: 10, scope: !320)
!322 = !DILocation(line: 212, column: 18, scope: !320)
!323 = !DILocation(line: 212, column: 23, scope: !320)
!324 = !DILocation(line: 212, column: 16, scope: !320)
!325 = !DILocation(line: 212, column: 7, scope: !53)
!326 = !DILocation(line: 213, column: 13, scope: !320)
!327 = !DILocation(line: 213, column: 5, scope: !320)
!328 = !DILocation(line: 215, column: 11, scope: !53)
!329 = !DILocation(line: 215, column: 3, scope: !53)
!330 = !DILocation(line: 216, column: 1, scope: !53)
!331 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "pkt", arg: 1, scope: !54, file: !6, line: 218, type: !13)
!332 = !DILocation(line: 218, column: 34, scope: !54)
!333 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !54, file: !6, line: 219, type: !4)
!334 = !DILocation(line: 219, column: 16, scope: !54)
!335 = !DILocation(line: 221, column: 15, scope: !54)
!336 = !DILocation(line: 221, column: 20, scope: !54)
!337 = !DILocation(line: 221, column: 7, scope: !54)
!338 = !DILocation(line: 221, column: 5, scope: !54)
!339 = !DILocation(line: 222, column: 7, scope: !340)
!340 = distinct !DILexicalBlock(scope: !54, file: !6, line: 222, column: 7)
!341 = !DILocation(line: 222, column: 9, scope: !340)
!342 = !DILocation(line: 222, column: 7, scope: !54)
!343 = !DILocation(line: 223, column: 13, scope: !340)
!344 = !DILocation(line: 223, column: 5, scope: !340)
!345 = !DILocation(line: 225, column: 12, scope: !54)
!346 = !DILocation(line: 227, column: 3, scope: !54)
!347 = !DILocation(line: 227, column: 8, scope: !54)
!348 = !DILocation(line: 227, column: 15, scope: !54)
!349 = !DILocation(line: 228, column: 15, scope: !54)
!350 = !DILocation(line: 228, column: 3, scope: !54)
!351 = !DILocation(line: 228, column: 8, scope: !54)
!352 = !DILocation(line: 228, column: 13, scope: !54)
!353 = !DILocation(line: 230, column: 7, scope: !354)
!354 = distinct !DILexicalBlock(scope: !54, file: !6, line: 230, column: 7)
!355 = !DILocation(line: 230, column: 10, scope: !354)
!356 = !DILocation(line: 230, column: 16, scope: !354)
!357 = !DILocation(line: 230, column: 7, scope: !54)
!358 = !DILocation(line: 231, column: 16, scope: !359)
!359 = distinct !DILexicalBlock(scope: !354, file: !6, line: 230, column: 22)
!360 = !DILocation(line: 231, column: 5, scope: !359)
!361 = !DILocation(line: 231, column: 8, scope: !359)
!362 = !DILocation(line: 231, column: 14, scope: !359)
!363 = !DILocation(line: 232, column: 5, scope: !359)
!364 = !DILocation(line: 232, column: 8, scope: !359)
!365 = !DILocation(line: 232, column: 16, scope: !359)
!366 = !DILocation(line: 233, column: 9, scope: !367)
!367 = distinct !DILexicalBlock(scope: !359, file: !6, line: 233, column: 9)
!368 = !DILocation(line: 233, column: 12, scope: !367)
!369 = !DILocation(line: 233, column: 20, scope: !367)
!370 = !DILocation(line: 233, column: 25, scope: !367)
!371 = !DILocation(line: 233, column: 18, scope: !367)
!372 = !DILocation(line: 233, column: 9, scope: !359)
!373 = !DILocation(line: 234, column: 15, scope: !367)
!374 = !DILocation(line: 234, column: 7, scope: !367)
!375 = !DILocation(line: 235, column: 3, scope: !359)
!376 = !DILocation(line: 236, column: 12, scope: !377)
!377 = distinct !DILexicalBlock(scope: !354, file: !6, line: 235, column: 10)
!378 = !DILocation(line: 236, column: 36, scope: !377)
!379 = !DILocation(line: 236, column: 39, scope: !377)
!380 = !DILocation(line: 236, column: 17, scope: !377)
!381 = !DILocation(line: 236, column: 5, scope: !377)
!382 = !DILocation(line: 239, column: 11, scope: !54)
!383 = !DILocation(line: 239, column: 3, scope: !54)
!384 = !DILocation(line: 240, column: 1, scope: !54)
!385 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "pkt", arg: 1, scope: !59, file: !6, line: 319, type: !13)
!386 = !DILocation(line: 319, column: 28, scope: !59)
!387 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "ptr", arg: 2, scope: !59, file: !6, line: 319, type: !13)
!388 = !DILocation(line: 319, column: 48, scope: !59)
!389 = !DILocation(line: 320, column: 3, scope: !59)
!390 = !DILocation(line: 320, column: 8, scope: !59)
!391 = !DILocation(line: 320, column: 15, scope: !59)
!392 = !DILocation(line: 322, column: 3, scope: !59)
!393 = !DILocation(line: 322, column: 10, scope: !394)
!394 = !DILexicalBlockFile(scope: !395, file: !6, discriminator: 2)
!395 = !DILexicalBlockFile(scope: !59, file: !6, discriminator: 1)
!396 = !DILocation(line: 322, column: 15, scope: !59)
!397 = !DILocation(line: 323, column: 11, scope: !59)
!398 = !DILocation(line: 323, column: 16, scope: !59)
!399 = !DILocation(line: 323, column: 9, scope: !59)
!400 = !DILocation(line: 325, column: 17, scope: !59)
!401 = !DILocation(line: 325, column: 3, scope: !59)
!402 = !DILocation(line: 325, column: 8, scope: !59)
!403 = !DILocation(line: 325, column: 15, scope: !59)
!404 = !DILocation(line: 326, column: 1, scope: !59)
!405 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "pkt", arg: 1, scope: !55, file: !6, line: 242, type: !13)
!406 = !DILocation(line: 242, column: 36, scope: !55)
!407 = !DILocation(line: 243, column: 3, scope: !55)
!408 = !DILocation(line: 244, column: 7, scope: !409)
!409 = distinct !DILexicalBlock(scope: !55, file: !6, line: 244, column: 7)
!410 = !DILocation(line: 244, column: 10, scope: !409)
!411 = !DILocation(line: 244, column: 7, scope: !55)
!412 = !DILocation(line: 245, column: 13, scope: !409)
!413 = !DILocation(line: 245, column: 5, scope: !409)
!414 = !DILocation(line: 247, column: 8, scope: !415)
!415 = distinct !DILexicalBlock(scope: !55, file: !6, line: 247, column: 7)
!416 = !DILocation(line: 247, column: 11, scope: !415)
!417 = !DILocation(line: 247, column: 16, scope: !415)
!418 = !DILocation(line: 247, column: 7, scope: !55)
!419 = !DILocation(line: 248, column: 11, scope: !420)
!420 = distinct !DILexicalBlock(scope: !415, file: !6, line: 247, column: 22)
!421 = !DILocation(line: 248, column: 14, scope: !420)
!422 = !DILocation(line: 248, column: 20, scope: !420)
!423 = !DILocation(line: 248, column: 8, scope: !420)
!424 = !DILocation(line: 249, column: 13, scope: !420)
!425 = !DILocation(line: 249, column: 5, scope: !420)
!426 = !DILocation(line: 251, column: 12, scope: !427)
!427 = distinct !DILexicalBlock(scope: !415, file: !6, line: 250, column: 10)
!428 = !DILocation(line: 251, column: 15, scope: !427)
!429 = !DILocation(line: 251, column: 21, scope: !427)
!430 = !DILocation(line: 251, column: 31, scope: !427)
!431 = !DILocation(line: 251, column: 8, scope: !427)
!432 = !DILocation(line: 252, column: 13, scope: !427)
!433 = !DILocation(line: 252, column: 5, scope: !427)
!434 = !DILocation(line: 254, column: 1, scope: !55)
!435 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "pkt", arg: 1, scope: !56, file: !6, line: 256, type: !13)
!436 = !DILocation(line: 256, column: 36, scope: !56)
!437 = !DILocation(line: 257, column: 7, scope: !438)
!438 = distinct !DILexicalBlock(scope: !56, file: !6, line: 257, column: 7)
!439 = !DILocation(line: 257, column: 11, scope: !438)
!440 = !DILocation(line: 257, column: 7, scope: !56)
!441 = !DILocation(line: 258, column: 13, scope: !438)
!442 = !DILocation(line: 258, column: 5, scope: !438)
!443 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !444, file: !6, line: 260, type: !10)
!444 = distinct !DILexicalBlock(scope: !438, file: !6, line: 259, column: 8)
!445 = !DILocation(line: 260, column: 9, scope: !444)
!446 = !DILocation(line: 262, column: 36, scope: !444)
!447 = !DILocation(line: 262, column: 34, scope: !444)
!448 = !DILocation(line: 262, column: 8, scope: !444)
!449 = !DILocation(line: 263, column: 17, scope: !444)
!450 = !DILocation(line: 263, column: 5, scope: !444)
!451 = !DILocation(line: 263, column: 10, scope: !444)
!452 = !DILocation(line: 263, column: 15, scope: !444)
!453 = !DILocation(line: 265, column: 5, scope: !444)
!454 = !DILocation(line: 265, column: 10, scope: !444)
!455 = !DILocation(line: 265, column: 15, scope: !444)
!456 = !DILocation(line: 266, column: 12, scope: !457)
!457 = distinct !DILexicalBlock(scope: !444, file: !6, line: 266, column: 5)
!458 = !DILocation(line: 266, column: 10, scope: !457)
!459 = !DILocation(line: 266, column: 17, scope: !460)
!460 = !DILexicalBlockFile(scope: !461, file: !6, discriminator: 2)
!461 = !DILexicalBlockFile(scope: !462, file: !6, discriminator: 1)
!462 = distinct !DILexicalBlock(scope: !457, file: !6, line: 266, column: 5)
!463 = !DILocation(line: 266, column: 19, scope: !462)
!464 = !DILocation(line: 266, column: 5, scope: !457)
!465 = !DILocation(line: 267, column: 9, scope: !466)
!466 = distinct !DILexicalBlock(scope: !462, file: !6, line: 266, column: 36)
!467 = !DILocation(line: 268, column: 11, scope: !468)
!468 = distinct !DILexicalBlock(scope: !466, file: !6, line: 268, column: 11)
!469 = !DILocation(line: 268, column: 14, scope: !468)
!470 = !DILocation(line: 268, column: 11, scope: !466)
!471 = !DILocation(line: 269, column: 12, scope: !468)
!472 = !DILocation(line: 269, column: 9, scope: !468)
!473 = !DILocation(line: 270, column: 33, scope: !466)
!474 = !DILocation(line: 270, column: 24, scope: !466)
!475 = !DILocation(line: 270, column: 19, scope: !466)
!476 = !DILocation(line: 270, column: 7, scope: !466)
!477 = !DILocation(line: 270, column: 8, scope: !466)
!478 = !DILocation(line: 270, column: 13, scope: !466)
!479 = !DILocation(line: 270, column: 22, scope: !466)
!480 = !DILocation(line: 271, column: 5, scope: !466)
!481 = !DILocation(line: 266, column: 32, scope: !462)
!482 = !DILocation(line: 266, column: 5, scope: !462)
!483 = !DILocation(line: 272, column: 18, scope: !444)
!484 = !DILocation(line: 272, column: 13, scope: !444)
!485 = !DILocation(line: 272, column: 5, scope: !444)
!486 = !DILocation(line: 274, column: 1, scope: !56)
!487 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "pkt", arg: 1, scope: !57, file: !6, line: 276, type: !13)
!488 = !DILocation(line: 276, column: 39, scope: !57)
!489 = !DILocation(line: 277, column: 7, scope: !490)
!490 = distinct !DILexicalBlock(scope: !57, file: !6, line: 277, column: 7)
!491 = !DILocation(line: 277, column: 11, scope: !490)
!492 = !DILocation(line: 277, column: 7, scope: !57)
!493 = !DILocation(line: 278, column: 12, scope: !490)
!494 = !DILocation(line: 279, column: 30, scope: !490)
!495 = !DILocation(line: 279, column: 35, scope: !490)
!496 = !DILocation(line: 279, column: 42, scope: !490)
!497 = !DILocation(line: 279, column: 12, scope: !490)
!498 = !DILocation(line: 278, column: 5, scope: !490)
!499 = !DILocation(line: 281, column: 7, scope: !500)
!500 = distinct !DILexicalBlock(scope: !57, file: !6, line: 281, column: 7)
!501 = !DILocation(line: 281, column: 10, scope: !500)
!502 = !DILocation(line: 281, column: 7, scope: !57)
!503 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !504, file: !6, line: 282, type: !10)
!504 = distinct !DILexicalBlock(scope: !500, file: !6, line: 281, column: 16)
!505 = !DILocation(line: 282, column: 9, scope: !504)
!506 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "workpkt", scope: !504, file: !6, line: 283, type: !13)
!507 = !DILocation(line: 283, column: 20, scope: !504)
!508 = !DILocation(line: 283, column: 47, scope: !504)
!509 = !DILocation(line: 283, column: 30, scope: !504)
!510 = !DILocation(line: 284, column: 13, scope: !504)
!511 = !DILocation(line: 284, column: 22, scope: !504)
!512 = !DILocation(line: 284, column: 11, scope: !504)
!513 = !DILocation(line: 286, column: 9, scope: !514)
!514 = distinct !DILexicalBlock(scope: !504, file: !6, line: 286, column: 9)
!515 = !DILocation(line: 286, column: 15, scope: !514)
!516 = !DILocation(line: 286, column: 9, scope: !504)
!517 = !DILocation(line: 287, column: 37, scope: !518)
!518 = distinct !DILexicalBlock(scope: !514, file: !6, line: 286, column: 26)
!519 = !DILocation(line: 287, column: 20, scope: !518)
!520 = !DILocation(line: 287, column: 42, scope: !518)
!521 = !DILocation(line: 287, column: 12, scope: !518)
!522 = !DILocation(line: 287, column: 10, scope: !518)
!523 = !DILocation(line: 288, column: 20, scope: !518)
!524 = !DILocation(line: 288, column: 15, scope: !518)
!525 = !DILocation(line: 288, column: 7, scope: !518)
!526 = !DILocation(line: 291, column: 9, scope: !527)
!527 = distinct !DILexicalBlock(scope: !504, file: !6, line: 291, column: 9)
!528 = !DILocation(line: 291, column: 12, scope: !527)
!529 = !DILocation(line: 291, column: 9, scope: !504)
!530 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "devpkt", scope: !531, file: !6, line: 292, type: !13)
!531 = distinct !DILexicalBlock(scope: !527, file: !6, line: 291, column: 18)
!532 = !DILocation(line: 292, column: 22, scope: !531)
!533 = !DILocation(line: 294, column: 33, scope: !531)
!534 = !DILocation(line: 294, column: 16, scope: !531)
!535 = !DILocation(line: 294, column: 14, scope: !531)
!536 = !DILocation(line: 295, column: 37, scope: !531)
!537 = !DILocation(line: 295, column: 20, scope: !531)
!538 = !DILocation(line: 295, column: 42, scope: !531)
!539 = !DILocation(line: 295, column: 12, scope: !531)
!540 = !DILocation(line: 295, column: 10, scope: !531)
!541 = !DILocation(line: 296, column: 36, scope: !531)
!542 = !DILocation(line: 296, column: 22, scope: !531)
!543 = !DILocation(line: 296, column: 31, scope: !531)
!544 = !DILocation(line: 296, column: 7, scope: !531)
!545 = !DILocation(line: 296, column: 15, scope: !531)
!546 = !DILocation(line: 296, column: 20, scope: !531)
!547 = !DILocation(line: 297, column: 23, scope: !531)
!548 = !DILocation(line: 297, column: 29, scope: !531)
!549 = !DILocation(line: 297, column: 7, scope: !531)
!550 = !DILocation(line: 297, column: 16, scope: !531)
!551 = !DILocation(line: 297, column: 21, scope: !531)
!552 = !DILocation(line: 298, column: 20, scope: !531)
!553 = !DILocation(line: 298, column: 15, scope: !531)
!554 = !DILocation(line: 298, column: 7, scope: !531)
!555 = !DILocation(line: 300, column: 3, scope: !504)
!556 = !DILocation(line: 301, column: 11, scope: !57)
!557 = !DILocation(line: 301, column: 3, scope: !57)
!558 = !DILocation(line: 302, column: 1, scope: !57)
!559 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "pkt", arg: 1, scope: !58, file: !6, line: 304, type: !13)
!560 = !DILocation(line: 304, column: 35, scope: !58)
!561 = !DILocation(line: 305, column: 7, scope: !562)
!562 = distinct !DILexicalBlock(scope: !58, file: !6, line: 305, column: 7)
!563 = !DILocation(line: 305, column: 11, scope: !562)
!564 = !DILocation(line: 305, column: 7, scope: !58)
!565 = !DILocation(line: 306, column: 9, scope: !566)
!566 = distinct !DILexicalBlock(scope: !567, file: !6, line: 306, column: 9)
!567 = distinct !DILexicalBlock(scope: !562, file: !6, line: 305, column: 17)
!568 = !DILocation(line: 306, column: 12, scope: !566)
!569 = !DILocation(line: 306, column: 9, scope: !567)
!570 = !DILocation(line: 307, column: 15, scope: !566)
!571 = !DILocation(line: 307, column: 7, scope: !566)
!572 = !DILocation(line: 308, column: 28, scope: !567)
!573 = !DILocation(line: 308, column: 11, scope: !567)
!574 = !DILocation(line: 308, column: 9, scope: !567)
!575 = !DILocation(line: 309, column: 8, scope: !567)
!576 = !DILocation(line: 310, column: 18, scope: !567)
!577 = !DILocation(line: 310, column: 13, scope: !567)
!578 = !DILocation(line: 310, column: 5, scope: !567)
!579 = !DILocation(line: 312, column: 16, scope: !580)
!580 = distinct !DILexicalBlock(scope: !562, file: !6, line: 311, column: 10)
!581 = !DILocation(line: 312, column: 10, scope: !580)
!582 = !DILocation(line: 312, column: 8, scope: !580)
!583 = !DILocation(line: 313, column: 9, scope: !584)
!584 = distinct !DILexicalBlock(scope: !580, file: !6, line: 313, column: 9)
!585 = !DILocation(line: 313, column: 17, scope: !584)
!586 = !DILocation(line: 313, column: 9, scope: !580)
!587 = !DILocation(line: 314, column: 13, scope: !584)
!588 = !DILocation(line: 314, column: 18, scope: !584)
!589 = !DILocation(line: 314, column: 7, scope: !584)
!590 = !DILocation(line: 315, column: 13, scope: !580)
!591 = !DILocation(line: 315, column: 5, scope: !580)
!592 = !DILocation(line: 317, column: 1, scope: !58)
!593 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "wkq", scope: !62, file: !6, line: 329, type: !13)
!594 = !DILocation(line: 329, column: 18, scope: !62)
!595 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !62, file: !6, line: 330, type: !10)
!596 = !DILocation(line: 330, column: 7, scope: !62)
!597 = !DILocation(line: 332, column: 3, scope: !62)
!598 = !DILocation(line: 334, column: 25, scope: !62)
!599 = !DILocation(line: 334, column: 3, scope: !62)
!600 = !DILocation(line: 336, column: 9, scope: !62)
!601 = !DILocation(line: 336, column: 7, scope: !62)
!602 = !DILocation(line: 337, column: 13, scope: !62)
!603 = !DILocation(line: 337, column: 9, scope: !62)
!604 = !DILocation(line: 337, column: 7, scope: !62)
!605 = !DILocation(line: 339, column: 28, scope: !62)
!606 = !DILocation(line: 339, column: 3, scope: !62)
!607 = !DILocation(line: 341, column: 9, scope: !62)
!608 = !DILocation(line: 341, column: 7, scope: !62)
!609 = !DILocation(line: 342, column: 13, scope: !62)
!610 = !DILocation(line: 342, column: 9, scope: !62)
!611 = !DILocation(line: 342, column: 7, scope: !62)
!612 = !DILocation(line: 343, column: 13, scope: !62)
!613 = !DILocation(line: 343, column: 9, scope: !62)
!614 = !DILocation(line: 343, column: 7, scope: !62)
!615 = !DILocation(line: 345, column: 32, scope: !62)
!616 = !DILocation(line: 345, column: 3, scope: !62)
!617 = !DILocation(line: 347, column: 9, scope: !62)
!618 = !DILocation(line: 347, column: 7, scope: !62)
!619 = !DILocation(line: 348, column: 13, scope: !62)
!620 = !DILocation(line: 348, column: 9, scope: !62)
!621 = !DILocation(line: 348, column: 7, scope: !62)
!622 = !DILocation(line: 349, column: 13, scope: !62)
!623 = !DILocation(line: 349, column: 9, scope: !62)
!624 = !DILocation(line: 349, column: 7, scope: !62)
!625 = !DILocation(line: 351, column: 32, scope: !62)
!626 = !DILocation(line: 351, column: 3, scope: !62)
!627 = !DILocation(line: 353, column: 7, scope: !62)
!628 = !DILocation(line: 354, column: 28, scope: !62)
!629 = !DILocation(line: 354, column: 3, scope: !62)
!630 = !DILocation(line: 355, column: 28, scope: !62)
!631 = !DILocation(line: 355, column: 3, scope: !62)
!632 = !DILocation(line: 357, column: 9, scope: !62)
!633 = !DILocation(line: 357, column: 7, scope: !62)
!634 = !DILocation(line: 359, column: 25, scope: !62)
!635 = !DILocation(line: 359, column: 13, scope: !62)
!636 = !DILocation(line: 361, column: 3, scope: !62)
!637 = !DILocation(line: 363, column: 11, scope: !62)
!638 = !DILocation(line: 364, column: 10, scope: !62)
!639 = !DILocation(line: 366, column: 3, scope: !62)
!640 = !DILocation(line: 368, column: 3, scope: !62)
!641 = !DILocation(line: 371, column: 10, scope: !62)
!642 = !DILocation(line: 371, column: 21, scope: !62)
!643 = !DILocation(line: 370, column: 3, scope: !62)
!644 = !DILocation(line: 373, column: 3, scope: !62)
!645 = !DILocation(line: 374, column: 7, scope: !646)
!646 = distinct !DILexicalBlock(scope: !62, file: !6, line: 374, column: 7)
!647 = !DILocation(line: 374, column: 17, scope: !646)
!648 = !DILocation(line: 374, column: 33, scope: !646)
!649 = !DILocation(line: 374, column: 36, scope: !650)
!650 = !DILexicalBlockFile(scope: !646, file: !6, discriminator: 1)
!651 = !DILocation(line: 374, column: 46, scope: !646)
!652 = !DILocation(line: 374, column: 7, scope: !62)
!653 = !DILocation(line: 375, column: 5, scope: !654)
!654 = distinct !DILexicalBlock(scope: !646, file: !6, line: 374, column: 63)
!655 = !DILocation(line: 376, column: 12, scope: !654)
!656 = !DILocation(line: 377, column: 3, scope: !654)
!657 = !DILocation(line: 378, column: 5, scope: !658)
!658 = distinct !DILexicalBlock(scope: !646, file: !6, line: 377, column: 10)
!659 = !DILocation(line: 379, column: 12, scope: !658)
!660 = !DILocation(line: 382, column: 3, scope: !62)
!661 = !DILocation(line: 383, column: 10, scope: !62)
!662 = !DILocation(line: 383, column: 3, scope: !62)
