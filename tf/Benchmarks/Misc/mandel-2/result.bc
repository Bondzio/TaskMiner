; ModuleID = '/home/gleison/tf/Benchmarks/Misc/mandel-2/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@max_i = global i32 65536, align 4
@.str = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: nounwind uwtable
define double @sqr(double %x) #0 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  call void @llvm.dbg.declare(metadata double* %x.addr, metadata !25, metadata !26), !dbg !27
  %0 = load double, double* %x.addr, align 8, !dbg !28
  %1 = load double, double* %x.addr, align 8, !dbg !29
  %mul = fmul double %0, %1, !dbg !30
  ret double %mul, !dbg !31
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define double @cnorm2(double %z.coerce0, double %z.coerce1) #0 {
entry:
  %z = alloca { double, double }, align 8
  %0 = getelementptr { double, double }, { double, double }* %z, i32 0, i32 0
  store double %z.coerce0, double* %0
  %1 = getelementptr { double, double }, { double, double }* %z, i32 0, i32 1
  store double %z.coerce1, double* %1
  call void @llvm.dbg.declare(metadata { double, double }* %z, metadata !32, metadata !26), !dbg !33
  %z.realp = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 0, !dbg !34
  %z.real = load double, double* %z.realp, align 8, !dbg !34
  %z.imagp = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 1, !dbg !34
  %z.imag = load double, double* %z.imagp, align 8, !dbg !34
  %call = call double @sqr(double %z.real), !dbg !35
  %z.realp1 = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 0, !dbg !36
  %z.real2 = load double, double* %z.realp1, align 8, !dbg !36
  %z.imagp3 = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 1, !dbg !36
  %z.imag4 = load double, double* %z.imagp3, align 8, !dbg !36
  %call5 = call double @sqr(double %z.imag4), !dbg !37
  %add = fadd double %call, %call5, !dbg !38
  ret double %add, !dbg !39
}

; Function Attrs: nounwind uwtable
define i32 @loop(double %c.coerce0, double %c.coerce1) #0 {
entry:
  %c = alloca { double, double }, align 8
  %z = alloca { double, double }, align 8
  %i = alloca i32, align 4
  %coerce = alloca { double, double }, align 8
  %0 = getelementptr { double, double }, { double, double }* %c, i32 0, i32 0
  store double %c.coerce0, double* %0
  %1 = getelementptr { double, double }, { double, double }* %c, i32 0, i32 1
  store double %c.coerce1, double* %1
  call void @llvm.dbg.declare(metadata { double, double }* %c, metadata !40, metadata !26), !dbg !41
  call void @llvm.dbg.declare(metadata { double, double }* %z, metadata !42, metadata !26), !dbg !43
  %c.realp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 0, !dbg !44
  %c.real = load double, double* %c.realp, align 8, !dbg !44
  %c.imagp = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 1, !dbg !44
  %c.imag = load double, double* %c.imagp, align 8, !dbg !44
  %real = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 0, !dbg !43
  %imag = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 1, !dbg !43
  store double %c.real, double* %real, align 8, !dbg !43
  store double %c.imag, double* %imag, align 8, !dbg !43
  call void @llvm.dbg.declare(metadata i32* %i, metadata !45, metadata !26), !dbg !46
  store i32 1, i32* %i, align 4, !dbg !46
  br label %while.cond, !dbg !47

while.cond:                                       ; preds = %complex_mul_cont, %entry
  %z.realp = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 0, !dbg !48
  %z.real = load double, double* %z.realp, align 8, !dbg !48
  %z.imagp = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 1, !dbg !48
  %z.imag = load double, double* %z.imagp, align 8, !dbg !48
  %real1 = getelementptr inbounds { double, double }, { double, double }* %coerce, i32 0, i32 0, !dbg !51
  %imag2 = getelementptr inbounds { double, double }, { double, double }* %coerce, i32 0, i32 1, !dbg !51
  store double %z.real, double* %real1, align 8, !dbg !51
  store double %z.imag, double* %imag2, align 8, !dbg !51
  %2 = getelementptr { double, double }, { double, double }* %coerce, i32 0, i32 0, !dbg !51
  %3 = load double, double* %2, align 1, !dbg !51
  %4 = getelementptr { double, double }, { double, double }* %coerce, i32 0, i32 1, !dbg !51
  %5 = load double, double* %4, align 1, !dbg !51
  %call = call double @cnorm2(double %3, double %5), !dbg !51
  %cmp = fcmp ole double %call, 4.000000e+00, !dbg !52
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !53

land.rhs:                                         ; preds = %while.cond
  %6 = load i32, i32* %i, align 4, !dbg !54
  %inc = add nsw i32 %6, 1, !dbg !54
  store i32 %inc, i32* %i, align 4, !dbg !54
  %7 = load i32, i32* @max_i, align 4, !dbg !56
  %cmp3 = icmp slt i32 %6, %7, !dbg !57
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %cmp3, %land.rhs ]
  br i1 %8, label %while.body, label %while.end, !dbg !58

while.body:                                       ; preds = %land.end
  %z.realp4 = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 0, !dbg !60
  %z.real5 = load double, double* %z.realp4, align 8, !dbg !60
  %z.imagp6 = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 1, !dbg !60
  %z.imag7 = load double, double* %z.imagp6, align 8, !dbg !60
  %z.realp8 = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 0, !dbg !61
  %z.real9 = load double, double* %z.realp8, align 8, !dbg !61
  %z.imagp10 = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 1, !dbg !61
  %z.imag11 = load double, double* %z.imagp10, align 8, !dbg !61
  %mul_ac = fmul double %z.real5, %z.real9, !dbg !62
  %mul_bd = fmul double %z.imag7, %z.imag11, !dbg !62
  %mul_ad = fmul double %z.real5, %z.imag11, !dbg !62
  %mul_bc = fmul double %z.imag7, %z.real9, !dbg !62
  %mul_r = fsub double %mul_ac, %mul_bd, !dbg !62
  %mul_i = fadd double %mul_ad, %mul_bc, !dbg !62
  %isnan_cmp = fcmp uno double %mul_r, %mul_r, !dbg !62
  br i1 %isnan_cmp, label %complex_mul_imag_nan, label %complex_mul_cont, !dbg !62, !prof !63

complex_mul_imag_nan:                             ; preds = %while.body
  %isnan_cmp12 = fcmp uno double %mul_i, %mul_i, !dbg !64
  br i1 %isnan_cmp12, label %complex_mul_libcall, label %complex_mul_cont, !dbg !64, !prof !63

complex_mul_libcall:                              ; preds = %complex_mul_imag_nan
  %call13 = call { double, double } @__muldc3(double %z.real5, double %z.imag7, double %z.real9, double %z.imag11) #3, !dbg !65
  %9 = extractvalue { double, double } %call13, 0, !dbg !65
  %10 = extractvalue { double, double } %call13, 1, !dbg !65
  br label %complex_mul_cont, !dbg !65

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %complex_mul_imag_nan, %while.body
  %real_mul_phi = phi double [ %mul_r, %while.body ], [ %mul_r, %complex_mul_imag_nan ], [ %9, %complex_mul_libcall ], !dbg !62
  %imag_mul_phi = phi double [ %mul_i, %while.body ], [ %mul_i, %complex_mul_imag_nan ], [ %10, %complex_mul_libcall ], !dbg !62
  %c.realp14 = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 0, !dbg !66
  %c.real15 = load double, double* %c.realp14, align 8, !dbg !66
  %c.imagp16 = getelementptr inbounds { double, double }, { double, double }* %c, i32 0, i32 1, !dbg !66
  %c.imag17 = load double, double* %c.imagp16, align 8, !dbg !66
  %add.r = fadd double %real_mul_phi, %c.real15, !dbg !69
  %add.i = fadd double %imag_mul_phi, %c.imag17, !dbg !69
  %real18 = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 0, !dbg !70
  %imag19 = getelementptr inbounds { double, double }, { double, double }* %z, i32 0, i32 1, !dbg !70
  store double %add.r, double* %real18, align 8, !dbg !70
  store double %add.i, double* %imag19, align 8, !dbg !70
  br label %while.cond, !dbg !47

while.end:                                        ; preds = %land.end
  %11 = load i32, i32* %i, align 4, !dbg !71
  ret i32 %11, !dbg !72
}

declare { double, double } @__muldc3(double, double, double, double)

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %coerce = alloca { double, double }, align 8
  store i32 0, i32* %retval
  call void @llvm.dbg.declare(metadata i32* %i, metadata !73, metadata !26), !dbg !74
  call void @llvm.dbg.declare(metadata i32* %j, metadata !75, metadata !26), !dbg !76
  store i32 -39, i32* %j, align 4, !dbg !77
  br label %for.cond, !dbg !79

for.cond:                                         ; preds = %for.inc.10, %entry
  %0 = load i32, i32* %j, align 4, !dbg !80
  %cmp = icmp slt i32 %0, 39, !dbg !84
  br i1 %cmp, label %for.body, label %for.end.12, !dbg !85

for.body:                                         ; preds = %for.cond
  store i32 -39, i32* %i, align 4, !dbg !86
  br label %for.cond.1, !dbg !89

for.cond.1:                                       ; preds = %for.inc, %for.body
  %1 = load i32, i32* %i, align 4, !dbg !90
  %cmp2 = icmp slt i32 %1, 39, !dbg !94
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !95

for.body.3:                                       ; preds = %for.cond.1
  %2 = load i32, i32* %j, align 4, !dbg !96
  %conv = sitofp i32 %2 to double, !dbg !96
  %div = fdiv double %conv, 4.000000e+01, !dbg !97
  %sub = fsub double %div, 5.000000e-01, !dbg !98
  %3 = load i32, i32* %i, align 4, !dbg !99
  %conv4 = sitofp i32 %3 to double, !dbg !99
  %div5 = fdiv double %conv4, 4.000000e+01, !dbg !100
  %mul.rl = fmul double %div5, 0.000000e+00, !dbg !101
  %mul.ir = fmul double %div5, 1.000000e+00, !dbg !101
  %add.r = fadd double %sub, %mul.rl, !dbg !102
  %real = getelementptr inbounds { double, double }, { double, double }* %coerce, i32 0, i32 0, !dbg !103
  %imag = getelementptr inbounds { double, double }, { double, double }* %coerce, i32 0, i32 1, !dbg !103
  store double %add.r, double* %real, align 8, !dbg !103
  store double %mul.ir, double* %imag, align 8, !dbg !103
  %4 = getelementptr { double, double }, { double, double }* %coerce, i32 0, i32 0, !dbg !103
  %5 = load double, double* %4, align 1, !dbg !103
  %6 = getelementptr { double, double }, { double, double }* %coerce, i32 0, i32 1, !dbg !103
  %7 = load double, double* %6, align 1, !dbg !103
  %call = call i32 @loop(double %5, double %7), !dbg !103
  %8 = load i32, i32* @max_i, align 4, !dbg !104
  %cmp6 = icmp sgt i32 %call, %8, !dbg !105
  %cond = select i1 %cmp6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), !dbg !103
  %call8 = call i32 (i8*, ...) @printf(i8* %cond), !dbg !106
  br label %for.inc, !dbg !106

for.inc:                                          ; preds = %for.body.3
  %9 = load i32, i32* %i, align 4, !dbg !107
  %inc = add nsw i32 %9, 1, !dbg !107
  store i32 %inc, i32* %i, align 4, !dbg !107
  br label %for.cond.1, !dbg !108

for.end:                                          ; preds = %for.cond.1
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0)), !dbg !109
  br label %for.inc.10, !dbg !110

for.inc.10:                                       ; preds = %for.end
  %10 = load i32, i32* %j, align 4, !dbg !111
  %inc11 = add nsw i32 %10, 1, !dbg !111
  store i32 %inc11, i32* %j, align 4, !dbg !111
  br label %for.cond, !dbg !112

for.end.12:                                       ; preds = %for.cond
  ret i32 0, !dbg !113
}

declare i32 @printf(i8*, ...) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!22, !23}
!llvm.ident = !{!24}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3, globals: !20)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Misc/mandel-2")
!2 = !{}
!3 = !{!4, !9, !13, !17}
!4 = !DISubprogram(name: "sqr", scope: !5, file: !5, line: 7, type: !6, isLocal: false, isDefinition: true, scopeLine: 7, flags: DIFlagPrototyped, isOptimized: false, function: double (double)* @sqr, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Misc/mandel-2/tmp.c", directory: "/home/gleison/tf/Benchmarks/Misc/mandel-2")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8}
!8 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!9 = !DISubprogram(name: "cnorm2", scope: !5, file: !5, line: 9, type: !10, isLocal: false, isDefinition: true, scopeLine: 9, flags: DIFlagPrototyped, isOptimized: false, function: double (double, double)* @cnorm2, variables: !2)
!10 = !DISubroutineType(types: !11)
!11 = !{!8, !12}
!12 = !DIBasicType(name: "complex", size: 128, align: 64, encoding: DW_ATE_complex_float)
!13 = !DISubprogram(name: "loop", scope: !5, file: !5, line: 11, type: !14, isLocal: false, isDefinition: true, scopeLine: 11, flags: DIFlagPrototyped, isOptimized: false, function: i32 (double, double)* @loop, variables: !2)
!14 = !DISubroutineType(types: !15)
!15 = !{!16, !12}
!16 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!17 = !DISubprogram(name: "main", scope: !5, file: !5, line: 19, type: !18, isLocal: false, isDefinition: true, scopeLine: 19, isOptimized: false, function: i32 ()* @main, variables: !2)
!18 = !DISubroutineType(types: !19)
!19 = !{!16}
!20 = !{!21}
!21 = !DIGlobalVariable(name: "max_i", scope: !0, file: !5, line: 5, type: !16, isLocal: false, isDefinition: true, variable: i32* @max_i)
!22 = !{i32 2, !"Dwarf Version", i32 4}
!23 = !{i32 2, !"Debug Info Version", i32 3}
!24 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!25 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "x", arg: 1, scope: !4, file: !5, line: 7, type: !8)
!26 = !DIExpression()
!27 = !DILocation(line: 7, column: 19, scope: !4)
!28 = !DILocation(line: 7, column: 31, scope: !4)
!29 = !DILocation(line: 7, column: 35, scope: !4)
!30 = !DILocation(line: 7, column: 33, scope: !4)
!31 = !DILocation(line: 7, column: 24, scope: !4)
!32 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "z", arg: 1, scope: !9, file: !5, line: 9, type: !12)
!33 = !DILocation(line: 9, column: 23, scope: !9)
!34 = !DILocation(line: 9, column: 45, scope: !9)
!35 = !DILocation(line: 9, column: 35, scope: !9)
!36 = !DILocation(line: 9, column: 61, scope: !9)
!37 = !DILocation(line: 9, column: 51, scope: !9)
!38 = !DILocation(line: 9, column: 49, scope: !9)
!39 = !DILocation(line: 9, column: 28, scope: !9)
!40 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "c", arg: 1, scope: !13, file: !5, line: 11, type: !12)
!41 = !DILocation(line: 11, column: 18, scope: !13)
!42 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "z", scope: !13, file: !5, line: 12, type: !12)
!43 = !DILocation(line: 12, column: 11, scope: !13)
!44 = !DILocation(line: 12, column: 15, scope: !13)
!45 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !13, file: !5, line: 13, type: !16)
!46 = !DILocation(line: 13, column: 7, scope: !13)
!47 = !DILocation(line: 14, column: 3, scope: !13)
!48 = !DILocation(line: 14, column: 17, scope: !49)
!49 = !DILexicalBlockFile(scope: !50, file: !5, discriminator: 4)
!50 = !DILexicalBlockFile(scope: !13, file: !5, discriminator: 1)
!51 = !DILocation(line: 14, column: 10, scope: !13)
!52 = !DILocation(line: 14, column: 20, scope: !13)
!53 = !DILocation(line: 14, column: 27, scope: !13)
!54 = !DILocation(line: 14, column: 31, scope: !55)
!55 = !DILexicalBlockFile(scope: !13, file: !5, discriminator: 2)
!56 = !DILocation(line: 14, column: 36, scope: !13)
!57 = !DILocation(line: 14, column: 34, scope: !13)
!58 = !DILocation(line: 14, column: 3, scope: !59)
!59 = !DILexicalBlockFile(scope: !13, file: !5, discriminator: 3)
!60 = !DILocation(line: 15, column: 9, scope: !13)
!61 = !DILocation(line: 15, column: 13, scope: !13)
!62 = !DILocation(line: 15, column: 11, scope: !13)
!63 = !{!"branch_weights", i32 1, i32 1048575}
!64 = !DILocation(line: 15, column: 11, scope: !50)
!65 = !DILocation(line: 15, column: 11, scope: !59)
!66 = !DILocation(line: 15, column: 17, scope: !67)
!67 = !DILexicalBlockFile(scope: !68, file: !5, discriminator: 5)
!68 = !DILexicalBlockFile(scope: !55, file: !5, discriminator: 4)
!69 = !DILocation(line: 15, column: 15, scope: !13)
!70 = !DILocation(line: 15, column: 7, scope: !13)
!71 = !DILocation(line: 16, column: 10, scope: !13)
!72 = !DILocation(line: 16, column: 3, scope: !13)
!73 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !17, file: !5, line: 20, type: !16)
!74 = !DILocation(line: 20, column: 7, scope: !17)
!75 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !17, file: !5, line: 20, type: !16)
!76 = !DILocation(line: 20, column: 10, scope: !17)
!77 = !DILocation(line: 21, column: 10, scope: !78)
!78 = distinct !DILexicalBlock(scope: !17, file: !5, line: 21, column: 3)
!79 = !DILocation(line: 21, column: 8, scope: !78)
!80 = !DILocation(line: 21, column: 17, scope: !81)
!81 = !DILexicalBlockFile(scope: !82, file: !5, discriminator: 2)
!82 = !DILexicalBlockFile(scope: !83, file: !5, discriminator: 1)
!83 = distinct !DILexicalBlock(scope: !78, file: !5, line: 21, column: 3)
!84 = !DILocation(line: 21, column: 19, scope: !83)
!85 = !DILocation(line: 21, column: 3, scope: !78)
!86 = !DILocation(line: 22, column: 12, scope: !87)
!87 = distinct !DILexicalBlock(scope: !88, file: !5, line: 22, column: 5)
!88 = distinct !DILexicalBlock(scope: !83, file: !5, line: 21, column: 30)
!89 = !DILocation(line: 22, column: 10, scope: !87)
!90 = !DILocation(line: 22, column: 19, scope: !91)
!91 = !DILexicalBlockFile(scope: !92, file: !5, discriminator: 2)
!92 = !DILexicalBlockFile(scope: !93, file: !5, discriminator: 1)
!93 = distinct !DILexicalBlock(scope: !87, file: !5, line: 22, column: 5)
!94 = !DILocation(line: 22, column: 21, scope: !93)
!95 = !DILocation(line: 22, column: 5, scope: !87)
!96 = !DILocation(line: 23, column: 19, scope: !93)
!97 = !DILocation(line: 23, column: 21, scope: !93)
!98 = !DILocation(line: 23, column: 28, scope: !93)
!99 = !DILocation(line: 23, column: 36, scope: !93)
!100 = !DILocation(line: 23, column: 38, scope: !93)
!101 = !DILocation(line: 23, column: 45, scope: !93)
!102 = !DILocation(line: 23, column: 34, scope: !93)
!103 = !DILocation(line: 23, column: 14, scope: !93)
!104 = !DILocation(line: 23, column: 52, scope: !93)
!105 = !DILocation(line: 23, column: 50, scope: !93)
!106 = !DILocation(line: 23, column: 7, scope: !93)
!107 = !DILocation(line: 22, column: 27, scope: !93)
!108 = !DILocation(line: 22, column: 5, scope: !93)
!109 = !DILocation(line: 24, column: 5, scope: !88)
!110 = !DILocation(line: 25, column: 3, scope: !88)
!111 = !DILocation(line: 21, column: 25, scope: !83)
!112 = !DILocation(line: 21, column: 3, scope: !83)
!113 = !DILocation(line: 26, column: 3, scope: !17)
