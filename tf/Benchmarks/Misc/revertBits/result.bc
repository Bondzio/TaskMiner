; ModuleID = '/home/gleison/tf/Benchmarks/Misc/revertBits/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [11 x i8] c"0x12345678\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"0x0123456789012345\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"0x%x -> 0x%x\0A\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"0x%llx -> 0x%llx\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define i32 @ReverseBits32(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !20, metadata !21), !dbg !22
  %0 = load i32, i32* %n.addr, align 4, !dbg !23
  %shr = lshr i32 %0, 1, !dbg !24
  %and = and i32 %shr, 1431655765, !dbg !25
  %1 = load i32, i32* %n.addr, align 4, !dbg !26
  %and1 = and i32 %1, 1431655765, !dbg !27
  %shl = shl i32 %and1, 1, !dbg !28
  %or = or i32 %and, %shl, !dbg !29
  store i32 %or, i32* %n.addr, align 4, !dbg !30
  %2 = load i32, i32* %n.addr, align 4, !dbg !31
  %shr2 = lshr i32 %2, 2, !dbg !32
  %and3 = and i32 %shr2, 858993459, !dbg !33
  %3 = load i32, i32* %n.addr, align 4, !dbg !34
  %and4 = and i32 %3, 858993459, !dbg !35
  %shl5 = shl i32 %and4, 2, !dbg !36
  %or6 = or i32 %and3, %shl5, !dbg !37
  store i32 %or6, i32* %n.addr, align 4, !dbg !38
  %4 = load i32, i32* %n.addr, align 4, !dbg !39
  %shr7 = lshr i32 %4, 4, !dbg !40
  %and8 = and i32 %shr7, 252645135, !dbg !41
  %5 = load i32, i32* %n.addr, align 4, !dbg !42
  %and9 = and i32 %5, 252645135, !dbg !43
  %shl10 = shl i32 %and9, 4, !dbg !44
  %or11 = or i32 %and8, %shl10, !dbg !45
  store i32 %or11, i32* %n.addr, align 4, !dbg !46
  %6 = load i32, i32* %n.addr, align 4, !dbg !47
  %and12 = and i32 %6, -16777216, !dbg !48
  %shr13 = lshr i32 %and12, 24, !dbg !49
  %7 = load i32, i32* %n.addr, align 4, !dbg !50
  %and14 = and i32 %7, 16711680, !dbg !51
  %shr15 = lshr i32 %and14, 8, !dbg !52
  %or16 = or i32 %shr13, %shr15, !dbg !53
  %8 = load i32, i32* %n.addr, align 4, !dbg !54
  %and17 = and i32 %8, 65280, !dbg !55
  %shl18 = shl i32 %and17, 8, !dbg !56
  %or19 = or i32 %or16, %shl18, !dbg !57
  %9 = load i32, i32* %n.addr, align 4, !dbg !58
  %and20 = and i32 %9, 255, !dbg !59
  %shl21 = shl i32 %and20, 24, !dbg !60
  %or22 = or i32 %or19, %shl21, !dbg !61
  ret i32 %or22, !dbg !62
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define i64 @ReverseBits64(i64 %n) #0 {
entry:
  %n.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !63, metadata !21), !dbg !64
  %0 = load i64, i64* %n.addr, align 8, !dbg !65
  %shr = lshr i64 %0, 1, !dbg !66
  %and = and i64 %shr, 6148914691236517205, !dbg !67
  %1 = load i64, i64* %n.addr, align 8, !dbg !68
  %and1 = and i64 %1, 6148914691236517205, !dbg !69
  %shl = shl i64 %and1, 1, !dbg !70
  %or = or i64 %and, %shl, !dbg !71
  store i64 %or, i64* %n.addr, align 8, !dbg !72
  %2 = load i64, i64* %n.addr, align 8, !dbg !73
  %shr2 = lshr i64 %2, 2, !dbg !74
  %and3 = and i64 %shr2, 3689348814741910323, !dbg !75
  %3 = load i64, i64* %n.addr, align 8, !dbg !76
  %and4 = and i64 %3, 3689348814741910323, !dbg !77
  %shl5 = shl i64 %and4, 2, !dbg !78
  %or6 = or i64 %and3, %shl5, !dbg !79
  store i64 %or6, i64* %n.addr, align 8, !dbg !80
  %4 = load i64, i64* %n.addr, align 8, !dbg !81
  %shr7 = lshr i64 %4, 4, !dbg !82
  %and8 = and i64 %shr7, 1085102592571150095, !dbg !83
  %5 = load i64, i64* %n.addr, align 8, !dbg !84
  %and9 = and i64 %5, 1085102592571150095, !dbg !85
  %shl10 = shl i64 %and9, 4, !dbg !86
  %or11 = or i64 %and8, %shl10, !dbg !87
  store i64 %or11, i64* %n.addr, align 8, !dbg !88
  %6 = load i64, i64* %n.addr, align 8, !dbg !89
  %and12 = and i64 %6, -72057594037927936, !dbg !90
  %shr13 = lshr i64 %and12, 56, !dbg !91
  %7 = load i64, i64* %n.addr, align 8, !dbg !92
  %and14 = and i64 %7, 71776119061217280, !dbg !93
  %shr15 = lshr i64 %and14, 40, !dbg !94
  %or16 = or i64 %shr13, %shr15, !dbg !95
  %8 = load i64, i64* %n.addr, align 8, !dbg !96
  %and17 = and i64 %8, 280375465082880, !dbg !97
  %shr18 = lshr i64 %and17, 24, !dbg !98
  %or19 = or i64 %or16, %shr18, !dbg !99
  %9 = load i64, i64* %n.addr, align 8, !dbg !100
  %and20 = and i64 %9, 1095216660480, !dbg !101
  %shr21 = lshr i64 %and20, 8, !dbg !102
  %or22 = or i64 %or19, %shr21, !dbg !103
  %10 = load i64, i64* %n.addr, align 8, !dbg !104
  %and23 = and i64 %10, 255, !dbg !105
  %shl24 = shl i64 %and23, 56, !dbg !106
  %or25 = or i64 %or22, %shl24, !dbg !107
  %11 = load i64, i64* %n.addr, align 8, !dbg !108
  %and26 = and i64 %11, 65280, !dbg !109
  %shl27 = shl i64 %and26, 40, !dbg !110
  %or28 = or i64 %or25, %shl27, !dbg !111
  %12 = load i64, i64* %n.addr, align 8, !dbg !112
  %and29 = and i64 %12, 16711680, !dbg !113
  %shl30 = shl i64 %and29, 24, !dbg !114
  %or31 = or i64 %or28, %shl30, !dbg !115
  %13 = load i64, i64* %n.addr, align 8, !dbg !116
  %and32 = and i64 %13, 4278190080, !dbg !117
  %shl33 = shl i64 %and32, 8, !dbg !118
  %or34 = or i64 %or31, %shl33, !dbg !119
  ret i64 %or34, !dbg !120
}

; Function Attrs: nounwind uwtable
define i32 @main() #2 {
entry:
  %retval = alloca i32, align 4
  %sum32 = alloca i64, align 8
  %sum64 = alloca i64, align 8
  %rev32 = alloca i32, align 4
  %rev64 = alloca i64, align 8
  store i32 0, i32* %retval
  call void @llvm.dbg.declare(metadata i64* %sum32, metadata !121, metadata !21), !dbg !122
  store i64 0, i64* %sum32, align 8, !dbg !122
  call void @llvm.dbg.declare(metadata i64* %sum64, metadata !123, metadata !21), !dbg !124
  store i64 0, i64* %sum64, align 8, !dbg !124
  call void @llvm.dbg.declare(metadata i32* %rev32, metadata !125, metadata !21), !dbg !126
  %call = call i64 @strtoll(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i8** null, i32 16) #5, !dbg !127
  %conv = trunc i64 %call to i32, !dbg !127
  store i32 %conv, i32* %rev32, align 4, !dbg !126
  call void @llvm.dbg.declare(metadata i64* %rev64, metadata !128, metadata !21), !dbg !129
  %call1 = call i64 @strtoll(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i32 0, i32 0), i8** null, i32 16) #5, !dbg !130
  store i64 %call1, i64* %rev64, align 8, !dbg !129
  %0 = load i32, i32* %rev32, align 4, !dbg !131
  %1 = load i32, i32* %rev32, align 4, !dbg !132
  %call2 = call i32 @ReverseBits32(i32 %1), !dbg !133
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i32 %0, i32 %call2), !dbg !134
  %2 = load i64, i64* %rev64, align 8, !dbg !135
  %3 = load i64, i64* %rev64, align 8, !dbg !136
  %call4 = call i64 @ReverseBits64(i64 %3), !dbg !137
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i32 0, i32 0), i64 %2, i64 %call4), !dbg !138
  ret i32 0, !dbg !139
}

; Function Attrs: nounwind
declare i64 @strtoll(i8*, i8**, i32) #3

declare i32 @printf(i8*, ...) #4

attributes #0 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!17, !18}
!llvm.ident = !{!19}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/Misc/revertBits")
!2 = !{}
!3 = !{!4, !9, !13}
!4 = !DISubprogram(name: "ReverseBits32", scope: !5, file: !5, line: 15, type: !6, isLocal: false, isDefinition: true, scopeLine: 15, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32)* @ReverseBits32, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/Misc/revertBits/tmp.c", directory: "/home/gleison/tf/Benchmarks/Misc/revertBits")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8}
!8 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!9 = !DISubprogram(name: "ReverseBits64", scope: !5, file: !5, line: 23, type: !10, isLocal: false, isDefinition: true, scopeLine: 23, flags: DIFlagPrototyped, isOptimized: false, function: i64 (i64)* @ReverseBits64, variables: !2)
!10 = !DISubroutineType(types: !11)
!11 = !{!12, !12}
!12 = !DIBasicType(name: "long long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!13 = !DISubprogram(name: "main", scope: !5, file: !5, line: 37, type: !14, isLocal: false, isDefinition: true, scopeLine: 37, flags: DIFlagPrototyped, isOptimized: false, function: i32 ()* @main, variables: !2)
!14 = !DISubroutineType(types: !15)
!15 = !{!16}
!16 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!17 = !{i32 2, !"Dwarf Version", i32 4}
!18 = !{i32 2, !"Debug Info Version", i32 3}
!19 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!20 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !4, file: !5, line: 15, type: !8)
!21 = !DIExpression()
!22 = !DILocation(line: 15, column: 59, scope: !4)
!23 = !DILocation(line: 16, column: 9, scope: !4)
!24 = !DILocation(line: 16, column: 11, scope: !4)
!25 = !DILocation(line: 16, column: 17, scope: !4)
!26 = !DILocation(line: 16, column: 36, scope: !4)
!27 = !DILocation(line: 16, column: 38, scope: !4)
!28 = !DILocation(line: 16, column: 53, scope: !4)
!29 = !DILocation(line: 16, column: 32, scope: !4)
!30 = !DILocation(line: 16, column: 5, scope: !4)
!31 = !DILocation(line: 17, column: 9, scope: !4)
!32 = !DILocation(line: 17, column: 11, scope: !4)
!33 = !DILocation(line: 17, column: 17, scope: !4)
!34 = !DILocation(line: 17, column: 36, scope: !4)
!35 = !DILocation(line: 17, column: 38, scope: !4)
!36 = !DILocation(line: 17, column: 53, scope: !4)
!37 = !DILocation(line: 17, column: 32, scope: !4)
!38 = !DILocation(line: 17, column: 5, scope: !4)
!39 = !DILocation(line: 18, column: 9, scope: !4)
!40 = !DILocation(line: 18, column: 11, scope: !4)
!41 = !DILocation(line: 18, column: 17, scope: !4)
!42 = !DILocation(line: 18, column: 36, scope: !4)
!43 = !DILocation(line: 18, column: 38, scope: !4)
!44 = !DILocation(line: 18, column: 53, scope: !4)
!45 = !DILocation(line: 18, column: 32, scope: !4)
!46 = !DILocation(line: 18, column: 5, scope: !4)
!47 = !DILocation(line: 19, column: 12, scope: !4)
!48 = !DILocation(line: 19, column: 14, scope: !4)
!49 = !DILocation(line: 19, column: 29, scope: !4)
!50 = !DILocation(line: 19, column: 40, scope: !4)
!51 = !DILocation(line: 19, column: 42, scope: !4)
!52 = !DILocation(line: 19, column: 57, scope: !4)
!53 = !DILocation(line: 19, column: 36, scope: !4)
!54 = !DILocation(line: 20, column: 12, scope: !4)
!55 = !DILocation(line: 20, column: 14, scope: !4)
!56 = !DILocation(line: 20, column: 29, scope: !4)
!57 = !DILocation(line: 19, column: 63, scope: !4)
!58 = !DILocation(line: 20, column: 39, scope: !4)
!59 = !DILocation(line: 20, column: 41, scope: !4)
!60 = !DILocation(line: 20, column: 56, scope: !4)
!61 = !DILocation(line: 20, column: 35, scope: !4)
!62 = !DILocation(line: 19, column: 3, scope: !4)
!63 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !9, file: !5, line: 23, type: !12)
!64 = !DILocation(line: 23, column: 79, scope: !9)
!65 = !DILocation(line: 24, column: 9, scope: !9)
!66 = !DILocation(line: 24, column: 11, scope: !9)
!67 = !DILocation(line: 24, column: 17, scope: !9)
!68 = !DILocation(line: 24, column: 46, scope: !9)
!69 = !DILocation(line: 24, column: 48, scope: !9)
!70 = !DILocation(line: 24, column: 73, scope: !9)
!71 = !DILocation(line: 24, column: 42, scope: !9)
!72 = !DILocation(line: 24, column: 5, scope: !9)
!73 = !DILocation(line: 25, column: 9, scope: !9)
!74 = !DILocation(line: 25, column: 11, scope: !9)
!75 = !DILocation(line: 25, column: 17, scope: !9)
!76 = !DILocation(line: 25, column: 46, scope: !9)
!77 = !DILocation(line: 25, column: 48, scope: !9)
!78 = !DILocation(line: 25, column: 73, scope: !9)
!79 = !DILocation(line: 25, column: 42, scope: !9)
!80 = !DILocation(line: 25, column: 5, scope: !9)
!81 = !DILocation(line: 26, column: 9, scope: !9)
!82 = !DILocation(line: 26, column: 11, scope: !9)
!83 = !DILocation(line: 26, column: 17, scope: !9)
!84 = !DILocation(line: 26, column: 46, scope: !9)
!85 = !DILocation(line: 26, column: 48, scope: !9)
!86 = !DILocation(line: 26, column: 73, scope: !9)
!87 = !DILocation(line: 26, column: 42, scope: !9)
!88 = !DILocation(line: 26, column: 5, scope: !9)
!89 = !DILocation(line: 27, column: 12, scope: !9)
!90 = !DILocation(line: 27, column: 14, scope: !9)
!91 = !DILocation(line: 27, column: 39, scope: !9)
!92 = !DILocation(line: 28, column: 12, scope: !9)
!93 = !DILocation(line: 28, column: 14, scope: !9)
!94 = !DILocation(line: 28, column: 39, scope: !9)
!95 = !DILocation(line: 27, column: 46, scope: !9)
!96 = !DILocation(line: 29, column: 12, scope: !9)
!97 = !DILocation(line: 29, column: 14, scope: !9)
!98 = !DILocation(line: 29, column: 39, scope: !9)
!99 = !DILocation(line: 28, column: 46, scope: !9)
!100 = !DILocation(line: 30, column: 12, scope: !9)
!101 = !DILocation(line: 30, column: 14, scope: !9)
!102 = !DILocation(line: 30, column: 39, scope: !9)
!103 = !DILocation(line: 29, column: 46, scope: !9)
!104 = !DILocation(line: 31, column: 12, scope: !9)
!105 = !DILocation(line: 31, column: 14, scope: !9)
!106 = !DILocation(line: 31, column: 39, scope: !9)
!107 = !DILocation(line: 30, column: 45, scope: !9)
!108 = !DILocation(line: 32, column: 12, scope: !9)
!109 = !DILocation(line: 32, column: 14, scope: !9)
!110 = !DILocation(line: 32, column: 39, scope: !9)
!111 = !DILocation(line: 31, column: 46, scope: !9)
!112 = !DILocation(line: 33, column: 12, scope: !9)
!113 = !DILocation(line: 33, column: 14, scope: !9)
!114 = !DILocation(line: 33, column: 39, scope: !9)
!115 = !DILocation(line: 32, column: 46, scope: !9)
!116 = !DILocation(line: 34, column: 12, scope: !9)
!117 = !DILocation(line: 34, column: 14, scope: !9)
!118 = !DILocation(line: 34, column: 39, scope: !9)
!119 = !DILocation(line: 33, column: 46, scope: !9)
!120 = !DILocation(line: 27, column: 3, scope: !9)
!121 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sum32", scope: !13, file: !5, line: 38, type: !12)
!122 = !DILocation(line: 38, column: 22, scope: !13)
!123 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sum64", scope: !13, file: !5, line: 38, type: !12)
!124 = !DILocation(line: 38, column: 33, scope: !13)
!125 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rev32", scope: !13, file: !5, line: 39, type: !8)
!126 = !DILocation(line: 39, column: 16, scope: !13)
!127 = !DILocation(line: 39, column: 24, scope: !13)
!128 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rev64", scope: !13, file: !5, line: 40, type: !12)
!129 = !DILocation(line: 40, column: 22, scope: !13)
!130 = !DILocation(line: 40, column: 30, scope: !13)
!131 = !DILocation(line: 50, column: 28, scope: !13)
!132 = !DILocation(line: 50, column: 49, scope: !13)
!133 = !DILocation(line: 50, column: 35, scope: !13)
!134 = !DILocation(line: 50, column: 3, scope: !13)
!135 = !DILocation(line: 51, column: 32, scope: !13)
!136 = !DILocation(line: 51, column: 53, scope: !13)
!137 = !DILocation(line: 51, column: 39, scope: !13)
!138 = !DILocation(line: 51, column: 3, scope: !13)
!139 = !DILocation(line: 52, column: 3, scope: !13)
