; ModuleID = '/home/gleison/tf/Benchmarks/mediabench/adpcm/rawcaudio/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.adpcm_state = type { i16, i8 }

@stepsizeTable = internal global [89 x i32] [i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 16, i32 17, i32 19, i32 21, i32 23, i32 25, i32 28, i32 31, i32 34, i32 37, i32 41, i32 45, i32 50, i32 55, i32 60, i32 66, i32 73, i32 80, i32 88, i32 97, i32 107, i32 118, i32 130, i32 143, i32 157, i32 173, i32 190, i32 209, i32 230, i32 253, i32 279, i32 307, i32 337, i32 371, i32 408, i32 449, i32 494, i32 544, i32 598, i32 658, i32 724, i32 796, i32 876, i32 963, i32 1060, i32 1166, i32 1282, i32 1411, i32 1552, i32 1707, i32 1878, i32 2066, i32 2272, i32 2499, i32 2749, i32 3024, i32 3327, i32 3660, i32 4026, i32 4428, i32 4871, i32 5358, i32 5894, i32 6484, i32 7132, i32 7845, i32 8630, i32 9493, i32 10442, i32 11487, i32 12635, i32 13899, i32 15289, i32 16818, i32 18500, i32 20350, i32 22385, i32 24623, i32 27086, i32 29794, i32 32767], align 16
@indexTable = internal global [16 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 2, i32 4, i32 6, i32 8, i32 -1, i32 -1, i32 -1, i32 -1, i32 2, i32 4, i32 6, i32 8], align 16

; Function Attrs: nounwind uwtable
define void @adpcm_coder(i16* %indata, i8* %outdata, i32 %len, %struct.adpcm_state* %state) #0 {
entry:
  %indata.addr = alloca i16*, align 8
  %outdata.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %state.addr = alloca %struct.adpcm_state*, align 8
  %inp = alloca i16*, align 8
  %outp = alloca i8*, align 8
  %val = alloca i32, align 4
  %sign = alloca i32, align 4
  %delta = alloca i32, align 4
  %diff = alloca i32, align 4
  %step = alloca i32, align 4
  %valpred = alloca i32, align 4
  %vpdiff = alloca i32, align 4
  %index = alloca i32, align 4
  %outputbuffer = alloca i32, align 4
  %bufferstep = alloca i32, align 4
  store i16* %indata, i16** %indata.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %indata.addr, metadata !37, metadata !38), !dbg !39
  store i8* %outdata, i8** %outdata.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %outdata.addr, metadata !40, metadata !38), !dbg !41
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !42, metadata !38), !dbg !43
  store %struct.adpcm_state* %state, %struct.adpcm_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.adpcm_state** %state.addr, metadata !44, metadata !38), !dbg !45
  call void @llvm.dbg.declare(metadata i16** %inp, metadata !46, metadata !38), !dbg !47
  call void @llvm.dbg.declare(metadata i8** %outp, metadata !48, metadata !38), !dbg !49
  call void @llvm.dbg.declare(metadata i32* %val, metadata !50, metadata !38), !dbg !51
  call void @llvm.dbg.declare(metadata i32* %sign, metadata !52, metadata !38), !dbg !53
  call void @llvm.dbg.declare(metadata i32* %delta, metadata !54, metadata !38), !dbg !55
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !56, metadata !38), !dbg !57
  call void @llvm.dbg.declare(metadata i32* %step, metadata !58, metadata !38), !dbg !59
  call void @llvm.dbg.declare(metadata i32* %valpred, metadata !60, metadata !38), !dbg !61
  call void @llvm.dbg.declare(metadata i32* %vpdiff, metadata !62, metadata !38), !dbg !63
  call void @llvm.dbg.declare(metadata i32* %index, metadata !64, metadata !38), !dbg !65
  call void @llvm.dbg.declare(metadata i32* %outputbuffer, metadata !66, metadata !38), !dbg !67
  call void @llvm.dbg.declare(metadata i32* %bufferstep, metadata !68, metadata !38), !dbg !69
  %0 = load i8*, i8** %outdata.addr, align 8, !dbg !70
  store i8* %0, i8** %outp, align 8, !dbg !71
  %1 = load i16*, i16** %indata.addr, align 8, !dbg !72
  store i16* %1, i16** %inp, align 8, !dbg !73
  %2 = load %struct.adpcm_state*, %struct.adpcm_state** %state.addr, align 8, !dbg !74
  %valprev = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %2, i32 0, i32 0, !dbg !75
  %3 = load i16, i16* %valprev, align 2, !dbg !75
  %conv = sext i16 %3 to i32, !dbg !74
  store i32 %conv, i32* %valpred, align 4, !dbg !76
  %4 = load %struct.adpcm_state*, %struct.adpcm_state** %state.addr, align 8, !dbg !77
  %index1 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %4, i32 0, i32 1, !dbg !78
  %5 = load i8, i8* %index1, align 1, !dbg !78
  %conv2 = sext i8 %5 to i32, !dbg !77
  store i32 %conv2, i32* %index, align 4, !dbg !79
  %6 = load i32, i32* %index, align 4, !dbg !80
  %idxprom = sext i32 %6 to i64, !dbg !81
  %arrayidx = getelementptr inbounds [89 x i32], [89 x i32]* @stepsizeTable, i32 0, i64 %idxprom, !dbg !81
  %7 = load i32, i32* %arrayidx, align 4, !dbg !81
  store i32 %7, i32* %step, align 4, !dbg !82
  store i32 1, i32* %bufferstep, align 4, !dbg !83
  br label %for.cond, !dbg !84

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %len.addr, align 4, !dbg !85
  %cmp = icmp sgt i32 %8, 0, !dbg !90
  br i1 %cmp, label %for.body, label %for.end, !dbg !91

for.body:                                         ; preds = %for.cond
  %9 = load i16*, i16** %inp, align 8, !dbg !92
  %incdec.ptr = getelementptr inbounds i16, i16* %9, i32 1, !dbg !92
  store i16* %incdec.ptr, i16** %inp, align 8, !dbg !92
  %10 = load i16, i16* %9, align 2, !dbg !94
  %conv4 = sext i16 %10 to i32, !dbg !94
  store i32 %conv4, i32* %val, align 4, !dbg !95
  %11 = load i32, i32* %val, align 4, !dbg !96
  %12 = load i32, i32* %valpred, align 4, !dbg !97
  %sub = sub nsw i32 %11, %12, !dbg !98
  store i32 %sub, i32* %diff, align 4, !dbg !99
  %13 = load i32, i32* %diff, align 4, !dbg !100
  %cmp5 = icmp slt i32 %13, 0, !dbg !101
  %cond = select i1 %cmp5, i32 8, i32 0, !dbg !102
  store i32 %cond, i32* %sign, align 4, !dbg !103
  %14 = load i32, i32* %sign, align 4, !dbg !104
  %tobool = icmp ne i32 %14, 0, !dbg !104
  br i1 %tobool, label %if.then, label %if.end, !dbg !106

if.then:                                          ; preds = %for.body
  %15 = load i32, i32* %diff, align 4, !dbg !107
  %sub7 = sub nsw i32 0, %15, !dbg !108
  store i32 %sub7, i32* %diff, align 4, !dbg !109
  br label %if.end, !dbg !110

if.end:                                           ; preds = %if.then, %for.body
  store i32 0, i32* %delta, align 4, !dbg !111
  %16 = load i32, i32* %step, align 4, !dbg !112
  %shr = ashr i32 %16, 3, !dbg !113
  store i32 %shr, i32* %vpdiff, align 4, !dbg !114
  %17 = load i32, i32* %diff, align 4, !dbg !115
  %18 = load i32, i32* %step, align 4, !dbg !117
  %cmp8 = icmp sge i32 %17, %18, !dbg !118
  br i1 %cmp8, label %if.then.10, label %if.end.12, !dbg !119

if.then.10:                                       ; preds = %if.end
  store i32 4, i32* %delta, align 4, !dbg !120
  %19 = load i32, i32* %step, align 4, !dbg !122
  %20 = load i32, i32* %diff, align 4, !dbg !123
  %sub11 = sub nsw i32 %20, %19, !dbg !123
  store i32 %sub11, i32* %diff, align 4, !dbg !123
  %21 = load i32, i32* %step, align 4, !dbg !124
  %22 = load i32, i32* %vpdiff, align 4, !dbg !125
  %add = add nsw i32 %22, %21, !dbg !125
  store i32 %add, i32* %vpdiff, align 4, !dbg !125
  br label %if.end.12, !dbg !126

if.end.12:                                        ; preds = %if.then.10, %if.end
  %23 = load i32, i32* %step, align 4, !dbg !127
  %shr13 = ashr i32 %23, 1, !dbg !127
  store i32 %shr13, i32* %step, align 4, !dbg !127
  %24 = load i32, i32* %diff, align 4, !dbg !128
  %25 = load i32, i32* %step, align 4, !dbg !130
  %cmp14 = icmp sge i32 %24, %25, !dbg !131
  br i1 %cmp14, label %if.then.16, label %if.end.19, !dbg !132

if.then.16:                                       ; preds = %if.end.12
  %26 = load i32, i32* %delta, align 4, !dbg !133
  %or = or i32 %26, 2, !dbg !133
  store i32 %or, i32* %delta, align 4, !dbg !133
  %27 = load i32, i32* %step, align 4, !dbg !135
  %28 = load i32, i32* %diff, align 4, !dbg !136
  %sub17 = sub nsw i32 %28, %27, !dbg !136
  store i32 %sub17, i32* %diff, align 4, !dbg !136
  %29 = load i32, i32* %step, align 4, !dbg !137
  %30 = load i32, i32* %vpdiff, align 4, !dbg !138
  %add18 = add nsw i32 %30, %29, !dbg !138
  store i32 %add18, i32* %vpdiff, align 4, !dbg !138
  br label %if.end.19, !dbg !139

if.end.19:                                        ; preds = %if.then.16, %if.end.12
  %31 = load i32, i32* %step, align 4, !dbg !140
  %shr20 = ashr i32 %31, 1, !dbg !140
  store i32 %shr20, i32* %step, align 4, !dbg !140
  %32 = load i32, i32* %diff, align 4, !dbg !141
  %33 = load i32, i32* %step, align 4, !dbg !143
  %cmp21 = icmp sge i32 %32, %33, !dbg !144
  br i1 %cmp21, label %if.then.23, label %if.end.26, !dbg !145

if.then.23:                                       ; preds = %if.end.19
  %34 = load i32, i32* %delta, align 4, !dbg !146
  %or24 = or i32 %34, 1, !dbg !146
  store i32 %or24, i32* %delta, align 4, !dbg !146
  %35 = load i32, i32* %step, align 4, !dbg !148
  %36 = load i32, i32* %vpdiff, align 4, !dbg !149
  %add25 = add nsw i32 %36, %35, !dbg !149
  store i32 %add25, i32* %vpdiff, align 4, !dbg !149
  br label %if.end.26, !dbg !150

if.end.26:                                        ; preds = %if.then.23, %if.end.19
  %37 = load i32, i32* %sign, align 4, !dbg !151
  %tobool27 = icmp ne i32 %37, 0, !dbg !151
  br i1 %tobool27, label %if.then.28, label %if.else, !dbg !153

if.then.28:                                       ; preds = %if.end.26
  %38 = load i32, i32* %vpdiff, align 4, !dbg !154
  %39 = load i32, i32* %valpred, align 4, !dbg !155
  %sub29 = sub nsw i32 %39, %38, !dbg !155
  store i32 %sub29, i32* %valpred, align 4, !dbg !155
  br label %if.end.31, !dbg !156

if.else:                                          ; preds = %if.end.26
  %40 = load i32, i32* %vpdiff, align 4, !dbg !157
  %41 = load i32, i32* %valpred, align 4, !dbg !158
  %add30 = add nsw i32 %41, %40, !dbg !158
  store i32 %add30, i32* %valpred, align 4, !dbg !158
  br label %if.end.31

if.end.31:                                        ; preds = %if.else, %if.then.28
  %42 = load i32, i32* %valpred, align 4, !dbg !159
  %cmp32 = icmp sgt i32 %42, 32767, !dbg !161
  br i1 %cmp32, label %if.then.34, label %if.else.35, !dbg !162

if.then.34:                                       ; preds = %if.end.31
  store i32 32767, i32* %valpred, align 4, !dbg !163
  br label %if.end.40, !dbg !164

if.else.35:                                       ; preds = %if.end.31
  %43 = load i32, i32* %valpred, align 4, !dbg !165
  %cmp36 = icmp slt i32 %43, -32768, !dbg !167
  br i1 %cmp36, label %if.then.38, label %if.end.39, !dbg !168

if.then.38:                                       ; preds = %if.else.35
  store i32 -32768, i32* %valpred, align 4, !dbg !169
  br label %if.end.39, !dbg !170

if.end.39:                                        ; preds = %if.then.38, %if.else.35
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.then.34
  %44 = load i32, i32* %sign, align 4, !dbg !171
  %45 = load i32, i32* %delta, align 4, !dbg !172
  %or41 = or i32 %45, %44, !dbg !172
  store i32 %or41, i32* %delta, align 4, !dbg !172
  %46 = load i32, i32* %delta, align 4, !dbg !173
  %idxprom42 = sext i32 %46 to i64, !dbg !174
  %arrayidx43 = getelementptr inbounds [16 x i32], [16 x i32]* @indexTable, i32 0, i64 %idxprom42, !dbg !174
  %47 = load i32, i32* %arrayidx43, align 4, !dbg !174
  %48 = load i32, i32* %index, align 4, !dbg !175
  %add44 = add nsw i32 %48, %47, !dbg !175
  store i32 %add44, i32* %index, align 4, !dbg !175
  %49 = load i32, i32* %index, align 4, !dbg !176
  %cmp45 = icmp slt i32 %49, 0, !dbg !178
  br i1 %cmp45, label %if.then.47, label %if.end.48, !dbg !179

if.then.47:                                       ; preds = %if.end.40
  store i32 0, i32* %index, align 4, !dbg !180
  br label %if.end.48, !dbg !181

if.end.48:                                        ; preds = %if.then.47, %if.end.40
  %50 = load i32, i32* %index, align 4, !dbg !182
  %cmp49 = icmp sgt i32 %50, 88, !dbg !184
  br i1 %cmp49, label %if.then.51, label %if.end.52, !dbg !185

if.then.51:                                       ; preds = %if.end.48
  store i32 88, i32* %index, align 4, !dbg !186
  br label %if.end.52, !dbg !187

if.end.52:                                        ; preds = %if.then.51, %if.end.48
  %51 = load i32, i32* %index, align 4, !dbg !188
  %idxprom53 = sext i32 %51 to i64, !dbg !189
  %arrayidx54 = getelementptr inbounds [89 x i32], [89 x i32]* @stepsizeTable, i32 0, i64 %idxprom53, !dbg !189
  %52 = load i32, i32* %arrayidx54, align 4, !dbg !189
  store i32 %52, i32* %step, align 4, !dbg !190
  %53 = load i32, i32* %bufferstep, align 4, !dbg !191
  %tobool55 = icmp ne i32 %53, 0, !dbg !191
  br i1 %tobool55, label %if.then.56, label %if.else.57, !dbg !193

if.then.56:                                       ; preds = %if.end.52
  %54 = load i32, i32* %delta, align 4, !dbg !194
  %shl = shl i32 %54, 4, !dbg !196
  %and = and i32 %shl, 240, !dbg !197
  store i32 %and, i32* %outputbuffer, align 4, !dbg !198
  br label %if.end.62, !dbg !199

if.else.57:                                       ; preds = %if.end.52
  %55 = load i32, i32* %delta, align 4, !dbg !200
  %and58 = and i32 %55, 15, !dbg !202
  %56 = load i32, i32* %outputbuffer, align 4, !dbg !203
  %or59 = or i32 %and58, %56, !dbg !204
  %conv60 = trunc i32 %or59 to i8, !dbg !205
  %57 = load i8*, i8** %outp, align 8, !dbg !206
  %incdec.ptr61 = getelementptr inbounds i8, i8* %57, i32 1, !dbg !206
  store i8* %incdec.ptr61, i8** %outp, align 8, !dbg !206
  store i8 %conv60, i8* %57, align 1, !dbg !207
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.57, %if.then.56
  %58 = load i32, i32* %bufferstep, align 4, !dbg !208
  %tobool63 = icmp ne i32 %58, 0, !dbg !209
  %lnot = xor i1 %tobool63, true, !dbg !209
  %lnot.ext = zext i1 %lnot to i32, !dbg !209
  store i32 %lnot.ext, i32* %bufferstep, align 4, !dbg !210
  br label %for.inc, !dbg !211

for.inc:                                          ; preds = %if.end.62
  %59 = load i32, i32* %len.addr, align 4, !dbg !212
  %dec = add nsw i32 %59, -1, !dbg !212
  store i32 %dec, i32* %len.addr, align 4, !dbg !212
  br label %for.cond, !dbg !213

for.end:                                          ; preds = %for.cond
  %60 = load i32, i32* %bufferstep, align 4, !dbg !214
  %tobool64 = icmp ne i32 %60, 0, !dbg !214
  br i1 %tobool64, label %if.end.68, label %if.then.65, !dbg !216

if.then.65:                                       ; preds = %for.end
  %61 = load i32, i32* %outputbuffer, align 4, !dbg !217
  %conv66 = trunc i32 %61 to i8, !dbg !217
  %62 = load i8*, i8** %outp, align 8, !dbg !218
  %incdec.ptr67 = getelementptr inbounds i8, i8* %62, i32 1, !dbg !218
  store i8* %incdec.ptr67, i8** %outp, align 8, !dbg !218
  store i8 %conv66, i8* %62, align 1, !dbg !219
  br label %if.end.68, !dbg !220

if.end.68:                                        ; preds = %if.then.65, %for.end
  %63 = load i32, i32* %valpred, align 4, !dbg !221
  %conv69 = trunc i32 %63 to i16, !dbg !221
  %64 = load %struct.adpcm_state*, %struct.adpcm_state** %state.addr, align 8, !dbg !222
  %valprev70 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %64, i32 0, i32 0, !dbg !223
  store i16 %conv69, i16* %valprev70, align 2, !dbg !224
  %65 = load i32, i32* %index, align 4, !dbg !225
  %conv71 = trunc i32 %65 to i8, !dbg !225
  %66 = load %struct.adpcm_state*, %struct.adpcm_state** %state.addr, align 8, !dbg !226
  %index72 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %66, i32 0, i32 1, !dbg !227
  store i8 %conv71, i8* %index72, align 1, !dbg !228
  ret void, !dbg !229
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define void @adpcm_decoder(i8* %indata, i16* %outdata, i32 %len, %struct.adpcm_state* %state) #0 {
entry:
  %indata.addr = alloca i8*, align 8
  %outdata.addr = alloca i16*, align 8
  %len.addr = alloca i32, align 4
  %state.addr = alloca %struct.adpcm_state*, align 8
  %inp = alloca i8*, align 8
  %outp = alloca i16*, align 8
  %sign = alloca i32, align 4
  %delta = alloca i32, align 4
  %step = alloca i32, align 4
  %valpred = alloca i32, align 4
  %vpdiff = alloca i32, align 4
  %index = alloca i32, align 4
  %inputbuffer = alloca i32, align 4
  %bufferstep = alloca i32, align 4
  store i8* %indata, i8** %indata.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %indata.addr, metadata !230, metadata !38), !dbg !231
  store i16* %outdata, i16** %outdata.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %outdata.addr, metadata !232, metadata !38), !dbg !233
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !234, metadata !38), !dbg !235
  store %struct.adpcm_state* %state, %struct.adpcm_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.adpcm_state** %state.addr, metadata !236, metadata !38), !dbg !237
  call void @llvm.dbg.declare(metadata i8** %inp, metadata !238, metadata !38), !dbg !239
  call void @llvm.dbg.declare(metadata i16** %outp, metadata !240, metadata !38), !dbg !241
  call void @llvm.dbg.declare(metadata i32* %sign, metadata !242, metadata !38), !dbg !243
  call void @llvm.dbg.declare(metadata i32* %delta, metadata !244, metadata !38), !dbg !245
  call void @llvm.dbg.declare(metadata i32* %step, metadata !246, metadata !38), !dbg !247
  call void @llvm.dbg.declare(metadata i32* %valpred, metadata !248, metadata !38), !dbg !249
  call void @llvm.dbg.declare(metadata i32* %vpdiff, metadata !250, metadata !38), !dbg !251
  call void @llvm.dbg.declare(metadata i32* %index, metadata !252, metadata !38), !dbg !253
  call void @llvm.dbg.declare(metadata i32* %inputbuffer, metadata !254, metadata !38), !dbg !255
  call void @llvm.dbg.declare(metadata i32* %bufferstep, metadata !256, metadata !38), !dbg !257
  %0 = load i16*, i16** %outdata.addr, align 8, !dbg !258
  store i16* %0, i16** %outp, align 8, !dbg !259
  %1 = load i8*, i8** %indata.addr, align 8, !dbg !260
  store i8* %1, i8** %inp, align 8, !dbg !261
  %2 = load %struct.adpcm_state*, %struct.adpcm_state** %state.addr, align 8, !dbg !262
  %valprev = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %2, i32 0, i32 0, !dbg !263
  %3 = load i16, i16* %valprev, align 2, !dbg !263
  %conv = sext i16 %3 to i32, !dbg !262
  store i32 %conv, i32* %valpred, align 4, !dbg !264
  %4 = load %struct.adpcm_state*, %struct.adpcm_state** %state.addr, align 8, !dbg !265
  %index1 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %4, i32 0, i32 1, !dbg !266
  %5 = load i8, i8* %index1, align 1, !dbg !266
  %conv2 = sext i8 %5 to i32, !dbg !265
  store i32 %conv2, i32* %index, align 4, !dbg !267
  %6 = load i32, i32* %index, align 4, !dbg !268
  %idxprom = sext i32 %6 to i64, !dbg !269
  %arrayidx = getelementptr inbounds [89 x i32], [89 x i32]* @stepsizeTable, i32 0, i64 %idxprom, !dbg !269
  %7 = load i32, i32* %arrayidx, align 4, !dbg !269
  store i32 %7, i32* %step, align 4, !dbg !270
  store i32 0, i32* %bufferstep, align 4, !dbg !271
  br label %for.cond, !dbg !272

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %len.addr, align 4, !dbg !273
  %cmp = icmp sgt i32 %8, 0, !dbg !278
  br i1 %cmp, label %for.body, label %for.end, !dbg !279

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %bufferstep, align 4, !dbg !280
  %tobool = icmp ne i32 %9, 0, !dbg !280
  br i1 %tobool, label %if.then, label %if.else, !dbg !283

if.then:                                          ; preds = %for.body
  %10 = load i32, i32* %inputbuffer, align 4, !dbg !284
  %and = and i32 %10, 15, !dbg !286
  store i32 %and, i32* %delta, align 4, !dbg !287
  br label %if.end, !dbg !288

if.else:                                          ; preds = %for.body
  %11 = load i8*, i8** %inp, align 8, !dbg !289
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1, !dbg !289
  store i8* %incdec.ptr, i8** %inp, align 8, !dbg !289
  %12 = load i8, i8* %11, align 1, !dbg !291
  %conv4 = sext i8 %12 to i32, !dbg !291
  store i32 %conv4, i32* %inputbuffer, align 4, !dbg !292
  %13 = load i32, i32* %inputbuffer, align 4, !dbg !293
  %shr = ashr i32 %13, 4, !dbg !294
  %and5 = and i32 %shr, 15, !dbg !295
  store i32 %and5, i32* %delta, align 4, !dbg !296
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load i32, i32* %bufferstep, align 4, !dbg !297
  %tobool6 = icmp ne i32 %14, 0, !dbg !298
  %lnot = xor i1 %tobool6, true, !dbg !298
  %lnot.ext = zext i1 %lnot to i32, !dbg !298
  store i32 %lnot.ext, i32* %bufferstep, align 4, !dbg !299
  %15 = load i32, i32* %delta, align 4, !dbg !300
  %idxprom7 = sext i32 %15 to i64, !dbg !301
  %arrayidx8 = getelementptr inbounds [16 x i32], [16 x i32]* @indexTable, i32 0, i64 %idxprom7, !dbg !301
  %16 = load i32, i32* %arrayidx8, align 4, !dbg !301
  %17 = load i32, i32* %index, align 4, !dbg !302
  %add = add nsw i32 %17, %16, !dbg !302
  store i32 %add, i32* %index, align 4, !dbg !302
  %18 = load i32, i32* %index, align 4, !dbg !303
  %cmp9 = icmp slt i32 %18, 0, !dbg !305
  br i1 %cmp9, label %if.then.11, label %if.end.12, !dbg !306

if.then.11:                                       ; preds = %if.end
  store i32 0, i32* %index, align 4, !dbg !307
  br label %if.end.12, !dbg !308

if.end.12:                                        ; preds = %if.then.11, %if.end
  %19 = load i32, i32* %index, align 4, !dbg !309
  %cmp13 = icmp sgt i32 %19, 88, !dbg !311
  br i1 %cmp13, label %if.then.15, label %if.end.16, !dbg !312

if.then.15:                                       ; preds = %if.end.12
  store i32 88, i32* %index, align 4, !dbg !313
  br label %if.end.16, !dbg !314

if.end.16:                                        ; preds = %if.then.15, %if.end.12
  %20 = load i32, i32* %delta, align 4, !dbg !315
  %and17 = and i32 %20, 8, !dbg !316
  store i32 %and17, i32* %sign, align 4, !dbg !317
  %21 = load i32, i32* %delta, align 4, !dbg !318
  %and18 = and i32 %21, 7, !dbg !319
  store i32 %and18, i32* %delta, align 4, !dbg !320
  %22 = load i32, i32* %step, align 4, !dbg !321
  %shr19 = ashr i32 %22, 3, !dbg !322
  store i32 %shr19, i32* %vpdiff, align 4, !dbg !323
  %23 = load i32, i32* %delta, align 4, !dbg !324
  %and20 = and i32 %23, 4, !dbg !326
  %tobool21 = icmp ne i32 %and20, 0, !dbg !326
  br i1 %tobool21, label %if.then.22, label %if.end.24, !dbg !327

if.then.22:                                       ; preds = %if.end.16
  %24 = load i32, i32* %step, align 4, !dbg !328
  %25 = load i32, i32* %vpdiff, align 4, !dbg !329
  %add23 = add nsw i32 %25, %24, !dbg !329
  store i32 %add23, i32* %vpdiff, align 4, !dbg !329
  br label %if.end.24, !dbg !330

if.end.24:                                        ; preds = %if.then.22, %if.end.16
  %26 = load i32, i32* %delta, align 4, !dbg !331
  %and25 = and i32 %26, 2, !dbg !333
  %tobool26 = icmp ne i32 %and25, 0, !dbg !333
  br i1 %tobool26, label %if.then.27, label %if.end.30, !dbg !334

if.then.27:                                       ; preds = %if.end.24
  %27 = load i32, i32* %step, align 4, !dbg !335
  %shr28 = ashr i32 %27, 1, !dbg !336
  %28 = load i32, i32* %vpdiff, align 4, !dbg !337
  %add29 = add nsw i32 %28, %shr28, !dbg !337
  store i32 %add29, i32* %vpdiff, align 4, !dbg !337
  br label %if.end.30, !dbg !338

if.end.30:                                        ; preds = %if.then.27, %if.end.24
  %29 = load i32, i32* %delta, align 4, !dbg !339
  %and31 = and i32 %29, 1, !dbg !341
  %tobool32 = icmp ne i32 %and31, 0, !dbg !341
  br i1 %tobool32, label %if.then.33, label %if.end.36, !dbg !342

if.then.33:                                       ; preds = %if.end.30
  %30 = load i32, i32* %step, align 4, !dbg !343
  %shr34 = ashr i32 %30, 2, !dbg !344
  %31 = load i32, i32* %vpdiff, align 4, !dbg !345
  %add35 = add nsw i32 %31, %shr34, !dbg !345
  store i32 %add35, i32* %vpdiff, align 4, !dbg !345
  br label %if.end.36, !dbg !346

if.end.36:                                        ; preds = %if.then.33, %if.end.30
  %32 = load i32, i32* %sign, align 4, !dbg !347
  %tobool37 = icmp ne i32 %32, 0, !dbg !347
  br i1 %tobool37, label %if.then.38, label %if.else.39, !dbg !349

if.then.38:                                       ; preds = %if.end.36
  %33 = load i32, i32* %vpdiff, align 4, !dbg !350
  %34 = load i32, i32* %valpred, align 4, !dbg !351
  %sub = sub nsw i32 %34, %33, !dbg !351
  store i32 %sub, i32* %valpred, align 4, !dbg !351
  br label %if.end.41, !dbg !352

if.else.39:                                       ; preds = %if.end.36
  %35 = load i32, i32* %vpdiff, align 4, !dbg !353
  %36 = load i32, i32* %valpred, align 4, !dbg !354
  %add40 = add nsw i32 %36, %35, !dbg !354
  store i32 %add40, i32* %valpred, align 4, !dbg !354
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.39, %if.then.38
  %37 = load i32, i32* %valpred, align 4, !dbg !355
  %cmp42 = icmp sgt i32 %37, 32767, !dbg !357
  br i1 %cmp42, label %if.then.44, label %if.else.45, !dbg !358

if.then.44:                                       ; preds = %if.end.41
  store i32 32767, i32* %valpred, align 4, !dbg !359
  br label %if.end.50, !dbg !360

if.else.45:                                       ; preds = %if.end.41
  %38 = load i32, i32* %valpred, align 4, !dbg !361
  %cmp46 = icmp slt i32 %38, -32768, !dbg !363
  br i1 %cmp46, label %if.then.48, label %if.end.49, !dbg !364

if.then.48:                                       ; preds = %if.else.45
  store i32 -32768, i32* %valpred, align 4, !dbg !365
  br label %if.end.49, !dbg !366

if.end.49:                                        ; preds = %if.then.48, %if.else.45
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %if.then.44
  %39 = load i32, i32* %index, align 4, !dbg !367
  %idxprom51 = sext i32 %39 to i64, !dbg !368
  %arrayidx52 = getelementptr inbounds [89 x i32], [89 x i32]* @stepsizeTable, i32 0, i64 %idxprom51, !dbg !368
  %40 = load i32, i32* %arrayidx52, align 4, !dbg !368
  store i32 %40, i32* %step, align 4, !dbg !369
  %41 = load i32, i32* %valpred, align 4, !dbg !370
  %conv53 = trunc i32 %41 to i16, !dbg !370
  %42 = load i16*, i16** %outp, align 8, !dbg !371
  %incdec.ptr54 = getelementptr inbounds i16, i16* %42, i32 1, !dbg !371
  store i16* %incdec.ptr54, i16** %outp, align 8, !dbg !371
  store i16 %conv53, i16* %42, align 2, !dbg !372
  br label %for.inc, !dbg !373

for.inc:                                          ; preds = %if.end.50
  %43 = load i32, i32* %len.addr, align 4, !dbg !374
  %dec = add nsw i32 %43, -1, !dbg !374
  store i32 %dec, i32* %len.addr, align 4, !dbg !374
  br label %for.cond, !dbg !375

for.end:                                          ; preds = %for.cond
  %44 = load i32, i32* %valpred, align 4, !dbg !376
  %conv55 = trunc i32 %44 to i16, !dbg !376
  %45 = load %struct.adpcm_state*, %struct.adpcm_state** %state.addr, align 8, !dbg !377
  %valprev56 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %45, i32 0, i32 0, !dbg !378
  store i16 %conv55, i16* %valprev56, align 2, !dbg !379
  %46 = load i32, i32* %index, align 4, !dbg !380
  %conv57 = trunc i32 %46 to i8, !dbg !380
  %47 = load %struct.adpcm_state*, %struct.adpcm_state** %state.addr, align 8, !dbg !381
  %index58 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %47, i32 0, i32 1, !dbg !382
  store i8 %conv57, i8* %index58, align 1, !dbg !383
  ret void, !dbg !384
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!34, !35}
!llvm.ident = !{!36}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !6, globals: !25)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/mediabench/adpcm/rawcaudio")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!6 = !{!7, !22}
!7 = !DISubprogram(name: "adpcm_coder", scope: !8, file: !8, line: 72, type: !9, isLocal: false, isDefinition: true, scopeLine: 76, isOptimized: false, function: void (i16*, i8*, i32, %struct.adpcm_state*)* @adpcm_coder, variables: !2)
!8 = !DIFile(filename: "/home/gleison/tf/Benchmarks/mediabench/adpcm/rawcaudio/tmp.c", directory: "/home/gleison/tf/Benchmarks/mediabench/adpcm/rawcaudio")
!9 = !DISubroutineType(types: !10)
!10 = !{null, !11, !13, !15, !16}
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!12 = !DIBasicType(name: "short", size: 16, align: 16, encoding: DW_ATE_signed)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!14 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!15 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, align: 64)
!17 = !DICompositeType(tag: DW_TAG_structure_type, name: "adpcm_state", file: !18, line: 7, size: 32, align: 16, elements: !19)
!18 = !DIFile(filename: "./adpcm.h", directory: "/home/gleison/tf/Benchmarks/mediabench/adpcm/rawcaudio")
!19 = !{!20, !21}
!20 = !DIDerivedType(tag: DW_TAG_member, name: "valprev", scope: !17, file: !18, line: 8, baseType: !12, size: 16, align: 16)
!21 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !17, file: !18, line: 9, baseType: !14, size: 8, align: 8, offset: 16)
!22 = !DISubprogram(name: "adpcm_decoder", scope: !8, file: !8, line: 177, type: !23, isLocal: false, isDefinition: true, scopeLine: 181, isOptimized: false, function: void (i8*, i16*, i32, %struct.adpcm_state*)* @adpcm_decoder, variables: !2)
!23 = !DISubroutineType(types: !24)
!24 = !{null, !13, !11, !15, !16}
!25 = !{!26, !30}
!26 = !DIGlobalVariable(name: "stepsizeTable", scope: !0, file: !8, line: 60, type: !27, isLocal: true, isDefinition: true, variable: [89 x i32]* @stepsizeTable)
!27 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 2848, align: 32, elements: !28)
!28 = !{!29}
!29 = !DISubrange(count: 89)
!30 = !DIGlobalVariable(name: "indexTable", scope: !0, file: !8, line: 55, type: !31, isLocal: true, isDefinition: true, variable: [16 x i32]* @indexTable)
!31 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 512, align: 32, elements: !32)
!32 = !{!33}
!33 = !DISubrange(count: 16)
!34 = !{i32 2, !"Dwarf Version", i32 4}
!35 = !{i32 2, !"Debug Info Version", i32 3}
!36 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!37 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "indata", arg: 1, scope: !7, file: !8, line: 72, type: !11)
!38 = !DIExpression()
!39 = !DILocation(line: 72, column: 52, scope: !7)
!40 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "outdata", arg: 2, scope: !7, file: !8, line: 73, type: !13)
!41 = !DILocation(line: 73, column: 6, scope: !7)
!42 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len", arg: 3, scope: !7, file: !8, line: 74, type: !15)
!43 = !DILocation(line: 74, column: 5, scope: !7)
!44 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "state", arg: 4, scope: !7, file: !8, line: 75, type: !16)
!45 = !DILocation(line: 75, column: 21, scope: !7)
!46 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "inp", scope: !7, file: !8, line: 77, type: !11)
!47 = !DILocation(line: 77, column: 10, scope: !7)
!48 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outp", scope: !7, file: !8, line: 78, type: !4)
!49 = !DILocation(line: 78, column: 16, scope: !7)
!50 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "val", scope: !7, file: !8, line: 79, type: !15)
!51 = !DILocation(line: 79, column: 7, scope: !7)
!52 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sign", scope: !7, file: !8, line: 80, type: !15)
!53 = !DILocation(line: 80, column: 7, scope: !7)
!54 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "delta", scope: !7, file: !8, line: 81, type: !15)
!55 = !DILocation(line: 81, column: 7, scope: !7)
!56 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "diff", scope: !7, file: !8, line: 82, type: !15)
!57 = !DILocation(line: 82, column: 7, scope: !7)
!58 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "step", scope: !7, file: !8, line: 83, type: !15)
!59 = !DILocation(line: 83, column: 7, scope: !7)
!60 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "valpred", scope: !7, file: !8, line: 84, type: !15)
!61 = !DILocation(line: 84, column: 7, scope: !7)
!62 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vpdiff", scope: !7, file: !8, line: 85, type: !15)
!63 = !DILocation(line: 85, column: 7, scope: !7)
!64 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !7, file: !8, line: 86, type: !15)
!65 = !DILocation(line: 86, column: 7, scope: !7)
!66 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outputbuffer", scope: !7, file: !8, line: 87, type: !15)
!67 = !DILocation(line: 87, column: 7, scope: !7)
!68 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bufferstep", scope: !7, file: !8, line: 88, type: !15)
!69 = !DILocation(line: 88, column: 7, scope: !7)
!70 = !DILocation(line: 90, column: 25, scope: !7)
!71 = !DILocation(line: 90, column: 8, scope: !7)
!72 = !DILocation(line: 91, column: 9, scope: !7)
!73 = !DILocation(line: 91, column: 7, scope: !7)
!74 = !DILocation(line: 93, column: 13, scope: !7)
!75 = !DILocation(line: 93, column: 20, scope: !7)
!76 = !DILocation(line: 93, column: 11, scope: !7)
!77 = !DILocation(line: 94, column: 11, scope: !7)
!78 = !DILocation(line: 94, column: 18, scope: !7)
!79 = !DILocation(line: 94, column: 9, scope: !7)
!80 = !DILocation(line: 95, column: 24, scope: !7)
!81 = !DILocation(line: 95, column: 10, scope: !7)
!82 = !DILocation(line: 95, column: 8, scope: !7)
!83 = !DILocation(line: 97, column: 14, scope: !7)
!84 = !DILocation(line: 99, column: 3, scope: !7)
!85 = !DILocation(line: 99, column: 10, scope: !86)
!86 = !DILexicalBlockFile(scope: !87, file: !8, discriminator: 2)
!87 = !DILexicalBlockFile(scope: !88, file: !8, discriminator: 1)
!88 = distinct !DILexicalBlock(scope: !89, file: !8, line: 99, column: 3)
!89 = distinct !DILexicalBlock(scope: !7, file: !8, line: 99, column: 3)
!90 = !DILocation(line: 99, column: 14, scope: !88)
!91 = !DILocation(line: 99, column: 3, scope: !89)
!92 = !DILocation(line: 100, column: 15, scope: !93)
!93 = distinct !DILexicalBlock(scope: !88, file: !8, line: 99, column: 26)
!94 = !DILocation(line: 100, column: 11, scope: !93)
!95 = !DILocation(line: 100, column: 9, scope: !93)
!96 = !DILocation(line: 103, column: 12, scope: !93)
!97 = !DILocation(line: 103, column: 18, scope: !93)
!98 = !DILocation(line: 103, column: 16, scope: !93)
!99 = !DILocation(line: 103, column: 10, scope: !93)
!100 = !DILocation(line: 104, column: 13, scope: !93)
!101 = !DILocation(line: 104, column: 18, scope: !93)
!102 = !DILocation(line: 104, column: 12, scope: !93)
!103 = !DILocation(line: 104, column: 10, scope: !93)
!104 = !DILocation(line: 105, column: 9, scope: !105)
!105 = distinct !DILexicalBlock(scope: !93, file: !8, line: 105, column: 9)
!106 = !DILocation(line: 105, column: 9, scope: !93)
!107 = !DILocation(line: 106, column: 16, scope: !105)
!108 = !DILocation(line: 106, column: 15, scope: !105)
!109 = !DILocation(line: 106, column: 12, scope: !105)
!110 = !DILocation(line: 106, column: 7, scope: !105)
!111 = !DILocation(line: 117, column: 11, scope: !93)
!112 = !DILocation(line: 118, column: 15, scope: !93)
!113 = !DILocation(line: 118, column: 20, scope: !93)
!114 = !DILocation(line: 118, column: 12, scope: !93)
!115 = !DILocation(line: 120, column: 9, scope: !116)
!116 = distinct !DILexicalBlock(scope: !93, file: !8, line: 120, column: 9)
!117 = !DILocation(line: 120, column: 17, scope: !116)
!118 = !DILocation(line: 120, column: 14, scope: !116)
!119 = !DILocation(line: 120, column: 9, scope: !93)
!120 = !DILocation(line: 121, column: 13, scope: !121)
!121 = distinct !DILexicalBlock(scope: !116, file: !8, line: 120, column: 23)
!122 = !DILocation(line: 122, column: 15, scope: !121)
!123 = !DILocation(line: 122, column: 12, scope: !121)
!124 = !DILocation(line: 123, column: 17, scope: !121)
!125 = !DILocation(line: 123, column: 14, scope: !121)
!126 = !DILocation(line: 124, column: 5, scope: !121)
!127 = !DILocation(line: 125, column: 10, scope: !93)
!128 = !DILocation(line: 126, column: 9, scope: !129)
!129 = distinct !DILexicalBlock(scope: !93, file: !8, line: 126, column: 9)
!130 = !DILocation(line: 126, column: 17, scope: !129)
!131 = !DILocation(line: 126, column: 14, scope: !129)
!132 = !DILocation(line: 126, column: 9, scope: !93)
!133 = !DILocation(line: 127, column: 13, scope: !134)
!134 = distinct !DILexicalBlock(scope: !129, file: !8, line: 126, column: 23)
!135 = !DILocation(line: 128, column: 15, scope: !134)
!136 = !DILocation(line: 128, column: 12, scope: !134)
!137 = !DILocation(line: 129, column: 17, scope: !134)
!138 = !DILocation(line: 129, column: 14, scope: !134)
!139 = !DILocation(line: 130, column: 5, scope: !134)
!140 = !DILocation(line: 131, column: 10, scope: !93)
!141 = !DILocation(line: 132, column: 9, scope: !142)
!142 = distinct !DILexicalBlock(scope: !93, file: !8, line: 132, column: 9)
!143 = !DILocation(line: 132, column: 17, scope: !142)
!144 = !DILocation(line: 132, column: 14, scope: !142)
!145 = !DILocation(line: 132, column: 9, scope: !93)
!146 = !DILocation(line: 133, column: 13, scope: !147)
!147 = distinct !DILexicalBlock(scope: !142, file: !8, line: 132, column: 23)
!148 = !DILocation(line: 134, column: 17, scope: !147)
!149 = !DILocation(line: 134, column: 14, scope: !147)
!150 = !DILocation(line: 135, column: 5, scope: !147)
!151 = !DILocation(line: 138, column: 9, scope: !152)
!152 = distinct !DILexicalBlock(scope: !93, file: !8, line: 138, column: 9)
!153 = !DILocation(line: 138, column: 9, scope: !93)
!154 = !DILocation(line: 139, column: 18, scope: !152)
!155 = !DILocation(line: 139, column: 15, scope: !152)
!156 = !DILocation(line: 139, column: 7, scope: !152)
!157 = !DILocation(line: 141, column: 18, scope: !152)
!158 = !DILocation(line: 141, column: 15, scope: !152)
!159 = !DILocation(line: 144, column: 9, scope: !160)
!160 = distinct !DILexicalBlock(scope: !93, file: !8, line: 144, column: 9)
!161 = !DILocation(line: 144, column: 17, scope: !160)
!162 = !DILocation(line: 144, column: 9, scope: !93)
!163 = !DILocation(line: 145, column: 15, scope: !160)
!164 = !DILocation(line: 145, column: 7, scope: !160)
!165 = !DILocation(line: 146, column: 14, scope: !166)
!166 = distinct !DILexicalBlock(scope: !160, file: !8, line: 146, column: 14)
!167 = !DILocation(line: 146, column: 22, scope: !166)
!168 = !DILocation(line: 146, column: 14, scope: !160)
!169 = !DILocation(line: 147, column: 15, scope: !166)
!170 = !DILocation(line: 147, column: 7, scope: !166)
!171 = !DILocation(line: 150, column: 14, scope: !93)
!172 = !DILocation(line: 150, column: 11, scope: !93)
!173 = !DILocation(line: 152, column: 25, scope: !93)
!174 = !DILocation(line: 152, column: 14, scope: !93)
!175 = !DILocation(line: 152, column: 11, scope: !93)
!176 = !DILocation(line: 153, column: 9, scope: !177)
!177 = distinct !DILexicalBlock(scope: !93, file: !8, line: 153, column: 9)
!178 = !DILocation(line: 153, column: 15, scope: !177)
!179 = !DILocation(line: 153, column: 9, scope: !93)
!180 = !DILocation(line: 154, column: 13, scope: !177)
!181 = !DILocation(line: 154, column: 7, scope: !177)
!182 = !DILocation(line: 155, column: 9, scope: !183)
!183 = distinct !DILexicalBlock(scope: !93, file: !8, line: 155, column: 9)
!184 = !DILocation(line: 155, column: 15, scope: !183)
!185 = !DILocation(line: 155, column: 9, scope: !93)
!186 = !DILocation(line: 156, column: 13, scope: !183)
!187 = !DILocation(line: 156, column: 7, scope: !183)
!188 = !DILocation(line: 157, column: 26, scope: !93)
!189 = !DILocation(line: 157, column: 12, scope: !93)
!190 = !DILocation(line: 157, column: 10, scope: !93)
!191 = !DILocation(line: 160, column: 9, scope: !192)
!192 = distinct !DILexicalBlock(scope: !93, file: !8, line: 160, column: 9)
!193 = !DILocation(line: 160, column: 9, scope: !93)
!194 = !DILocation(line: 161, column: 23, scope: !195)
!195 = distinct !DILexicalBlock(scope: !192, file: !8, line: 160, column: 21)
!196 = !DILocation(line: 161, column: 29, scope: !195)
!197 = !DILocation(line: 161, column: 35, scope: !195)
!198 = !DILocation(line: 161, column: 20, scope: !195)
!199 = !DILocation(line: 162, column: 5, scope: !195)
!200 = !DILocation(line: 163, column: 18, scope: !201)
!201 = distinct !DILexicalBlock(scope: !192, file: !8, line: 162, column: 12)
!202 = !DILocation(line: 163, column: 24, scope: !201)
!203 = !DILocation(line: 163, column: 34, scope: !201)
!204 = !DILocation(line: 163, column: 32, scope: !201)
!205 = !DILocation(line: 163, column: 17, scope: !201)
!206 = !DILocation(line: 163, column: 12, scope: !201)
!207 = !DILocation(line: 163, column: 15, scope: !201)
!208 = !DILocation(line: 165, column: 19, scope: !93)
!209 = !DILocation(line: 165, column: 18, scope: !93)
!210 = !DILocation(line: 165, column: 16, scope: !93)
!211 = !DILocation(line: 166, column: 3, scope: !93)
!212 = !DILocation(line: 99, column: 22, scope: !88)
!213 = !DILocation(line: 99, column: 3, scope: !88)
!214 = !DILocation(line: 169, column: 8, scope: !215)
!215 = distinct !DILexicalBlock(scope: !7, file: !8, line: 169, column: 7)
!216 = !DILocation(line: 169, column: 7, scope: !7)
!217 = !DILocation(line: 170, column: 15, scope: !215)
!218 = !DILocation(line: 170, column: 10, scope: !215)
!219 = !DILocation(line: 170, column: 13, scope: !215)
!220 = !DILocation(line: 170, column: 5, scope: !215)
!221 = !DILocation(line: 172, column: 20, scope: !7)
!222 = !DILocation(line: 172, column: 3, scope: !7)
!223 = !DILocation(line: 172, column: 10, scope: !7)
!224 = !DILocation(line: 172, column: 18, scope: !7)
!225 = !DILocation(line: 173, column: 18, scope: !7)
!226 = !DILocation(line: 173, column: 3, scope: !7)
!227 = !DILocation(line: 173, column: 10, scope: !7)
!228 = !DILocation(line: 173, column: 16, scope: !7)
!229 = !DILocation(line: 174, column: 1, scope: !7)
!230 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "indata", arg: 1, scope: !22, file: !8, line: 177, type: !13)
!231 = !DILocation(line: 177, column: 53, scope: !22)
!232 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "outdata", arg: 2, scope: !22, file: !8, line: 178, type: !11)
!233 = !DILocation(line: 178, column: 7, scope: !22)
!234 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len", arg: 3, scope: !22, file: !8, line: 179, type: !15)
!235 = !DILocation(line: 179, column: 5, scope: !22)
!236 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "state", arg: 4, scope: !22, file: !8, line: 180, type: !16)
!237 = !DILocation(line: 180, column: 21, scope: !22)
!238 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "inp", scope: !22, file: !8, line: 182, type: !4)
!239 = !DILocation(line: 182, column: 16, scope: !22)
!240 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outp", scope: !22, file: !8, line: 183, type: !11)
!241 = !DILocation(line: 183, column: 10, scope: !22)
!242 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sign", scope: !22, file: !8, line: 184, type: !15)
!243 = !DILocation(line: 184, column: 7, scope: !22)
!244 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "delta", scope: !22, file: !8, line: 185, type: !15)
!245 = !DILocation(line: 185, column: 7, scope: !22)
!246 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "step", scope: !22, file: !8, line: 186, type: !15)
!247 = !DILocation(line: 186, column: 7, scope: !22)
!248 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "valpred", scope: !22, file: !8, line: 187, type: !15)
!249 = !DILocation(line: 187, column: 7, scope: !22)
!250 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vpdiff", scope: !22, file: !8, line: 188, type: !15)
!251 = !DILocation(line: 188, column: 7, scope: !22)
!252 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !22, file: !8, line: 189, type: !15)
!253 = !DILocation(line: 189, column: 7, scope: !22)
!254 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "inputbuffer", scope: !22, file: !8, line: 190, type: !15)
!255 = !DILocation(line: 190, column: 7, scope: !22)
!256 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bufferstep", scope: !22, file: !8, line: 191, type: !15)
!257 = !DILocation(line: 191, column: 7, scope: !22)
!258 = !DILocation(line: 193, column: 10, scope: !22)
!259 = !DILocation(line: 193, column: 8, scope: !22)
!260 = !DILocation(line: 194, column: 24, scope: !22)
!261 = !DILocation(line: 194, column: 7, scope: !22)
!262 = !DILocation(line: 196, column: 13, scope: !22)
!263 = !DILocation(line: 196, column: 20, scope: !22)
!264 = !DILocation(line: 196, column: 11, scope: !22)
!265 = !DILocation(line: 197, column: 11, scope: !22)
!266 = !DILocation(line: 197, column: 18, scope: !22)
!267 = !DILocation(line: 197, column: 9, scope: !22)
!268 = !DILocation(line: 198, column: 24, scope: !22)
!269 = !DILocation(line: 198, column: 10, scope: !22)
!270 = !DILocation(line: 198, column: 8, scope: !22)
!271 = !DILocation(line: 200, column: 14, scope: !22)
!272 = !DILocation(line: 202, column: 3, scope: !22)
!273 = !DILocation(line: 202, column: 10, scope: !274)
!274 = !DILexicalBlockFile(scope: !275, file: !8, discriminator: 2)
!275 = !DILexicalBlockFile(scope: !276, file: !8, discriminator: 1)
!276 = distinct !DILexicalBlock(scope: !277, file: !8, line: 202, column: 3)
!277 = distinct !DILexicalBlock(scope: !22, file: !8, line: 202, column: 3)
!278 = !DILocation(line: 202, column: 14, scope: !276)
!279 = !DILocation(line: 202, column: 3, scope: !277)
!280 = !DILocation(line: 205, column: 9, scope: !281)
!281 = distinct !DILexicalBlock(scope: !282, file: !8, line: 205, column: 9)
!282 = distinct !DILexicalBlock(scope: !276, file: !8, line: 202, column: 26)
!283 = !DILocation(line: 205, column: 9, scope: !282)
!284 = !DILocation(line: 206, column: 15, scope: !285)
!285 = distinct !DILexicalBlock(scope: !281, file: !8, line: 205, column: 21)
!286 = !DILocation(line: 206, column: 27, scope: !285)
!287 = !DILocation(line: 206, column: 13, scope: !285)
!288 = !DILocation(line: 207, column: 5, scope: !285)
!289 = !DILocation(line: 208, column: 25, scope: !290)
!290 = distinct !DILexicalBlock(scope: !281, file: !8, line: 207, column: 12)
!291 = !DILocation(line: 208, column: 21, scope: !290)
!292 = !DILocation(line: 208, column: 19, scope: !290)
!293 = !DILocation(line: 209, column: 16, scope: !290)
!294 = !DILocation(line: 209, column: 28, scope: !290)
!295 = !DILocation(line: 209, column: 34, scope: !290)
!296 = !DILocation(line: 209, column: 13, scope: !290)
!297 = !DILocation(line: 211, column: 19, scope: !282)
!298 = !DILocation(line: 211, column: 18, scope: !282)
!299 = !DILocation(line: 211, column: 16, scope: !282)
!300 = !DILocation(line: 214, column: 25, scope: !282)
!301 = !DILocation(line: 214, column: 14, scope: !282)
!302 = !DILocation(line: 214, column: 11, scope: !282)
!303 = !DILocation(line: 215, column: 9, scope: !304)
!304 = distinct !DILexicalBlock(scope: !282, file: !8, line: 215, column: 9)
!305 = !DILocation(line: 215, column: 15, scope: !304)
!306 = !DILocation(line: 215, column: 9, scope: !282)
!307 = !DILocation(line: 216, column: 13, scope: !304)
!308 = !DILocation(line: 216, column: 7, scope: !304)
!309 = !DILocation(line: 217, column: 9, scope: !310)
!310 = distinct !DILexicalBlock(scope: !282, file: !8, line: 217, column: 9)
!311 = !DILocation(line: 217, column: 15, scope: !310)
!312 = !DILocation(line: 217, column: 9, scope: !282)
!313 = !DILocation(line: 218, column: 13, scope: !310)
!314 = !DILocation(line: 218, column: 7, scope: !310)
!315 = !DILocation(line: 221, column: 12, scope: !282)
!316 = !DILocation(line: 221, column: 18, scope: !282)
!317 = !DILocation(line: 221, column: 10, scope: !282)
!318 = !DILocation(line: 222, column: 13, scope: !282)
!319 = !DILocation(line: 222, column: 19, scope: !282)
!320 = !DILocation(line: 222, column: 11, scope: !282)
!321 = !DILocation(line: 229, column: 14, scope: !282)
!322 = !DILocation(line: 229, column: 19, scope: !282)
!323 = !DILocation(line: 229, column: 12, scope: !282)
!324 = !DILocation(line: 230, column: 9, scope: !325)
!325 = distinct !DILexicalBlock(scope: !282, file: !8, line: 230, column: 9)
!326 = !DILocation(line: 230, column: 15, scope: !325)
!327 = !DILocation(line: 230, column: 9, scope: !282)
!328 = !DILocation(line: 231, column: 17, scope: !325)
!329 = !DILocation(line: 231, column: 14, scope: !325)
!330 = !DILocation(line: 231, column: 7, scope: !325)
!331 = !DILocation(line: 232, column: 9, scope: !332)
!332 = distinct !DILexicalBlock(scope: !282, file: !8, line: 232, column: 9)
!333 = !DILocation(line: 232, column: 15, scope: !332)
!334 = !DILocation(line: 232, column: 9, scope: !282)
!335 = !DILocation(line: 233, column: 17, scope: !332)
!336 = !DILocation(line: 233, column: 22, scope: !332)
!337 = !DILocation(line: 233, column: 14, scope: !332)
!338 = !DILocation(line: 233, column: 7, scope: !332)
!339 = !DILocation(line: 234, column: 9, scope: !340)
!340 = distinct !DILexicalBlock(scope: !282, file: !8, line: 234, column: 9)
!341 = !DILocation(line: 234, column: 15, scope: !340)
!342 = !DILocation(line: 234, column: 9, scope: !282)
!343 = !DILocation(line: 235, column: 17, scope: !340)
!344 = !DILocation(line: 235, column: 22, scope: !340)
!345 = !DILocation(line: 235, column: 14, scope: !340)
!346 = !DILocation(line: 235, column: 7, scope: !340)
!347 = !DILocation(line: 237, column: 9, scope: !348)
!348 = distinct !DILexicalBlock(scope: !282, file: !8, line: 237, column: 9)
!349 = !DILocation(line: 237, column: 9, scope: !282)
!350 = !DILocation(line: 238, column: 18, scope: !348)
!351 = !DILocation(line: 238, column: 15, scope: !348)
!352 = !DILocation(line: 238, column: 7, scope: !348)
!353 = !DILocation(line: 240, column: 18, scope: !348)
!354 = !DILocation(line: 240, column: 15, scope: !348)
!355 = !DILocation(line: 243, column: 9, scope: !356)
!356 = distinct !DILexicalBlock(scope: !282, file: !8, line: 243, column: 9)
!357 = !DILocation(line: 243, column: 17, scope: !356)
!358 = !DILocation(line: 243, column: 9, scope: !282)
!359 = !DILocation(line: 244, column: 15, scope: !356)
!360 = !DILocation(line: 244, column: 7, scope: !356)
!361 = !DILocation(line: 245, column: 14, scope: !362)
!362 = distinct !DILexicalBlock(scope: !356, file: !8, line: 245, column: 14)
!363 = !DILocation(line: 245, column: 22, scope: !362)
!364 = !DILocation(line: 245, column: 14, scope: !356)
!365 = !DILocation(line: 246, column: 15, scope: !362)
!366 = !DILocation(line: 246, column: 7, scope: !362)
!367 = !DILocation(line: 249, column: 26, scope: !282)
!368 = !DILocation(line: 249, column: 12, scope: !282)
!369 = !DILocation(line: 249, column: 10, scope: !282)
!370 = !DILocation(line: 252, column: 15, scope: !282)
!371 = !DILocation(line: 252, column: 10, scope: !282)
!372 = !DILocation(line: 252, column: 13, scope: !282)
!373 = !DILocation(line: 253, column: 3, scope: !282)
!374 = !DILocation(line: 202, column: 22, scope: !276)
!375 = !DILocation(line: 202, column: 3, scope: !276)
!376 = !DILocation(line: 255, column: 20, scope: !22)
!377 = !DILocation(line: 255, column: 3, scope: !22)
!378 = !DILocation(line: 255, column: 10, scope: !22)
!379 = !DILocation(line: 255, column: 18, scope: !22)
!380 = !DILocation(line: 256, column: 18, scope: !22)
!381 = !DILocation(line: 256, column: 3, scope: !22)
!382 = !DILocation(line: 256, column: 10, scope: !22)
!383 = !DILocation(line: 256, column: 16, scope: !22)
!384 = !DILocation(line: 257, column: 1, scope: !22)
