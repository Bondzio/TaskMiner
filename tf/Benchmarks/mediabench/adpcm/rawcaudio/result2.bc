; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.adpcm_state = type { i16, i8 }

@stepsizeTable = internal global [89 x i32] [i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 16, i32 17, i32 19, i32 21, i32 23, i32 25, i32 28, i32 31, i32 34, i32 37, i32 41, i32 45, i32 50, i32 55, i32 60, i32 66, i32 73, i32 80, i32 88, i32 97, i32 107, i32 118, i32 130, i32 143, i32 157, i32 173, i32 190, i32 209, i32 230, i32 253, i32 279, i32 307, i32 337, i32 371, i32 408, i32 449, i32 494, i32 544, i32 598, i32 658, i32 724, i32 796, i32 876, i32 963, i32 1060, i32 1166, i32 1282, i32 1411, i32 1552, i32 1707, i32 1878, i32 2066, i32 2272, i32 2499, i32 2749, i32 3024, i32 3327, i32 3660, i32 4026, i32 4428, i32 4871, i32 5358, i32 5894, i32 6484, i32 7132, i32 7845, i32 8630, i32 9493, i32 10442, i32 11487, i32 12635, i32 13899, i32 15289, i32 16818, i32 18500, i32 20350, i32 22385, i32 24623, i32 27086, i32 29794, i32 32767], align 16
@indexTable = internal global [16 x i32] [i32 -1, i32 -1, i32 -1, i32 -1, i32 2, i32 4, i32 6, i32 8, i32 -1, i32 -1, i32 -1, i32 -1, i32 2, i32 4, i32 6, i32 8], align 16

; Function Attrs: nounwind uwtable
define void @adpcm_coder(i16* %indata, i8* %outdata, i32 %len, %struct.adpcm_state* %state) #0 {
entry:
  call void @llvm.dbg.value(metadata i16* %indata, i64 0, metadata !37, metadata !38), !dbg !39
  call void @llvm.dbg.value(metadata i8* %outdata, i64 0, metadata !40, metadata !38), !dbg !41
  call void @llvm.dbg.value(metadata i32 %len, i64 0, metadata !42, metadata !38), !dbg !43
  call void @llvm.dbg.value(metadata %struct.adpcm_state* %state, i64 0, metadata !44, metadata !38), !dbg !45
  call void @llvm.dbg.value(metadata i8* %outdata, i64 0, metadata !46, metadata !38), !dbg !47
  call void @llvm.dbg.value(metadata i16* %indata, i64 0, metadata !48, metadata !38), !dbg !49
  %valprev = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %state, i32 0, i32 0, !dbg !50
  %tmp3 = load i16, i16* %valprev, align 2, !dbg !50
  %conv = sext i16 %tmp3 to i32, !dbg !51
  call void @llvm.dbg.value(metadata i32 %conv, i64 0, metadata !52, metadata !38), !dbg !53
  %index1 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %state, i32 0, i32 1, !dbg !54
  %tmp5 = load i8, i8* %index1, align 1, !dbg !54
  %conv2 = sext i8 %tmp5 to i32, !dbg !55
  call void @llvm.dbg.value(metadata i32 %conv2, i64 0, metadata !56, metadata !38), !dbg !57
  %idxprom = sext i32 %conv2 to i64, !dbg !58
  %arrayidx = getelementptr inbounds [89 x i32], [89 x i32]* @stepsizeTable, i32 0, i64 %idxprom, !dbg !58
  %tmp7 = load i32, i32* %arrayidx, align 4, !dbg !58
  call void @llvm.dbg.value(metadata i32 %tmp7, i64 0, metadata !59, metadata !38), !dbg !60
  call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !61, metadata !38), !dbg !62
  br label %for.cond, !dbg !63

for.cond:                                         ; preds = %for.inc, %entry
  %step.0 = phi i32 [ %tmp7, %entry ], [ %tmp52, %for.inc ]
  %valpred.0 = phi i32 [ %conv, %entry ], [ %valpred.3, %for.inc ]
  %outp.0 = phi i8* [ %outdata, %entry ], [ %outp.1, %for.inc ]
  %inp.0 = phi i16* [ %indata, %entry ], [ %incdec.ptr, %for.inc ]
  %index.0 = phi i32 [ %conv2, %entry ], [ %index.2, %for.inc ]
  %len.addr.0 = phi i32 [ %len, %entry ], [ %dec, %for.inc ]
  %outputbuffer.0 = phi i32 [ undef, %entry ], [ %outputbuffer.1, %for.inc ]
  %bufferstep.0 = phi i32 [ 1, %entry ], [ %lnot.ext, %for.inc ]
  %cmp = icmp sgt i32 %len.addr.0, 0, !dbg !64
  br i1 %cmp, label %for.body, label %for.end, !dbg !67

for.body:                                         ; preds = %for.cond
  %incdec.ptr = getelementptr inbounds i16, i16* %inp.0, i32 1, !dbg !68
  call void @llvm.dbg.value(metadata i16* %incdec.ptr, i64 0, metadata !48, metadata !38), !dbg !49
  %tmp10 = load i16, i16* %inp.0, align 2, !dbg !70
  %conv4 = sext i16 %tmp10 to i32, !dbg !70
  call void @llvm.dbg.value(metadata i32 %conv4, i64 0, metadata !71, metadata !38), !dbg !72
  %sub = sub nsw i32 %conv4, %valpred.0, !dbg !73
  call void @llvm.dbg.value(metadata i32 %sub, i64 0, metadata !74, metadata !38), !dbg !75
  %cmp5 = icmp slt i32 %sub, 0, !dbg !76
  %cond = select i1 %cmp5, i32 8, i32 0, !dbg !77
  call void @llvm.dbg.value(metadata i32 %cond, i64 0, metadata !78, metadata !38), !dbg !79
  %tobool = icmp ne i32 %cond, 0, !dbg !80
  br i1 %tobool, label %if.then, label %if.end, !dbg !82

if.then:                                          ; preds = %for.body
  %sub7 = sub nsw i32 0, %sub, !dbg !83
  call void @llvm.dbg.value(metadata i32 %sub7, i64 0, metadata !74, metadata !38), !dbg !75
  br label %if.end, !dbg !84

if.end:                                           ; preds = %if.then, %for.body
  %diff.0 = phi i32 [ %sub7, %if.then ], [ %sub, %for.body ]
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !85, metadata !38), !dbg !86
  %shr = ashr i32 %step.0, 3, !dbg !87
  call void @llvm.dbg.value(metadata i32 %shr, i64 0, metadata !88, metadata !38), !dbg !89
  %cmp8 = icmp sge i32 %diff.0, %step.0, !dbg !90
  br i1 %cmp8, label %if.then.10, label %if.end.12, !dbg !92

if.then.10:                                       ; preds = %if.end
  call void @llvm.dbg.value(metadata i32 4, i64 0, metadata !85, metadata !38), !dbg !86
  %sub11 = sub nsw i32 %diff.0, %step.0, !dbg !93
  call void @llvm.dbg.value(metadata i32 %sub11, i64 0, metadata !74, metadata !38), !dbg !75
  %add = add nsw i32 %shr, %step.0, !dbg !95
  call void @llvm.dbg.value(metadata i32 %add, i64 0, metadata !88, metadata !38), !dbg !89
  br label %if.end.12, !dbg !96

if.end.12:                                        ; preds = %if.then.10, %if.end
  %diff.1 = phi i32 [ %sub11, %if.then.10 ], [ %diff.0, %if.end ]
  %delta.0 = phi i32 [ 4, %if.then.10 ], [ 0, %if.end ]
  %vpdiff.0 = phi i32 [ %add, %if.then.10 ], [ %shr, %if.end ]
  %shr13 = ashr i32 %step.0, 1, !dbg !97
  call void @llvm.dbg.value(metadata i32 %shr13, i64 0, metadata !59, metadata !38), !dbg !60
  %cmp14 = icmp sge i32 %diff.1, %shr13, !dbg !98
  br i1 %cmp14, label %if.then.16, label %if.end.19, !dbg !100

if.then.16:                                       ; preds = %if.end.12
  %or = or i32 %delta.0, 2, !dbg !101
  call void @llvm.dbg.value(metadata i32 %or, i64 0, metadata !85, metadata !38), !dbg !86
  %sub17 = sub nsw i32 %diff.1, %shr13, !dbg !103
  call void @llvm.dbg.value(metadata i32 %sub17, i64 0, metadata !74, metadata !38), !dbg !75
  %add18 = add nsw i32 %vpdiff.0, %shr13, !dbg !104
  call void @llvm.dbg.value(metadata i32 %add18, i64 0, metadata !88, metadata !38), !dbg !89
  br label %if.end.19, !dbg !105

if.end.19:                                        ; preds = %if.then.16, %if.end.12
  %diff.2 = phi i32 [ %sub17, %if.then.16 ], [ %diff.1, %if.end.12 ]
  %delta.1 = phi i32 [ %or, %if.then.16 ], [ %delta.0, %if.end.12 ]
  %vpdiff.1 = phi i32 [ %add18, %if.then.16 ], [ %vpdiff.0, %if.end.12 ]
  %shr20 = ashr i32 %shr13, 1, !dbg !106
  call void @llvm.dbg.value(metadata i32 %shr20, i64 0, metadata !59, metadata !38), !dbg !60
  %cmp21 = icmp sge i32 %diff.2, %shr20, !dbg !107
  br i1 %cmp21, label %if.then.23, label %if.end.26, !dbg !109

if.then.23:                                       ; preds = %if.end.19
  %or24 = or i32 %delta.1, 1, !dbg !110
  call void @llvm.dbg.value(metadata i32 %or24, i64 0, metadata !85, metadata !38), !dbg !86
  %add25 = add nsw i32 %vpdiff.1, %shr20, !dbg !112
  call void @llvm.dbg.value(metadata i32 %add25, i64 0, metadata !88, metadata !38), !dbg !89
  br label %if.end.26, !dbg !113

if.end.26:                                        ; preds = %if.then.23, %if.end.19
  %delta.2 = phi i32 [ %or24, %if.then.23 ], [ %delta.1, %if.end.19 ]
  %vpdiff.2 = phi i32 [ %add25, %if.then.23 ], [ %vpdiff.1, %if.end.19 ]
  %tobool27 = icmp ne i32 %cond, 0, !dbg !114
  br i1 %tobool27, label %if.then.28, label %if.else, !dbg !116

if.then.28:                                       ; preds = %if.end.26
  %sub29 = sub nsw i32 %valpred.0, %vpdiff.2, !dbg !117
  call void @llvm.dbg.value(metadata i32 %sub29, i64 0, metadata !52, metadata !38), !dbg !53
  br label %if.end.31, !dbg !118

if.else:                                          ; preds = %if.end.26
  %add30 = add nsw i32 %valpred.0, %vpdiff.2, !dbg !119
  call void @llvm.dbg.value(metadata i32 %add30, i64 0, metadata !52, metadata !38), !dbg !53
  br label %if.end.31

if.end.31:                                        ; preds = %if.else, %if.then.28
  %valpred.1 = phi i32 [ %sub29, %if.then.28 ], [ %add30, %if.else ]
  %cmp32 = icmp sgt i32 %valpred.1, 32767, !dbg !120
  br i1 %cmp32, label %if.then.34, label %if.else.35, !dbg !122

if.then.34:                                       ; preds = %if.end.31
  call void @llvm.dbg.value(metadata i32 32767, i64 0, metadata !52, metadata !38), !dbg !53
  br label %if.end.40, !dbg !123

if.else.35:                                       ; preds = %if.end.31
  %cmp36 = icmp slt i32 %valpred.1, -32768, !dbg !124
  br i1 %cmp36, label %if.then.38, label %if.end.39, !dbg !126

if.then.38:                                       ; preds = %if.else.35
  call void @llvm.dbg.value(metadata i32 -32768, i64 0, metadata !52, metadata !38), !dbg !53
  br label %if.end.39, !dbg !127

if.end.39:                                        ; preds = %if.then.38, %if.else.35
  %valpred.2 = phi i32 [ -32768, %if.then.38 ], [ %valpred.1, %if.else.35 ]
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.then.34
  %valpred.3 = phi i32 [ 32767, %if.then.34 ], [ %valpred.2, %if.end.39 ]
  %or41 = or i32 %delta.2, %cond, !dbg !128
  call void @llvm.dbg.value(metadata i32 %or41, i64 0, metadata !85, metadata !38), !dbg !86
  %idxprom42 = sext i32 %or41 to i64, !dbg !129
  %arrayidx43 = getelementptr inbounds [16 x i32], [16 x i32]* @indexTable, i32 0, i64 %idxprom42, !dbg !129
  %tmp47 = load i32, i32* %arrayidx43, align 4, !dbg !129
  %add44 = add nsw i32 %index.0, %tmp47, !dbg !130
  call void @llvm.dbg.value(metadata i32 %add44, i64 0, metadata !56, metadata !38), !dbg !57
  %cmp45 = icmp slt i32 %add44, 0, !dbg !131
  br i1 %cmp45, label %if.then.47, label %if.end.48, !dbg !133

if.then.47:                                       ; preds = %if.end.40
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !56, metadata !38), !dbg !57
  br label %if.end.48, !dbg !134

if.end.48:                                        ; preds = %if.then.47, %if.end.40
  %index.1 = phi i32 [ 0, %if.then.47 ], [ %add44, %if.end.40 ]
  %cmp49 = icmp sgt i32 %index.1, 88, !dbg !135
  br i1 %cmp49, label %if.then.51, label %if.end.52, !dbg !137

if.then.51:                                       ; preds = %if.end.48
  call void @llvm.dbg.value(metadata i32 88, i64 0, metadata !56, metadata !38), !dbg !57
  br label %if.end.52, !dbg !138

if.end.52:                                        ; preds = %if.then.51, %if.end.48
  %index.2 = phi i32 [ 88, %if.then.51 ], [ %index.1, %if.end.48 ]
  %idxprom53 = sext i32 %index.2 to i64, !dbg !139
  %arrayidx54 = getelementptr inbounds [89 x i32], [89 x i32]* @stepsizeTable, i32 0, i64 %idxprom53, !dbg !139
  %tmp52 = load i32, i32* %arrayidx54, align 4, !dbg !139
  call void @llvm.dbg.value(metadata i32 %tmp52, i64 0, metadata !59, metadata !38), !dbg !60
  %tobool55 = icmp ne i32 %bufferstep.0, 0, !dbg !140
  br i1 %tobool55, label %if.then.56, label %if.else.57, !dbg !142

if.then.56:                                       ; preds = %if.end.52
  %shl = shl i32 %or41, 4, !dbg !143
  %and = and i32 %shl, 240, !dbg !145
  call void @llvm.dbg.value(metadata i32 %and, i64 0, metadata !146, metadata !38), !dbg !147
  br label %if.end.62, !dbg !148

if.else.57:                                       ; preds = %if.end.52
  %and58 = and i32 %or41, 15, !dbg !149
  %or59 = or i32 %and58, %outputbuffer.0, !dbg !151
  %conv60 = trunc i32 %or59 to i8, !dbg !152
  %incdec.ptr61 = getelementptr inbounds i8, i8* %outp.0, i32 1, !dbg !153
  call void @llvm.dbg.value(metadata i8* %incdec.ptr61, i64 0, metadata !46, metadata !38), !dbg !47
  store i8 %conv60, i8* %outp.0, align 1, !dbg !154
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.57, %if.then.56
  %outp.1 = phi i8* [ %outp.0, %if.then.56 ], [ %incdec.ptr61, %if.else.57 ]
  %outputbuffer.1 = phi i32 [ %and, %if.then.56 ], [ %outputbuffer.0, %if.else.57 ]
  %tobool63 = icmp ne i32 %bufferstep.0, 0, !dbg !155
  %lnot = xor i1 %tobool63, true, !dbg !155
  %lnot.ext = zext i1 %lnot to i32, !dbg !155
  call void @llvm.dbg.value(metadata i32 %lnot.ext, i64 0, metadata !61, metadata !38), !dbg !62
  br label %for.inc, !dbg !156

for.inc:                                          ; preds = %if.end.62
  %dec = add nsw i32 %len.addr.0, -1, !dbg !157
  call void @llvm.dbg.value(metadata i32 %dec, i64 0, metadata !42, metadata !38), !dbg !43
  br label %for.cond, !dbg !158

for.end:                                          ; preds = %for.cond
  %bufferstep.0.lcssa = phi i32 [ %bufferstep.0, %for.cond ]
  %outputbuffer.0.lcssa = phi i32 [ %outputbuffer.0, %for.cond ]
  %index.0.lcssa = phi i32 [ %index.0, %for.cond ]
  %outp.0.lcssa = phi i8* [ %outp.0, %for.cond ]
  %valpred.0.lcssa = phi i32 [ %valpred.0, %for.cond ]
  %tobool64 = icmp ne i32 %bufferstep.0.lcssa, 0, !dbg !159
  br i1 %tobool64, label %if.end.68, label %if.then.65, !dbg !161

if.then.65:                                       ; preds = %for.end
  %conv66 = trunc i32 %outputbuffer.0.lcssa to i8, !dbg !162
  %incdec.ptr67 = getelementptr inbounds i8, i8* %outp.0.lcssa, i32 1, !dbg !163
  call void @llvm.dbg.value(metadata i8* %incdec.ptr67, i64 0, metadata !46, metadata !38), !dbg !47
  store i8 %conv66, i8* %outp.0.lcssa, align 1, !dbg !164
  br label %if.end.68, !dbg !165

if.end.68:                                        ; preds = %if.then.65, %for.end
  %conv69 = trunc i32 %valpred.0.lcssa to i16, !dbg !166
  %valprev70 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %state, i32 0, i32 0, !dbg !167
  store i16 %conv69, i16* %valprev70, align 2, !dbg !168
  %conv71 = trunc i32 %index.0.lcssa to i8, !dbg !169
  %index72 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %state, i32 0, i32 1, !dbg !170
  store i8 %conv71, i8* %index72, align 1, !dbg !171
  ret void, !dbg !172
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define void @adpcm_decoder(i8* %indata, i16* %outdata, i32 %len, %struct.adpcm_state* %state) #0 {
entry:
  call void @llvm.dbg.value(metadata i8* %indata, i64 0, metadata !173, metadata !38), !dbg !174
  call void @llvm.dbg.value(metadata i16* %outdata, i64 0, metadata !175, metadata !38), !dbg !176
  call void @llvm.dbg.value(metadata i32 %len, i64 0, metadata !177, metadata !38), !dbg !178
  call void @llvm.dbg.value(metadata %struct.adpcm_state* %state, i64 0, metadata !179, metadata !38), !dbg !180
  call void @llvm.dbg.value(metadata i16* %outdata, i64 0, metadata !181, metadata !38), !dbg !182
  call void @llvm.dbg.value(metadata i8* %indata, i64 0, metadata !183, metadata !38), !dbg !184
  %valprev = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %state, i32 0, i32 0, !dbg !185
  %tmp3 = load i16, i16* %valprev, align 2, !dbg !185
  %conv = sext i16 %tmp3 to i32, !dbg !186
  call void @llvm.dbg.value(metadata i32 %conv, i64 0, metadata !187, metadata !38), !dbg !188
  %index1 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %state, i32 0, i32 1, !dbg !189
  %tmp5 = load i8, i8* %index1, align 1, !dbg !189
  %conv2 = sext i8 %tmp5 to i32, !dbg !190
  call void @llvm.dbg.value(metadata i32 %conv2, i64 0, metadata !191, metadata !38), !dbg !192
  %idxprom = sext i32 %conv2 to i64, !dbg !193
  %arrayidx = getelementptr inbounds [89 x i32], [89 x i32]* @stepsizeTable, i32 0, i64 %idxprom, !dbg !193
  %tmp7 = load i32, i32* %arrayidx, align 4, !dbg !193
  call void @llvm.dbg.value(metadata i32 %tmp7, i64 0, metadata !194, metadata !38), !dbg !195
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !196, metadata !38), !dbg !197
  br label %for.cond, !dbg !198

for.cond:                                         ; preds = %for.inc, %entry
  %valpred.0 = phi i32 [ %conv, %entry ], [ %valpred.3, %for.inc ]
  %step.0 = phi i32 [ %tmp7, %entry ], [ %tmp40, %for.inc ]
  %outp.0 = phi i16* [ %outdata, %entry ], [ %incdec.ptr54, %for.inc ]
  %inp.0 = phi i8* [ %indata, %entry ], [ %inp.1, %for.inc ]
  %index.0 = phi i32 [ %conv2, %entry ], [ %index.2, %for.inc ]
  %len.addr.0 = phi i32 [ %len, %entry ], [ %dec, %for.inc ]
  %inputbuffer.0 = phi i32 [ undef, %entry ], [ %inputbuffer.1, %for.inc ]
  %bufferstep.0 = phi i32 [ 0, %entry ], [ %lnot.ext, %for.inc ]
  %cmp = icmp sgt i32 %len.addr.0, 0, !dbg !199
  br i1 %cmp, label %for.body, label %for.end, !dbg !202

for.body:                                         ; preds = %for.cond
  %tobool = icmp ne i32 %bufferstep.0, 0, !dbg !203
  br i1 %tobool, label %if.then, label %if.else, !dbg !206

if.then:                                          ; preds = %for.body
  %and = and i32 %inputbuffer.0, 15, !dbg !207
  call void @llvm.dbg.value(metadata i32 %and, i64 0, metadata !209, metadata !38), !dbg !210
  br label %if.end, !dbg !211

if.else:                                          ; preds = %for.body
  %incdec.ptr = getelementptr inbounds i8, i8* %inp.0, i32 1, !dbg !212
  call void @llvm.dbg.value(metadata i8* %incdec.ptr, i64 0, metadata !183, metadata !38), !dbg !184
  %tmp12 = load i8, i8* %inp.0, align 1, !dbg !214
  %conv4 = sext i8 %tmp12 to i32, !dbg !214
  call void @llvm.dbg.value(metadata i32 %conv4, i64 0, metadata !215, metadata !38), !dbg !216
  %shr = ashr i32 %conv4, 4, !dbg !217
  %and5 = and i32 %shr, 15, !dbg !218
  call void @llvm.dbg.value(metadata i32 %and5, i64 0, metadata !209, metadata !38), !dbg !210
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %delta.0 = phi i32 [ %and, %if.then ], [ %and5, %if.else ]
  %inp.1 = phi i8* [ %inp.0, %if.then ], [ %incdec.ptr, %if.else ]
  %inputbuffer.1 = phi i32 [ %inputbuffer.0, %if.then ], [ %conv4, %if.else ]
  %tobool6 = icmp ne i32 %bufferstep.0, 0, !dbg !219
  %lnot = xor i1 %tobool6, true, !dbg !219
  %lnot.ext = zext i1 %lnot to i32, !dbg !219
  call void @llvm.dbg.value(metadata i32 %lnot.ext, i64 0, metadata !196, metadata !38), !dbg !197
  %idxprom7 = sext i32 %delta.0 to i64, !dbg !220
  %arrayidx8 = getelementptr inbounds [16 x i32], [16 x i32]* @indexTable, i32 0, i64 %idxprom7, !dbg !220
  %tmp16 = load i32, i32* %arrayidx8, align 4, !dbg !220
  %add = add nsw i32 %index.0, %tmp16, !dbg !221
  call void @llvm.dbg.value(metadata i32 %add, i64 0, metadata !191, metadata !38), !dbg !192
  %cmp9 = icmp slt i32 %add, 0, !dbg !222
  br i1 %cmp9, label %if.then.11, label %if.end.12, !dbg !224

if.then.11:                                       ; preds = %if.end
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !191, metadata !38), !dbg !192
  br label %if.end.12, !dbg !225

if.end.12:                                        ; preds = %if.then.11, %if.end
  %index.1 = phi i32 [ 0, %if.then.11 ], [ %add, %if.end ]
  %cmp13 = icmp sgt i32 %index.1, 88, !dbg !226
  br i1 %cmp13, label %if.then.15, label %if.end.16, !dbg !228

if.then.15:                                       ; preds = %if.end.12
  call void @llvm.dbg.value(metadata i32 88, i64 0, metadata !191, metadata !38), !dbg !192
  br label %if.end.16, !dbg !229

if.end.16:                                        ; preds = %if.then.15, %if.end.12
  %index.2 = phi i32 [ 88, %if.then.15 ], [ %index.1, %if.end.12 ]
  %and17 = and i32 %delta.0, 8, !dbg !230
  call void @llvm.dbg.value(metadata i32 %and17, i64 0, metadata !231, metadata !38), !dbg !232
  %and18 = and i32 %delta.0, 7, !dbg !233
  call void @llvm.dbg.value(metadata i32 %and18, i64 0, metadata !209, metadata !38), !dbg !210
  %shr19 = ashr i32 %step.0, 3, !dbg !234
  call void @llvm.dbg.value(metadata i32 %shr19, i64 0, metadata !235, metadata !38), !dbg !236
  %and20 = and i32 %and18, 4, !dbg !237
  %tobool21 = icmp ne i32 %and20, 0, !dbg !237
  br i1 %tobool21, label %if.then.22, label %if.end.24, !dbg !239

if.then.22:                                       ; preds = %if.end.16
  %add23 = add nsw i32 %shr19, %step.0, !dbg !240
  call void @llvm.dbg.value(metadata i32 %add23, i64 0, metadata !235, metadata !38), !dbg !236
  br label %if.end.24, !dbg !241

if.end.24:                                        ; preds = %if.then.22, %if.end.16
  %vpdiff.0 = phi i32 [ %add23, %if.then.22 ], [ %shr19, %if.end.16 ]
  %and25 = and i32 %and18, 2, !dbg !242
  %tobool26 = icmp ne i32 %and25, 0, !dbg !242
  br i1 %tobool26, label %if.then.27, label %if.end.30, !dbg !244

if.then.27:                                       ; preds = %if.end.24
  %shr28 = ashr i32 %step.0, 1, !dbg !245
  %add29 = add nsw i32 %vpdiff.0, %shr28, !dbg !246
  call void @llvm.dbg.value(metadata i32 %add29, i64 0, metadata !235, metadata !38), !dbg !236
  br label %if.end.30, !dbg !247

if.end.30:                                        ; preds = %if.then.27, %if.end.24
  %vpdiff.1 = phi i32 [ %add29, %if.then.27 ], [ %vpdiff.0, %if.end.24 ]
  %and31 = and i32 %and18, 1, !dbg !248
  %tobool32 = icmp ne i32 %and31, 0, !dbg !248
  br i1 %tobool32, label %if.then.33, label %if.end.36, !dbg !250

if.then.33:                                       ; preds = %if.end.30
  %shr34 = ashr i32 %step.0, 2, !dbg !251
  %add35 = add nsw i32 %vpdiff.1, %shr34, !dbg !252
  call void @llvm.dbg.value(metadata i32 %add35, i64 0, metadata !235, metadata !38), !dbg !236
  br label %if.end.36, !dbg !253

if.end.36:                                        ; preds = %if.then.33, %if.end.30
  %vpdiff.2 = phi i32 [ %add35, %if.then.33 ], [ %vpdiff.1, %if.end.30 ]
  %tobool37 = icmp ne i32 %and17, 0, !dbg !254
  br i1 %tobool37, label %if.then.38, label %if.else.39, !dbg !256

if.then.38:                                       ; preds = %if.end.36
  %sub = sub nsw i32 %valpred.0, %vpdiff.2, !dbg !257
  call void @llvm.dbg.value(metadata i32 %sub, i64 0, metadata !187, metadata !38), !dbg !188
  br label %if.end.41, !dbg !258

if.else.39:                                       ; preds = %if.end.36
  %add40 = add nsw i32 %valpred.0, %vpdiff.2, !dbg !259
  call void @llvm.dbg.value(metadata i32 %add40, i64 0, metadata !187, metadata !38), !dbg !188
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.39, %if.then.38
  %valpred.1 = phi i32 [ %sub, %if.then.38 ], [ %add40, %if.else.39 ]
  %cmp42 = icmp sgt i32 %valpred.1, 32767, !dbg !260
  br i1 %cmp42, label %if.then.44, label %if.else.45, !dbg !262

if.then.44:                                       ; preds = %if.end.41
  call void @llvm.dbg.value(metadata i32 32767, i64 0, metadata !187, metadata !38), !dbg !188
  br label %if.end.50, !dbg !263

if.else.45:                                       ; preds = %if.end.41
  %cmp46 = icmp slt i32 %valpred.1, -32768, !dbg !264
  br i1 %cmp46, label %if.then.48, label %if.end.49, !dbg !266

if.then.48:                                       ; preds = %if.else.45
  call void @llvm.dbg.value(metadata i32 -32768, i64 0, metadata !187, metadata !38), !dbg !188
  br label %if.end.49, !dbg !267

if.end.49:                                        ; preds = %if.then.48, %if.else.45
  %valpred.2 = phi i32 [ -32768, %if.then.48 ], [ %valpred.1, %if.else.45 ]
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %if.then.44
  %valpred.3 = phi i32 [ 32767, %if.then.44 ], [ %valpred.2, %if.end.49 ]
  %idxprom51 = sext i32 %index.2 to i64, !dbg !268
  %arrayidx52 = getelementptr inbounds [89 x i32], [89 x i32]* @stepsizeTable, i32 0, i64 %idxprom51, !dbg !268
  %tmp40 = load i32, i32* %arrayidx52, align 4, !dbg !268
  call void @llvm.dbg.value(metadata i32 %tmp40, i64 0, metadata !194, metadata !38), !dbg !195
  %conv53 = trunc i32 %valpred.3 to i16, !dbg !269
  %incdec.ptr54 = getelementptr inbounds i16, i16* %outp.0, i32 1, !dbg !270
  call void @llvm.dbg.value(metadata i16* %incdec.ptr54, i64 0, metadata !181, metadata !38), !dbg !182
  store i16 %conv53, i16* %outp.0, align 2, !dbg !271
  br label %for.inc, !dbg !272

for.inc:                                          ; preds = %if.end.50
  %dec = add nsw i32 %len.addr.0, -1, !dbg !273
  call void @llvm.dbg.value(metadata i32 %dec, i64 0, metadata !177, metadata !38), !dbg !178
  br label %for.cond, !dbg !274

for.end:                                          ; preds = %for.cond
  %index.0.lcssa = phi i32 [ %index.0, %for.cond ]
  %valpred.0.lcssa = phi i32 [ %valpred.0, %for.cond ]
  %conv55 = trunc i32 %valpred.0.lcssa to i16, !dbg !275
  %valprev56 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %state, i32 0, i32 0, !dbg !276
  store i16 %conv55, i16* %valprev56, align 2, !dbg !277
  %conv57 = trunc i32 %index.0.lcssa to i8, !dbg !278
  %index58 = getelementptr inbounds %struct.adpcm_state, %struct.adpcm_state* %state, i32 0, i32 1, !dbg !279
  store i8 %conv57, i8* %index58, align 1, !dbg !280
  ret void, !dbg !281
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!34, !35}
!llvm.ident = !{!36}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !6, globals: !25)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/mediabench/adpcm/rawcaudio")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!6 = !{!7, !22}
!7 = !DISubprogram(name: "adpcm_coder", scope: !8, file: !8, line: 72, type: !9, isLocal: false, isDefinition: true, scopeLine: 76, isOptimized: false, function: void (i16*, i8*, i32, %struct.adpcm_state*)* @adpcm_coder, variables: !2)
!8 = !DIFile(filename: "/home/gleison/tf/Benchmarks/mediabench/adpcm/rawcaudio/tmp.c", directory: "/home/gleison/tf/Benchmarks/mediabench/adpcm/rawcaudio")
!9 = !DISubroutineType(types: !10)
!10 = !{null, !11, !13, !15, !16}
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!12 = !DIBasicType(name: "short", size: 16, align: 16, encoding: DW_ATE_signed)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!14 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!15 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, align: 64)
!17 = !DICompositeType(tag: DW_TAG_structure_type, name: "adpcm_state", file: !18, line: 7, size: 32, align: 16, elements: !19)
!18 = !DIFile(filename: "./adpcm.h", directory: "/home/gleison/tf/Benchmarks/mediabench/adpcm/rawcaudio")
!19 = !{!20, !21}
!20 = !DIDerivedType(tag: DW_TAG_member, name: "valprev", scope: !17, file: !18, line: 8, baseType: !12, size: 16, align: 16)
!21 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !17, file: !18, line: 9, baseType: !14, size: 8, align: 8, offset: 16)
!22 = !DISubprogram(name: "adpcm_decoder", scope: !8, file: !8, line: 177, type: !23, isLocal: false, isDefinition: true, scopeLine: 181, isOptimized: false, function: void (i8*, i16*, i32, %struct.adpcm_state*)* @adpcm_decoder, variables: !2)
!23 = !DISubroutineType(types: !24)
!24 = !{null, !13, !11, !15, !16}
!25 = !{!26, !30}
!26 = !DIGlobalVariable(name: "stepsizeTable", scope: !0, file: !8, line: 60, type: !27, isLocal: true, isDefinition: true, variable: [89 x i32]* @stepsizeTable)
!27 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 2848, align: 32, elements: !28)
!28 = !{!29}
!29 = !DISubrange(count: 89)
!30 = !DIGlobalVariable(name: "indexTable", scope: !0, file: !8, line: 55, type: !31, isLocal: true, isDefinition: true, variable: [16 x i32]* @indexTable)
!31 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 512, align: 32, elements: !32)
!32 = !{!33}
!33 = !DISubrange(count: 16)
!34 = !{i32 2, !"Dwarf Version", i32 4}
!35 = !{i32 2, !"Debug Info Version", i32 3}
!36 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!37 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "indata", arg: 1, scope: !7, file: !8, line: 72, type: !11)
!38 = !DIExpression()
!39 = !DILocation(line: 72, column: 52, scope: !7)
!40 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "outdata", arg: 2, scope: !7, file: !8, line: 73, type: !13)
!41 = !DILocation(line: 73, column: 6, scope: !7)
!42 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len", arg: 3, scope: !7, file: !8, line: 74, type: !15)
!43 = !DILocation(line: 74, column: 5, scope: !7)
!44 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "state", arg: 4, scope: !7, file: !8, line: 75, type: !16)
!45 = !DILocation(line: 75, column: 21, scope: !7)
!46 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outp", scope: !7, file: !8, line: 78, type: !4)
!47 = !DILocation(line: 78, column: 16, scope: !7)
!48 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "inp", scope: !7, file: !8, line: 77, type: !11)
!49 = !DILocation(line: 77, column: 10, scope: !7)
!50 = !DILocation(line: 93, column: 20, scope: !7)
!51 = !DILocation(line: 93, column: 13, scope: !7)
!52 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "valpred", scope: !7, file: !8, line: 84, type: !15)
!53 = !DILocation(line: 84, column: 7, scope: !7)
!54 = !DILocation(line: 94, column: 18, scope: !7)
!55 = !DILocation(line: 94, column: 11, scope: !7)
!56 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !7, file: !8, line: 86, type: !15)
!57 = !DILocation(line: 86, column: 7, scope: !7)
!58 = !DILocation(line: 95, column: 10, scope: !7)
!59 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "step", scope: !7, file: !8, line: 83, type: !15)
!60 = !DILocation(line: 83, column: 7, scope: !7)
!61 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bufferstep", scope: !7, file: !8, line: 88, type: !15)
!62 = !DILocation(line: 88, column: 7, scope: !7)
!63 = !DILocation(line: 99, column: 3, scope: !7)
!64 = !DILocation(line: 99, column: 14, scope: !65)
!65 = distinct !DILexicalBlock(scope: !66, file: !8, line: 99, column: 3)
!66 = distinct !DILexicalBlock(scope: !7, file: !8, line: 99, column: 3)
!67 = !DILocation(line: 99, column: 3, scope: !66)
!68 = !DILocation(line: 100, column: 15, scope: !69)
!69 = distinct !DILexicalBlock(scope: !65, file: !8, line: 99, column: 26)
!70 = !DILocation(line: 100, column: 11, scope: !69)
!71 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "val", scope: !7, file: !8, line: 79, type: !15)
!72 = !DILocation(line: 79, column: 7, scope: !7)
!73 = !DILocation(line: 103, column: 16, scope: !69)
!74 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "diff", scope: !7, file: !8, line: 82, type: !15)
!75 = !DILocation(line: 82, column: 7, scope: !7)
!76 = !DILocation(line: 104, column: 18, scope: !69)
!77 = !DILocation(line: 104, column: 12, scope: !69)
!78 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sign", scope: !7, file: !8, line: 80, type: !15)
!79 = !DILocation(line: 80, column: 7, scope: !7)
!80 = !DILocation(line: 105, column: 9, scope: !81)
!81 = distinct !DILexicalBlock(scope: !69, file: !8, line: 105, column: 9)
!82 = !DILocation(line: 105, column: 9, scope: !69)
!83 = !DILocation(line: 106, column: 15, scope: !81)
!84 = !DILocation(line: 106, column: 7, scope: !81)
!85 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "delta", scope: !7, file: !8, line: 81, type: !15)
!86 = !DILocation(line: 81, column: 7, scope: !7)
!87 = !DILocation(line: 118, column: 20, scope: !69)
!88 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vpdiff", scope: !7, file: !8, line: 85, type: !15)
!89 = !DILocation(line: 85, column: 7, scope: !7)
!90 = !DILocation(line: 120, column: 14, scope: !91)
!91 = distinct !DILexicalBlock(scope: !69, file: !8, line: 120, column: 9)
!92 = !DILocation(line: 120, column: 9, scope: !69)
!93 = !DILocation(line: 122, column: 12, scope: !94)
!94 = distinct !DILexicalBlock(scope: !91, file: !8, line: 120, column: 23)
!95 = !DILocation(line: 123, column: 14, scope: !94)
!96 = !DILocation(line: 124, column: 5, scope: !94)
!97 = !DILocation(line: 125, column: 10, scope: !69)
!98 = !DILocation(line: 126, column: 14, scope: !99)
!99 = distinct !DILexicalBlock(scope: !69, file: !8, line: 126, column: 9)
!100 = !DILocation(line: 126, column: 9, scope: !69)
!101 = !DILocation(line: 127, column: 13, scope: !102)
!102 = distinct !DILexicalBlock(scope: !99, file: !8, line: 126, column: 23)
!103 = !DILocation(line: 128, column: 12, scope: !102)
!104 = !DILocation(line: 129, column: 14, scope: !102)
!105 = !DILocation(line: 130, column: 5, scope: !102)
!106 = !DILocation(line: 131, column: 10, scope: !69)
!107 = !DILocation(line: 132, column: 14, scope: !108)
!108 = distinct !DILexicalBlock(scope: !69, file: !8, line: 132, column: 9)
!109 = !DILocation(line: 132, column: 9, scope: !69)
!110 = !DILocation(line: 133, column: 13, scope: !111)
!111 = distinct !DILexicalBlock(scope: !108, file: !8, line: 132, column: 23)
!112 = !DILocation(line: 134, column: 14, scope: !111)
!113 = !DILocation(line: 135, column: 5, scope: !111)
!114 = !DILocation(line: 138, column: 9, scope: !115)
!115 = distinct !DILexicalBlock(scope: !69, file: !8, line: 138, column: 9)
!116 = !DILocation(line: 138, column: 9, scope: !69)
!117 = !DILocation(line: 139, column: 15, scope: !115)
!118 = !DILocation(line: 139, column: 7, scope: !115)
!119 = !DILocation(line: 141, column: 15, scope: !115)
!120 = !DILocation(line: 144, column: 17, scope: !121)
!121 = distinct !DILexicalBlock(scope: !69, file: !8, line: 144, column: 9)
!122 = !DILocation(line: 144, column: 9, scope: !69)
!123 = !DILocation(line: 145, column: 7, scope: !121)
!124 = !DILocation(line: 146, column: 22, scope: !125)
!125 = distinct !DILexicalBlock(scope: !121, file: !8, line: 146, column: 14)
!126 = !DILocation(line: 146, column: 14, scope: !121)
!127 = !DILocation(line: 147, column: 7, scope: !125)
!128 = !DILocation(line: 150, column: 11, scope: !69)
!129 = !DILocation(line: 152, column: 14, scope: !69)
!130 = !DILocation(line: 152, column: 11, scope: !69)
!131 = !DILocation(line: 153, column: 15, scope: !132)
!132 = distinct !DILexicalBlock(scope: !69, file: !8, line: 153, column: 9)
!133 = !DILocation(line: 153, column: 9, scope: !69)
!134 = !DILocation(line: 154, column: 7, scope: !132)
!135 = !DILocation(line: 155, column: 15, scope: !136)
!136 = distinct !DILexicalBlock(scope: !69, file: !8, line: 155, column: 9)
!137 = !DILocation(line: 155, column: 9, scope: !69)
!138 = !DILocation(line: 156, column: 7, scope: !136)
!139 = !DILocation(line: 157, column: 12, scope: !69)
!140 = !DILocation(line: 160, column: 9, scope: !141)
!141 = distinct !DILexicalBlock(scope: !69, file: !8, line: 160, column: 9)
!142 = !DILocation(line: 160, column: 9, scope: !69)
!143 = !DILocation(line: 161, column: 29, scope: !144)
!144 = distinct !DILexicalBlock(scope: !141, file: !8, line: 160, column: 21)
!145 = !DILocation(line: 161, column: 35, scope: !144)
!146 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outputbuffer", scope: !7, file: !8, line: 87, type: !15)
!147 = !DILocation(line: 87, column: 7, scope: !7)
!148 = !DILocation(line: 162, column: 5, scope: !144)
!149 = !DILocation(line: 163, column: 24, scope: !150)
!150 = distinct !DILexicalBlock(scope: !141, file: !8, line: 162, column: 12)
!151 = !DILocation(line: 163, column: 32, scope: !150)
!152 = !DILocation(line: 163, column: 17, scope: !150)
!153 = !DILocation(line: 163, column: 12, scope: !150)
!154 = !DILocation(line: 163, column: 15, scope: !150)
!155 = !DILocation(line: 165, column: 18, scope: !69)
!156 = !DILocation(line: 166, column: 3, scope: !69)
!157 = !DILocation(line: 99, column: 22, scope: !65)
!158 = !DILocation(line: 99, column: 3, scope: !65)
!159 = !DILocation(line: 169, column: 8, scope: !160)
!160 = distinct !DILexicalBlock(scope: !7, file: !8, line: 169, column: 7)
!161 = !DILocation(line: 169, column: 7, scope: !7)
!162 = !DILocation(line: 170, column: 15, scope: !160)
!163 = !DILocation(line: 170, column: 10, scope: !160)
!164 = !DILocation(line: 170, column: 13, scope: !160)
!165 = !DILocation(line: 170, column: 5, scope: !160)
!166 = !DILocation(line: 172, column: 20, scope: !7)
!167 = !DILocation(line: 172, column: 10, scope: !7)
!168 = !DILocation(line: 172, column: 18, scope: !7)
!169 = !DILocation(line: 173, column: 18, scope: !7)
!170 = !DILocation(line: 173, column: 10, scope: !7)
!171 = !DILocation(line: 173, column: 16, scope: !7)
!172 = !DILocation(line: 174, column: 1, scope: !7)
!173 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "indata", arg: 1, scope: !22, file: !8, line: 177, type: !13)
!174 = !DILocation(line: 177, column: 53, scope: !22)
!175 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "outdata", arg: 2, scope: !22, file: !8, line: 178, type: !11)
!176 = !DILocation(line: 178, column: 7, scope: !22)
!177 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len", arg: 3, scope: !22, file: !8, line: 179, type: !15)
!178 = !DILocation(line: 179, column: 5, scope: !22)
!179 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "state", arg: 4, scope: !22, file: !8, line: 180, type: !16)
!180 = !DILocation(line: 180, column: 21, scope: !22)
!181 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outp", scope: !22, file: !8, line: 183, type: !11)
!182 = !DILocation(line: 183, column: 10, scope: !22)
!183 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "inp", scope: !22, file: !8, line: 182, type: !4)
!184 = !DILocation(line: 182, column: 16, scope: !22)
!185 = !DILocation(line: 196, column: 20, scope: !22)
!186 = !DILocation(line: 196, column: 13, scope: !22)
!187 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "valpred", scope: !22, file: !8, line: 187, type: !15)
!188 = !DILocation(line: 187, column: 7, scope: !22)
!189 = !DILocation(line: 197, column: 18, scope: !22)
!190 = !DILocation(line: 197, column: 11, scope: !22)
!191 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !22, file: !8, line: 189, type: !15)
!192 = !DILocation(line: 189, column: 7, scope: !22)
!193 = !DILocation(line: 198, column: 10, scope: !22)
!194 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "step", scope: !22, file: !8, line: 186, type: !15)
!195 = !DILocation(line: 186, column: 7, scope: !22)
!196 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bufferstep", scope: !22, file: !8, line: 191, type: !15)
!197 = !DILocation(line: 191, column: 7, scope: !22)
!198 = !DILocation(line: 202, column: 3, scope: !22)
!199 = !DILocation(line: 202, column: 14, scope: !200)
!200 = distinct !DILexicalBlock(scope: !201, file: !8, line: 202, column: 3)
!201 = distinct !DILexicalBlock(scope: !22, file: !8, line: 202, column: 3)
!202 = !DILocation(line: 202, column: 3, scope: !201)
!203 = !DILocation(line: 205, column: 9, scope: !204)
!204 = distinct !DILexicalBlock(scope: !205, file: !8, line: 205, column: 9)
!205 = distinct !DILexicalBlock(scope: !200, file: !8, line: 202, column: 26)
!206 = !DILocation(line: 205, column: 9, scope: !205)
!207 = !DILocation(line: 206, column: 27, scope: !208)
!208 = distinct !DILexicalBlock(scope: !204, file: !8, line: 205, column: 21)
!209 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "delta", scope: !22, file: !8, line: 185, type: !15)
!210 = !DILocation(line: 185, column: 7, scope: !22)
!211 = !DILocation(line: 207, column: 5, scope: !208)
!212 = !DILocation(line: 208, column: 25, scope: !213)
!213 = distinct !DILexicalBlock(scope: !204, file: !8, line: 207, column: 12)
!214 = !DILocation(line: 208, column: 21, scope: !213)
!215 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "inputbuffer", scope: !22, file: !8, line: 190, type: !15)
!216 = !DILocation(line: 190, column: 7, scope: !22)
!217 = !DILocation(line: 209, column: 28, scope: !213)
!218 = !DILocation(line: 209, column: 34, scope: !213)
!219 = !DILocation(line: 211, column: 18, scope: !205)
!220 = !DILocation(line: 214, column: 14, scope: !205)
!221 = !DILocation(line: 214, column: 11, scope: !205)
!222 = !DILocation(line: 215, column: 15, scope: !223)
!223 = distinct !DILexicalBlock(scope: !205, file: !8, line: 215, column: 9)
!224 = !DILocation(line: 215, column: 9, scope: !205)
!225 = !DILocation(line: 216, column: 7, scope: !223)
!226 = !DILocation(line: 217, column: 15, scope: !227)
!227 = distinct !DILexicalBlock(scope: !205, file: !8, line: 217, column: 9)
!228 = !DILocation(line: 217, column: 9, scope: !205)
!229 = !DILocation(line: 218, column: 7, scope: !227)
!230 = !DILocation(line: 221, column: 18, scope: !205)
!231 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sign", scope: !22, file: !8, line: 184, type: !15)
!232 = !DILocation(line: 184, column: 7, scope: !22)
!233 = !DILocation(line: 222, column: 19, scope: !205)
!234 = !DILocation(line: 229, column: 19, scope: !205)
!235 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vpdiff", scope: !22, file: !8, line: 188, type: !15)
!236 = !DILocation(line: 188, column: 7, scope: !22)
!237 = !DILocation(line: 230, column: 15, scope: !238)
!238 = distinct !DILexicalBlock(scope: !205, file: !8, line: 230, column: 9)
!239 = !DILocation(line: 230, column: 9, scope: !205)
!240 = !DILocation(line: 231, column: 14, scope: !238)
!241 = !DILocation(line: 231, column: 7, scope: !238)
!242 = !DILocation(line: 232, column: 15, scope: !243)
!243 = distinct !DILexicalBlock(scope: !205, file: !8, line: 232, column: 9)
!244 = !DILocation(line: 232, column: 9, scope: !205)
!245 = !DILocation(line: 233, column: 22, scope: !243)
!246 = !DILocation(line: 233, column: 14, scope: !243)
!247 = !DILocation(line: 233, column: 7, scope: !243)
!248 = !DILocation(line: 234, column: 15, scope: !249)
!249 = distinct !DILexicalBlock(scope: !205, file: !8, line: 234, column: 9)
!250 = !DILocation(line: 234, column: 9, scope: !205)
!251 = !DILocation(line: 235, column: 22, scope: !249)
!252 = !DILocation(line: 235, column: 14, scope: !249)
!253 = !DILocation(line: 235, column: 7, scope: !249)
!254 = !DILocation(line: 237, column: 9, scope: !255)
!255 = distinct !DILexicalBlock(scope: !205, file: !8, line: 237, column: 9)
!256 = !DILocation(line: 237, column: 9, scope: !205)
!257 = !DILocation(line: 238, column: 15, scope: !255)
!258 = !DILocation(line: 238, column: 7, scope: !255)
!259 = !DILocation(line: 240, column: 15, scope: !255)
!260 = !DILocation(line: 243, column: 17, scope: !261)
!261 = distinct !DILexicalBlock(scope: !205, file: !8, line: 243, column: 9)
!262 = !DILocation(line: 243, column: 9, scope: !205)
!263 = !DILocation(line: 244, column: 7, scope: !261)
!264 = !DILocation(line: 245, column: 22, scope: !265)
!265 = distinct !DILexicalBlock(scope: !261, file: !8, line: 245, column: 14)
!266 = !DILocation(line: 245, column: 14, scope: !261)
!267 = !DILocation(line: 246, column: 7, scope: !265)
!268 = !DILocation(line: 249, column: 12, scope: !205)
!269 = !DILocation(line: 252, column: 15, scope: !205)
!270 = !DILocation(line: 252, column: 10, scope: !205)
!271 = !DILocation(line: 252, column: 13, scope: !205)
!272 = !DILocation(line: 253, column: 3, scope: !205)
!273 = !DILocation(line: 202, column: 22, scope: !200)
!274 = !DILocation(line: 202, column: 3, scope: !200)
!275 = !DILocation(line: 255, column: 20, scope: !22)
!276 = !DILocation(line: 255, column: 10, scope: !22)
!277 = !DILocation(line: 255, column: 18, scope: !22)
!278 = !DILocation(line: 256, column: 18, scope: !22)
!279 = !DILocation(line: 256, column: 10, scope: !22)
!280 = !DILocation(line: 256, column: 16, scope: !22)
!281 = !DILocation(line: 257, column: 1, scope: !22)
