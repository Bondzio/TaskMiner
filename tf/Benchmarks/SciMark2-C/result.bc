; ModuleID = '/home/gleison/tf/Benchmarks/SciMark2-C/tmp.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.Random_struct = type { [17 x i32], i32, i32, i32, i32, double, double, double }

@RESOLUTION_DEFAULT = constant double 2.000000e+00, align 8
@RANDOM_SEED = constant i32 101010, align 4
@FFT_SIZE = constant i32 1024, align 4
@SOR_SIZE = constant i32 100, align 4
@SPARSE_SIZE_M = constant i32 1000, align 4
@SPARSE_SIZE_nz = constant i32 5000, align 4
@LU_SIZE = constant i32 100, align 4
@LG_FFT_SIZE = constant i32 1048576, align 4
@LG_SOR_SIZE = constant i32 1000, align 4
@LG_SPARSE_SIZE_M = constant i32 100000, align 4
@LG_SPARSE_SIZE_nz = constant i32 1000000, align 4
@LG_LU_SIZE = constant i32 1000, align 4
@TINY_FFT_SIZE = constant i32 16, align 4
@TINY_SOR_SIZE = constant i32 10, align 4
@TINY_SPARSE_SIZE_M = constant i32 10, align 4
@TINY_SPARSE_SIZE_N = constant i32 10, align 4
@TINY_SPARSE_SIZE_nz = constant i32 50, align 4
@TINY_LU_SIZE = constant i32 10, align 4
@.str = private unnamed_addr constant [6 x i8] c"-help\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [32 x i8] c"Usage: [-large] [minimum_time]\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"-large\00", align 1
@.str.4 = private unnamed_addr constant [42 x i8] c"Using %10.2f seconds min time per kenel.\0A\00", align 1
@.str.5 = private unnamed_addr constant [60 x i8] c"NOTE!!! All Mflops disabled to prevent diffs from failing!\0A\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"Composite Score:        %8.2f\0A\00", align 1
@.str.7 = private unnamed_addr constant [41 x i8] c"FFT             Mflops: %8.2f    (N=%d)\0A\00", align 1
@.str.8 = private unnamed_addr constant [44 x i8] c"SOR             Mflops: %8.2f    (%d x %d)\0A\00", align 1
@.str.9 = private unnamed_addr constant [31 x i8] c"MonteCarlo:     Mflops: %8.2f\0A\00", align 1
@.str.10 = private unnamed_addr constant [48 x i8] c"Sparse matmult  Mflops: %8.2f    (N=%d, nz=%d)\0A\00", align 1
@.str.11 = private unnamed_addr constant [47 x i8] c"LU              Mflops: %8.2f    (M=%d, N=%d)\0A\00", align 1
@.str.12 = private unnamed_addr constant [68 x i8] c"**                                                              **\0A\00", align 1
@.str.13 = private unnamed_addr constant [68 x i8] c"** SciMark2 Numeric Benchmark, see http://math.nist.gov/scimark **\0A\00", align 1
@.str.14 = private unnamed_addr constant [68 x i8] c"** for details. (Results can be submitted to pozo@nist.gov)     **\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %min_time = alloca double, align 8
  %FFT_size = alloca i32, align 4
  %SOR_size = alloca i32, align 4
  %Sparse_size_M = alloca i32, align 4
  %Sparse_size_nz = alloca i32, align 4
  %LU_size = alloca i32, align 4
  %SCALE = alloca i32, align 4
  %res = alloca [6 x double], align 16
  %R = alloca %struct.Random_struct*, align 8
  %current_arg = alloca i32, align 4
  store i32 0, i32* %retval
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !41, metadata !42), !dbg !43
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !44, metadata !42), !dbg !45
  call void @llvm.dbg.declare(metadata double* %min_time, metadata !46, metadata !42), !dbg !47
  store double 2.000000e+00, double* %min_time, align 8, !dbg !47
  call void @llvm.dbg.declare(metadata i32* %FFT_size, metadata !48, metadata !42), !dbg !49
  store i32 1024, i32* %FFT_size, align 4, !dbg !49
  call void @llvm.dbg.declare(metadata i32* %SOR_size, metadata !50, metadata !42), !dbg !51
  store i32 100, i32* %SOR_size, align 4, !dbg !51
  call void @llvm.dbg.declare(metadata i32* %Sparse_size_M, metadata !52, metadata !42), !dbg !53
  store i32 1000, i32* %Sparse_size_M, align 4, !dbg !53
  call void @llvm.dbg.declare(metadata i32* %Sparse_size_nz, metadata !54, metadata !42), !dbg !55
  store i32 5000, i32* %Sparse_size_nz, align 4, !dbg !55
  call void @llvm.dbg.declare(metadata i32* %LU_size, metadata !56, metadata !42), !dbg !57
  store i32 100, i32* %LU_size, align 4, !dbg !57
  call void @llvm.dbg.declare(metadata i32* %SCALE, metadata !58, metadata !42), !dbg !59
  call void @llvm.dbg.declare(metadata [6 x double]* %res, metadata !60, metadata !42), !dbg !64
  %0 = bitcast [6 x double]* %res to i8*, !dbg !64
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 48, i32 16, i1 false), !dbg !64
  call void @llvm.dbg.declare(metadata %struct.Random_struct** %R, metadata !65, metadata !42), !dbg !82
  %call = call %struct.Random_struct* @new_Random_seed(i32 101010), !dbg !83
  store %struct.Random_struct* %call, %struct.Random_struct** %R, align 8, !dbg !82
  %1 = load i32, i32* %argc.addr, align 4, !dbg !84
  %cmp = icmp sgt i32 %1, 1, !dbg !86
  br i1 %cmp, label %if.then, label %if.end.18, !dbg !87

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %current_arg, metadata !88, metadata !42), !dbg !90
  store i32 1, i32* %current_arg, align 4, !dbg !90
  %2 = load i8**, i8*** %argv.addr, align 8, !dbg !91
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 1, !dbg !91
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !91
  %call1 = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0)) #6, !dbg !93
  %cmp2 = icmp eq i32 %call1, 0, !dbg !94
  br i1 %cmp2, label %if.then.6, label %lor.lhs.false, !dbg !95

lor.lhs.false:                                    ; preds = %if.then
  %4 = load i8**, i8*** %argv.addr, align 8, !dbg !96
  %arrayidx3 = getelementptr inbounds i8*, i8** %4, i64 1, !dbg !96
  %5 = load i8*, i8** %arrayidx3, align 8, !dbg !96
  %call4 = call i32 @strcmp(i8* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0)) #6, !dbg !97
  %cmp5 = icmp eq i32 %call4, 0, !dbg !98
  br i1 %cmp5, label %if.then.6, label %if.end, !dbg !99

if.then.6:                                        ; preds = %lor.lhs.false, %if.then
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !100
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i32 0, i32 0)), !dbg !102
  call void @exit(i32 0) #7, !dbg !103
  unreachable, !dbg !103

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i8**, i8*** %argv.addr, align 8, !dbg !104
  %arrayidx8 = getelementptr inbounds i8*, i8** %7, i64 1, !dbg !104
  %8 = load i8*, i8** %arrayidx8, align 8, !dbg !104
  %call9 = call i32 @strcmp(i8* %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0)) #6, !dbg !106
  %cmp10 = icmp eq i32 %call9, 0, !dbg !107
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !108

if.then.11:                                       ; preds = %if.end
  store i32 1048576, i32* %FFT_size, align 4, !dbg !109
  store i32 1000, i32* %SOR_size, align 4, !dbg !111
  store i32 100000, i32* %Sparse_size_M, align 4, !dbg !112
  store i32 1000000, i32* %Sparse_size_nz, align 4, !dbg !113
  store i32 1000, i32* %LU_size, align 4, !dbg !114
  %9 = load i32, i32* %current_arg, align 4, !dbg !115
  %inc = add nsw i32 %9, 1, !dbg !115
  store i32 %inc, i32* %current_arg, align 4, !dbg !115
  br label %if.end.12, !dbg !116

if.end.12:                                        ; preds = %if.then.11, %if.end
  %10 = load i32, i32* %current_arg, align 4, !dbg !117
  %11 = load i32, i32* %argc.addr, align 4, !dbg !119
  %cmp13 = icmp slt i32 %10, %11, !dbg !120
  br i1 %cmp13, label %if.then.14, label %if.end.17, !dbg !121

if.then.14:                                       ; preds = %if.end.12
  %12 = load i32, i32* %current_arg, align 4, !dbg !122
  %idxprom = sext i32 %12 to i64, !dbg !124
  %13 = load i8**, i8*** %argv.addr, align 8, !dbg !124
  %arrayidx15 = getelementptr inbounds i8*, i8** %13, i64 %idxprom, !dbg !124
  %14 = load i8*, i8** %arrayidx15, align 8, !dbg !124
  %call16 = call double @atof(i8* %14) #6, !dbg !125
  store double %call16, double* %min_time, align 8, !dbg !126
  br label %if.end.17, !dbg !127

if.end.17:                                        ; preds = %if.then.14, %if.end.12
  br label %if.end.18, !dbg !128

if.end.18:                                        ; preds = %if.end.17, %entry
  call void @print_banner(), !dbg !129
  %15 = load double, double* %min_time, align 8, !dbg !130
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i32 0, i32 0), double %15), !dbg !131
  %16 = load i32, i32* %FFT_size, align 4, !dbg !132
  %17 = load double, double* %min_time, align 8, !dbg !133
  %18 = load %struct.Random_struct*, %struct.Random_struct** %R, align 8, !dbg !134
  %call20 = call double @kernel_measureFFT(i32 %16, double %17, %struct.Random_struct* %18), !dbg !135
  %arrayidx21 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 1, !dbg !136
  store double %call20, double* %arrayidx21, align 8, !dbg !137
  %19 = load i32, i32* %SOR_size, align 4, !dbg !138
  %20 = load double, double* %min_time, align 8, !dbg !139
  %21 = load %struct.Random_struct*, %struct.Random_struct** %R, align 8, !dbg !140
  %call22 = call double @kernel_measureSOR(i32 %19, double %20, %struct.Random_struct* %21), !dbg !141
  %arrayidx23 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 2, !dbg !142
  store double %call22, double* %arrayidx23, align 8, !dbg !143
  %22 = load double, double* %min_time, align 8, !dbg !144
  %23 = load %struct.Random_struct*, %struct.Random_struct** %R, align 8, !dbg !145
  %call24 = call double @kernel_measureMonteCarlo(double %22, %struct.Random_struct* %23), !dbg !146
  %arrayidx25 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 3, !dbg !147
  store double %call24, double* %arrayidx25, align 8, !dbg !148
  %24 = load i32, i32* %Sparse_size_M, align 4, !dbg !149
  %25 = load i32, i32* %Sparse_size_nz, align 4, !dbg !150
  %26 = load double, double* %min_time, align 8, !dbg !151
  %27 = load %struct.Random_struct*, %struct.Random_struct** %R, align 8, !dbg !152
  %call26 = call double @kernel_measureSparseMatMult(i32 %24, i32 %25, double %26, %struct.Random_struct* %27), !dbg !153
  %arrayidx27 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 4, !dbg !154
  store double %call26, double* %arrayidx27, align 8, !dbg !155
  %28 = load i32, i32* %LU_size, align 4, !dbg !156
  %29 = load double, double* %min_time, align 8, !dbg !157
  %30 = load %struct.Random_struct*, %struct.Random_struct** %R, align 8, !dbg !158
  %call28 = call double @kernel_measureLU(i32 %28, double %29, %struct.Random_struct* %30), !dbg !159
  %arrayidx29 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 5, !dbg !160
  store double %call28, double* %arrayidx29, align 8, !dbg !161
  store i32 10000000, i32* %SCALE, align 4, !dbg !162
  %arrayidx30 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 1, !dbg !163
  %31 = load double, double* %arrayidx30, align 8, !dbg !163
  %arrayidx31 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 2, !dbg !164
  %32 = load double, double* %arrayidx31, align 8, !dbg !164
  %add = fadd double %31, %32, !dbg !165
  %arrayidx32 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 3, !dbg !166
  %33 = load double, double* %arrayidx32, align 8, !dbg !166
  %add33 = fadd double %add, %33, !dbg !167
  %arrayidx34 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 4, !dbg !168
  %34 = load double, double* %arrayidx34, align 8, !dbg !168
  %add35 = fadd double %add33, %34, !dbg !169
  %arrayidx36 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 5, !dbg !170
  %35 = load double, double* %arrayidx36, align 8, !dbg !170
  %add37 = fadd double %add35, %35, !dbg !171
  %div = fdiv double %add37, 5.000000e+00, !dbg !172
  %arrayidx38 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 0, !dbg !173
  store double %div, double* %arrayidx38, align 8, !dbg !174
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.5, i32 0, i32 0)), !dbg !175
  %arrayidx40 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 0, !dbg !176
  %36 = load double, double* %arrayidx40, align 8, !dbg !176
  %37 = load i32, i32* %SCALE, align 4, !dbg !177
  %conv = sitofp i32 %37 to double, !dbg !177
  %div41 = fdiv double %36, %conv, !dbg !178
  %call42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i32 0, i32 0), double %div41), !dbg !179
  %arrayidx43 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 1, !dbg !180
  %38 = load double, double* %arrayidx43, align 8, !dbg !180
  %39 = load i32, i32* %SCALE, align 4, !dbg !181
  %conv44 = sitofp i32 %39 to double, !dbg !181
  %div45 = fdiv double %38, %conv44, !dbg !182
  %40 = load i32, i32* %FFT_size, align 4, !dbg !183
  %call46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.7, i32 0, i32 0), double %div45, i32 %40), !dbg !184
  %arrayidx47 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 2, !dbg !185
  %41 = load double, double* %arrayidx47, align 8, !dbg !185
  %42 = load i32, i32* %SCALE, align 4, !dbg !186
  %conv48 = sitofp i32 %42 to double, !dbg !186
  %div49 = fdiv double %41, %conv48, !dbg !187
  %43 = load i32, i32* %SOR_size, align 4, !dbg !188
  %44 = load i32, i32* %SOR_size, align 4, !dbg !189
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.8, i32 0, i32 0), double %div49, i32 %43, i32 %44), !dbg !190
  %arrayidx51 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 3, !dbg !191
  %45 = load double, double* %arrayidx51, align 8, !dbg !191
  %46 = load i32, i32* %SCALE, align 4, !dbg !192
  %conv52 = sitofp i32 %46 to double, !dbg !192
  %div53 = fdiv double %45, %conv52, !dbg !193
  %call54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.9, i32 0, i32 0), double %div53), !dbg !194
  %arrayidx55 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 4, !dbg !195
  %47 = load double, double* %arrayidx55, align 8, !dbg !195
  %48 = load i32, i32* %SCALE, align 4, !dbg !196
  %conv56 = sitofp i32 %48 to double, !dbg !196
  %div57 = fdiv double %47, %conv56, !dbg !197
  %49 = load i32, i32* %Sparse_size_M, align 4, !dbg !198
  %50 = load i32, i32* %Sparse_size_nz, align 4, !dbg !199
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.10, i32 0, i32 0), double %div57, i32 %49, i32 %50), !dbg !200
  %arrayidx59 = getelementptr inbounds [6 x double], [6 x double]* %res, i32 0, i64 5, !dbg !201
  %51 = load double, double* %arrayidx59, align 8, !dbg !201
  %52 = load i32, i32* %SCALE, align 4, !dbg !202
  %conv60 = sitofp i32 %52 to double, !dbg !202
  %div61 = fdiv double %51, %conv60, !dbg !203
  %53 = load i32, i32* %LU_size, align 4, !dbg !204
  %54 = load i32, i32* %LU_size, align 4, !dbg !205
  %call62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.11, i32 0, i32 0), double %div61, i32 %53, i32 %54), !dbg !206
  %55 = load %struct.Random_struct*, %struct.Random_struct** %R, align 8, !dbg !207
  call void @Random_delete(%struct.Random_struct* %55), !dbg !208
  ret i32 0, !dbg !209
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

declare %struct.Random_struct* @new_Random_seed(i32) #3

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #4

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32) #5

; Function Attrs: nounwind readonly
declare double @atof(i8*) #4

; Function Attrs: nounwind uwtable
define void @print_banner() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.12, i32 0, i32 0)), !dbg !210
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.13, i32 0, i32 0)), !dbg !211
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.14, i32 0, i32 0)), !dbg !212
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.12, i32 0, i32 0)), !dbg !213
  ret void, !dbg !214
}

declare i32 @printf(i8*, ...) #3

declare double @kernel_measureFFT(i32, double, %struct.Random_struct*) #3

declare double @kernel_measureSOR(i32, double, %struct.Random_struct*) #3

declare double @kernel_measureMonteCarlo(double, %struct.Random_struct*) #3

declare double @kernel_measureSparseMatMult(i32, i32, double, %struct.Random_struct*) #3

declare double @kernel_measureLU(i32, double, %struct.Random_struct*) #3

declare void @Random_delete(%struct.Random_struct*) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly }
attributes #7 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!38, !39}
!llvm.ident = !{!40}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/rc3)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3, globals: !15)
!1 = !DIFile(filename: "tmp.c", directory: "/home/gleison/tf/Benchmarks/SciMark2-C")
!2 = !{}
!3 = !{!4, !12}
!4 = !DISubprogram(name: "main", scope: !5, file: !5, line: 11, type: !6, isLocal: false, isDefinition: true, scopeLine: 11, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!5 = !DIFile(filename: "/home/gleison/tf/Benchmarks/SciMark2-C/tmp.c", directory: "/home/gleison/tf/Benchmarks/SciMark2-C")
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !8, !9}
!8 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!12 = !DISubprogram(name: "print_banner", scope: !5, file: !5, line: 85, type: !13, isLocal: false, isDefinition: true, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false, function: void ()* @print_banner, variables: !2)
!13 = !DISubroutineType(types: !14)
!14 = !{null}
!15 = !{!16, !20, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37}
!16 = !DIGlobalVariable(name: "RESOLUTION_DEFAULT", scope: !0, file: !17, line: 4, type: !18, isLocal: false, isDefinition: true, variable: double* @RESOLUTION_DEFAULT)
!17 = !DIFile(filename: "./constants.h", directory: "/home/gleison/tf/Benchmarks/SciMark2-C")
!18 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !19)
!19 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!20 = !DIGlobalVariable(name: "RANDOM_SEED", scope: !0, file: !17, line: 5, type: !21, isLocal: false, isDefinition: true, variable: i32* @RANDOM_SEED)
!21 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!22 = !DIGlobalVariable(name: "FFT_SIZE", scope: !0, file: !17, line: 9, type: !21, isLocal: false, isDefinition: true, variable: i32* @FFT_SIZE)
!23 = !DIGlobalVariable(name: "SOR_SIZE", scope: !0, file: !17, line: 10, type: !21, isLocal: false, isDefinition: true, variable: i32* @SOR_SIZE)
!24 = !DIGlobalVariable(name: "SPARSE_SIZE_M", scope: !0, file: !17, line: 11, type: !21, isLocal: false, isDefinition: true, variable: i32* @SPARSE_SIZE_M)
!25 = !DIGlobalVariable(name: "SPARSE_SIZE_nz", scope: !0, file: !17, line: 12, type: !21, isLocal: false, isDefinition: true, variable: i32* @SPARSE_SIZE_nz)
!26 = !DIGlobalVariable(name: "LU_SIZE", scope: !0, file: !17, line: 13, type: !21, isLocal: false, isDefinition: true, variable: i32* @LU_SIZE)
!27 = !DIGlobalVariable(name: "LG_FFT_SIZE", scope: !0, file: !17, line: 17, type: !21, isLocal: false, isDefinition: true, variable: i32* @LG_FFT_SIZE)
!28 = !DIGlobalVariable(name: "LG_SOR_SIZE", scope: !0, file: !17, line: 18, type: !21, isLocal: false, isDefinition: true, variable: i32* @LG_SOR_SIZE)
!29 = !DIGlobalVariable(name: "LG_SPARSE_SIZE_M", scope: !0, file: !17, line: 19, type: !21, isLocal: false, isDefinition: true, variable: i32* @LG_SPARSE_SIZE_M)
!30 = !DIGlobalVariable(name: "LG_SPARSE_SIZE_nz", scope: !0, file: !17, line: 20, type: !21, isLocal: false, isDefinition: true, variable: i32* @LG_SPARSE_SIZE_nz)
!31 = !DIGlobalVariable(name: "LG_LU_SIZE", scope: !0, file: !17, line: 21, type: !21, isLocal: false, isDefinition: true, variable: i32* @LG_LU_SIZE)
!32 = !DIGlobalVariable(name: "TINY_FFT_SIZE", scope: !0, file: !17, line: 27, type: !21, isLocal: false, isDefinition: true, variable: i32* @TINY_FFT_SIZE)
!33 = !DIGlobalVariable(name: "TINY_SOR_SIZE", scope: !0, file: !17, line: 28, type: !21, isLocal: false, isDefinition: true, variable: i32* @TINY_SOR_SIZE)
!34 = !DIGlobalVariable(name: "TINY_SPARSE_SIZE_M", scope: !0, file: !17, line: 29, type: !21, isLocal: false, isDefinition: true, variable: i32* @TINY_SPARSE_SIZE_M)
!35 = !DIGlobalVariable(name: "TINY_SPARSE_SIZE_N", scope: !0, file: !17, line: 30, type: !21, isLocal: false, isDefinition: true, variable: i32* @TINY_SPARSE_SIZE_N)
!36 = !DIGlobalVariable(name: "TINY_SPARSE_SIZE_nz", scope: !0, file: !17, line: 31, type: !21, isLocal: false, isDefinition: true, variable: i32* @TINY_SPARSE_SIZE_nz)
!37 = !DIGlobalVariable(name: "TINY_LU_SIZE", scope: !0, file: !17, line: 32, type: !21, isLocal: false, isDefinition: true, variable: i32* @TINY_LU_SIZE)
!38 = !{i32 2, !"Dwarf Version", i32 4}
!39 = !{i32 2, !"Debug Info Version", i32 3}
!40 = !{!"clang version 3.7.0 (tags/RELEASE_370/rc3)"}
!41 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !4, file: !5, line: 11, type: !8)
!42 = !DIExpression()
!43 = !DILocation(line: 11, column: 14, scope: !4)
!44 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !4, file: !5, line: 11, type: !9)
!45 = !DILocation(line: 11, column: 26, scope: !4)
!46 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "min_time", scope: !4, file: !5, line: 14, type: !19)
!47 = !DILocation(line: 14, column: 10, scope: !4)
!48 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "FFT_size", scope: !4, file: !5, line: 16, type: !8)
!49 = !DILocation(line: 16, column: 7, scope: !4)
!50 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "SOR_size", scope: !4, file: !5, line: 17, type: !8)
!51 = !DILocation(line: 17, column: 7, scope: !4)
!52 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Sparse_size_M", scope: !4, file: !5, line: 18, type: !8)
!53 = !DILocation(line: 18, column: 7, scope: !4)
!54 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "Sparse_size_nz", scope: !4, file: !5, line: 19, type: !8)
!55 = !DILocation(line: 19, column: 7, scope: !4)
!56 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "LU_size", scope: !4, file: !5, line: 20, type: !8)
!57 = !DILocation(line: 20, column: 7, scope: !4)
!58 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "SCALE", scope: !4, file: !5, line: 21, type: !8)
!59 = !DILocation(line: 21, column: 7, scope: !4)
!60 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !4, file: !5, line: 25, type: !61)
!61 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 384, align: 64, elements: !62)
!62 = !{!63}
!63 = !DISubrange(count: 6)
!64 = !DILocation(line: 25, column: 10, scope: !4)
!65 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "R", scope: !4, file: !5, line: 26, type: !66)
!66 = !DIDerivedType(tag: DW_TAG_typedef, name: "Random", file: !67, line: 12, baseType: !68)
!67 = !DIFile(filename: "./Random.h", directory: "/home/gleison/tf/Benchmarks/SciMark2-C")
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64, align: 64)
!69 = !DICompositeType(tag: DW_TAG_structure_type, file: !67, line: 1, size: 896, align: 64, elements: !70)
!70 = !{!71, !75, !76, !77, !78, !79, !80, !81}
!71 = !DIDerivedType(tag: DW_TAG_member, name: "m", scope: !69, file: !67, line: 3, baseType: !72, size: 544, align: 32)
!72 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 544, align: 32, elements: !73)
!73 = !{!74}
!74 = !DISubrange(count: 17)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "seed", scope: !69, file: !67, line: 4, baseType: !8, size: 32, align: 32, offset: 544)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !69, file: !67, line: 5, baseType: !8, size: 32, align: 32, offset: 576)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "j", scope: !69, file: !67, line: 6, baseType: !8, size: 32, align: 32, offset: 608)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "haveRange", scope: !69, file: !67, line: 7, baseType: !8, size: 32, align: 32, offset: 640)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !69, file: !67, line: 8, baseType: !19, size: 64, align: 64, offset: 704)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !69, file: !67, line: 9, baseType: !19, size: 64, align: 64, offset: 768)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !69, file: !67, line: 10, baseType: !19, size: 64, align: 64, offset: 832)
!82 = !DILocation(line: 26, column: 10, scope: !4)
!83 = !DILocation(line: 26, column: 14, scope: !4)
!84 = !DILocation(line: 28, column: 7, scope: !85)
!85 = distinct !DILexicalBlock(scope: !4, file: !5, line: 28, column: 7)
!86 = !DILocation(line: 28, column: 12, scope: !85)
!87 = !DILocation(line: 28, column: 7, scope: !4)
!88 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "current_arg", scope: !89, file: !5, line: 29, type: !8)
!89 = distinct !DILexicalBlock(scope: !85, file: !5, line: 28, column: 17)
!90 = !DILocation(line: 29, column: 9, scope: !89)
!91 = !DILocation(line: 31, column: 16, scope: !92)
!92 = distinct !DILexicalBlock(scope: !89, file: !5, line: 31, column: 9)
!93 = !DILocation(line: 31, column: 9, scope: !92)
!94 = !DILocation(line: 31, column: 34, scope: !92)
!95 = !DILocation(line: 31, column: 39, scope: !92)
!96 = !DILocation(line: 32, column: 16, scope: !92)
!97 = !DILocation(line: 32, column: 9, scope: !92)
!98 = !DILocation(line: 32, column: 31, scope: !92)
!99 = !DILocation(line: 31, column: 9, scope: !89)
!100 = !DILocation(line: 33, column: 15, scope: !101)
!101 = distinct !DILexicalBlock(scope: !92, file: !5, line: 32, column: 37)
!102 = !DILocation(line: 33, column: 7, scope: !101)
!103 = !DILocation(line: 34, column: 7, scope: !101)
!104 = !DILocation(line: 37, column: 16, scope: !105)
!105 = distinct !DILexicalBlock(scope: !89, file: !5, line: 37, column: 9)
!106 = !DILocation(line: 37, column: 9, scope: !105)
!107 = !DILocation(line: 37, column: 35, scope: !105)
!108 = !DILocation(line: 37, column: 9, scope: !89)
!109 = !DILocation(line: 38, column: 16, scope: !110)
!110 = distinct !DILexicalBlock(scope: !105, file: !5, line: 37, column: 41)
!111 = !DILocation(line: 39, column: 16, scope: !110)
!112 = !DILocation(line: 40, column: 21, scope: !110)
!113 = !DILocation(line: 41, column: 22, scope: !110)
!114 = !DILocation(line: 42, column: 15, scope: !110)
!115 = !DILocation(line: 44, column: 18, scope: !110)
!116 = !DILocation(line: 45, column: 5, scope: !110)
!117 = !DILocation(line: 47, column: 9, scope: !118)
!118 = distinct !DILexicalBlock(scope: !89, file: !5, line: 47, column: 9)
!119 = !DILocation(line: 47, column: 23, scope: !118)
!120 = !DILocation(line: 47, column: 21, scope: !118)
!121 = !DILocation(line: 47, column: 9, scope: !89)
!122 = !DILocation(line: 48, column: 28, scope: !123)
!123 = distinct !DILexicalBlock(scope: !118, file: !5, line: 47, column: 29)
!124 = !DILocation(line: 48, column: 23, scope: !123)
!125 = !DILocation(line: 48, column: 18, scope: !123)
!126 = !DILocation(line: 48, column: 16, scope: !123)
!127 = !DILocation(line: 49, column: 5, scope: !123)
!128 = !DILocation(line: 50, column: 3, scope: !89)
!129 = !DILocation(line: 52, column: 3, scope: !4)
!130 = !DILocation(line: 53, column: 56, scope: !4)
!131 = !DILocation(line: 53, column: 3, scope: !4)
!132 = !DILocation(line: 55, column: 30, scope: !4)
!133 = !DILocation(line: 55, column: 40, scope: !4)
!134 = !DILocation(line: 55, column: 50, scope: !4)
!135 = !DILocation(line: 55, column: 12, scope: !4)
!136 = !DILocation(line: 55, column: 3, scope: !4)
!137 = !DILocation(line: 55, column: 10, scope: !4)
!138 = !DILocation(line: 56, column: 30, scope: !4)
!139 = !DILocation(line: 56, column: 40, scope: !4)
!140 = !DILocation(line: 56, column: 50, scope: !4)
!141 = !DILocation(line: 56, column: 12, scope: !4)
!142 = !DILocation(line: 56, column: 3, scope: !4)
!143 = !DILocation(line: 56, column: 10, scope: !4)
!144 = !DILocation(line: 57, column: 37, scope: !4)
!145 = !DILocation(line: 57, column: 47, scope: !4)
!146 = !DILocation(line: 57, column: 12, scope: !4)
!147 = !DILocation(line: 57, column: 3, scope: !4)
!148 = !DILocation(line: 57, column: 10, scope: !4)
!149 = !DILocation(line: 58, column: 40, scope: !4)
!150 = !DILocation(line: 59, column: 40, scope: !4)
!151 = !DILocation(line: 59, column: 56, scope: !4)
!152 = !DILocation(line: 59, column: 66, scope: !4)
!153 = !DILocation(line: 58, column: 12, scope: !4)
!154 = !DILocation(line: 58, column: 3, scope: !4)
!155 = !DILocation(line: 58, column: 10, scope: !4)
!156 = !DILocation(line: 60, column: 29, scope: !4)
!157 = !DILocation(line: 60, column: 38, scope: !4)
!158 = !DILocation(line: 60, column: 48, scope: !4)
!159 = !DILocation(line: 60, column: 12, scope: !4)
!160 = !DILocation(line: 60, column: 3, scope: !4)
!161 = !DILocation(line: 60, column: 10, scope: !4)
!162 = !DILocation(line: 64, column: 9, scope: !4)
!163 = !DILocation(line: 66, column: 13, scope: !4)
!164 = !DILocation(line: 66, column: 22, scope: !4)
!165 = !DILocation(line: 66, column: 20, scope: !4)
!166 = !DILocation(line: 66, column: 31, scope: !4)
!167 = !DILocation(line: 66, column: 29, scope: !4)
!168 = !DILocation(line: 66, column: 40, scope: !4)
!169 = !DILocation(line: 66, column: 38, scope: !4)
!170 = !DILocation(line: 66, column: 49, scope: !4)
!171 = !DILocation(line: 66, column: 47, scope: !4)
!172 = !DILocation(line: 66, column: 57, scope: !4)
!173 = !DILocation(line: 66, column: 3, scope: !4)
!174 = !DILocation(line: 66, column: 10, scope: !4)
!175 = !DILocation(line: 69, column: 3, scope: !4)
!176 = !DILocation(line: 70, column: 45, scope: !4)
!177 = !DILocation(line: 70, column: 54, scope: !4)
!178 = !DILocation(line: 70, column: 52, scope: !4)
!179 = !DILocation(line: 70, column: 3, scope: !4)
!180 = !DILocation(line: 71, column: 55, scope: !4)
!181 = !DILocation(line: 71, column: 64, scope: !4)
!182 = !DILocation(line: 71, column: 62, scope: !4)
!183 = !DILocation(line: 71, column: 71, scope: !4)
!184 = !DILocation(line: 71, column: 3, scope: !4)
!185 = !DILocation(line: 73, column: 10, scope: !4)
!186 = !DILocation(line: 73, column: 19, scope: !4)
!187 = !DILocation(line: 73, column: 17, scope: !4)
!188 = !DILocation(line: 73, column: 26, scope: !4)
!189 = !DILocation(line: 73, column: 36, scope: !4)
!190 = !DILocation(line: 72, column: 3, scope: !4)
!191 = !DILocation(line: 74, column: 45, scope: !4)
!192 = !DILocation(line: 74, column: 54, scope: !4)
!193 = !DILocation(line: 74, column: 52, scope: !4)
!194 = !DILocation(line: 74, column: 3, scope: !4)
!195 = !DILocation(line: 75, column: 62, scope: !4)
!196 = !DILocation(line: 75, column: 71, scope: !4)
!197 = !DILocation(line: 75, column: 69, scope: !4)
!198 = !DILocation(line: 76, column: 10, scope: !4)
!199 = !DILocation(line: 76, column: 25, scope: !4)
!200 = !DILocation(line: 75, column: 3, scope: !4)
!201 = !DILocation(line: 77, column: 61, scope: !4)
!202 = !DILocation(line: 77, column: 70, scope: !4)
!203 = !DILocation(line: 77, column: 68, scope: !4)
!204 = !DILocation(line: 78, column: 10, scope: !4)
!205 = !DILocation(line: 78, column: 19, scope: !4)
!206 = !DILocation(line: 77, column: 3, scope: !4)
!207 = !DILocation(line: 80, column: 17, scope: !4)
!208 = !DILocation(line: 80, column: 3, scope: !4)
!209 = !DILocation(line: 82, column: 3, scope: !4)
!210 = !DILocation(line: 86, column: 3, scope: !12)
!211 = !DILocation(line: 87, column: 3, scope: !12)
!212 = !DILocation(line: 88, column: 3, scope: !12)
!213 = !DILocation(line: 89, column: 3, scope: !12)
!214 = !DILocation(line: 90, column: 1, scope: !12)
